/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./calc/dist/adaptable.js":
/*!********************************!*\
  !*** ./calc/dist/adaptable.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nexports.__esModule = true;\nexports.Stats = exports.Result = exports.Side = exports.Field = exports.Move = exports.Pokemon = exports.calculate = void 0;\nvar calc_1 = __webpack_require__(/*! ./calc */ \"./calc/dist/calc.js\");\n__createBinding(exports, calc_1, \"calculate\");\nvar pokemon_1 = __webpack_require__(/*! ./pokemon */ \"./calc/dist/pokemon.js\");\n__createBinding(exports, pokemon_1, \"Pokemon\");\nvar move_1 = __webpack_require__(/*! ./move */ \"./calc/dist/move.js\");\n__createBinding(exports, move_1, \"Move\");\nvar field_1 = __webpack_require__(/*! ./field */ \"./calc/dist/field.js\");\n__createBinding(exports, field_1, \"Field\");\n__createBinding(exports, field_1, \"Side\");\nvar result_1 = __webpack_require__(/*! ./result */ \"./calc/dist/result.js\");\n__createBinding(exports, result_1, \"Result\");\nvar stats_1 = __webpack_require__(/*! ./stats */ \"./calc/dist/stats.js\");\n__createBinding(exports, stats_1, \"Stats\");\n//# sourceMappingURL=adaptable.js.map\n\n//# sourceURL=webpack:///./calc/dist/adaptable.js?\n}");

/***/ }),

/***/ "./calc/dist/calc.js":
/*!***************************!*\
  !*** ./calc/dist/calc.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.calculate = void 0;\nvar field_1 = __webpack_require__(/*! ./field */ \"./calc/dist/field.js\");\nvar gen12_1 = __webpack_require__(/*! ./mechanics/gen12 */ \"./calc/dist/mechanics/gen12.js\");\nvar gen3_1 = __webpack_require__(/*! ./mechanics/gen3 */ \"./calc/dist/mechanics/gen3.js\");\nvar gen4_1 = __webpack_require__(/*! ./mechanics/gen4 */ \"./calc/dist/mechanics/gen4.js\");\nvar gen56_1 = __webpack_require__(/*! ./mechanics/gen56 */ \"./calc/dist/mechanics/gen56.js\");\nvar gen789_1 = __webpack_require__(/*! ./mechanics/gen789 */ \"./calc/dist/mechanics/gen789.js\");\nvar MECHANICS = [\n    function () { },\n    gen12_1.calculateRBYGSC,\n    gen12_1.calculateRBYGSC,\n    gen3_1.calculateADV,\n    gen4_1.calculateDPP,\n    gen56_1.calculateBWXY,\n    gen56_1.calculateBWXY,\n    gen789_1.calculateSMSSSV,\n    gen789_1.calculateSMSSSV,\n    gen789_1.calculateSMSSSV,\n];\nfunction calculate(gen, attacker, defender, move, field) {\n    return MECHANICS[gen.num](gen, attacker.clone(), defender.clone(), move.clone(), field ? field.clone() : new field_1.Field());\n}\nexports.calculate = calculate;\n//# sourceMappingURL=calc.js.map\n\n//# sourceURL=webpack:///./calc/dist/calc.js?\n}");

/***/ }),

/***/ "./calc/dist/data/abilities.js":
/*!*************************************!*\
  !*** ./calc/dist/data/abilities.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar e_1, _a, e_2, _b;\nexports.__esModule = true;\nexports.Abilities = exports.ABILITIES = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar RBY = [];\nvar GSC = [];\nvar ADV = [\n    'Air Lock',\n    'Arena Trap',\n    'Battle Armor',\n    'Blaze',\n    'Chlorophyll',\n    'Clear Body',\n    'Cloud Nine',\n    'Color Change',\n    'Compound Eyes',\n    'Cute Charm',\n    'Drizzle',\n    'Damp',\n    'Drought',\n    'Early Bird',\n    'Effect Spore',\n    'Flame Body',\n    'Flash Fire',\n    'Forecast',\n    'Guts',\n    'Huge Power',\n    'Hustle',\n    'Hyper Cutter',\n    'Illuminate',\n    'Immunity',\n    'Inner Focus',\n    'Insomnia',\n    'Intimidate',\n    'Keen Eye',\n    'Levitate',\n    'Lightning Rod',\n    'Limber',\n    'Liquid Ooze',\n    'Magma Armor',\n    'Magnet Pull',\n    'Marvel Scale',\n    'Minus',\n    'Natural Cure',\n    'Oblivious',\n    'Overgrow',\n    'Own Tempo',\n    'Pickup',\n    'Plus',\n    'Poison Point',\n    'Pressure',\n    'Pure Power',\n    'Rain Dish',\n    'Rock Head',\n    'Rough Skin',\n    'Run Away',\n    'Sand Stream',\n    'Sand Veil',\n    'Serene Grace',\n    'Shadow Tag',\n    'Shed Skin',\n    'Shell Armor',\n    'Shield Dust',\n    'Soundproof',\n    'Speed Boost',\n    'Static',\n    'Stench',\n    'Sticky Hold',\n    'Sturdy',\n    'Suction Cups',\n    'Swarm',\n    'Swift Swim',\n    'Synchronize',\n    'Thick Fat',\n    'Torrent',\n    'Trace',\n    'Truant',\n    'Vital Spirit',\n    'Volt Absorb',\n    'Water Absorb',\n    'Water Veil',\n    'White Smoke',\n    'Wonder Guard',\n];\nvar DPP = ADV.concat([\n    'Adaptability',\n    'Aftermath',\n    'Anger Point',\n    'Anticipation',\n    'Bad Dreams',\n    'Download',\n    'Dry Skin',\n    'Filter',\n    'Flower Gift',\n    'Forewarn',\n    'Frisk',\n    'Gluttony',\n    'Heatproof',\n    'Honey Gather',\n    'Hydration',\n    'Ice Body',\n    'Iron Fist',\n    'Klutz',\n    'Leaf Guard',\n    'Magic Guard',\n    'Mold Breaker',\n    'Motor Drive',\n    'Mountaineer',\n    'Multitype',\n    'No Guard',\n    'Normalize',\n    'Persistent',\n    'Poison Heal',\n    'Quick Feet',\n    'Rebound',\n    'Reckless',\n    'Rivalry',\n    'Scrappy',\n    'Simple',\n    'Skill Link',\n    'Slow Start',\n    'Sniper',\n    'Snow Cloak',\n    'Snow Warning',\n    'Solar Power',\n    'Solid Rock',\n    'Stall',\n    'Steadfast',\n    'Storm Drain',\n    'Super Luck',\n    'Tangled Feet',\n    'Technician',\n    'Tinted Lens',\n    'Unaware',\n    'Unburden',\n]);\nvar BW = DPP.concat([\n    'Analytic',\n    'Big Pecks',\n    'Contrary',\n    'Cursed Body',\n    'Defeatist',\n    'Defiant',\n    'Flare Boost',\n    'Friend Guard',\n    'Harvest',\n    'Healer',\n    'Heavy Metal',\n    'Illusion',\n    'Imposter',\n    'Infiltrator',\n    'Iron Barbs',\n    'Light Metal',\n    'Justified',\n    'Magic Bounce',\n    'Moody',\n    'Moxie',\n    'Multiscale',\n    'Mummy',\n    'Overcoat',\n    'Pickpocket',\n    'Poison Touch',\n    'Prankster',\n    'Rattled',\n    'Regenerator',\n    'Sand Force',\n    'Sand Rush',\n    'Sap Sipper',\n    'Sheer Force',\n    'Telepathy',\n    'Teravolt',\n    'Toxic Boost',\n    'Turboblaze',\n    'Unnerve',\n    'Victory Star',\n    'Weak Armor',\n    'Wonder Skin',\n    'Zen Mode',\n]);\nvar XY = BW.concat([\n    'Aerilate',\n    'Aura Break',\n    'Aroma Veil',\n    'Bulletproof',\n    'Cheek Pouch',\n    'Competitive',\n    'Dark Aura',\n    'Delta Stream',\n    'Desolate Land',\n    'Fairy Aura',\n    'Flower Veil',\n    'Fur Coat',\n    'Gale Wings',\n    'Gooey',\n    'Grass Pelt',\n    'Magician',\n    'Mega Launcher',\n    'Parental Bond',\n    'Pixilate',\n    'Primordial Sea',\n    'Protean',\n    'Refrigerate',\n    'Stance Change',\n    'Strong Jaw',\n    'Sweet Veil',\n    'Symbiosis',\n    'Tough Claws',\n]);\nvar SM = XY.concat([\n    'Battery',\n    'Battle Bond',\n    'Beast Boost',\n    'Berserk',\n    'Comatose',\n    'Corrosion',\n    'Dancer',\n    'Dazzling',\n    'Disguise',\n    'Electric Surge',\n    'Emergency Exit',\n    'Fluffy',\n    'Full Metal Body',\n    'Galvanize',\n    'Grassy Surge',\n    'Innards Out',\n    'Liquid Voice',\n    'Long Reach',\n    'Merciless',\n    'Misty Surge',\n    'Neuroforce',\n    'Power Construct',\n    'Power of Alchemy',\n    'Prism Armor',\n    'Psychic Surge',\n    'Queenly Majesty',\n    'RKS System',\n    'Receiver',\n    'Schooling',\n    'Shadow Shield',\n    'Shields Down',\n    'Slush Rush',\n    'Stamina',\n    'Stakeout',\n    'Steelworker',\n    'Soul-Heart',\n    'Surge Surfer',\n    'Tangling Hair',\n    'Triage',\n    'Water Bubble',\n    'Water Compaction',\n    'Wimp Out',\n]);\nvar SS = SM.concat([\n    'As One (Glastrier)',\n    'As One (Spectrier)',\n    'Ball Fetch',\n    'Chilling Neigh',\n    'Cotton Down',\n    'Curious Medicine',\n    'Dauntless Shield',\n    'Dragon\\'s Maw',\n    'Gorilla Tactics',\n    'Grim Neigh',\n    'Gulp Missile',\n    'Hunger Switch',\n    'Ice Face',\n    'Ice Scales',\n    'Intrepid Sword',\n    'Libero',\n    'Mimicry',\n    'Mirror Armor',\n    'Neutralizing Gas',\n    'Pastel Veil',\n    'Perish Body',\n    'Power Spot',\n    'Propeller Tail',\n    'Punk Rock',\n    'Quick Draw',\n    'Ripen',\n    'Sand Spit',\n    'Screen Cleaner',\n    'Stalwart',\n    'Steam Engine',\n    'Steely Spirit',\n    'Transistor',\n    'Unseen Fist',\n    'Wandering Spirit',\n]);\nvar SV = SS.concat([\n    'Anger Shell',\n    'Armor Tail',\n    'Beads of Ruin',\n    'Commander',\n    'Costar',\n    'Cud Chew',\n    'Earth Eater',\n    'Electromorphosis',\n    'Good as Gold',\n    'Guard Dog',\n    'Hadron Engine',\n    'Lingering Aroma',\n    'Mycelium Might',\n    'Opportunist',\n    'Orichalcum Pulse',\n    'Protosynthesis',\n    'Purifying Salt',\n    'Quark Drive',\n    'Rocky Payload',\n    'Seed Sower',\n    'Sharpness',\n    'Supreme Overlord',\n    'Sword of Ruin',\n    'Tablets of Ruin',\n    'Thermal Exchange',\n    'Toxic Debris',\n    'Vessel of Ruin',\n    'Well-Baked Body',\n    'Wind Power',\n    'Wind Rider',\n    'Zero to Hero',\n]);\nexports.ABILITIES = [[], RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\nvar Abilities = (function () {\n    function Abilities(gen) {\n        this.gen = gen;\n    }\n    Abilities.prototype.get = function (id) {\n        return ABILITIES_BY_ID[this.gen][id];\n    };\n    Abilities.prototype[Symbol.iterator] = function () {\n        var _a, _b, _c, _i, id;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _a = ABILITIES_BY_ID[this.gen];\n                    _b = [];\n                    for (_c in _a)\n                        _b.push(_c);\n                    _i = 0;\n                    _d.label = 1;\n                case 1:\n                    if (!(_i < _b.length)) return [3, 4];\n                    _c = _b[_i];\n                    if (!(_c in _a)) return [3, 3];\n                    id = _c;\n                    return [4, this.get(id)];\n                case 2:\n                    _d.sent();\n                    _d.label = 3;\n                case 3:\n                    _i++;\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    };\n    return Abilities;\n}());\nexports.Abilities = Abilities;\nvar Ability = (function () {\n    function Ability(name) {\n        this.kind = 'Ability';\n        this.id = (0, util_1.toID)(name);\n        this.name = name;\n    }\n    return Ability;\n}());\nvar ABILITIES_BY_ID = [];\ntry {\n    for (var ABILITIES_1 = __values(exports.ABILITIES), ABILITIES_1_1 = ABILITIES_1.next(); !ABILITIES_1_1.done; ABILITIES_1_1 = ABILITIES_1.next()) {\n        var abilities = ABILITIES_1_1.value;\n        var map = {};\n        try {\n            for (var abilities_1 = (e_2 = void 0, __values(abilities)), abilities_1_1 = abilities_1.next(); !abilities_1_1.done; abilities_1_1 = abilities_1.next()) {\n                var ability = abilities_1_1.value;\n                var a = new Ability(ability);\n                map[a.id] = a;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (abilities_1_1 && !abilities_1_1.done && (_b = abilities_1[\"return\"])) _b.call(abilities_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        ABILITIES_BY_ID.push(map);\n    }\n}\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\nfinally {\n    try {\n        if (ABILITIES_1_1 && !ABILITIES_1_1.done && (_a = ABILITIES_1[\"return\"])) _a.call(ABILITIES_1);\n    }\n    finally { if (e_1) throw e_1.error; }\n}\n//# sourceMappingURL=abilities.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/abilities.js?\n}");

/***/ }),

/***/ "./calc/dist/data/index.js":
/*!*********************************!*\
  !*** ./calc/dist/data/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.Generations = void 0;\nvar abilities_1 = __webpack_require__(/*! ./abilities */ \"./calc/dist/data/abilities.js\");\nvar items_1 = __webpack_require__(/*! ./items */ \"./calc/dist/data/items.js\");\nvar moves_1 = __webpack_require__(/*! ./moves */ \"./calc/dist/data/moves.js\");\nvar species_1 = __webpack_require__(/*! ./species */ \"./calc/dist/data/species.js\");\nvar types_1 = __webpack_require__(/*! ./types */ \"./calc/dist/data/types.js\");\nvar natures_1 = __webpack_require__(/*! ./natures */ \"./calc/dist/data/natures.js\");\nexports.Generations = new ((function () {\n    function class_1() {\n    }\n    class_1.prototype.get = function (gen) {\n        return new Generation(gen);\n    };\n    return class_1;\n}()))();\nvar Generation = (function () {\n    function Generation(num) {\n        this.num = num;\n        this.abilities = new abilities_1.Abilities(num);\n        this.items = new items_1.Items(num);\n        this.moves = new moves_1.Moves(num);\n        this.species = new species_1.Species(num);\n        this.types = new types_1.Types(num);\n        this.natures = new natures_1.Natures();\n    }\n    return Generation;\n}());\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/index.js?\n}");

/***/ }),

/***/ "./calc/dist/data/interface.js":
/*!*************************************!*\
  !*** ./calc/dist/data/interface.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\nexports.__esModule = true;\n//# sourceMappingURL=interface.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/interface.js?\n}");

/***/ }),

/***/ "./calc/dist/data/items.js":
/*!*********************************!*\
  !*** ./calc/dist/data/items.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar e_1, _a, e_2, _b;\nexports.__esModule = true;\nexports.Items = exports.ITEMS = exports.MEGA_STONES = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar RBY = [];\nvar GSC = [\n    'Berry Juice',\n    'Berry',\n    'Berserk Gene',\n    'Bitter Berry',\n    'Black Belt',\n    'Black Glasses',\n    'Bright Powder',\n    'Burnt Berry',\n    'Charcoal',\n    'Dragon Fang',\n    'Dragon Scale',\n    'Fast Ball',\n    'Fire Stone',\n    'Focus Band',\n    'Friend Ball',\n    'Gold Berry',\n    'Great Ball',\n    'Hard Stone',\n    'Heavy Ball',\n    'Ice Berry',\n    'King\\'s Rock',\n    'Leaf Stone',\n    'Leftovers',\n    'Level Ball',\n    'Light Ball',\n    'Love Ball',\n    'Lucky Punch',\n    'Lure Ball',\n    'Magnet',\n    'Mail',\n    'Master Ball',\n    'Metal Coat',\n    'Metal Powder',\n    'Mint Berry',\n    'Miracle Berry',\n    'Miracle Seed',\n    'Moon Ball',\n    'Moon Stone',\n    'Mystery Berry',\n    'Mystic Water',\n    'Never-Melt Ice',\n    'Pink Bow',\n    'Poison Barb',\n    'Poke Ball',\n    'Polkadot Bow',\n    'PRZ Cure Berry',\n    'PSN Cure Berry',\n    'Quick Claw',\n    'Safari Ball',\n    'Scope Lens',\n    'Sharp Beak',\n    'Silver Powder',\n    'Soft Sand',\n    'Spell Tag',\n    'Sport Ball',\n    'Stick',\n    'Sun Stone',\n    'Thick Club',\n    'Thunder Stone',\n    'Twisted Spoon',\n    'Ultra Ball',\n    'Up-Grade',\n    'Water Stone',\n];\nvar GSC_ONLY = [\n    'Berry',\n    'Berserk Gene',\n    'Bitter Berry',\n    'Burnt Berry',\n    'Ice Berry',\n    'Mint Berry',\n    'Miracle Berry',\n    'Mystery Berry',\n    'PRZ Cure Berry',\n    'Gold Berry',\n    'Pink Bow',\n    'Polkadot Bow',\n    'PSN Cure Berry',\n    'Enigma Berry',\n];\nvar ADV = GSC.filter(function (i) { return !GSC_ONLY.includes(i); }).concat([\n    'Aguav Berry',\n    'Apicot Berry',\n    'Aspear Berry',\n    'Belue Berry',\n    'Bluk Berry',\n    'Cheri Berry',\n    'Chesto Berry',\n    'Choice Band',\n    'Claw Fossil',\n    'Cornn Berry',\n    'Deep Sea Scale',\n    'Deep Sea Tooth',\n    'Dive Ball',\n    'Dome Fossil',\n    'Durin Berry',\n    'Enigma Berry',\n    'Figy Berry',\n    'Ganlon Berry',\n    'Grepa Berry',\n    'Helix Fossil',\n    'Hondew Berry',\n    'Iapapa Berry',\n    'Kelpsy Berry',\n    'Lansat Berry',\n    'Lax Incense',\n    'Leppa Berry',\n    'Liechi Berry',\n    'Lum Berry',\n    'Luxury Ball',\n    'Macho Brace',\n    'Mago Berry',\n    'Magost Berry',\n    'Mental Herb',\n    'Nanab Berry',\n    'Nest Ball',\n    'Net Ball',\n    'Nomel Berry',\n    'Old Amber',\n    'Oran Berry',\n    'Pamtre Berry',\n    'Pecha Berry',\n    'Persim Berry',\n    'Petaya Berry',\n    'Pinap Berry',\n    'Pomeg Berry',\n    'Premier Ball',\n    'Qualot Berry',\n    'Rabuta Berry',\n    'Rawst Berry',\n    'Razz Berry',\n    'Repeat Ball',\n    'Root Fossil',\n    'Salac Berry',\n    'Sea Incense',\n    'Shell Bell',\n    'Silk Scarf',\n    'Sitrus Berry',\n    'Soul Dew',\n    'Spelon Berry',\n    'Starf Berry',\n    'Tamato Berry',\n    'Timer Ball',\n    'Watmel Berry',\n    'Wepear Berry',\n    'White Herb',\n    'Wiki Berry',\n]);\nvar DPP = ADV.concat([\n    'Adamant Orb',\n    'Armor Fossil',\n    'Babiri Berry',\n    'Big Root',\n    'Black Sludge',\n    'Charti Berry',\n    'Cherish Ball',\n    'Chilan Berry',\n    'Choice Scarf',\n    'Choice Specs',\n    'Chople Berry',\n    'Coba Berry',\n    'Colbur Berry',\n    'Custap Berry',\n    'Damp Rock',\n    'Dawn Stone',\n    'Destiny Knot',\n    'Draco Plate',\n    'Dread Plate',\n    'Dubious Disc',\n    'Dusk Ball',\n    'Dusk Stone',\n    'Earth Plate',\n    'Electirizer',\n    'Expert Belt',\n    'Fist Plate',\n    'Flame Orb',\n    'Flame Plate',\n    'Focus Sash',\n    'Full Incense',\n    'Grip Claw',\n    'Griseous Orb',\n    'Haban Berry',\n    'Heal Ball',\n    'Heat Rock',\n    'Icicle Plate',\n    'Icy Rock',\n    'Insect Plate',\n    'Iron Ball',\n    'Iron Plate',\n    'Jaboca Berry',\n    'Kasib Berry',\n    'Kebia Berry',\n    'Lagging Tail',\n    'Life Orb',\n    'Light Clay',\n    'Lustrous Orb',\n    'Magmarizer',\n    'Meadow Plate',\n    'Metronome',\n    'Micle Berry',\n    'Mind Plate',\n    'Muscle Band',\n    'Occa Berry',\n    'Odd Incense',\n    'Oval Stone',\n    'Park Ball',\n    'Passho Berry',\n    'Payapa Berry',\n    'Power Anklet',\n    'Power Band',\n    'Power Belt',\n    'Power Bracer',\n    'Power Herb',\n    'Power Lens',\n    'Power Weight',\n    'Protector',\n    'Quick Ball',\n    'Quick Powder',\n    'Rare Bone',\n    'Razor Claw',\n    'Razor Fang',\n    'Reaper Cloth',\n    'Rindo Berry',\n    'Rock Incense',\n    'Rose Incense',\n    'Rowap Berry',\n    'Shed Shell',\n    'Shiny Stone',\n    'Shuca Berry',\n    'Skull Fossil',\n    'Sky Plate',\n    'Smooth Rock',\n    'Splash Plate',\n    'Spooky Plate',\n    'Sticky Barb',\n    'Stone Plate',\n    'Tanga Berry',\n    'Toxic Orb',\n    'Toxic Plate',\n    'Wacan Berry',\n    'Wave Incense',\n    'Wide Lens',\n    'Wise Glasses',\n    'Yache Berry',\n    'Zap Plate',\n    'Zoom Lens',\n]);\nvar BW = DPP.concat([\n    'Absorb Bulb',\n    'Air Balloon',\n    'Binding Band',\n    'Bug Gem',\n    'Burn Drive',\n    'Cell Battery',\n    'Chill Drive',\n    'Cover Fossil',\n    'Dark Gem',\n    'Douse Drive',\n    'Dragon Gem',\n    'Dream Ball',\n    'Eject Button',\n    'Electric Gem',\n    'Eviolite',\n    'Fighting Gem',\n    'Fire Gem',\n    'Float Stone',\n    'Flying Gem',\n    'Ghost Gem',\n    'Grass Gem',\n    'Ground Gem',\n    'Ice Gem',\n    'Normal Gem',\n    'Plume Fossil',\n    'Poison Gem',\n    'Prism Scale',\n    'Psychic Gem',\n    'Red Card',\n    'Ring Target',\n    'Rock Gem',\n    'Rocky Helmet',\n    'Shock Drive',\n    'Steel Gem',\n    'Water Gem',\n]);\nexports.MEGA_STONES = {\n    Absolite: 'Absol',\n    Abomasite: 'Abomasnow',\n    Aerodactylite: 'Aerodactyl',\n    Aggronite: 'Aggron',\n    Alakazite: 'Alakazam',\n    Altarianite: 'Altaria',\n    Ampharosite: 'Ampharos',\n    Audinite: 'Audino',\n    Banettite: 'Banette',\n    Beedrillite: 'Beedrill',\n    Blastoisinite: 'Blastoise',\n    Blazikenite: 'Blaziken',\n    Cameruptite: 'Camerupt',\n    'Charizardite X': 'Charizard',\n    'Charizardite Y': 'Charizard',\n    Crucibellite: 'Crucibelle',\n    Diancite: 'Diancie',\n    Galladite: 'Gallade',\n    Garchompite: 'Garchomp',\n    Gardevoirite: 'Gardevoir',\n    Gengarite: 'Gengar',\n    Glalitite: 'Glalie',\n    Gyaradosite: 'Gyarados',\n    Heracronite: 'Heracross',\n    Houndoominite: 'Houndoom',\n    Kangaskhanite: 'Kangaskhan',\n    Latiasite: 'Latias',\n    Latiosite: 'Latios',\n    Lopunnite: 'Lopunny',\n    Lucarionite: 'Lucario',\n    Manectite: 'Manectric',\n    Mawilite: 'Mawile',\n    Medichamite: 'Medicham',\n    Metagrossite: 'Metagross',\n    'Mewtwonite X': 'Mewtwo',\n    'Mewtwonite Y': 'Mewtwo',\n    Pidgeotite: 'Pidgeot',\n    Pinsirite: 'Pinsir',\n    Sablenite: 'Sableye',\n    Salamencite: 'Salamence',\n    Sceptilite: 'Sceptile',\n    Scizorite: 'Scizor',\n    Sharpedonite: 'Sharpedo',\n    Slowbronite: 'Slowbro',\n    Steelixite: 'Steelix',\n    Swampertite: 'Swampert',\n    Tyranitarite: 'Tyranitar',\n    Venusaurite: 'Venusaur'\n};\nvar XY = BW.concat(__spreadArray(__spreadArray([], __read(Object.keys(exports.MEGA_STONES)), false), [\n    'Assault Vest',\n    'Blue Orb',\n    'Fairy Gem',\n    'Jaw Fossil',\n    'Kee Berry',\n    'Luminous Moss',\n    'Maranga Berry',\n    'Pixie Plate',\n    'Red Orb',\n    'Roseli Berry',\n    'Sachet',\n    'Safety Goggles',\n    'Sail Fossil',\n    'Snowball',\n    'Weakness Policy',\n    'Whipped Dream',\n], false).sort());\nvar SM = XY.filter(function (i) { return i !== 'Old Amber'; }).concat([\n    'Adrenaline Orb',\n    'Aloraichium Z',\n    'Beast Ball',\n    'Bottle Cap',\n    'Bug Memory',\n    'Buginium Z',\n    'Dark Memory',\n    'Darkinium Z',\n    'Decidium Z',\n    'Dragon Memory',\n    'Dragonium Z',\n    'Eevium Z',\n    'Electric Memory',\n    'Electric Seed',\n    'Electrium Z',\n    'Fairium Z',\n    'Fairy Memory',\n    'Fighting Memory',\n    'Fightinium Z',\n    'Fire Memory',\n    'Firium Z',\n    'Flying Memory',\n    'Flyinium Z',\n    'Ghost Memory',\n    'Ghostium Z',\n    'Gold Bottle Cap',\n    'Grass Memory',\n    'Grassium Z',\n    'Grassy Seed',\n    'Ground Memory',\n    'Groundium Z',\n    'Ice Memory',\n    'Ice Stone',\n    'Icium Z',\n    'Incinium Z',\n    'Kommonium Z',\n    'Lunalium Z',\n    'Lycanium Z',\n    'Marshadium Z',\n    'Mewnium Z',\n    'Mimikium Z',\n    'Misty Seed',\n    'Normalium Z',\n    'Pikanium Z',\n    'Pikashunium Z',\n    'Poison Memory',\n    'Poisonium Z',\n    'Primarium Z',\n    'Protective Pads',\n    'Psychic Memory',\n    'Psychic Seed',\n    'Psychium Z',\n    'Rock Memory',\n    'Rockium Z',\n    'Snorlium Z',\n    'Solganium Z',\n    'Steel Memory',\n    'Steelium Z',\n    'Tapunium Z',\n    'Terrain Extender',\n    'Ultranecrozium Z',\n    'Water Memory',\n    'Waterium Z',\n]);\nvar SS = SM.concat([\n    'Berry Sweet',\n    'Blunder Policy',\n    'Chipped Pot',\n    'Clover Sweet',\n    'Cracked Pot',\n    'Eject Pack',\n    'Flower Sweet',\n    'Fossilized Bird',\n    'Fossilized Dino',\n    'Fossilized Drake',\n    'Fossilized Fish',\n    'Galarica Cuff',\n    'Galarica Wreath',\n    'Heavy-Duty Boots',\n    'Leek',\n    'Love Sweet',\n    'Ribbon Sweet',\n    'Room Service',\n    'Rusted Shield',\n    'Rusted Sword',\n    'Star Sweet',\n    'Strawberry Sweet',\n    'Sweet Apple',\n    'Tart Apple',\n    'Throat Spray',\n]);\nfor (var i = 0; i < 100; i++) {\n    SS.push(\"TR\".concat(i < 10 ? \"0\".concat(i) : i));\n}\nSS.push('Utility Umbrella', 'Vile Vial');\nSS.push.apply(SS, __spreadArray(__spreadArray([], __read(GSC_ONLY), false), ['Old Amber'], false));\nvar SV = SS.concat([\n    'Adamant Crystal',\n    'Auspicious Armor',\n    'Ability Shield',\n    'Booster Energy',\n    'Clear Amulet',\n    'Covert Cloak',\n    'Loaded Dice',\n    'Malicious Armor',\n    'Mirror Herb',\n    'Punching Glove',\n    'Lustrous Globe',\n    'Griseous Core',\n    'Strange Ball',\n]);\nvar BERRIES = {\n    'Aguav Berry': { t: 'Dragon', p: 80 },\n    'Apicot Berry': { t: 'Ground', p: 100 },\n    'Aspear Berry': { t: 'Ice', p: 80 },\n    'Babiri Berry': { t: 'Steel', p: 80 },\n    'Belue Berry': { t: 'Electric', p: 100 },\n    Berry: { t: 'Poison', p: 80 },\n    'Bitter Berry': { t: 'Ground', p: 80 },\n    'Bluk Berry': { t: 'Fire', p: 90 },\n    'Burnt Berry': { t: 'Ice', p: 80 },\n    'Charti Berry': { t: 'Rock', p: 80 },\n    'Cheri Berry': { t: 'Fire', p: 80 },\n    'Chesto Berry': { t: 'Water', p: 80 },\n    'Chilan Berry': { t: 'Normal', p: 80 },\n    'Chople Berry': { t: 'Fighting', p: 80 },\n    'Coba Berry': { t: 'Flying', p: 80 },\n    'Colbur Berry': { t: 'Dark', p: 80 },\n    'Cornn Berry': { t: 'Bug', p: 90 },\n    'Custap Berry': { t: 'Ghost', p: 100 },\n    'Durin Berry': { t: 'Water', p: 100 },\n    'Enigma Berry': { t: 'Bug', p: 100 },\n    'Figy Berry': { t: 'Bug', p: 80 },\n    'Ganlon Berry': { t: 'Ice', p: 100 },\n    'Gold Berry': { t: 'Psychic', p: 80 },\n    'Grepa Berry': { t: 'Flying', p: 90 },\n    'Haban Berry': { t: 'Dragon', p: 80 },\n    'Hondew Berry': { t: 'Ground', p: 90 },\n    'Iapapa Berry': { t: 'Dark', p: 80 },\n    'Ice Berry': { t: 'Grass', p: 80 },\n    'Jaboca Berry': { t: 'Dragon', p: 100 },\n    'Kasib Berry': { t: 'Ghost', p: 80 },\n    'Kebia Berry': { t: 'Poison', p: 80 },\n    'Kee Berry': { t: 'Fairy', p: 100 },\n    'Kelpsy Berry': { t: 'Fighting', p: 90 },\n    'Lansat Berry': { t: 'Flying', p: 100 },\n    'Leppa Berry': { t: 'Fighting', p: 80 },\n    'Liechi Berry': { t: 'Grass', p: 100 },\n    'Lum Berry': { t: 'Flying', p: 80 },\n    'Mago Berry': { t: 'Ghost', p: 80 },\n    'Magost Berry': { t: 'Rock', p: 90 },\n    'Maranga Berry': { t: 'Dark', p: 100 },\n    'Micle Berry': { t: 'Rock', p: 100 },\n    'Mint Berry': { t: 'Water', p: 80 },\n    'Miracle Berry': { t: 'Flying', p: 80 },\n    'Mystery Berry': { t: 'Fighting', p: 80 },\n    'Nanab Berry': { t: 'Water', p: 90 },\n    'Nomel Berry': { t: 'Dragon', p: 90 },\n    'Occa Berry': { t: 'Fire', p: 80 },\n    'Oran Berry': { t: 'Poison', p: 80 },\n    'Pamtre Berry': { t: 'Steel', p: 90 },\n    'Passho Berry': { t: 'Water', p: 80 },\n    'Payapa Berry': { t: 'Psychic', p: 80 },\n    'Pecha Berry': { t: 'Electric', p: 80 },\n    'Persim Berry': { t: 'Ground', p: 80 },\n    'Petaya Berry': { t: 'Poison', p: 100 },\n    'Pinap Berry': { t: 'Grass', p: 90 },\n    'Pomeg Berry': { t: 'Ice', p: 90 },\n    'PRZ Cure Berry': { t: 'Fire', p: 80 },\n    'PSN Cure Berry': { t: 'Electric', p: 80 },\n    'Qualot Berry': { t: 'Poison', p: 90 },\n    'Rabuta Berry': { t: 'Ghost', p: 90 },\n    'Rawst Berry': { t: 'Grass', p: 80 },\n    'Razz Berry': { t: 'Steel', p: 80 },\n    'Rindo Berry': { t: 'Grass', p: 80 },\n    'Roseli Berry': { t: 'Fairy', p: 80 },\n    'Rowap Berry': { t: 'Dark', p: 100 },\n    'Salac Berry': { t: 'Fighting', p: 100 },\n    'Shuca Berry': { t: 'Ground', p: 80 },\n    'Sitrus Berry': { t: 'Psychic', p: 80 },\n    'Spelon Berry': { t: 'Dark', p: 90 },\n    'Starf Berry': { t: 'Psychic', p: 100 },\n    'Tamato Berry': { t: 'Psychic', p: 90 },\n    'Tanga Berry': { t: 'Bug', p: 80 },\n    'Wacan Berry': { t: 'Electric', p: 80 },\n    'Watmel Berry': { t: 'Fire', p: 100 },\n    'Wepear Berry': { t: 'Electric', p: 90 },\n    'Wiki Berry': { t: 'Rock', p: 80 },\n    'Yache Berry': { t: 'Ice', p: 80 }\n};\nexports.ITEMS = [[], RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\nvar Items = (function () {\n    function Items(gen) {\n        this.gen = gen;\n    }\n    Items.prototype.get = function (id) {\n        return ITEMS_BY_ID[this.gen][id];\n    };\n    Items.prototype[Symbol.iterator] = function () {\n        var _a, _b, _c, _i, id;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _a = ITEMS_BY_ID[this.gen];\n                    _b = [];\n                    for (_c in _a)\n                        _b.push(_c);\n                    _i = 0;\n                    _d.label = 1;\n                case 1:\n                    if (!(_i < _b.length)) return [3, 4];\n                    _c = _b[_i];\n                    if (!(_c in _a)) return [3, 3];\n                    id = _c;\n                    return [4, this.get(id)];\n                case 2:\n                    _d.sent();\n                    _d.label = 3;\n                case 3:\n                    _i++;\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    };\n    return Items;\n}());\nexports.Items = Items;\nvar Item = (function () {\n    function Item(name, gen) {\n        this.kind = 'Item';\n        this.id = (0, util_1.toID)(name);\n        this.name = name;\n        this.megaEvolves = exports.MEGA_STONES[name];\n        var berry = BERRIES[name];\n        if (berry) {\n            this.isBerry = true;\n            this.naturalGift = {\n                basePower: gen < 6 ? berry.p - 20 : berry.p,\n                type: berry.t\n            };\n        }\n    }\n    return Item;\n}());\nvar ITEMS_BY_ID = [];\nvar gen = 0;\ntry {\n    for (var ITEMS_1 = __values(exports.ITEMS), ITEMS_1_1 = ITEMS_1.next(); !ITEMS_1_1.done; ITEMS_1_1 = ITEMS_1.next()) {\n        var items = ITEMS_1_1.value;\n        var map = {};\n        try {\n            for (var items_1 = (e_2 = void 0, __values(items)), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                var item = items_1_1.value;\n                var i = new Item(item, gen);\n                map[i.id] = i;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (items_1_1 && !items_1_1.done && (_b = items_1[\"return\"])) _b.call(items_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        ITEMS_BY_ID.push(map);\n        gen++;\n    }\n}\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\nfinally {\n    try {\n        if (ITEMS_1_1 && !ITEMS_1_1.done && (_a = ITEMS_1[\"return\"])) _a.call(ITEMS_1);\n    }\n    finally { if (e_1) throw e_1.error; }\n}\n//# sourceMappingURL=items.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/items.js?\n}");

/***/ }),

/***/ "./calc/dist/data/moves.js":
/*!*********************************!*\
  !*** ./calc/dist/data/moves.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar e_1, _a, e_2, _b;\nexports.__esModule = true;\nexports.Moves = exports.MOVES = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar RBY = {\n    '(No Move)': { bp: 0, category: 'Status', type: 'Normal' },\n    Absorb: { bp: 40, type: 'Grass', drain: [1, 2] },\n    Acid: { bp: 40, type: 'Poison' },\n    Amnesia: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Aurora Beam': { bp: 65, type: 'Ice' },\n    Barrage: { bp: 15, type: 'Normal', multihit: [2, 5] },\n    Bide: { bp: 0, type: '???' },\n    Bind: { bp: 15, type: 'Normal' },\n    Bite: { bp: 60, type: 'Normal' },\n    Blizzard: { bp: 120, type: 'Ice' },\n    Bonemerang: { bp: 50, type: 'Ground', multihit: 2 },\n    Bubble: { bp: 20, type: 'Water' },\n    'Bubble Beam': { bp: 65, type: 'Water' },\n    Clamp: { bp: 35, type: 'Water' },\n    'Comet Punch': { bp: 18, type: 'Normal', multihit: [2, 5] },\n    Constrict: { bp: 10, type: 'Normal' },\n    Conversion: { bp: 0, category: 'Status', type: 'Normal' },\n    Counter: { bp: 1, type: 'Fighting' },\n    Crabhammer: { bp: 90, type: 'Water' },\n    'Defense Curl': { bp: 0, category: 'Status', type: 'Normal' },\n    Dig: { bp: 100, type: 'Ground' },\n    Disable: { bp: 0, category: 'Status', type: 'Normal' },\n    'Dizzy Punch': { bp: 70, type: 'Normal' },\n    'Double-Edge': { bp: 100, type: 'Normal', recoil: [25, 100] },\n    'Double Kick': { bp: 30, type: 'Fighting', multihit: 2 },\n    'Double Slap': { bp: 15, type: 'Normal', multihit: [2, 5] },\n    'Dragon Rage': { bp: 1, type: 'Dragon' },\n    'Dream Eater': { bp: 100, type: 'Psychic', drain: [1, 2] },\n    Earthquake: { bp: 100, type: 'Ground' },\n    Explosion: { bp: 170, type: 'Normal' },\n    'Fire Blast': { bp: 120, type: 'Fire' },\n    'Fire Spin': { bp: 15, type: 'Fire' },\n    Fissure: { bp: 0, type: 'Ground' },\n    Fly: { bp: 70, type: 'Flying' },\n    'Focus Energy': { bp: 0, category: 'Status', type: 'Normal' },\n    'Fury Attack': { bp: 15, type: 'Normal', multihit: [2, 5] },\n    'Fury Swipes': { bp: 18, type: 'Normal', multihit: [2, 5] },\n    Glare: { bp: 0, category: 'Status', type: 'Normal' },\n    Growth: { bp: 0, category: 'Status', type: 'Normal' },\n    Guillotine: { bp: 0, type: 'Normal' },\n    Gust: { bp: 40, type: 'Normal' },\n    Haze: { bp: 0, category: 'Status', type: 'Ice' },\n    'High Jump Kick': { bp: 85, type: 'Fighting', hasCrashDamage: true },\n    'Horn Drill': { bp: 0, type: 'Normal' },\n    'Hyper Beam': { bp: 150, type: 'Normal' },\n    'Jump Kick': { bp: 70, type: 'Fighting', hasCrashDamage: true },\n    'Karate Chop': { bp: 50, type: 'Normal' },\n    'Leech Seed': { bp: 0, category: 'Status', type: 'Grass' },\n    'Light Screen': { bp: 0, category: 'Status', type: 'Psychic' },\n    Metronome: { bp: 0, category: 'Status', type: 'Normal' },\n    Mimic: { bp: 0, category: 'Status', type: 'Normal' },\n    Minimize: { bp: 0, category: 'Status', type: 'Normal' },\n    'Mirror Move': { bp: 0, category: 'Status', type: 'Flying' },\n    Mist: { bp: 0, category: 'Status', type: 'Ice' },\n    'Night Shade': { bp: 1, type: 'Ghost' },\n    'Petal Dance': { bp: 70, type: 'Grass' },\n    'Pin Missile': { bp: 14, type: 'Bug', multihit: [2, 5] },\n    'Poison Sting': { bp: 15, type: 'Poison' },\n    Psychic: { bp: 90, type: 'Psychic' },\n    Psywave: { bp: 1, type: 'Psychic' },\n    Rage: { bp: 20, type: 'Normal' },\n    'Razor Leaf': { bp: 55, type: 'Grass' },\n    'Razor Wind': { bp: 80, type: 'Normal' },\n    Recover: { bp: 0, category: 'Status', type: 'Normal' },\n    Reflect: { bp: 0, category: 'Status', type: 'Psychic' },\n    Rest: { bp: 0, category: 'Status', type: 'Psychic' },\n    Roar: { bp: 0, category: 'Status', type: 'Normal' },\n    'Rock Slide': { bp: 75, type: 'Rock' },\n    'Rock Throw': { bp: 50, type: 'Rock' },\n    'Sand Attack': { bp: 0, category: 'Status', type: 'Normal' },\n    'Seismic Toss': { bp: 1, type: 'Fighting' },\n    'Self-Destruct': { bp: 130, type: 'Normal' },\n    'Skull Bash': { bp: 100, type: 'Normal' },\n    Slash: { bp: 70, type: 'Normal' },\n    Sludge: { bp: 65, type: 'Poison' },\n    'Soft-Boiled': { bp: 0, category: 'Status', type: 'Normal' },\n    'Solar Beam': { bp: 120, type: 'Grass' },\n    'Sonic Boom': { bp: 1, type: 'Normal' },\n    'Spike Cannon': { bp: 20, type: 'Normal', multihit: [2, 5] },\n    Stomp: { bp: 65, type: 'Normal' },\n    Struggle: { bp: 50, type: 'Normal', recoil: [1, 2] },\n    'Stun Spore': { bp: 0, category: 'Status', type: 'Grass' },\n    Submission: { bp: 80, type: 'Fighting', recoil: [1, 4] },\n    Substitute: { bp: 0, category: 'Status', type: 'Normal' },\n    'Super Fang': { bp: 1, type: 'Dark' },\n    Swift: { bp: 60, type: 'Normal' },\n    'Take Down': { bp: 90, type: 'Normal', recoil: [1, 4] },\n    Thrash: { bp: 90, type: 'Normal' },\n    Thunder: { bp: 120, type: 'Electric' },\n    'Thunder Wave': { bp: 0, category: 'Status', type: 'Electric' },\n    Transform: { bp: 0, category: 'Status', type: 'Normal' },\n    'Tri Attack': { bp: 80, type: 'Normal' },\n    Twineedle: { bp: 25, type: 'Bug', multihit: 2 },\n    Whirlwind: { bp: 0, category: 'Status', type: 'Normal' },\n    'Wing Attack': { bp: 35, type: 'Flying' },\n    Wrap: { bp: 15, type: 'Normal' },\n    Growl: { bp: 0, category: 'Status', type: 'Normal' },\n    Leer: { bp: 0, category: 'Status', type: 'Normal' },\n    'Low Kick': { bp: 50, type: 'Fighting' },\n    'Poison Gas': { bp: 0, category: 'Status', type: 'Poison' },\n    'Poison Powder': { bp: 0, category: 'Status', type: 'Poison' },\n    'Sky Attack': { bp: 140, type: 'Flying' },\n    'String Shot': { bp: 0, category: 'Status', type: 'Bug' },\n    Surf: { bp: 95, type: 'Water' },\n    'Tail Whip': { bp: 0, category: 'Status', type: 'Normal' },\n    Toxic: { bp: 0, category: 'Status', type: 'Poison' },\n    Flash: { bp: 0, category: 'Status', type: 'Normal' },\n    Hypnosis: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Leech Life': { bp: 20, type: 'Bug', drain: [1, 2] },\n    'Mega Drain': { bp: 60, type: 'Grass', drain: [1, 2] },\n    'Vine Whip': { bp: 35, type: 'Grass' },\n    Waterfall: { bp: 80, type: 'Water' },\n    Tackle: { bp: 35, type: 'Normal' },\n    'Acid Armor': { bp: 0, category: 'Status', type: 'Poison' },\n    Barrier: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Body Slam': { bp: 85, type: 'Normal' },\n    Flamethrower: { bp: 95, type: 'Fire' },\n    'Hydro Pump': { bp: 120, type: 'Water' },\n    'Ice Beam': { bp: 95, type: 'Ice' },\n    Lick: { bp: 20, type: 'Ghost' },\n    Screech: { bp: 0, category: 'Status', type: 'Normal' },\n    Sing: { bp: 0, category: 'Status', type: 'Normal' },\n    'Sleep Powder': { bp: 0, category: 'Status', type: 'Grass' },\n    Smog: { bp: 20, type: 'Poison' },\n    Spore: { bp: 0, category: 'Status', type: 'Grass' },\n    Supersonic: { bp: 0, category: 'Status', type: 'Normal' },\n    'Swords Dance': { bp: 0, category: 'Status', type: 'Normal' },\n    Thunderbolt: { bp: 95, type: 'Electric' },\n    'Bone Club': { bp: 65, type: 'Ground' },\n    'Egg Bomb': { bp: 100, type: 'Normal' },\n    'Hyper Fang': { bp: 80, type: 'Normal' },\n    Kinesis: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Lovely Kiss': { bp: 0, category: 'Status', type: 'Normal' },\n    Meditate: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Rolling Kick': { bp: 60, type: 'Fighting' },\n    Sharpen: { bp: 0, category: 'Status', type: 'Normal' },\n    Teleport: { bp: 0, category: 'Status', type: 'Psychic' },\n    Agility: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Confuse Ray': { bp: 0, category: 'Status', type: 'Ghost' },\n    Confusion: { bp: 50, type: 'Psychic' },\n    Cut: { bp: 50, type: 'Normal' },\n    'Double Team': { bp: 0, category: 'Status', type: 'Normal' },\n    'Drill Peck': { bp: 80, type: 'Flying' },\n    Ember: { bp: 40, type: 'Fire' },\n    'Fire Punch': { bp: 75, type: 'Fire' },\n    Harden: { bp: 0, category: 'Status', type: 'Normal' },\n    Headbutt: { bp: 70, type: 'Normal' },\n    'Horn Attack': { bp: 65, type: 'Normal' },\n    'Ice Punch': { bp: 75, type: 'Ice' },\n    'Mega Kick': { bp: 120, type: 'Normal' },\n    'Mega Punch': { bp: 80, type: 'Normal' },\n    'Paleo Wave': { bp: 85, type: 'Rock' },\n    'Pay Day': { bp: 40, type: 'Normal' },\n    Peck: { bp: 35, type: 'Flying' },\n    Pound: { bp: 40, type: 'Normal' },\n    Psybeam: { bp: 65, type: 'Psychic' },\n    'Quick Attack': { bp: 40, type: 'Normal', priority: 1 },\n    Scratch: { bp: 40, type: 'Normal' },\n    'Shadow Strike': { bp: 80, type: 'Ghost' },\n    Slam: { bp: 80, type: 'Normal' },\n    Smokescreen: { bp: 0, category: 'Status', type: 'Normal' },\n    Splash: { bp: 0, category: 'Status', type: 'Normal' },\n    Strength: { bp: 80, type: 'Normal' },\n    'Thunder Punch': { bp: 75, type: 'Electric' },\n    'Thunder Shock': { bp: 40, type: 'Electric' },\n    'Vise Grip': { bp: 55, type: 'Normal' },\n    'Water Gun': { bp: 40, type: 'Water' },\n    Withdraw: { bp: 0, category: 'Status', type: 'Water' }\n};\nvar GSC_PATCH = {\n    Bide: { type: 'Normal' },\n    Counter: { bp: 0 },\n    Dig: { bp: 60 },\n    'Double-Edge': { bp: 120 },\n    Explosion: { bp: 250 },\n    Gust: { type: 'Flying' },\n    'Karate Chop': { type: 'Fighting' },\n    Psywave: { bp: 0 },\n    'Self-Destruct': { bp: 200 },\n    Struggle: { recoil: [1, 4] },\n    'Dragon Rage': { bp: 0 },\n    Bite: { type: 'Dark' },\n    'Night Shade': { bp: 0 },\n    'Sand Attack': { type: 'Ground' },\n    'Seismic Toss': { bp: 0 },\n    'Sonic Boom': { bp: 0 },\n    'Super Fang': { bp: 0 },\n    'Wing Attack': { bp: 60 },\n    Aeroblast: { bp: 100, type: 'Flying' },\n    Attract: { bp: 0, category: 'Status', type: 'Normal' },\n    'Beat Up': { bp: 10, type: 'Dark' },\n    'Belly Drum': { bp: 0, category: 'Status', type: 'Normal' },\n    'Conversion 2': { bp: 0, category: 'Status', type: 'Normal' },\n    'Cross Chop': { bp: 100, type: 'Fighting' },\n    Curse: { bp: 0, category: 'Status', type: '???' },\n    'Destiny Bond': { bp: 0, category: 'Status', type: 'Ghost' },\n    Detect: { bp: 0, category: 'Status', type: 'Fighting', priority: 2 },\n    Encore: { bp: 0, category: 'Status', type: 'Normal' },\n    Endure: { bp: 0, category: 'Status', type: 'Normal', priority: 2 },\n    Flail: { bp: 0, type: 'Normal' },\n    Foresight: { bp: 0, category: 'Status', type: 'Normal' },\n    'Future Sight': { bp: 80, type: 'Psychic' },\n    'Heal Bell': { bp: 0, category: 'Status', type: 'Normal' },\n    'Icy Wind': { bp: 55, type: 'Ice' },\n    'Lock-On': { bp: 0, category: 'Status', type: 'Normal' },\n    'Mind Reader': { bp: 0, category: 'Status', type: 'Normal' },\n    'Mirror Coat': { bp: 0, type: 'Psychic' },\n    Moonlight: { bp: 0, category: 'Status', type: 'Normal' },\n    'Morning Sun': { bp: 0, category: 'Status', type: 'Normal' },\n    Nightmare: { bp: 0, category: 'Status', type: 'Ghost' },\n    Outrage: { bp: 90, type: 'Dragon' },\n    'Powder Snow': { bp: 40, type: 'Ice' },\n    Present: { bp: 0, type: 'Normal' },\n    Protect: { bp: 0, category: 'Status', type: 'Normal', priority: 2 },\n    'Psych Up': { bp: 0, category: 'Status', type: 'Normal' },\n    Pursuit: { bp: 40, type: 'Dark' },\n    'Rain Dance': { bp: 0, category: 'Status', type: 'Water' },\n    Reversal: { bp: 0, type: 'Fighting' },\n    Safeguard: { bp: 0, category: 'Status', type: 'Normal' },\n    Sandstorm: { bp: 0, category: 'Status', type: 'Rock' },\n    Sketch: { bp: 0, category: 'Status', type: 'Normal' },\n    'Sleep Talk': { bp: 0, category: 'Status', type: 'Normal' },\n    Spikes: { bp: 0, category: 'Status', type: 'Ground' },\n    Spite: { bp: 0, category: 'Status', type: 'Ghost' },\n    'Sunny Day': { bp: 0, category: 'Status', type: 'Fire' },\n    Swagger: { bp: 0, category: 'Status', type: 'Normal' },\n    'Sweet Scent': { bp: 0, category: 'Status', type: 'Normal' },\n    Synthesis: { bp: 0, category: 'Status', type: 'Grass' },\n    Thief: { bp: 40, type: 'Dark' },\n    'Triple Kick': { bp: 10, type: 'Fighting', multihit: [1, 3] },\n    Twister: { bp: 40, type: 'Dragon' },\n    'Ancient Power': { bp: 60, type: 'Rock' },\n    'Bone Rush': { bp: 25, type: 'Ground', multihit: [2, 5] },\n    Crunch: { bp: 80, type: 'Dark' },\n    'Feint Attack': { bp: 60, type: 'Dark' },\n    'Giga Drain': { bp: 60, type: 'Grass', drain: [1, 2] },\n    'Hidden Power': { bp: 0, type: 'Normal' },\n    'Mean Look': { bp: 0, category: 'Status', type: 'Normal' },\n    'Rapid Spin': { bp: 20, type: 'Normal' },\n    'Rock Smash': { bp: 20, type: 'Fighting' },\n    'Spider Web': { bp: 0, category: 'Status', type: 'Bug' },\n    Whirlpool: { bp: 15, type: 'Water' },\n    'Zap Cannon': { bp: 100, type: 'Electric' },\n    'Cotton Spore': { bp: 0, category: 'Status', type: 'Grass' },\n    'Extreme Speed': { bp: 80, type: 'Normal', priority: 1 },\n    'Fury Cutter': { bp: 10, type: 'Bug' },\n    Magnitude: { bp: 0, type: 'Ground' },\n    'Milk Drink': { bp: 0, category: 'Status', type: 'Normal' },\n    'Scary Face': { bp: 0, category: 'Status', type: 'Normal' },\n    Charm: { bp: 0, category: 'Status', type: 'Normal' },\n    'Hidden Power Bug': { bp: 70, type: 'Bug' },\n    'Hidden Power Dark': { bp: 70, type: 'Dark' },\n    'Hidden Power Dragon': { bp: 70, type: 'Dragon' },\n    'Hidden Power Electric': { bp: 70, type: 'Electric' },\n    'Hidden Power Fighting': { bp: 70, type: 'Fighting' },\n    'Hidden Power Fire': { bp: 70, type: 'Fire' },\n    'Hidden Power Flying': { bp: 70, type: 'Flying' },\n    'Hidden Power Ghost': { bp: 70, type: 'Ghost' },\n    'Hidden Power Grass': { bp: 70, type: 'Grass' },\n    'Hidden Power Ground': { bp: 70, type: 'Ground' },\n    'Hidden Power Ice': { bp: 70, type: 'Ice' },\n    'Hidden Power Poison': { bp: 70, type: 'Poison' },\n    'Hidden Power Psychic': { bp: 70, type: 'Psychic' },\n    'Hidden Power Rock': { bp: 70, type: 'Rock' },\n    'Hidden Power Steel': { bp: 70, type: 'Steel' },\n    'Hidden Power Water': { bp: 70, type: 'Water' },\n    'Perish Song': { bp: 0, category: 'Status', type: 'Normal' },\n    Snore: { bp: 40, type: 'Normal' },\n    'Sweet Kiss': { bp: 0, category: 'Status', type: 'Normal' },\n    Rollout: { bp: 30, type: 'Rock' },\n    Frustration: { bp: 0, type: 'Normal' },\n    Return: { bp: 0, type: 'Normal' },\n    'Sacred Fire': { bp: 100, type: 'Fire' },\n    'Baton Pass': { bp: 0, category: 'Status', type: 'Normal' },\n    'Dragon Breath': { bp: 60, type: 'Dragon' },\n    'Dynamic Punch': { bp: 100, type: 'Fighting' },\n    'False Swipe': { bp: 40, type: 'Normal' },\n    'Flame Wheel': { bp: 60, type: 'Fire' },\n    'Iron Tail': { bp: 100, type: 'Steel' },\n    'Mach Punch': { bp: 40, type: 'Fighting', priority: 1 },\n    Megahorn: { bp: 120, type: 'Bug' },\n    'Metal Claw': { bp: 50, type: 'Steel' },\n    'Mud-Slap': { bp: 20, type: 'Ground' },\n    Octazooka: { bp: 80, type: 'Water' },\n    'Pain Split': { bp: 0, category: 'Status', type: 'Normal' },\n    'Shadow Ball': { bp: 80, type: 'Ghost' },\n    'Sludge Bomb': { bp: 90, type: 'Poison' },\n    Spark: { bp: 65, type: 'Electric' },\n    'Steel Wing': { bp: 70, type: 'Steel' },\n    'Vital Throw': { bp: 70, type: 'Fighting' }\n};\nvar GSC = (0, util_1.extend)(true, {}, RBY, GSC_PATCH);\nvar ADV_PATCH = {\n    Acid: { target: 'allAdjacentFoes' },\n    'Ancient Power': { makesContact: true },\n    Bide: { makesContact: true },\n    Bind: { makesContact: true },\n    Blizzard: { target: 'allAdjacentFoes' },\n    Clamp: { makesContact: true },\n    'Comet Punch': { makesContact: true },\n    Counter: { makesContact: true },\n    Crunch: { makesContact: true },\n    Detect: { priority: 3 },\n    Endure: { priority: 4 },\n    Protect: { priority: 3 },\n    Dig: { makesContact: true },\n    'Double Kick': { makesContact: true },\n    'Double Slap': { makesContact: true },\n    Explosion: { target: 'allAdjacent' },\n    Flail: { makesContact: true },\n    Fly: { makesContact: true },\n    'Fury Attack': { makesContact: true },\n    'Fury Swipes': { makesContact: true },\n    'High Jump Kick': { makesContact: true },\n    'Jump Kick': { makesContact: true },\n    'Leech Life': { makesContact: true },\n    Outrage: { makesContact: true },\n    'Petal Dance': { makesContact: true },\n    Pursuit: { makesContact: true },\n    Rage: { makesContact: true },\n    'Rapid Spin': { makesContact: true },\n    'Razor Wind': { target: 'allAdjacentFoes' },\n    Reversal: { makesContact: true },\n    'Rock Smash': { makesContact: true },\n    'Self-Destruct': { target: 'allAdjacent' },\n    'Skull Bash': { makesContact: true },\n    Stomp: { makesContact: true },\n    Struggle: { makesContact: true },\n    Surf: { target: 'allAdjacentFoes' },\n    Thief: { makesContact: true },\n    Thrash: { makesContact: true },\n    'Triple Kick': { makesContact: true, multihit: 3 },\n    'Vine Whip': { makesContact: true },\n    Waterfall: { makesContact: true },\n    Wrap: { makesContact: true },\n    Crabhammer: { makesContact: true },\n    'Double-Edge': { recoil: [1, 3], makesContact: true },\n    Earthquake: { target: 'allAdjacent' },\n    'Extreme Speed': { makesContact: true },\n    'Fury Cutter': { makesContact: true },\n    'Heal Bell': { isSound: true },\n    Magnitude: { target: 'allAdjacent' },\n    Roar: { isSound: true },\n    Submission: { makesContact: true },\n    Tackle: { makesContact: true },\n    'Take Down': { makesContact: true },\n    Twister: { target: 'allAdjacentFoes' },\n    'Body Slam': { makesContact: true },\n    Bubble: { target: 'allAdjacentFoes' },\n    Growl: { isSound: true, target: 'allAdjacentFoes' },\n    Lick: { makesContact: true },\n    'Perish Song': { isSound: true },\n    Screech: { isSound: true },\n    Sing: { isSound: true },\n    Snore: { isSound: true },\n    'String Shot': { target: 'allAdjacentFoes' },\n    Supersonic: { isSound: true },\n    'Sweet Scent': { target: 'allAdjacentFoes' },\n    Rollout: { makesContact: true },\n    Constrict: { makesContact: true },\n    'Dizzy Punch': { makesContact: true },\n    Frustration: { makesContact: true },\n    'Hyper Fang': { makesContact: true },\n    'Karate Chop': { makesContact: true },\n    'Low Kick': { bp: 0, makesContact: true },\n    Return: { makesContact: true },\n    'Rolling Kick': { makesContact: true },\n    Bite: { makesContact: true },\n    'Cross Chop': { makesContact: true },\n    Cut: { makesContact: true },\n    'Drill Peck': { makesContact: true },\n    'Dynamic Punch': { makesContact: true },\n    'False Swipe': { makesContact: true },\n    'Fire Punch': { makesContact: true },\n    'Flame Wheel': { makesContact: true },\n    Guillotine: { makesContact: true },\n    Headbutt: { makesContact: true },\n    'Horn Attack': { makesContact: true },\n    'Horn Drill': { makesContact: true },\n    'Ice Punch': { makesContact: true },\n    'Icy Wind': { target: 'allAdjacentFoes' },\n    'Iron Tail': { makesContact: true },\n    Leer: { target: 'allAdjacentFoes' },\n    'Mach Punch': { makesContact: true },\n    Megahorn: { makesContact: true },\n    'Mega Kick': { makesContact: true },\n    'Mega Punch': { makesContact: true },\n    'Metal Claw': { makesContact: true },\n    Peck: { makesContact: true },\n    Pound: { makesContact: true },\n    'Powder Snow': { target: 'allAdjacentFoes' },\n    'Quick Attack': { makesContact: true },\n    'Razor Leaf': { target: 'allAdjacentFoes' },\n    'Rock Slide': { target: 'allAdjacentFoes' },\n    Scratch: { makesContact: true },\n    'Seismic Toss': { makesContact: true },\n    'Shadow Strike': { makesContact: true },\n    Slam: { makesContact: true },\n    Slash: { makesContact: true },\n    Spark: { makesContact: true },\n    'Steel Wing': { makesContact: true },\n    Strength: { makesContact: true },\n    'Super Fang': { makesContact: true },\n    Swift: { target: 'allAdjacentFoes' },\n    'Tail Whip': { target: 'allAdjacentFoes' },\n    'Thunder Punch': { makesContact: true },\n    'Vise Grip': { makesContact: true },\n    'Vital Throw': { makesContact: true },\n    'Wing Attack': { makesContact: true },\n    'Arm Thrust': {\n        bp: 15,\n        type: 'Fighting',\n        multihit: [2, 5],\n        makesContact: true\n    },\n    Assist: { bp: 0, category: 'Status', type: 'Normal' },\n    Astonish: { bp: 40, type: 'Ghost', makesContact: true },\n    Block: { bp: 0, category: 'Status', type: 'Normal' },\n    Bounce: { bp: 85, type: 'Flying', makesContact: true },\n    'Bullet Seed': { bp: 10, type: 'Grass', multihit: [2, 5] },\n    Camouflage: { bp: 0, category: 'Status', type: 'Normal' },\n    Charge: { bp: 0, category: 'Status', type: 'Electric' },\n    Covet: { bp: 40, type: 'Fairy' },\n    Dive: { bp: 60, type: 'Water', makesContact: true },\n    'Doom Desire': { bp: 120, type: 'Steel' },\n    Extrasensory: { bp: 80, type: 'Psychic' },\n    'Fake Out': { bp: 40, type: 'Normal', priority: 1 },\n    'Follow Me': { bp: 0, category: 'Status', type: 'Normal', priority: 3 },\n    Hail: { bp: 0, category: 'Status', type: 'Ice' },\n    'Icicle Spear': { bp: 10, type: 'Ice', multihit: [2, 5] },\n    Ingrain: { bp: 0, category: 'Status', type: 'Grass' },\n    'Knock Off': { bp: 20, type: 'Dark', makesContact: true },\n    'Leaf Blade': { bp: 70, type: 'Grass', makesContact: true },\n    'Magic Coat': { bp: 0, category: 'Status', type: 'Psychic', priority: 4 },\n    Memento: { bp: 0, category: 'Status', type: 'Dark' },\n    'Nature Power': { bp: 0, category: 'Status', type: 'Normal' },\n    'Needle Arm': { bp: 60, type: 'Grass', makesContact: true },\n    'Odor Sleuth': { bp: 0, category: 'Status', type: 'Normal' },\n    Overheat: { bp: 140, type: 'Fire', self: { boosts: { spa: -2 } }, makesContact: true },\n    Revenge: { bp: 60, type: 'Fighting', makesContact: true },\n    'Rock Blast': { bp: 25, type: 'Rock', multihit: [2, 5] },\n    'Role Play': { bp: 0, category: 'Status', type: 'Psychic' },\n    'Sand Tomb': { bp: 15, type: 'Ground' },\n    'Skill Swap': { bp: 0, category: 'Status', type: 'Psychic' },\n    'Smelling Salts': { bp: 60, type: 'Normal', makesContact: true },\n    'Spit Up': { bp: 0, type: 'Normal' },\n    Stockpile: { bp: 0, category: 'Status', type: 'Normal' },\n    Swallow: { bp: 0, category: 'Status', type: 'Normal' },\n    Taunt: { bp: 0, category: 'Status', type: 'Dark' },\n    'Teeter Dance': { bp: 0, category: 'Status', type: 'Normal', target: 'allAdjacent' },\n    Tickle: { bp: 0, category: 'Status', type: 'Normal' },\n    Trick: { bp: 0, category: 'Status', type: 'Psychic' },\n    Uproar: { bp: 50, type: 'Normal', isSound: true },\n    'Volt Tackle': { bp: 120, type: 'Electric', recoil: [1, 3], makesContact: true },\n    'Weather Ball': { bp: 50, type: 'Normal' },\n    Aromatherapy: { bp: 0, category: 'Status', type: 'Grass' },\n    'Brick Break': { bp: 75, type: 'Fighting', makesContact: true },\n    Endeavor: { bp: 0, type: 'Normal', makesContact: true },\n    'Focus Punch': { bp: 150, type: 'Fighting', makesContact: true },\n    Imprison: { bp: 0, category: 'Status', type: 'Psychic' },\n    'Mud Sport': { bp: 0, category: 'Status', type: 'Ground' },\n    Recycle: { bp: 0, category: 'Status', type: 'Normal' },\n    'Secret Power': { bp: 70, type: 'Normal' },\n    'Sky Uppercut': { bp: 85, type: 'Fighting', makesContact: true },\n    'Slack Off': { bp: 0, category: 'Status', type: 'Normal' },\n    Snatch: { bp: 0, category: 'Status', type: 'Dark', priority: 4 },\n    'Tail Glow': { bp: 0, category: 'Status', type: 'Bug' },\n    Torment: { bp: 0, category: 'Status', type: 'Dark' },\n    'Water Sport': { bp: 0, category: 'Status', type: 'Water' },\n    Wish: { bp: 0, category: 'Status', type: 'Normal' },\n    'Air Cutter': { bp: 55, type: 'Flying', target: 'allAdjacentFoes' },\n    Facade: { bp: 70, type: 'Normal', makesContact: true },\n    'Grass Whistle': { bp: 0, category: 'Status', type: 'Grass', isSound: true },\n    'Heat Wave': { bp: 100, type: 'Fire', target: 'allAdjacentFoes' },\n    'Hyper Voice': { bp: 90, type: 'Normal', isSound: true, target: 'allAdjacentFoes' },\n    'Metal Sound': { bp: 0, category: 'Status', type: 'Steel', isSound: true },\n    'Meteor Mash': { bp: 100, type: 'Steel', makesContact: true },\n    'Muddy Water': { bp: 95, type: 'Water', target: 'allAdjacentFoes' },\n    'Poison Fang': { bp: 50, type: 'Poison', makesContact: true },\n    'Rock Tomb': { bp: 50, type: 'Rock' },\n    'Will-O-Wisp': { bp: 0, category: 'Status', type: 'Fire' },\n    'Ice Ball': { bp: 30, type: 'Ice', makesContact: true },\n    'Sheer Cold': { bp: 0, type: 'Ice' },\n    Howl: { bp: 0, category: 'Status', type: 'Normal' },\n    'Luster Purge': { bp: 70, type: 'Psychic' },\n    'Mist Ball': { bp: 70, type: 'Psychic' },\n    'Psycho Boost': { bp: 140, type: 'Psychic', self: { boosts: { spa: -2 } } },\n    Refresh: { bp: 0, category: 'Status', type: 'Normal' },\n    'Signal Beam': { bp: 75, type: 'Bug' },\n    'Silver Wind': { bp: 60, type: 'Bug' },\n    'Aerial Ace': { bp: 60, type: 'Flying', makesContact: true },\n    'Blast Burn': { bp: 150, type: 'Fire' },\n    'Blaze Kick': { bp: 85, type: 'Fire', makesContact: true },\n    'Bulk Up': { bp: 0, category: 'Status', type: 'Fighting' },\n    'Calm Mind': { bp: 0, category: 'Status', type: 'Psychic' },\n    'Cosmic Power': { bp: 0, category: 'Status', type: 'Psychic' },\n    'Crush Claw': { bp: 75, type: 'Normal', makesContact: true },\n    'Dragon Claw': { bp: 80, type: 'Dragon', makesContact: true },\n    'Dragon Dance': { bp: 0, category: 'Status', type: 'Dragon' },\n    Eruption: { bp: 150, type: 'Fire', target: 'allAdjacentFoes' },\n    'Fake Tears': { bp: 0, category: 'Status', type: 'Dark' },\n    'Feather Dance': { bp: 0, category: 'Status', type: 'Flying' },\n    Flatter: { bp: 0, category: 'Status', type: 'Dark' },\n    'Frenzy Plant': { bp: 150, type: 'Grass' },\n    Grudge: { bp: 0, category: 'Status', type: 'Ghost' },\n    'Helping Hand': { bp: 0, category: 'Status', type: 'Normal', priority: 5 },\n    'Hydro Cannon': { bp: 150, type: 'Water' },\n    'Iron Defense': { bp: 0, category: 'Status', type: 'Steel' },\n    'Magical Leaf': { bp: 60, type: 'Grass' },\n    'Mud Shot': { bp: 55, type: 'Ground' },\n    'Poison Tail': { bp: 50, type: 'Poison', makesContact: true },\n    'Shadow Punch': { bp: 60, type: 'Ghost', makesContact: true },\n    'Shock Wave': { bp: 60, type: 'Electric' },\n    Superpower: { bp: 120, type: 'Fighting', self: { boosts: { atk: -1, def: -1 } }, makesContact: true },\n    'Water Pulse': { bp: 60, type: 'Water' },\n    'Water Spout': { bp: 150, type: 'Water', target: 'allAdjacentFoes' },\n    Yawn: { bp: 0, category: 'Status', type: 'Normal' }\n};\nvar ADV = (0, util_1.extend)(true, {}, GSC, ADV_PATCH);\nvar DPP_PATCH = {\n    Absorb: { category: 'Special' },\n    'Arm Thrust': { category: 'Physical' },\n    Barrage: { category: 'Physical' },\n    'Beat Up': { category: 'Physical' },\n    Bide: { priority: 1, category: 'Physical' },\n    Bind: { category: 'Physical' },\n    'Bone Rush': { category: 'Physical' },\n    Bonemerang: { category: 'Physical' },\n    Bounce: { category: 'Physical' },\n    'Brick Break': { category: 'Physical' },\n    'Bullet Seed': { category: 'Physical' },\n    Clamp: { category: 'Physical' },\n    'Comet Punch': { isPunch: true, category: 'Physical' },\n    Counter: { category: 'Physical' },\n    Covet: { makesContact: true, category: 'Physical' },\n    Crabhammer: { category: 'Physical' },\n    Dig: { bp: 80, category: 'Physical' },\n    Dive: { bp: 80, category: 'Physical' },\n    'Doom Desire': { category: 'Special' },\n    'Double-Edge': { category: 'Physical' },\n    'Double Kick': { category: 'Physical' },\n    'Double Slap': { category: 'Physical' },\n    'Dream Eater': { category: 'Special' },\n    Earthquake: { category: 'Physical' },\n    Endeavor: { category: 'Physical' },\n    Explosion: { category: 'Physical' },\n    'Extreme Speed': { category: 'Physical' },\n    'Fake Out': { makesContact: true, category: 'Physical' },\n    'Fire Spin': { category: 'Special' },\n    Flail: { category: 'Physical' },\n    Fly: { bp: 90, category: 'Physical' },\n    'Focus Punch': { isPunch: true, category: 'Physical' },\n    'Fury Attack': { category: 'Physical' },\n    'Fury Cutter': { category: 'Physical' },\n    'Fury Swipes': { category: 'Physical' },\n    'Future Sight': { category: 'Special' },\n    'Giga Drain': { category: 'Special' },\n    Gust: { category: 'Special' },\n    'High Jump Kick': { bp: 100, category: 'Physical' },\n    'Icicle Spear': { category: 'Physical' },\n    'Jump Kick': { bp: 85, category: 'Physical' },\n    'Knock Off': { category: 'Physical' },\n    'Leech Life': { category: 'Physical' },\n    Magnitude: { category: 'Physical' },\n    'Mega Drain': { category: 'Special' },\n    'Mirror Coat': { category: 'Special' },\n    Outrage: { bp: 120, category: 'Physical' },\n    'Petal Dance': { bp: 90, category: 'Special' },\n    'Pin Missile': { category: 'Physical' },\n    Psywave: { category: 'Special' },\n    Pursuit: { category: 'Physical' },\n    'Rapid Spin': { category: 'Physical' },\n    'Razor Wind': { category: 'Special' },\n    Revenge: { category: 'Physical' },\n    Reversal: { category: 'Physical' },\n    'Rock Blast': { category: 'Physical' },\n    'Sand Tomb': { category: 'Physical' },\n    'Secret Power': { category: 'Physical' },\n    'Self-Destruct': { category: 'Physical' },\n    'Sky Uppercut': { isPunch: true, category: 'Physical' },\n    'Smelling Salts': { category: 'Physical' },\n    'Solar Beam': { category: 'Special' },\n    'Spike Cannon': { category: 'Physical' },\n    'Spit Up': { category: 'Special' },\n    Stomp: { category: 'Physical' },\n    Struggle: { category: 'Physical', struggleRecoil: true },\n    Submission: { category: 'Physical' },\n    Surf: { target: 'allAdjacent', category: 'Special' },\n    Tackle: { category: 'Physical' },\n    'Take Down': { category: 'Physical' },\n    Thief: { category: 'Physical' },\n    Thrash: { category: 'Physical' },\n    Thunder: { category: 'Special' },\n    'Triple Kick': { category: 'Physical' },\n    Twineedle: { category: 'Physical' },\n    Twister: { category: 'Special' },\n    Uproar: { category: 'Special' },\n    'Volt Tackle': { category: 'Physical' },\n    Whirlpool: { category: 'Special' },\n    Wrap: { category: 'Physical' },\n    'Air Cutter': { category: 'Special' },\n    Blizzard: { category: 'Special' },\n    'Body Slam': { category: 'Physical' },\n    Bubble: { category: 'Special' },\n    Extrasensory: { category: 'Special' },\n    Facade: { category: 'Physical' },\n    'Fire Blast': { category: 'Special' },\n    Flamethrower: { category: 'Special' },\n    'Heat Wave': { category: 'Special' },\n    'Hidden Power': { category: 'Special' },\n    'Hidden Power Bug': { category: 'Special' },\n    'Hidden Power Dark': { category: 'Special' },\n    'Hidden Power Dragon': { category: 'Special' },\n    'Hidden Power Electric': { category: 'Special' },\n    'Hidden Power Fighting': { category: 'Special' },\n    'Hidden Power Fire': { category: 'Special' },\n    'Hidden Power Flying': { category: 'Special' },\n    'Hidden Power Ghost': { category: 'Special' },\n    'Hidden Power Grass': { category: 'Special' },\n    'Hidden Power Ground': { category: 'Special' },\n    'Hidden Power Ice': { category: 'Special' },\n    'Hidden Power Poison': { category: 'Special' },\n    'Hidden Power Psychic': { category: 'Special' },\n    'Hidden Power Rock': { category: 'Special' },\n    'Hidden Power Steel': { category: 'Special' },\n    'Hidden Power Water': { category: 'Special' },\n    'Hydro Pump': { category: 'Special' },\n    'Hyper Voice': { category: 'Special' },\n    'Ice Beam': { category: 'Special' },\n    Lick: { category: 'Physical' },\n    'Meteor Mash': { isPunch: true, category: 'Physical' },\n    'Muddy Water': { category: 'Special' },\n    Overheat: { category: 'Special', makesContact: false },\n    'Poison Fang': { isBite: true, category: 'Physical' },\n    'Rock Tomb': { category: 'Physical' },\n    'Skull Bash': { category: 'Physical' },\n    Smog: { category: 'Special' },\n    Snore: { category: 'Special' },\n    Thunderbolt: { category: 'Special' },\n    'Vine Whip': { category: 'Physical' },\n    'Weather Ball': { category: 'Special' },\n    'Ice Ball': { category: 'Physical' },\n    Rollout: { category: 'Physical' },\n    'Sheer Cold': { category: 'Special' },\n    Aeroblast: { category: 'Special' },\n    'Bone Club': { category: 'Physical' },\n    Constrict: { category: 'Physical' },\n    'Dizzy Punch': { isPunch: true, category: 'Physical' },\n    'Dragon Rage': { category: 'Special' },\n    'Egg Bomb': { category: 'Physical' },\n    'Feint Attack': { makesContact: true, category: 'Physical' },\n    Frustration: { category: 'Physical' },\n    'Hyper Fang': { isBite: true, category: 'Physical' },\n    'Karate Chop': { category: 'Physical' },\n    'Low Kick': { category: 'Physical' },\n    'Luster Purge': { category: 'Special' },\n    'Mist Ball': { category: 'Special' },\n    'Needle Arm': { category: 'Physical' },\n    'Psycho Boost': { category: 'Special' },\n    Rage: { category: 'Physical' },\n    Return: { category: 'Physical' },\n    'Rolling Kick': { category: 'Physical' },\n    'Sacred Fire': { category: 'Physical' },\n    'Signal Beam': { category: 'Special' },\n    'Silver Wind': { category: 'Special' },\n    'Sonic Boom': { category: 'Special' },\n    Acid: { category: 'Special' },\n    'Aerial Ace': { category: 'Physical' },\n    'Ancient Power': { category: 'Special', makesContact: false },\n    Astonish: { category: 'Physical' },\n    'Aurora Beam': { category: 'Special' },\n    Bite: { isBite: true, category: 'Physical' },\n    'Blast Burn': { category: 'Special' },\n    'Blaze Kick': { category: 'Physical' },\n    'Bubble Beam': { category: 'Special' },\n    Confusion: { category: 'Special' },\n    'Cross Chop': { category: 'Physical' },\n    Crunch: { isBite: true, category: 'Physical' },\n    'Crush Claw': { category: 'Physical' },\n    Cut: { category: 'Physical' },\n    'Dragon Breath': { category: 'Special' },\n    'Dragon Claw': { category: 'Physical' },\n    'Drill Peck': { category: 'Physical' },\n    'Dynamic Punch': { isPunch: true, category: 'Physical' },\n    Ember: { category: 'Special' },\n    Eruption: { category: 'Special' },\n    'False Swipe': { category: 'Physical' },\n    'Fire Punch': { isPunch: true, category: 'Physical' },\n    Fissure: { category: 'Physical' },\n    'Flame Wheel': { category: 'Physical' },\n    'Frenzy Plant': { category: 'Special' },\n    Guillotine: { category: 'Physical' },\n    Headbutt: { category: 'Physical' },\n    'Horn Attack': { category: 'Physical' },\n    'Horn Drill': { category: 'Physical' },\n    'Hydro Cannon': { category: 'Special' },\n    'Hyper Beam': { category: 'Special' },\n    'Ice Punch': { isPunch: true, category: 'Physical' },\n    'Icy Wind': { category: 'Special' },\n    'Iron Tail': { category: 'Physical' },\n    'Leaf Blade': { bp: 90, category: 'Physical' },\n    'Mach Punch': { isPunch: true, category: 'Physical' },\n    'Magical Leaf': { category: 'Special' },\n    Megahorn: { category: 'Physical' },\n    'Mega Kick': { category: 'Physical' },\n    'Mega Punch': { isPunch: true, category: 'Physical' },\n    'Metal Claw': { category: 'Physical' },\n    'Mud Shot': { category: 'Special' },\n    'Mud-Slap': { category: 'Special' },\n    'Night Shade': { category: 'Special' },\n    Octazooka: { category: 'Special' },\n    'Paleo Wave': { category: 'Special' },\n    'Pay Day': { category: 'Physical' },\n    Peck: { category: 'Physical' },\n    'Poison Sting': { category: 'Physical' },\n    'Poison Tail': { category: 'Physical' },\n    Pound: { category: 'Physical' },\n    'Powder Snow': { category: 'Special' },\n    Present: { category: 'Physical' },\n    Psybeam: { category: 'Special' },\n    Psychic: { category: 'Special' },\n    'Quick Attack': { category: 'Physical' },\n    'Razor Leaf': { category: 'Physical' },\n    'Rock Slide': { category: 'Physical' },\n    'Rock Smash': { bp: 40, category: 'Physical' },\n    'Rock Throw': { category: 'Physical' },\n    Scratch: { category: 'Physical' },\n    'Seismic Toss': { category: 'Physical' },\n    'Shadow Ball': { category: 'Special' },\n    'Shadow Punch': { isPunch: true, category: 'Physical' },\n    'Shadow Strike': { category: 'Physical' },\n    'Shock Wave': { category: 'Special' },\n    'Sky Attack': { category: 'Physical' },\n    Slam: { category: 'Physical' },\n    Slash: { category: 'Physical' },\n    Sludge: { category: 'Special' },\n    'Sludge Bomb': { category: 'Special' },\n    Spark: { category: 'Physical' },\n    'Steel Wing': { category: 'Physical' },\n    Strength: { category: 'Physical' },\n    'Super Fang': { category: 'Physical' },\n    Superpower: { category: 'Physical' },\n    Swift: { category: 'Special' },\n    'Thunder Punch': { isPunch: true, category: 'Physical' },\n    'Thunder Shock': { category: 'Special' },\n    'Tri Attack': { category: 'Special' },\n    'Vise Grip': { category: 'Physical' },\n    'Vital Throw': { category: 'Physical' },\n    Waterfall: { category: 'Physical' },\n    'Water Gun': { category: 'Special' },\n    'Water Pulse': { category: 'Special' },\n    'Water Spout': { category: 'Special' },\n    'Wing Attack': { category: 'Physical' },\n    'Zap Cannon': { bp: 120, category: 'Special' },\n    Acupressure: { bp: 0, type: 'Normal' },\n    'Aqua Ring': { bp: 0, type: 'Water' },\n    Assurance: {\n        bp: 50,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Avalanche: {\n        bp: 60,\n        type: 'Ice',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Brave Bird': {\n        bp: 120,\n        type: 'Flying',\n        recoil: [1, 3],\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Bug Bite': {\n        bp: 60,\n        type: 'Bug',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Chatter: { bp: 60, type: 'Flying', isSound: true, category: 'Special' },\n    Copycat: { bp: 0, type: 'Normal' },\n    'Crush Grip': {\n        bp: 0,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Defog: { bp: 0, type: 'Flying' },\n    'Double Hit': {\n        bp: 35,\n        type: 'Normal',\n        multihit: 2,\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Drain Punch': {\n        bp: 60,\n        type: 'Fighting',\n        drain: [1, 2],\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical'\n    },\n    Embargo: { bp: 0, type: 'Dark' },\n    Feint: {\n        bp: 50,\n        type: 'Normal',\n        priority: 2,\n        breaksProtect: true,\n        category: 'Physical'\n    },\n    'Fire Fang': {\n        bp: 65,\n        type: 'Fire',\n        makesContact: true,\n        isBite: true,\n        category: 'Physical'\n    },\n    'Flare Blitz': {\n        bp: 120,\n        type: 'Fire',\n        recoil: [1, 3],\n        makesContact: true,\n        category: 'Physical'\n    },\n    Fling: { bp: 0, type: 'Dark', category: 'Physical' },\n    Gravity: { bp: 0, type: 'Psychic' },\n    'Head Smash': {\n        bp: 150,\n        type: 'Rock',\n        recoil: [1, 2],\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Heal Block': { bp: 0, type: 'Psychic', target: 'allAdjacentFoes' },\n    'Healing Wish': { bp: 0, type: 'Psychic' },\n    'Heal Order': { bp: 0, type: 'Bug' },\n    'Last Resort': {\n        bp: 130,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Lucky Chant': { bp: 0, type: 'Normal' },\n    'Lunar Dance': { bp: 0, type: 'Psychic' },\n    'Magma Storm': { bp: 120, type: 'Fire', category: 'Special' },\n    'Magnet Rise': { bp: 0, type: 'Electric' },\n    'Me First': { bp: 0, type: 'Normal' },\n    'Metal Burst': { bp: 0, type: 'Steel', category: 'Physical' },\n    'Miracle Eye': { bp: 0, type: 'Psychic' },\n    'Natural Gift': { bp: 0, type: 'Normal', category: 'Physical' },\n    Payback: {\n        bp: 50,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Pluck: {\n        bp: 60,\n        type: 'Flying',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Power Trick': { bp: 0, type: 'Psychic' },\n    Roost: { bp: 0, type: 'Flying' },\n    'Stealth Rock': { bp: 0, type: 'Rock' },\n    'Sucker Punch': {\n        bp: 80,\n        type: 'Dark',\n        priority: 1,\n        makesContact: true,\n        category: 'Physical'\n    },\n    Switcheroo: { bp: 0, type: 'Dark' },\n    Tailwind: { bp: 0, type: 'Flying' },\n    'Toxic Spikes': { bp: 0, type: 'Poison' },\n    'Trick Room': { bp: 0, type: 'Psychic' },\n    'U-turn': {\n        bp: 70,\n        type: 'Bug',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Wake-Up Slap': {\n        bp: 60,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Wood Hammer': {\n        bp: 120,\n        type: 'Grass',\n        recoil: [1, 3],\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Worry Seed': { bp: 0, type: 'Grass' },\n    'Wring Out': {\n        bp: 0,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Special'\n    },\n    'Air Slash': { bp: 75, type: 'Flying', category: 'Special' },\n    'Aura Sphere': { bp: 90, type: 'Fighting', category: 'Special' },\n    'Bug Buzz': { bp: 90, type: 'Bug', isSound: true, category: 'Special' },\n    'Draco Meteor': { bp: 140, type: 'Dragon', self: { boosts: { spa: -2 } }, category: 'Special' },\n    'Dragon Pulse': { bp: 90, type: 'Dragon', category: 'Special' },\n    'Dragon Rush': {\n        bp: 100,\n        type: 'Dragon',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Energy Ball': { bp: 80, type: 'Grass', category: 'Special' },\n    'Gunk Shot': { bp: 120, type: 'Poison', category: 'Physical' },\n    'Gyro Ball': {\n        bp: 0,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Leaf Storm': { bp: 140, type: 'Grass', self: { boosts: { spa: -2 } }, category: 'Special' },\n    'Power Gem': { bp: 70, type: 'Rock', category: 'Special' },\n    'Psycho Shift': { bp: 0, type: 'Psychic' },\n    'Shadow Force': {\n        bp: 120,\n        type: 'Ghost',\n        breaksProtect: true,\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Dark Void': { bp: 0, type: 'Dark', target: 'allAdjacentFoes' },\n    'Gastro Acid': { bp: 0, type: 'Poison' },\n    Captivate: { bp: 0, type: 'Normal', target: 'allAdjacentFoes' },\n    'Grass Knot': {\n        bp: 0,\n        type: 'Grass',\n        makesContact: true,\n        category: 'Special'\n    },\n    'Heart Swap': { bp: 0, type: 'Psychic' },\n    Judgment: { bp: 100, type: 'Normal', category: 'Special' },\n    'Magnet Bomb': { bp: 60, type: 'Steel', category: 'Physical' },\n    'Mirror Shot': { bp: 65, type: 'Steel', category: 'Special' },\n    'Mud Bomb': { bp: 65, type: 'Ground', category: 'Special' },\n    'Ominous Wind': { bp: 60, type: 'Ghost', category: 'Special' },\n    Punishment: {\n        bp: 0,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Roar of Time': { bp: 150, type: 'Dragon', category: 'Special' },\n    'Rock Climb': {\n        bp: 90,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Seed Flare': { bp: 120, type: 'Grass', category: 'Special' },\n    'Spacial Rend': { bp: 100, type: 'Dragon', category: 'Special' },\n    'Trump Card': {\n        bp: 0,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Special'\n    },\n    'Aqua Jet': {\n        bp: 40,\n        type: 'Water',\n        priority: 1,\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Aqua Tail': {\n        bp: 90,\n        type: 'Water',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Attack Order': { bp: 90, type: 'Bug', category: 'Physical' },\n    Brine: { bp: 65, type: 'Water', category: 'Special' },\n    'Bullet Punch': {\n        bp: 40,\n        type: 'Steel',\n        priority: 1,\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical'\n    },\n    'Charge Beam': { bp: 40, type: 'Electric', category: 'Special' },\n    'Close Combat': {\n        bp: 120,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Cross Poison': {\n        bp: 70,\n        type: 'Poison',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Dark Pulse': { bp: 80, type: 'Dark', category: 'Special' },\n    'Defend Order': { bp: 0, type: 'Bug' },\n    Discharge: {\n        bp: 80,\n        type: 'Electric',\n        target: 'allAdjacent',\n        category: 'Special'\n    },\n    'Earth Power': { bp: 90, type: 'Ground', category: 'Special' },\n    'Flash Cannon': { bp: 80, type: 'Steel', category: 'Special' },\n    'Focus Blast': { bp: 120, type: 'Fighting', category: 'Special' },\n    'Force Palm': {\n        bp: 60,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Giga Impact': {\n        bp: 150,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Guard Swap': { bp: 0, type: 'Psychic' },\n    'Hammer Arm': {\n        bp: 100,\n        type: 'Fighting',\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical'\n    },\n    'Ice Fang': {\n        bp: 65,\n        type: 'Ice',\n        makesContact: true,\n        isBite: true,\n        category: 'Physical'\n    },\n    'Ice Shard': { bp: 40, type: 'Ice', priority: 1, category: 'Physical' },\n    'Iron Head': {\n        bp: 80,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Lava Plume': {\n        bp: 80,\n        type: 'Fire',\n        target: 'allAdjacent',\n        category: 'Special'\n    },\n    'Nasty Plot': { bp: 0, type: 'Dark' },\n    'Night Slash': {\n        bp: 70,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Poison Jab': {\n        bp: 80,\n        type: 'Poison',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Power Swap': { bp: 0, type: 'Psychic' },\n    'Power Whip': {\n        bp: 120,\n        type: 'Grass',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Psycho Cut': { bp: 70, type: 'Psychic', category: 'Physical' },\n    'Rock Polish': { bp: 0, type: 'Rock' },\n    'Rock Wrecker': { bp: 150, type: 'Rock', category: 'Physical' },\n    'Seed Bomb': { bp: 80, type: 'Grass', category: 'Physical' },\n    'Shadow Claw': {\n        bp: 70,\n        type: 'Ghost',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Shadow Sneak': {\n        bp: 40,\n        type: 'Ghost',\n        priority: 1,\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Stone Edge': { bp: 100, type: 'Rock', category: 'Physical' },\n    'Thunder Fang': {\n        bp: 65,\n        type: 'Electric',\n        makesContact: true,\n        isBite: true,\n        category: 'Physical'\n    },\n    'Vacuum Wave': {\n        bp: 40,\n        type: 'Fighting',\n        priority: 1,\n        category: 'Special'\n    },\n    'X-Scissor': {\n        bp: 80,\n        type: 'Bug',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Zen Headbutt': {\n        bp: 80,\n        type: 'Psychic',\n        makesContact: true,\n        category: 'Physical'\n    }\n};\nvar DPP = (0, util_1.extend)(true, {}, ADV, DPP_PATCH);\nvar BW_PATCH = {\n    'Air Slash': { secondaries: true },\n    Blizzard: { secondaries: true },\n    'Body Slam': { secondaries: true },\n    Bounce: { secondaries: true },\n    Bubble: { secondaries: true },\n    'Brave Bird': { recoil: [33, 100] },\n    'Bug Buzz': { secondaries: true },\n    Chatter: { secondaries: true },\n    Covet: { bp: 60 },\n    'Dragon Rush': { secondaries: true },\n    'Drain Punch': { bp: 75 },\n    'Energy Ball': { secondaries: true },\n    Extrasensory: { secondaries: true },\n    Feint: { bp: 30 },\n    Detect: { priority: 4 },\n    'Double-Edge': { recoil: [33, 100] },\n    Protect: { priority: 4 },\n    'Fire Blast': { secondaries: true },\n    'Fire Spin': { bp: 35 },\n    Flamethrower: { secondaries: true },\n    'Fury Cutter': { bp: 20 },\n    'Future Sight': { bp: 100, type: 'Psychic' },\n    'Giga Drain': { bp: 75 },\n    'Gunk Shot': { secondaries: true },\n    'Heat Wave': { secondaries: true },\n    'Ice Beam': { secondaries: true },\n    Lick: { secondaries: true },\n    'Meteor Mash': { secondaries: true },\n    'Muddy Water': { secondaries: true },\n    Overheat: {},\n    'Poison Fang': { secondaries: true },\n    'Poison Gas': { target: 'allAdjacentFoes' },\n    'Rock Tomb': { secondaries: true },\n    'Sand Tomb': { bp: 35 },\n    'Secret Power': { secondaries: true },\n    Smog: { secondaries: true },\n    Snore: { secondaries: true },\n    Stomp: { secondaries: true },\n    Thunder: { secondaries: true },\n    Thunderbolt: { secondaries: true },\n    Uproar: { bp: 90 },\n    Whirlpool: { bp: 35 },\n    'Petal Dance': { bp: 120 },\n    Tackle: { bp: 50 },\n    Thrash: { bp: 120 },\n    'Bone Club': { secondaries: true },\n    Constrict: { secondaries: true },\n    'Dizzy Punch': { secondaries: true },\n    'Hyper Fang': { secondaries: true },\n    'Jump Kick': { bp: 100 },\n    'Luster Purge': { secondaries: true },\n    'Mirror Shot': { secondaries: true },\n    'Mist Ball': { secondaries: true },\n    'Mud Bomb': { secondaries: true },\n    'Needle Arm': { secondaries: true },\n    'Ominous Wind': { secondaries: true },\n    'Rock Climb': { secondaries: true },\n    'Rolling Kick': { secondaries: true },\n    'Sacred Fire': { secondaries: true },\n    'Seed Flare': { secondaries: true },\n    'Signal Beam': { secondaries: true },\n    'Silver Wind': { secondaries: true },\n    Twineedle: { secondaries: true },\n    Acid: { secondaries: true },\n    'Ancient Power': { secondaries: true },\n    Astonish: { secondaries: true },\n    'Aurora Beam': { secondaries: true },\n    'Beat Up': { bp: 0 },\n    Bite: { secondaries: true },\n    'Blaze Kick': { secondaries: true },\n    'Bubble Beam': { secondaries: true },\n    'Bullet Seed': { bp: 25 },\n    'Charge Beam': { secondaries: true },\n    Confusion: { secondaries: true },\n    'Cross Poison': { secondaries: true },\n    Crunch: { secondaries: true },\n    'Crush Claw': { secondaries: true },\n    Curse: { type: 'Ghost' },\n    'Dark Pulse': { secondaries: true },\n    Discharge: { secondaries: true },\n    'Doom Desire': { bp: 140 },\n    'Dragon Breath': { secondaries: true },\n    'Dynamic Punch': { secondaries: true },\n    'Earth Power': { secondaries: true },\n    'Extreme Speed': { priority: 2 },\n    Ember: { secondaries: true },\n    'Fake Out': { secondaries: true, priority: 3 },\n    'Fire Fang': { secondaries: true },\n    'Fire Punch': { secondaries: true },\n    'Flame Wheel': { secondaries: true },\n    'Flare Blitz': { secondaries: true, recoil: [33, 100] },\n    'Flash Cannon': { secondaries: true },\n    'Focus Blast': { secondaries: true },\n    'Force Palm': { secondaries: true },\n    Headbutt: { secondaries: true },\n    'High Jump Kick': { bp: 130 },\n    'Ice Fang': { secondaries: true },\n    'Ice Punch': { secondaries: true },\n    'Icicle Spear': { bp: 25 },\n    'Icy Wind': { secondaries: true },\n    'Iron Head': { secondaries: true },\n    'Iron Tail': { secondaries: true },\n    'Last Resort': { bp: 140 },\n    'Lava Plume': { secondaries: true },\n    'Metal Claw': { secondaries: true },\n    'Mud Shot': { secondaries: true },\n    'Mud-Slap': { secondaries: true },\n    Octazooka: { secondaries: true },\n    'Paleo Wave': { secondaries: true },\n    'Poison Jab': { secondaries: true },\n    'Poison Sting': { secondaries: true },\n    'Poison Tail': { secondaries: true },\n    'Powder Snow': { secondaries: true },\n    Psybeam: { secondaries: true },\n    Psychic: { secondaries: true },\n    'Rock Slide': { secondaries: true },\n    'Rock Smash': { secondaries: true },\n    'Shadow Ball': { secondaries: true },\n    'Shadow Strike': { secondaries: true },\n    'Sky Attack': { secondaries: true },\n    Sludge: { secondaries: true },\n    'Sludge Bomb': { secondaries: true },\n    Spark: { secondaries: true },\n    'Steel Wing': { secondaries: true },\n    'Thunder Fang': { secondaries: true },\n    'Thunder Punch': { secondaries: true },\n    'Thunder Shock': { secondaries: true },\n    'Tri Attack': { secondaries: true },\n    Twister: { secondaries: true },\n    'Volt Tackle': { secondaries: true, recoil: [33, 100] },\n    'Wood Hammer': { recoil: [33, 100] },\n    Waterfall: { secondaries: true },\n    'Water Pulse': { secondaries: true },\n    'Zap Cannon': { secondaries: true },\n    'Zen Headbutt': { secondaries: true },\n    Autotomize: { bp: 0, type: 'Steel' },\n    Bestow: { bp: 0, type: 'Normal' },\n    'Echoed Voice': { bp: 40, type: 'Normal', isSound: true, category: 'Special' },\n    'Electro Ball': { bp: 0, type: 'Electric', category: 'Special' },\n    Entrainment: { bp: 0, type: 'Normal' },\n    'Final Gambit': {\n        bp: 0,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Special'\n    },\n    'Fire Pledge': { bp: 50, type: 'Fire', category: 'Special' },\n    'Frost Breath': { bp: 40, type: 'Ice', willCrit: true, category: 'Special' },\n    'Grass Pledge': { bp: 50, type: 'Grass', category: 'Special' },\n    'Heal Pulse': { bp: 0, type: 'Psychic' },\n    'Heat Crash': {\n        bp: 0,\n        type: 'Fire',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Hex: { bp: 50, type: 'Ghost', category: 'Special' },\n    'Horn Leech': {\n        bp: 75,\n        type: 'Grass',\n        drain: [1, 2],\n        makesContact: true,\n        category: 'Physical'\n    },\n    Hurricane: {\n        bp: 120,\n        type: 'Flying',\n        category: 'Special',\n        secondaries: true\n    },\n    Incinerate: { bp: 30, type: 'Fire', target: 'allAdjacentFoes', category: 'Special' },\n    'Low Sweep': {\n        bp: 60,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    'Magic Room': { bp: 0, type: 'Psychic' },\n    'Quick Guard': { bp: 0, type: 'Fighting', priority: 3 },\n    'Rage Powder': { bp: 0, type: 'Bug', priority: 3 },\n    'Relic Song': {\n        bp: 75,\n        type: 'Normal',\n        isSound: true,\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true\n    },\n    Round: { bp: 60, type: 'Normal', isSound: true, category: 'Special' },\n    'Sacred Sword': {\n        bp: 90,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical',\n        ignoreDefensive: true\n    },\n    Scald: {\n        bp: 80,\n        type: 'Water',\n        category: 'Special',\n        secondaries: true\n    },\n    'Simple Beam': { bp: 0, type: 'Normal' },\n    'Sky Drop': {\n        bp: 60,\n        type: 'Flying',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Snarl: {\n        bp: 55,\n        type: 'Dark',\n        isSound: true,\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true\n    },\n    Soak: { bp: 0, type: 'Water' },\n    Steamroller: {\n        bp: 65,\n        type: 'Bug',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    'Storm Throw': {\n        bp: 40,\n        type: 'Fighting',\n        willCrit: true,\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Struggle Bug': {\n        bp: 30,\n        type: 'Bug',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true\n    },\n    Synchronoise: {\n        bp: 70,\n        type: 'Psychic',\n        target: 'allAdjacent',\n        category: 'Special'\n    },\n    'Techno Blast': { bp: 85, type: 'Normal', category: 'Special' },\n    Telekinesis: { bp: 0, type: 'Psychic' },\n    'Water Pledge': { bp: 50, type: 'Water', category: 'Special' },\n    'Wide Guard': { bp: 0, type: 'Rock', priority: 3 },\n    'Wonder Room': { bp: 0, type: 'Psychic' },\n    'Ally Switch': { bp: 0, type: 'Psychic', priority: 1 },\n    'Flame Burst': { bp: 70, type: 'Fire', category: 'Special' },\n    'Heavy Slam': {\n        bp: 0,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Reflect Type': { bp: 0, type: 'Normal' },\n    'Volt Switch': { bp: 70, type: 'Electric', category: 'Special' },\n    'Chip Away': {\n        bp: 70,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical',\n        ignoreDefensive: true\n    },\n    'Fiery Dance': {\n        bp: 80,\n        type: 'Fire',\n        category: 'Special',\n        secondaries: true\n    },\n    'Head Charge': {\n        bp: 120,\n        type: 'Normal',\n        recoil: [1, 4],\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Heart Stamp': {\n        bp: 60,\n        type: 'Psychic',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    Quash: { bp: 0, type: 'Dark' },\n    'Searing Shot': {\n        bp: 100,\n        type: 'Fire',\n        target: 'allAdjacent',\n        category: 'Special',\n        secondaries: true\n    },\n    'Acid Spray': {\n        bp: 40,\n        type: 'Poison',\n        category: 'Special',\n        secondaries: true\n    },\n    Acrobatics: {\n        bp: 55,\n        type: 'Flying',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'After You': { bp: 0, type: 'Normal' },\n    'Blue Flare': {\n        bp: 130,\n        type: 'Fire',\n        category: 'Special',\n        secondaries: true\n    },\n    'Bolt Strike': {\n        bp: 130,\n        type: 'Electric',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    Bulldoze: {\n        bp: 60,\n        type: 'Ground',\n        target: 'allAdjacent',\n        category: 'Physical',\n        secondaries: true\n    },\n    'Circle Throw': {\n        bp: 60,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Clear Smog': { bp: 50, type: 'Poison', category: 'Special' },\n    Coil: { bp: 0, type: 'Poison' },\n    'Cotton Guard': { bp: 0, type: 'Grass' },\n    'Dragon Tail': {\n        bp: 60,\n        type: 'Dragon',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Drill Run': {\n        bp: 80,\n        type: 'Ground',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Dual Chop': {\n        bp: 40,\n        type: 'Dragon',\n        multihit: 2,\n        makesContact: true,\n        category: 'Physical'\n    },\n    Electroweb: {\n        bp: 55,\n        type: 'Electric',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true\n    },\n    'Flame Charge': {\n        bp: 50,\n        type: 'Fire',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    'Foul Play': {\n        bp: 95,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        overrideOffensivePokemon: 'target'\n    },\n    'Freeze Shock': {\n        bp: 140,\n        type: 'Ice',\n        category: 'Physical',\n        secondaries: true\n    },\n    'Fusion Bolt': { bp: 100, type: 'Electric', category: 'Physical' },\n    'Fusion Flare': { bp: 100, type: 'Fire', category: 'Special' },\n    'Gear Grind': {\n        bp: 50,\n        type: 'Steel',\n        multihit: 2,\n        makesContact: true,\n        category: 'Physical'\n    },\n    Glaciate: {\n        bp: 65,\n        type: 'Ice',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true\n    },\n    'Guard Split': { bp: 0, type: 'Psychic' },\n    'Hone Claws': { bp: 0, type: 'Dark' },\n    'Ice Burn': {\n        bp: 140,\n        type: 'Ice',\n        category: 'Special',\n        secondaries: true\n    },\n    'Icicle Crash': {\n        bp: 85,\n        type: 'Ice',\n        category: 'Physical',\n        secondaries: true\n    },\n    Inferno: {\n        bp: 100,\n        type: 'Fire',\n        category: 'Special',\n        secondaries: true\n    },\n    'Leaf Tornado': {\n        bp: 65,\n        type: 'Grass',\n        category: 'Special',\n        secondaries: true\n    },\n    'Night Daze': {\n        bp: 85,\n        type: 'Dark',\n        category: 'Special',\n        secondaries: true\n    },\n    'Power Split': { bp: 0, type: 'Psychic' },\n    Psyshock: {\n        bp: 80,\n        type: 'Psychic',\n        category: 'Special',\n        overrideDefensiveStat: 'def'\n    },\n    Psystrike: {\n        bp: 100,\n        type: 'Psychic',\n        category: 'Special',\n        overrideDefensiveStat: 'def'\n    },\n    'Quiver Dance': { bp: 0, type: 'Bug' },\n    'Razor Shell': {\n        bp: 75,\n        type: 'Water',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    Retaliate: {\n        bp: 70,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Secret Sword': {\n        bp: 85,\n        type: 'Fighting',\n        category: 'Special',\n        overrideDefensiveStat: 'def'\n    },\n    'Shell Smash': { bp: 0, type: 'Normal' },\n    'Shift Gear': { bp: 0, type: 'Steel' },\n    'Sludge Wave': {\n        bp: 95,\n        type: 'Poison',\n        target: 'allAdjacent',\n        category: 'Special',\n        secondaries: true\n    },\n    'Smack Down': { bp: 50, type: 'Rock', category: 'Physical' },\n    'Stored Power': { bp: 20, type: 'Psychic', category: 'Special' },\n    'Tail Slap': {\n        bp: 25,\n        type: 'Normal',\n        multihit: [2, 5],\n        makesContact: true,\n        category: 'Physical'\n    },\n    'V-create': {\n        bp: 180,\n        type: 'Fire',\n        makesContact: true,\n        category: 'Physical'\n    },\n    Venoshock: { bp: 65, type: 'Poison', category: 'Special' },\n    'Wild Charge': {\n        bp: 90,\n        type: 'Electric',\n        recoil: [1, 4],\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Work Up': { bp: 0, type: 'Normal' }\n};\nvar BW = (0, util_1.extend)(true, {}, DPP, BW_PATCH);\ndelete BW['Faint Attack'];\nvar XY_PATCH = {\n    'Ice Ball': { isBullet: true },\n    'Knock Off': { bp: 65 },\n    Thief: { bp: 60 },\n    Barrage: { isBullet: true },\n    Bubble: { bp: 40 },\n    Chatter: { bp: 65 },\n    'Egg Bomb': { isBullet: true },\n    'Follow Me': { priority: 2 },\n    Hurricane: { bp: 110 },\n    'Hidden Power': { bp: 60 },\n    'Hidden Power Bug': { bp: 60 },\n    'Hidden Power Dark': { bp: 60 },\n    'Hidden Power Dragon': { bp: 60 },\n    'Hidden Power Electric': { bp: 60 },\n    'Hidden Power Fighting': { bp: 60 },\n    'Hidden Power Fire': { bp: 60 },\n    'Hidden Power Flying': { bp: 60 },\n    'Hidden Power Ghost': { bp: 60 },\n    'Hidden Power Grass': { bp: 60 },\n    'Hidden Power Ground': { bp: 60 },\n    'Hidden Power Ice': { bp: 60 },\n    'Hidden Power Poison': { bp: 60 },\n    'Hidden Power Psychic': { bp: 60 },\n    'Hidden Power Rock': { bp: 60 },\n    'Hidden Power Steel': { bp: 60 },\n    'Hidden Power Water': { bp: 60 },\n    'Magma Storm': { bp: 100 },\n    'Magnet Bomb': { isBullet: true },\n    'Mist Ball': { isBullet: true },\n    Moonlight: { type: 'Fairy' },\n    'Mud Bomb': { isBullet: true },\n    'Searing Shot': { isBullet: true },\n    'Smelling Salts': { bp: 70 },\n    Synchronoise: { bp: 120 },\n    'Techno Blast': { bp: 120 },\n    Thunder: { bp: 110 },\n    'Wake-Up Slap': { bp: 70 },\n    'Acid Spray': { isBullet: true },\n    'Air Cutter': { bp: 60 },\n    'Ancient Power': {},\n    Assurance: { bp: 60 },\n    'Aura Sphere': { bp: 80, isBullet: true, isPulse: true },\n    Blizzard: { bp: 110 },\n    'Bullet Seed': { isBullet: true },\n    Charm: { type: 'Fairy' },\n    'Cotton Spore': { target: 'allAdjacentFoes' },\n    Crabhammer: { bp: 100 },\n    'Dark Pulse': { isPulse: true },\n    'Draco Meteor': { bp: 130 },\n    'Dragon Pulse': { bp: 85, isPulse: true },\n    'Electro Ball': { isBullet: true },\n    'Energy Ball': { bp: 90, isBullet: true },\n    'Final Gambit': { makesContact: false },\n    'Fire Blast': { bp: 110 },\n    'Fire Pledge': { bp: 80 },\n    Flamethrower: { bp: 90 },\n    'Focus Blast': { isBullet: true },\n    'Frost Breath': { bp: 60 },\n    'Fury Cutter': { bp: 40 },\n    'Future Sight': { bp: 120 },\n    'Grass Pledge': { bp: 80 },\n    'Gyro Ball': { isBullet: true },\n    'Heal Pulse': { isPulse: true },\n    'Heat Wave': { bp: 95 },\n    Hex: { bp: 65 },\n    'Hydro Pump': { bp: 110 },\n    'Ice Beam': { bp: 90 },\n    Incinerate: { bp: 60 },\n    'Leaf Storm': { bp: 130 },\n    Lick: { bp: 40 },\n    'Low Sweep': { bp: 65 },\n    'Meteor Mash': { bp: 90 },\n    'Muddy Water': { bp: 90 },\n    Octazooka: { isBullet: true },\n    Overheat: { bp: 130 },\n    'Pin Missile': { bp: 25 },\n    'Power Gem': { bp: 80 },\n    'Rage Powder': { priority: 2 },\n    'Rock Tomb': { bp: 60 },\n    'Rock Wrecker': { isBullet: true },\n    'Seed Bomb': { isBullet: true },\n    'Shadow Ball': { isBullet: true },\n    'Skull Bash': { bp: 130 },\n    'Sludge Bomb': { isBullet: true },\n    Smog: { bp: 30 },\n    Snore: { bp: 50 },\n    'Storm Throw': { bp: 60 },\n    'Struggle Bug': { bp: 50 },\n    Surf: { bp: 90 },\n    'Sweet Kiss': { type: 'Fairy' },\n    Thunderbolt: { bp: 90 },\n    'Vine Whip': { bp: 45 },\n    'Water Pledge': { bp: 80 },\n    'Water Pulse': { isPulse: true },\n    'Weather Ball': { isBullet: true },\n    'Zap Cannon': { isBullet: true },\n    'Diamond Storm': {\n        bp: 100,\n        type: 'Rock',\n        target: 'allAdjacentFoes',\n        category: 'Physical',\n        secondaries: true\n    },\n    'Fell Stinger': {\n        bp: 30,\n        type: 'Bug',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Flying Press': {\n        bp: 80,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Hyperspace Fury': {\n        bp: 100,\n        type: 'Dark',\n        breaksProtect: true,\n        category: 'Physical'\n    },\n    'Hyperspace Hole': {\n        bp: 80,\n        type: 'Psychic',\n        breaksProtect: true,\n        category: 'Special'\n    },\n    'King\\'s Shield': { bp: 0, type: 'Steel', priority: 4 },\n    'Misty Terrain': { bp: 0, type: 'Fairy' },\n    'Mystical Fire': {\n        bp: 65,\n        type: 'Fire',\n        category: 'Special',\n        secondaries: true\n    },\n    'Parabolic Charge': {\n        bp: 50,\n        type: 'Electric',\n        drain: [1, 2],\n        target: 'allAdjacent',\n        category: 'Special'\n    },\n    'Parting Shot': { bp: 0, type: 'Dark', isSound: true },\n    'Phantom Force': {\n        bp: 90,\n        type: 'Ghost',\n        breaksProtect: true,\n        makesContact: true,\n        category: 'Physical'\n    },\n    Powder: { bp: 0, type: 'Bug', priority: 1 },\n    'Spiky Shield': { bp: 0, type: 'Grass', priority: 4 },\n    'Thousand Arrows': { bp: 90, type: 'Ground', target: 'allAdjacentFoes', category: 'Physical' },\n    'Thousand Waves': { bp: 90, type: 'Ground', target: 'allAdjacentFoes', category: 'Physical' },\n    'Water Shuriken': {\n        bp: 15,\n        type: 'Water',\n        multihit: [2, 5],\n        priority: 1,\n        category: 'Physical'\n    },\n    'Dragon Ascent': {\n        bp: 120,\n        type: 'Flying',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Electric Terrain': { bp: 0, type: 'Electric' },\n    Geomancy: { bp: 0, type: 'Fairy' },\n    'Grassy Terrain': { bp: 0, type: 'Grass' },\n    'Ion Deluge': { bp: 0, type: 'Electric', priority: 1 },\n    'Land\\'s Wrath': { bp: 90, type: 'Ground', target: 'allAdjacentFoes', category: 'Physical' },\n    'Light of Ruin': { bp: 140, type: 'Fairy', recoil: [1, 2], category: 'Special' },\n    'Oblivion Wing': {\n        bp: 80,\n        type: 'Flying',\n        drain: [3, 4],\n        category: 'Special'\n    },\n    'Origin Pulse': {\n        bp: 110,\n        type: 'Water',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        isPulse: true\n    },\n    'Precipice Blades': {\n        bp: 120,\n        type: 'Ground',\n        target: 'allAdjacentFoes',\n        category: 'Physical'\n    },\n    Rototiller: { bp: 0, type: 'Ground' },\n    'Steam Eruption': {\n        bp: 110,\n        type: 'Water',\n        category: 'Special',\n        secondaries: true\n    },\n    'Aromatic Mist': { bp: 0, type: 'Fairy' },\n    'Baby-Doll Eyes': { bp: 0, type: 'Fairy', priority: 1 },\n    Belch: { bp: 120, type: 'Poison', category: 'Special' },\n    Boomburst: {\n        bp: 140,\n        type: 'Normal',\n        isSound: true,\n        target: 'allAdjacent',\n        category: 'Special'\n    },\n    Celebrate: { bp: 0, type: 'Normal' },\n    Confide: { bp: 0, type: 'Normal', isSound: true },\n    'Crafty Shield': { bp: 0, type: 'Fairy', priority: 3 },\n    'Dazzling Gleam': { bp: 80, type: 'Fairy', target: 'allAdjacentFoes', category: 'Special' },\n    'Disarming Voice': {\n        bp: 40,\n        type: 'Fairy',\n        isSound: true,\n        target: 'allAdjacentFoes',\n        category: 'Special'\n    },\n    'Draining Kiss': {\n        bp: 50,\n        type: 'Fairy',\n        drain: [3, 4],\n        makesContact: true,\n        category: 'Special'\n    },\n    'Eerie Impulse': { bp: 0, type: 'Electric' },\n    Electrify: { bp: 0, type: 'Electric' },\n    'Fairy Lock': { bp: 0, type: 'Fairy' },\n    'Fairy Wind': { bp: 40, type: 'Fairy', category: 'Special' },\n    'Flower Shield': { bp: 0, type: 'Fairy' },\n    'Forest\\'s Curse': { bp: 0, type: 'Grass' },\n    'Freeze-Dry': {\n        bp: 70,\n        type: 'Ice',\n        category: 'Special',\n        secondaries: true\n    },\n    'Happy Hour': { bp: 0, type: 'Normal' },\n    'Hold Back': {\n        bp: 40,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical'\n    },\n    'Hold Hands': { bp: 0, type: 'Normal' },\n    Infestation: { bp: 20, type: 'Bug', makesContact: true, category: 'Special' },\n    'Magnetic Flux': { bp: 0, type: 'Electric' },\n    'Mat Block': { bp: 0, type: 'Fighting' },\n    Moonblast: {\n        bp: 95,\n        type: 'Fairy',\n        category: 'Special',\n        secondaries: true\n    },\n    'Noble Roar': { bp: 0, type: 'Normal', isSound: true },\n    Nuzzle: {\n        bp: 20,\n        type: 'Electric',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    'Petal Blizzard': {\n        bp: 90,\n        type: 'Grass',\n        target: 'allAdjacent',\n        category: 'Physical'\n    },\n    'Play Nice': { bp: 0, type: 'Normal' },\n    'Play Rough': {\n        bp: 90,\n        type: 'Fairy',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    'Power-Up Punch': {\n        bp: 40,\n        type: 'Fighting',\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical',\n        secondaries: true\n    },\n    'Sticky Web': { bp: 0, type: 'Bug' },\n    'Topsy-Turvy': { bp: 0, type: 'Dark' },\n    'Trick-or-Treat': { bp: 0, type: 'Ghost' },\n    'Venom Drench': { bp: 0, type: 'Poison', target: 'allAdjacentFoes' }\n};\nvar XY = (0, util_1.extend)(true, {}, BW, XY_PATCH);\nvar SM_PATCH = {\n    'Ally Switch': { priority: 2 },\n    Aeroblast: { zp: 180 },\n    Barrage: { zp: 100 },\n    Bide: { zp: 100 },\n    'Bone Club': { zp: 120 },\n    Bonemerang: { zp: 100 },\n    Bubble: { zp: 100 },\n    Chatter: { zp: 120 },\n    'Chip Away': { zp: 140 },\n    Clamp: { zp: 100 },\n    'Comet Punch': { zp: 100 },\n    Constrict: { zp: 100 },\n    'Crush Grip': { zp: 190 },\n    'Diamond Storm': { zp: 180 },\n    'Dizzy Punch': { zp: 140 },\n    'Double Slap': { zp: 100 },\n    'Dragon Ascent': { zp: 190 },\n    'Dragon Rage': { zp: 100 },\n    'Egg Bomb': { zp: 180 },\n    'Feint Attack': { zp: 120 },\n    'Fiery Dance': { zp: 160 },\n    'Flame Burst': { zp: 140 },\n    Frustration: { zp: 160 },\n    'Grass Knot': { zp: 160 },\n    'Head Charge': { zp: 190 },\n    'Heart Stamp': { zp: 120 },\n    'Heat Crash': { zp: 160 },\n    'Heavy Slam': { zp: 160 },\n    Hurricane: { zp: 185 },\n    'Hidden Power': { zp: 120 },\n    'Hidden Power Bug': { zp: 120 },\n    'Hidden Power Dark': { zp: 120 },\n    'Hidden Power Dragon': { zp: 120 },\n    'Hidden Power Electric': { zp: 120 },\n    'Hidden Power Fighting': { zp: 120 },\n    'Hidden Power Fire': { zp: 120 },\n    'Hidden Power Flying': { zp: 120 },\n    'Hidden Power Ghost': { zp: 120 },\n    'Hidden Power Grass': { zp: 120 },\n    'Hidden Power Ground': { zp: 120 },\n    'Hidden Power Ice': { zp: 120 },\n    'Hidden Power Poison': { zp: 120 },\n    'Hidden Power Psychic': { zp: 120 },\n    'Hidden Power Rock': { zp: 120 },\n    'Hidden Power Steel': { zp: 120 },\n    'Hidden Power Water': { zp: 120 },\n    'Hyper Fang': { zp: 160 },\n    'Hyperspace Fury': { zp: 180 },\n    'Hyperspace Hole': { zp: 160 },\n    'Ice Ball': { zp: 100 },\n    Judgment: { zp: 180 },\n    'Jump Kick': { zp: 180 },\n    'Karate Chop': { zp: 100 },\n    'Knock Off': { zp: 120 },\n    'Land\\'s Wrath': { zp: 185 },\n    'Light of Ruin': { zp: 200 },\n    'Low Kick': { zp: 160 },\n    'Luster Purge': { zp: 140 },\n    'Magma Storm': { zp: 180 },\n    'Magnet Bomb': { zp: 120 },\n    Magnitude: { zp: 140 },\n    'Mirror Shot': { zp: 120 },\n    'Mist Ball': { zp: 140 },\n    'Mud Bomb': { zp: 120 },\n    'Natural Gift': { zp: 160 },\n    'Needle Arm': { zp: 120 },\n    'Oblivion Wing': { zp: 160 },\n    'Ominous Wind': { zp: 120 },\n    'Origin Pulse': { zp: 185 },\n    'Precipice Blades': { zp: 190 },\n    'Psycho Boost': { zp: 200 },\n    Psywave: { zp: 100 },\n    Punishment: { zp: 160 },\n    Pursuit: { zp: 100 },\n    Rage: { zp: 100 },\n    'Rapid Spin': { zp: 100 },\n    'Razor Wind': { zp: 160 },\n    'Relic Song': { zp: 140 },\n    Return: { zp: 160 },\n    'Roar of Time': { zp: 200 },\n    'Rock Climb': { zp: 175 },\n    'Rolling Kick': { zp: 120 },\n    'Sacred Fire': { zp: 180 },\n    'Searing Shot': { zp: 180 },\n    'Secret Power': { zp: 140 },\n    'Seed Flare': { zp: 190 },\n    'Shadow Force': { zp: 190 },\n    'Signal Beam': { zp: 140 },\n    'Silver Wind': { zp: 120 },\n    'Sky Drop': { zp: 120 },\n    'Sky Uppercut': { zp: 160 },\n    'Smelling Salts': { zp: 140 },\n    'Solar Beam': { zp: 190 },\n    'Sonic Boom': { zp: 100 },\n    'Spacial Rend': { zp: 180 },\n    'Spike Cannon': { zp: 120 },\n    'Steam Eruption': { zp: 185 },\n    Steamroller: { zp: 120 },\n    Synchronoise: { zp: 190 },\n    'Techno Blast': { zp: 190 },\n    'Thousand Arrows': { zp: 180 },\n    'Thousand Waves': { zp: 175 },\n    'Trump Card': { zp: 160 },\n    Thunder: { zp: 185 },\n    Twineedle: { zp: 100 },\n    'Wake-Up Slap': { zp: 140 },\n    'Wring Out': { zp: 190 },\n    Absorb: { zp: 100 },\n    Acid: { zp: 100 },\n    'Acid Spray': { zp: 100 },\n    Acrobatics: { zp: 100 },\n    'Aerial Ace': { zp: 120 },\n    'Air Cutter': { zp: 120 },\n    'Air Slash': { zp: 140 },\n    'Ancient Power': { zp: 120 },\n    'Aqua Jet': { zp: 100 },\n    'Aqua Tail': { zp: 175 },\n    'Arm Thrust': { zp: 100 },\n    Assurance: { zp: 120 },\n    Astonish: { zp: 100 },\n    'Attack Order': { zp: 175 },\n    'Aura Sphere': { zp: 160 },\n    'Aurora Beam': { zp: 120 },\n    Avalanche: { zp: 120 },\n    'Beat Up': { zp: 100 },\n    Belch: { zp: 190 },\n    Bind: { zp: 100 },\n    Bite: { zp: 120 },\n    'Blast Burn': { zp: 200 },\n    'Blaze Kick': { zp: 160 },\n    Blizzard: { zp: 185 },\n    'Blue Flare': { zp: 195 },\n    'Body Slam': { zp: 160 },\n    'Bolt Strike': { zp: 195 },\n    'Bone Rush': { zp: 140 },\n    Boomburst: { zp: 200 },\n    Bounce: { zp: 160 },\n    'Brave Bird': { zp: 190 },\n    'Brick Break': { zp: 140 },\n    Brine: { zp: 120 },\n    'Bubble Beam': { zp: 120 },\n    'Bug Bite': { zp: 120 },\n    'Bug Buzz': { zp: 175 },\n    Bulldoze: { zp: 120 },\n    'Bullet Punch': { zp: 100 },\n    'Bullet Seed': { zp: 140 },\n    'Charge Beam': { zp: 100 },\n    'Circle Throw': { zp: 120 },\n    'Clear Smog': { zp: 100 },\n    'Close Combat': { zp: 190 },\n    Confusion: { zp: 100 },\n    Counter: { zp: 100 },\n    Covet: { zp: 120 },\n    Crabhammer: { zp: 180 },\n    'Cross Chop': { zp: 180 },\n    'Cross Poison': { zp: 140 },\n    Crunch: { zp: 160 },\n    'Crush Claw': { zp: 140 },\n    Cut: { zp: 100 },\n    'Dark Pulse': { zp: 160 },\n    'Dazzling Gleam': { zp: 160 },\n    Dig: { zp: 160 },\n    'Disarming Voice': { zp: 100 },\n    Discharge: { zp: 160 },\n    Dive: { zp: 160 },\n    'Doom Desire': { zp: 200 },\n    'Double-Edge': { zp: 190 },\n    'Double Hit': { zp: 140 },\n    'Double Kick': { zp: 100 },\n    'Draco Meteor': { zp: 195 },\n    'Dragon Breath': { zp: 120 },\n    'Dragon Claw': { zp: 160 },\n    'Dragon Pulse': { zp: 160 },\n    'Dragon Rush': { zp: 180 },\n    'Dragon Tail': { zp: 120 },\n    'Draining Kiss': { zp: 100 },\n    'Drain Punch': { zp: 140 },\n    'Dream Eater': { zp: 180 },\n    'Drill Peck': { zp: 160 },\n    'Drill Run': { zp: 160 },\n    'Dual Chop': { zp: 100 },\n    'Dynamic Punch': { zp: 180 },\n    'Earth Power': { zp: 175 },\n    Earthquake: { zp: 180 },\n    'Echoed Voice': { zp: 100 },\n    'Electro Ball': { zp: 160 },\n    Electroweb: { zp: 100 },\n    Ember: { zp: 100 },\n    Endeavor: { zp: 160 },\n    'Energy Ball': { zp: 175 },\n    Eruption: { zp: 200 },\n    Explosion: { zp: 200 },\n    Extrasensory: { zp: 160 },\n    'Extreme Speed': { zp: 160 },\n    Facade: { zp: 140 },\n    'Fairy Wind': { zp: 100 },\n    'Fake Out': { zp: 100 },\n    'False Swipe': { zp: 100 },\n    Feint: { zp: 100 },\n    'Fell Stinger': { bp: 50, zp: 100 },\n    'Final Gambit': { zp: 180 },\n    'Fire Blast': { zp: 185 },\n    'Fire Fang': { zp: 120 },\n    'Fire Pledge': { zp: 160 },\n    'Fire Punch': { zp: 140 },\n    'Fire Spin': { zp: 100 },\n    Fissure: { zp: 180 },\n    Flail: { zp: 160 },\n    'Flame Charge': { zp: 100 },\n    'Flame Wheel': { zp: 120 },\n    Flamethrower: { zp: 175 },\n    'Flare Blitz': { zp: 190 },\n    'Flash Cannon': { zp: 160 },\n    Fling: { zp: 100 },\n    Fly: { zp: 175 },\n    'Flying Press': { bp: 100, zp: 170 },\n    'Focus Blast': { zp: 190 },\n    'Focus Punch': { zp: 200 },\n    'Force Palm': { zp: 120 },\n    'Foul Play': { zp: 175 },\n    'Freeze-Dry': { zp: 140 },\n    'Freeze Shock': { zp: 200 },\n    'Frenzy Plant': { zp: 200 },\n    'Frost Breath': { zp: 120 },\n    'Fury Attack': { zp: 100 },\n    'Fury Cutter': { zp: 100 },\n    'Fury Swipes': { zp: 100 },\n    'Fusion Bolt': { zp: 180 },\n    'Fusion Flare': { zp: 180 },\n    'Future Sight': { zp: 190 },\n    'Gear Grind': { zp: 180 },\n    'Giga Drain': { zp: 140 },\n    'Giga Impact': { zp: 200 },\n    Glaciate: { zp: 120 },\n    'Grass Pledge': { zp: 160 },\n    Guillotine: { zp: 180 },\n    'Gunk Shot': { zp: 190 },\n    Gust: { zp: 100 },\n    'Gyro Ball': { zp: 160 },\n    'Hammer Arm': { zp: 180 },\n    Headbutt: { zp: 140 },\n    'Head Smash': { zp: 200 },\n    'Heat Wave': { zp: 175 },\n    Hex: { zp: 160 },\n    'High Jump Kick': { zp: 195 },\n    'Hold Back': { zp: 100 },\n    'Horn Attack': { zp: 120 },\n    'Horn Drill': { zp: 180 },\n    'Horn Leech': { zp: 140 },\n    'Hydro Cannon': { zp: 200 },\n    'Hydro Pump': { zp: 185 },\n    'Hyper Beam': { zp: 200 },\n    'Hyper Voice': { zp: 175 },\n    'Ice Beam': { zp: 175 },\n    'Ice Burn': { zp: 200 },\n    'Ice Fang': { zp: 120 },\n    'Ice Punch': { zp: 140 },\n    'Ice Shard': { zp: 100 },\n    'Icicle Crash': { zp: 160 },\n    'Icicle Spear': { zp: 140 },\n    'Icy Wind': { zp: 100 },\n    Incinerate: { zp: 120 },\n    Inferno: { zp: 180 },\n    Infestation: { zp: 100 },\n    'Iron Head': { zp: 160 },\n    'Iron Tail': { zp: 180 },\n    'Last Resort': { zp: 200 },\n    'Lava Plume': { zp: 160 },\n    'Leaf Blade': { zp: 175 },\n    'Leaf Storm': { zp: 195 },\n    'Leaf Tornado': { zp: 120 },\n    'Leech Life': { bp: 80, zp: 160 },\n    Lick: { zp: 100 },\n    'Low Sweep': { zp: 120 },\n    'Mach Punch': { zp: 100 },\n    'Magical Leaf': { zp: 120 },\n    'Mega Drain': { zp: 120 },\n    Megahorn: { zp: 190 },\n    'Mega Kick': { zp: 190 },\n    'Mega Punch': { zp: 160 },\n    'Metal Burst': { zp: 100 },\n    'Metal Claw': { zp: 100 },\n    'Meteor Mash': { zp: 175 },\n    'Mirror Coat': { zp: 100 },\n    Moonblast: { zp: 175 },\n    'Mud Shot': { zp: 100 },\n    'Mud-Slap': { zp: 100 },\n    'Muddy Water': { zp: 175 },\n    'Mystical Fire': { bp: 75, zp: 140 },\n    'Night Daze': { zp: 160 },\n    'Night Shade': { zp: 100 },\n    'Night Slash': { zp: 140 },\n    Nuzzle: { zp: 100 },\n    Octazooka: { zp: 120 },\n    Outrage: { zp: 190 },\n    Overheat: { zp: 195 },\n    'Paleo Wave': { zp: 160 },\n    'Parabolic Charge': { bp: 65, zp: 120 },\n    Payback: { zp: 100 },\n    'Pay Day': { zp: 100 },\n    Peck: { zp: 100 },\n    'Petal Blizzard': { zp: 175 },\n    'Petal Dance': { zp: 190 },\n    'Phantom Force': { zp: 175 },\n    'Pin Missile': { zp: 140 },\n    'Play Rough': { zp: 175 },\n    Pluck: { zp: 120 },\n    'Poison Fang': { zp: 100 },\n    'Poison Jab': { zp: 160 },\n    'Poison Sting': { zp: 100 },\n    'Poison Tail': { zp: 100 },\n    Pound: { zp: 100 },\n    'Powder Snow': { zp: 100 },\n    'Power Gem': { zp: 160 },\n    'Power-Up Punch': { zp: 100 },\n    'Power Whip': { zp: 190 },\n    Present: { zp: 100 },\n    Psybeam: { zp: 120 },\n    Psychic: { zp: 175 },\n    'Psycho Cut': { zp: 140 },\n    Psyshock: { zp: 160 },\n    Psystrike: { zp: 180 },\n    'Quick Attack': { zp: 100 },\n    'Razor Leaf': { zp: 100 },\n    'Razor Shell': { zp: 140 },\n    Retaliate: { zp: 140 },\n    Revenge: { zp: 120 },\n    Reversal: { zp: 160 },\n    'Rock Blast': { isBullet: true, zp: 140 },\n    'Rock Slide': { zp: 140 },\n    'Rock Smash': { zp: 100 },\n    'Rock Throw': { zp: 100 },\n    'Rock Tomb': { zp: 120 },\n    'Rock Wrecker': { zp: 200 },\n    Rollout: { zp: 100 },\n    Round: { zp: 120 },\n    'Sacred Sword': { zp: 175 },\n    'Sand Tomb': { zp: 100 },\n    Scald: { zp: 160 },\n    Scratch: { zp: 100 },\n    'Secret Sword': { zp: 160 },\n    'Seed Bomb': { zp: 160 },\n    'Seismic Toss': { zp: 100 },\n    'Self-Destruct': { zp: 200 },\n    'Shadow Ball': { zp: 160 },\n    'Shadow Claw': { zp: 140 },\n    'Shadow Punch': { zp: 120 },\n    'Shadow Sneak': { zp: 100 },\n    'Shadow Strike': { zp: 160 },\n    'Sheer Cold': { zp: 180 },\n    'Shock Wave': { zp: 120 },\n    'Skull Bash': { zp: 195 },\n    'Sky Attack': { zp: 200 },\n    Slam: { zp: 160 },\n    Slash: { zp: 140 },\n    Sludge: { zp: 120 },\n    'Sludge Bomb': { zp: 175 },\n    'Sludge Wave': { zp: 175 },\n    'Smack Down': { zp: 100 },\n    Smog: { zp: 100 },\n    Snarl: { zp: 100 },\n    Snore: { zp: 100 },\n    Spark: { zp: 120 },\n    'Spit Up': { zp: 100 },\n    'Steel Wing': { zp: 140 },\n    Stomp: { zp: 120 },\n    'Stone Edge': { zp: 180 },\n    'Stored Power': { zp: 160 },\n    'Storm Throw': { zp: 120 },\n    Strength: { zp: 160 },\n    'Struggle Bug': { zp: 100 },\n    Submission: { zp: 160 },\n    'Sucker Punch': { bp: 70, zp: 140 },\n    'Super Fang': { zp: 100 },\n    Superpower: { zp: 190 },\n    Surf: { zp: 175 },\n    Swift: { zp: 120 },\n    Tackle: { bp: 40, zp: 100 },\n    'Tail Slap': { zp: 140 },\n    'Take Down': { zp: 175 },\n    Thief: { zp: 120 },\n    Thrash: { zp: 190 },\n    Thunderbolt: { zp: 175 },\n    'Thunder Fang': { zp: 120 },\n    'Thunder Punch': { zp: 140 },\n    'Thunder Shock': { zp: 100 },\n    'Tri Attack': { zp: 160 },\n    'Triple Kick': { zp: 120 },\n    Twister: { zp: 100 },\n    'U-turn': { zp: 140 },\n    Uproar: { zp: 175 },\n    'Vacuum Wave': { zp: 100 },\n    'V-create': { zp: 220 },\n    Venoshock: { zp: 120 },\n    'Vine Whip': { zp: 100 },\n    'Vise Grip': { zp: 100 },\n    'Vital Throw': { zp: 140 },\n    'Volt Switch': { zp: 140 },\n    'Volt Tackle': { zp: 190 },\n    Waterfall: { zp: 160 },\n    'Water Gun': { zp: 100 },\n    'Water Pledge': { zp: 160 },\n    'Water Pulse': { zp: 120 },\n    'Water Shuriken': { category: 'Special', zp: 100 },\n    'Water Spout': { zp: 200 },\n    'Weather Ball': { zp: 160 },\n    Whirlpool: { zp: 100 },\n    'Wild Charge': { zp: 175 },\n    'Wing Attack': { zp: 120 },\n    'Wood Hammer': { zp: 190 },\n    Wrap: { zp: 100 },\n    'X-Scissor': { zp: 160 },\n    'Zap Cannon': { zp: 190 },\n    'Zen Headbutt': { zp: 160 },\n    '10,000,000 Volt Thunderbolt': { bp: 195, type: 'Electric', category: 'Special', isZ: true },\n    'Acid Downpour': { bp: 1, type: 'Poison', category: 'Physical', isZ: true },\n    'All-Out Pummeling': { bp: 1, type: 'Fighting', category: 'Physical', isZ: true },\n    'Baddy Bad': { bp: 90, type: 'Dark', category: 'Special', zp: 175 },\n    'Baneful Bunker': { bp: 0, type: 'Poison', priority: 4 },\n    'Beak Blast': {\n        bp: 100,\n        type: 'Flying',\n        category: 'Physical',\n        isBullet: true,\n        zp: 180\n    },\n    'Black Hole Eclipse': { bp: 1, type: 'Dark', category: 'Physical', isZ: true },\n    'Bloom Doom': { bp: 1, type: 'Grass', category: 'Physical', isZ: true },\n    'Bouncy Bubble': {\n        bp: 90,\n        type: 'Water',\n        drain: [1, 2],\n        category: 'Special',\n        zp: 175\n    },\n    'Breakneck Blitz': { bp: 1, type: 'Normal', category: 'Physical', isZ: true },\n    'Buzzy Buzz': {\n        bp: 90,\n        type: 'Electric',\n        category: 'Special',\n        secondaries: true,\n        zp: 175\n    },\n    Catastropika: {\n        bp: 210,\n        type: 'Electric',\n        makesContact: true,\n        category: 'Physical',\n        isZ: true\n    },\n    'Clangorous Soulblaze': {\n        bp: 185,\n        type: 'Dragon',\n        isSound: true,\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true,\n        isZ: true\n    },\n    'Continental Crush': { bp: 1, type: 'Rock', category: 'Physical', isZ: true },\n    'Core Enforcer': {\n        bp: 100,\n        type: 'Dragon',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        zp: 140\n    },\n    'Corkscrew Crash': { bp: 1, type: 'Steel', category: 'Physical', isZ: true },\n    'Devastating Drake': { bp: 1, type: 'Dragon', category: 'Physical', isZ: true },\n    'Double Iron Bash': {\n        bp: 60,\n        type: 'Steel',\n        multihit: 2,\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 180\n    },\n    'Dragon Hammer': {\n        bp: 90,\n        type: 'Dragon',\n        makesContact: true,\n        category: 'Physical',\n        zp: 175\n    },\n    'Extreme Evoboost': { bp: 0, type: 'Normal', isZ: true },\n    'Fleur Cannon': {\n        bp: 130,\n        type: 'Fairy',\n        self: { boosts: { spa: -2 } },\n        category: 'Special',\n        zp: 195\n    },\n    'Floral Healing': { bp: 0, type: 'Fairy' },\n    'Freezy Frost': { bp: 90, type: 'Ice', category: 'Special', zp: 175 },\n    'Genesis Supernova': {\n        bp: 185,\n        type: 'Psychic',\n        category: 'Special',\n        secondaries: true,\n        isZ: true\n    },\n    'Gigavolt Havoc': { bp: 1, type: 'Electric', category: 'Physical', isZ: true },\n    'Glitzy Glow': { bp: 90, type: 'Psychic', category: 'Special', zp: 175 },\n    'Guardian of Alola': { bp: 0, type: 'Fairy', category: 'Special', isZ: true },\n    'Hydro Vortex': { bp: 1, type: 'Water', category: 'Physical', isZ: true },\n    'Ice Hammer': {\n        bp: 100,\n        type: 'Ice',\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical',\n        zp: 180\n    },\n    'Inferno Overdrive': { bp: 1, type: 'Fire', category: 'Physical', isZ: true },\n    Instruct: { bp: 0, type: 'Psychic' },\n    'Let\\'s Snuggle Forever': {\n        bp: 190,\n        type: 'Fairy',\n        makesContact: true,\n        category: 'Physical',\n        isZ: true\n    },\n    'Light That Burns the Sky': {\n        bp: 200,\n        type: 'Psychic',\n        category: 'Special',\n        isZ: true\n    },\n    'Malicious Moonsault': {\n        bp: 180,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        isZ: true\n    },\n    'Menacing Moonraze Maelstrom': { bp: 200, type: 'Ghost', category: 'Special', isZ: true },\n    'Mind Blown': {\n        bp: 150,\n        type: 'Fire',\n        mindBlownRecoil: true,\n        target: 'allAdjacent',\n        category: 'Special',\n        zp: 200\n    },\n    'Multi-Attack': {\n        bp: 90,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical',\n        zp: 185\n    },\n    'Nature\\'s Madness': { bp: 0, type: 'Fairy', category: 'Special', zp: 100 },\n    'Never-Ending Nightmare': { bp: 1, type: 'Ghost', category: 'Physical', isZ: true },\n    'Oceanic Operetta': { bp: 195, type: 'Water', category: 'Special', isZ: true },\n    'Psychic Terrain': { bp: 0, type: 'Psychic' },\n    'Pulverizing Pancake': {\n        bp: 210,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical',\n        isZ: true\n    },\n    'Revelation Dance': { bp: 90, type: 'Normal', category: 'Special', zp: 175 },\n    'Sappy Seed': { bp: 90, type: 'Grass', category: 'Physical', zp: 175 },\n    'Savage Spin-Out': { bp: 1, type: 'Bug', category: 'Physical', isZ: true },\n    'Searing Sunraze Smash': {\n        bp: 200,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical',\n        isZ: true\n    },\n    'Shadow Bone': {\n        bp: 85,\n        type: 'Ghost',\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    'Shattered Psyche': { bp: 1, type: 'Psychic', category: 'Physical', isZ: true },\n    'Shore Up': { bp: 0, type: 'Ground' },\n    'Sinister Arrow Raid': { bp: 180, type: 'Ghost', category: 'Physical', isZ: true },\n    'Sizzly Slide': {\n        bp: 90,\n        type: 'Fire',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 175\n    },\n    'Solar Blade': {\n        bp: 125,\n        type: 'Grass',\n        makesContact: true,\n        category: 'Physical',\n        zp: 190\n    },\n    'Soul-Stealing 7-Star Strike': {\n        bp: 195,\n        type: 'Ghost',\n        makesContact: true,\n        category: 'Physical',\n        isZ: true\n    },\n    'Sparkly Swirl': { bp: 90, type: 'Fairy', category: 'Special', zp: 175 },\n    'Splintered Stormshards': { bp: 190, type: 'Rock', category: 'Physical', isZ: true },\n    Spotlight: { bp: 0, type: 'Normal', priority: 3 },\n    'Stoked Sparksurfer': {\n        bp: 175,\n        type: 'Electric',\n        category: 'Special',\n        secondaries: true,\n        isZ: true\n    },\n    'Subzero Slammer': { bp: 1, type: 'Ice', category: 'Physical', isZ: true },\n    'Supersonic Skystrike': { bp: 1, type: 'Flying', category: 'Physical', isZ: true },\n    'Tectonic Rage': { bp: 1, type: 'Ground', category: 'Physical', isZ: true },\n    'Throat Chop': {\n        bp: 80,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    'Toxic Thread': { bp: 0, type: 'Poison' },\n    'Twinkle Tackle': { bp: 1, type: 'Fairy', category: 'Physical', isZ: true },\n    'Zippy Zap': {\n        bp: 50,\n        type: 'Electric',\n        willCrit: true,\n        priority: 2,\n        makesContact: true,\n        category: 'Physical',\n        zp: 100\n    },\n    Accelerock: {\n        bp: 40,\n        type: 'Rock',\n        priority: 1,\n        makesContact: true,\n        category: 'Physical',\n        zp: 100\n    },\n    'Anchor Shot': {\n        bp: 80,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    'Aurora Veil': { bp: 0, type: 'Ice' },\n    'Brutal Swing': {\n        bp: 60,\n        type: 'Dark',\n        makesContact: true,\n        target: 'allAdjacent',\n        category: 'Physical',\n        zp: 120\n    },\n    'Burn Up': { bp: 130, type: 'Fire', category: 'Special', zp: 195 },\n    'Clanging Scales': {\n        bp: 110,\n        type: 'Dragon',\n        isSound: true,\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        zp: 185\n    },\n    'Darkest Lariat': {\n        bp: 85,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        ignoreDefensive: true,\n        zp: 160\n    },\n    'Fire Lash': {\n        bp: 80,\n        type: 'Fire',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    'First Impression': {\n        bp: 90,\n        type: 'Bug',\n        priority: 2,\n        makesContact: true,\n        category: 'Physical',\n        zp: 175\n    },\n    'Floaty Fall': {\n        bp: 90,\n        type: 'Flying',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 175\n    },\n    'Gear Up': { bp: 0, type: 'Steel' },\n    'High Horsepower': {\n        bp: 95,\n        type: 'Ground',\n        makesContact: true,\n        category: 'Physical',\n        zp: 175\n    },\n    'Laser Focus': { bp: 0, type: 'Normal' },\n    Leafage: { bp: 40, type: 'Grass', category: 'Physical', zp: 100 },\n    Liquidation: {\n        bp: 85,\n        type: 'Water',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    Lunge: {\n        bp: 80,\n        type: 'Bug',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    'Moongeist Beam': { bp: 100, type: 'Ghost', category: 'Special', zp: 180 },\n    'Photon Geyser': {\n        bp: 100,\n        type: 'Psychic',\n        category: 'Special',\n        zp: 180\n    },\n    'Pika Papow': { bp: 0, type: 'Electric', category: 'Special', zp: 100 },\n    'Plasma Fists': {\n        bp: 100,\n        type: 'Electric',\n        makesContact: true,\n        isPunch: true,\n        category: 'Physical',\n        zp: 180\n    },\n    'Pollen Puff': {\n        bp: 90,\n        type: 'Bug',\n        category: 'Special',\n        isBullet: true,\n        zp: 175\n    },\n    'Power Trip': {\n        bp: 20,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        zp: 160\n    },\n    'Prismatic Laser': { bp: 160, type: 'Psychic', category: 'Special', zp: 200 },\n    'Psychic Fangs': {\n        bp: 85,\n        type: 'Psychic',\n        makesContact: true,\n        isBite: true,\n        category: 'Physical',\n        zp: 160\n    },\n    Purify: { bp: 0, type: 'Poison' },\n    'Shell Trap': {\n        bp: 150,\n        type: 'Fire',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        zp: 200\n    },\n    'Smart Strike': {\n        bp: 70,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical',\n        zp: 140\n    },\n    'Sparkling Aria': {\n        bp: 90,\n        type: 'Water',\n        isSound: true,\n        target: 'allAdjacent',\n        category: 'Special',\n        secondaries: true,\n        zp: 175\n    },\n    'Spectral Thief': {\n        bp: 90,\n        type: 'Ghost',\n        makesContact: true,\n        category: 'Physical',\n        zp: 175\n    },\n    'Speed Swap': { bp: 0, type: 'Psychic' },\n    'Spirit Shackle': {\n        bp: 80,\n        type: 'Ghost',\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    },\n    'Splishy Splash': {\n        bp: 90,\n        type: 'Water',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true,\n        zp: 175\n    },\n    'Stomping Tantrum': {\n        bp: 75,\n        type: 'Ground',\n        makesContact: true,\n        category: 'Physical',\n        zp: 140\n    },\n    'Strength Sap': { bp: 0, type: 'Grass' },\n    'Sunsteel Strike': {\n        bp: 100,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical',\n        zp: 180\n    },\n    'Tearful Look': { bp: 0, type: 'Normal' },\n    'Trop Kick': {\n        bp: 70,\n        type: 'Grass',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 140\n    },\n    'Veevee Volley': {\n        bp: 0,\n        type: 'Normal',\n        makesContact: true,\n        category: 'Physical',\n        zp: 100\n    },\n    'Zing Zap': {\n        bp: 80,\n        type: 'Electric',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 160\n    }\n};\nvar SM = (0, util_1.extend)(true, {}, XY, SM_PATCH);\nvar SS_PATCH = {\n    'Apple Acid': {\n        bp: 80,\n        type: 'Grass',\n        category: 'Special',\n        secondaries: true,\n        zp: 160,\n        maxPower: 130\n    },\n    'Astral Barrage': {\n        bp: 120,\n        type: 'Ghost',\n        category: 'Special',\n        target: 'allAdjacentFoes',\n        zp: 190,\n        maxPower: 140\n    },\n    'Aura Wheel': {\n        bp: 110,\n        type: 'Electric',\n        category: 'Physical',\n        secondaries: true,\n        zp: 185,\n        maxPower: 140\n    },\n    'Behemoth Bash': {\n        bp: 100,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical',\n        zp: 180,\n        maxPower: 130\n    },\n    'Behemoth Blade': {\n        bp: 100,\n        type: 'Steel',\n        makesContact: true,\n        category: 'Physical',\n        zp: 180,\n        maxPower: 130\n    },\n    'Body Press': {\n        bp: 80,\n        type: 'Fighting',\n        makesContact: true,\n        category: 'Physical',\n        overrideOffensiveStat: 'def',\n        zp: 160,\n        maxPower: 90\n    },\n    'Bolt Beak': {\n        bp: 85,\n        type: 'Electric',\n        makesContact: true,\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130\n    },\n    'Branch Poke': {\n        bp: 40,\n        type: 'Grass',\n        makesContact: true,\n        category: 'Physical',\n        zp: 100,\n        maxPower: 90\n    },\n    'Breaking Swipe': {\n        bp: 60,\n        type: 'Dragon',\n        makesContact: true,\n        target: 'allAdjacentFoes',\n        category: 'Physical',\n        secondaries: true,\n        zp: 120,\n        maxPower: 110\n    },\n    'Burning Jealousy': {\n        bp: 70,\n        type: 'Fire',\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        secondaries: true,\n        zp: 140,\n        maxPower: 120\n    },\n    'Clangorous Soul': { bp: 0, type: 'Dragon', isSound: true },\n    'Coaching': {\n        bp: 0,\n        type: 'Fighting',\n        category: 'Status'\n    },\n    'Corrosive Gas': {\n        bp: 0,\n        type: 'Poison',\n        category: 'Status',\n        target: 'allAdjacent'\n    },\n    'Court Change': { bp: 0, type: 'Normal' },\n    Decorate: { bp: 0, type: 'Fairy' },\n    'Dragon Darts': {\n        bp: 50,\n        type: 'Dragon',\n        multihit: 2,\n        category: 'Physical',\n        zp: 100,\n        maxPower: 130\n    },\n    'Dragon Energy': {\n        bp: 150,\n        type: 'Dragon',\n        category: 'Special',\n        target: 'allAdjacentFoes',\n        zp: 200,\n        maxPower: 150\n    },\n    'Drum Beating': {\n        bp: 80,\n        type: 'Grass',\n        category: 'Physical',\n        secondaries: true,\n        zp: 160,\n        maxPower: 130\n    },\n    'Dual Wingbeat': {\n        bp: 40,\n        type: 'Flying',\n        category: 'Physical',\n        makesContact: true,\n        multihit: 2,\n        zp: 100,\n        maxPower: 130\n    },\n    'Dynamax Cannon': {\n        bp: 100,\n        type: 'Dragon',\n        category: 'Special',\n        zp: 180,\n        maxPower: 130\n    },\n    'Eerie Spell': {\n        bp: 80,\n        type: 'Psychic',\n        category: 'Special',\n        isSound: true,\n        secondaries: true,\n        zp: 160,\n        maxPower: 130\n    },\n    Eternabeam: {\n        bp: 160,\n        type: 'Dragon',\n        category: 'Special',\n        zp: 200,\n        maxPower: 150\n    },\n    'Expanding Force': {\n        bp: 80,\n        type: 'Psychic',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130\n    },\n    'False Surrender': {\n        bp: 80,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130\n    },\n    'Fiery Wrath': {\n        bp: 90,\n        type: 'Dark',\n        category: 'Special',\n        target: 'allAdjacentFoes',\n        secondaries: true,\n        zp: 175,\n        maxPower: 130\n    },\n    'Fishious Rend': {\n        bp: 85,\n        type: 'Water',\n        makesContact: true,\n        isBite: true,\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130\n    },\n    'Flip Turn': {\n        bp: 60,\n        type: 'Water',\n        category: 'Physical',\n        makesContact: true,\n        zp: 120,\n        maxPower: 110\n    },\n    'Freezing Glare': {\n        bp: 90,\n        type: 'Psychic',\n        category: 'Special',\n        secondaries: true,\n        zp: 175,\n        maxPower: 130\n    },\n    'Glacial Lance': {\n        bp: 130,\n        type: 'Ice',\n        category: 'Physical',\n        target: 'allAdjacentFoes',\n        zp: 195,\n        maxPower: 140\n    },\n    'G-Max Befuddle': {\n        bp: 10,\n        type: 'Bug',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Centiferno': {\n        bp: 10,\n        type: 'Fire',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Cannonade': {\n        bp: 10,\n        type: 'Water',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Chi Strike': {\n        bp: 10,\n        type: 'Fighting',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Cuddle': {\n        bp: 10,\n        type: 'Normal',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Depletion': {\n        bp: 10,\n        type: 'Dragon',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Drum Solo': {\n        bp: 160,\n        type: 'Grass',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Fireball': {\n        bp: 160,\n        type: 'Fire',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Finale': {\n        bp: 10,\n        type: 'Fairy',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Foam Burst': {\n        bp: 10,\n        type: 'Water',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Gold Rush': {\n        bp: 10,\n        type: 'Normal',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Gravitas': {\n        bp: 10,\n        type: 'Psychic',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Hydrosnipe': {\n        bp: 160,\n        type: 'Water',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Malodor': {\n        bp: 10,\n        type: 'Poison',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Meltdown': {\n        bp: 10,\n        type: 'Steel',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max One Blow': {\n        bp: 10,\n        type: 'Dark',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Rapid Flow': {\n        bp: 10,\n        type: 'Water',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Replenish': {\n        bp: 10,\n        type: 'Normal',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Resonance': {\n        bp: 10,\n        type: 'Ice',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Sandblast': {\n        bp: 10,\n        type: 'Ground',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Smite': {\n        bp: 10,\n        type: 'Fairy',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Snooze': {\n        bp: 10,\n        type: 'Dark',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Steelsurge': {\n        bp: 10,\n        type: 'Steel',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Stonesurge': {\n        bp: 10,\n        type: 'Water',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Stun Shock': {\n        bp: 10,\n        type: 'Electric',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Sweetness': {\n        bp: 10,\n        type: 'Grass',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Tartness': {\n        bp: 10,\n        type: 'Grass',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Terror': {\n        bp: 10,\n        type: 'Ghost',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Vine Lash': {\n        bp: 10,\n        type: 'Grass',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Volcalith': {\n        bp: 10,\n        type: 'Rock',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Volt Crash': {\n        bp: 10,\n        type: 'Electric',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Wildfire': {\n        bp: 10,\n        type: 'Fire',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'G-Max Wind Rage': {\n        bp: 10,\n        type: 'Flying',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Grassy Glide': {\n        bp: 70,\n        type: 'Grass',\n        category: 'Physical',\n        makesContact: true,\n        zp: 140,\n        maxPower: 120\n    },\n    'Grav Apple': {\n        bp: 80,\n        type: 'Grass',\n        category: 'Physical',\n        secondaries: true,\n        zp: 160,\n        maxPower: 130\n    },\n    'Jaw Lock': {\n        bp: 80,\n        type: 'Dark',\n        makesContact: true,\n        isBite: true,\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130\n    },\n    'Jungle Healing': {\n        bp: 0,\n        type: 'Grass',\n        category: 'Status'\n    },\n    'Lash Out': {\n        bp: 75,\n        type: 'Dark',\n        makesContact: true,\n        category: 'Physical',\n        zp: 140,\n        maxPower: 130\n    },\n    'Life Dew': { bp: 0, type: 'Water' },\n    'Magic Powder': { bp: 0, type: 'Psychic' },\n    'Max Airstream': {\n        bp: 10,\n        type: 'Flying',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Darkness': {\n        bp: 10,\n        type: 'Dark',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Flare': {\n        bp: 100,\n        type: 'Fire',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Flutterby': {\n        bp: 10,\n        type: 'Bug',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Geyser': {\n        bp: 10,\n        type: 'Water',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Guard': { bp: 0, type: 'Normal', priority: 4, isMax: true },\n    'Max Hailstorm': {\n        bp: 10,\n        type: 'Ice',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Knuckle': {\n        bp: 10,\n        type: 'Fighting',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Lightning': {\n        bp: 10,\n        type: 'Electric',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Mindstorm': {\n        bp: 10,\n        type: 'Psychic',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Ooze': {\n        bp: 10,\n        type: 'Poison',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Overgrowth': {\n        bp: 10,\n        type: 'Grass',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Phantasm': {\n        bp: 10,\n        type: 'Ghost',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Quake': {\n        bp: 10,\n        type: 'Ground',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Rockfall': {\n        bp: 10,\n        type: 'Rock',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Starfall': {\n        bp: 10,\n        type: 'Fairy',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Steelspike': {\n        bp: 10,\n        type: 'Steel',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Strike': {\n        bp: 10,\n        type: 'Normal',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Max Wyrmwind': {\n        bp: 10,\n        type: 'Dragon',\n        category: 'Physical',\n        isMax: true,\n        maxPower: 1\n    },\n    'Meteor Assault': {\n        bp: 150,\n        type: 'Fighting',\n        category: 'Physical',\n        zp: 200,\n        maxPower: 100\n    },\n    'Meteor Beam': {\n        bp: 120,\n        type: 'Rock',\n        category: 'Special',\n        zp: 190,\n        maxPower: 140\n    },\n    'Misty Explosion': {\n        bp: 100,\n        type: 'Fairy',\n        category: 'Special',\n        target: 'allAdjacent',\n        zp: 180,\n        maxPower: 130\n    },\n    'No Retreat': { bp: 0, type: 'Fighting' },\n    Obstruct: { bp: 0, type: 'Dark', priority: 4 },\n    Octolock: { bp: 0, type: 'Fighting' },\n    Overdrive: {\n        bp: 80,\n        type: 'Electric',\n        isSound: true,\n        target: 'allAdjacentFoes',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130\n    },\n    Poltergeist: {\n        bp: 110,\n        type: 'Ghost',\n        category: 'Physical',\n        zp: 185,\n        maxPower: 140\n    },\n    'Pyro Ball': {\n        bp: 120,\n        type: 'Fire',\n        category: 'Physical',\n        secondaries: true,\n        isBullet: true,\n        zp: 190,\n        maxPower: 140\n    },\n    'Rising Voltage': {\n        bp: 70,\n        type: 'Electric',\n        category: 'Special',\n        zp: 140,\n        maxPower: 140\n    },\n    'Scale Shot': {\n        bp: 25,\n        type: 'Dragon',\n        category: 'Physical',\n        multihit: [2, 5],\n        zp: 140,\n        maxPower: 130\n    },\n    'Shell Side Arm': {\n        bp: 90,\n        type: 'Poison',\n        category: 'Special',\n        secondaries: true,\n        zp: 175,\n        maxPower: 90\n    },\n    'Snap Trap': {\n        bp: 35,\n        type: 'Grass',\n        makesContact: true,\n        category: 'Physical',\n        zp: 100,\n        maxPower: 90\n    },\n    'Snipe Shot': {\n        bp: 80,\n        type: 'Water',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130\n    },\n    'Scorching Sands': {\n        bp: 70,\n        type: 'Ground',\n        category: 'Special',\n        secondaries: true,\n        zp: 140,\n        maxPower: 120\n    },\n    'Skitter Smack': {\n        bp: 70,\n        type: 'Bug',\n        category: 'Physical',\n        makesContact: true,\n        secondaries: true,\n        zp: 140,\n        maxPower: 120\n    },\n    'Spirit Break': {\n        bp: 75,\n        type: 'Fairy',\n        makesContact: true,\n        category: 'Physical',\n        secondaries: true,\n        zp: 140,\n        maxPower: 130\n    },\n    'Steel Beam': {\n        bp: 140,\n        type: 'Steel',\n        mindBlownRecoil: true,\n        category: 'Special',\n        zp: 200,\n        maxPower: 140\n    },\n    'Steel Roller': {\n        bp: 130,\n        type: 'Steel',\n        category: 'Physical',\n        makesContact: true,\n        zp: 195,\n        maxPower: 140\n    },\n    'Strange Steam': {\n        bp: 90,\n        type: 'Fairy',\n        category: 'Special',\n        secondaries: true,\n        zp: 175,\n        maxPower: 130\n    },\n    'Surging Strikes': {\n        bp: 25,\n        type: 'Water',\n        category: 'Physical',\n        makesContact: true,\n        willCrit: true,\n        isPunch: true,\n        multihit: 3,\n        zp: 140,\n        maxPower: 130\n    },\n    'Terrain Pulse': {\n        bp: 50,\n        type: 'Normal',\n        category: 'Special',\n        isPulse: true,\n        zp: 160,\n        maxPower: 130\n    },\n    'Triple Axel': {\n        bp: 20,\n        type: 'Ice',\n        category: 'Physical',\n        makesContact: true,\n        multihit: 3,\n        zp: 120,\n        maxPower: 140\n    },\n    'Wicked Blow': {\n        bp: 80,\n        type: 'Dark',\n        category: 'Physical',\n        makesContact: true,\n        willCrit: true,\n        isPunch: true,\n        zp: 160,\n        maxPower: 130\n    },\n    'Stuff Cheeks': { bp: 0, type: 'Normal' },\n    'Tar Shot': { bp: 0, type: 'Rock' },\n    Teatime: { bp: 0, type: 'Normal' },\n    'Thunder Cage': {\n        bp: 80,\n        type: 'Electric',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130\n    },\n    'Thunderous Kick': {\n        bp: 90,\n        type: 'Fighting',\n        category: 'Physical',\n        secondaries: true,\n        makesContact: true,\n        zp: 175,\n        maxPower: 90\n    },\n    '10,000,000 Volt Thunderbolt': { maxPower: 1 },\n    Absorb: { maxPower: 90 },\n    Accelerock: { maxPower: 90 },\n    Acid: { maxPower: 70 },\n    'Acid Downpour': { maxPower: 1 },\n    'Acid Spray': { maxPower: 70 },\n    Acrobatics: { maxPower: 110 },\n    'Aerial Ace': { maxPower: 110 },\n    Aeroblast: { maxPower: 130 },\n    'Air Cutter': { maxPower: 110 },\n    'Air Slash': { maxPower: 130 },\n    'All-Out Pummeling': { maxPower: 1 },\n    'Anchor Shot': { maxPower: 130 },\n    'Ancient Power': { maxPower: 110 },\n    'Aqua Jet': { maxPower: 90 },\n    'Aqua Tail': { maxPower: 130 },\n    'Arm Thrust': { maxPower: 70 },\n    Assurance: { maxPower: 110 },\n    Astonish: { maxPower: 90 },\n    'Attack Order': { maxPower: 130 },\n    'Aura Sphere': { maxPower: 90 },\n    'Aurora Beam': { maxPower: 120 },\n    Avalanche: { maxPower: 110 },\n    Barrage: { maxPower: 90 },\n    'Beak Blast': { maxPower: 130 },\n    'Beat Up': { maxPower: 100 },\n    Belch: { maxPower: 95 },\n    Bide: { maxPower: 100 },\n    Bind: { maxPower: 90 },\n    Bite: { maxPower: 110 },\n    'Black Hole Eclipse': { maxPower: 1 },\n    'Blast Burn': { maxPower: 150 },\n    'Blaze Kick': { maxPower: 130 },\n    Blizzard: { maxPower: 140 },\n    'Bloom Doom': { maxPower: 1 },\n    'Blue Flare': { maxPower: 140 },\n    'Body Slam': { maxPower: 130 },\n    'Bolt Strike': { maxPower: 140 },\n    'Bone Club': { maxPower: 120 },\n    Bonemerang: { maxPower: 130 },\n    'Bone Rush': { maxPower: 130 },\n    Boomburst: { maxPower: 140 },\n    Bounce: { maxPower: 130 },\n    'Brave Bird': { maxPower: 140 },\n    'Breakneck Blitz': { maxPower: 1 },\n    'Brick Break': { maxPower: 90 },\n    Brine: { maxPower: 120 },\n    'Brutal Swing': { maxPower: 110 },\n    Bubble: { maxPower: 90 },\n    'Bubble Beam': { maxPower: 120 },\n    'Bug Bite': { maxPower: 110 },\n    'Bug Buzz': { maxPower: 130 },\n    Bulldoze: { maxPower: 110 },\n    'Bullet Punch': { maxPower: 90 },\n    'Bullet Seed': { maxPower: 130 },\n    'Burn Up': { maxPower: 140 },\n    Catastropika: { maxPower: 1 },\n    'Charge Beam': { maxPower: 100 },\n    Chatter: { maxPower: 120 },\n    'Chip Away': { maxPower: 120 },\n    'Circle Throw': { maxPower: 80 },\n    Clamp: { maxPower: 90 },\n    'Clanging Scales': { maxPower: 140 },\n    'Clangorous Soulblaze': { maxPower: 1 },\n    'Clear Smog': { maxPower: 75 },\n    'Close Combat': { maxPower: 95 },\n    'Comet Punch': { maxPower: 100 },\n    Confusion: { maxPower: 100 },\n    Constrict: { maxPower: 90 },\n    'Continental Crush': { maxPower: 1 },\n    'Core Enforcer': { maxPower: 130 },\n    'Corkscrew Crash': { maxPower: 1 },\n    Counter: { maxPower: 75 },\n    Covet: { maxPower: 110 },\n    Crabhammer: { maxPower: 130 },\n    'Cross Chop': { maxPower: 90 },\n    'Cross Poison': { maxPower: 85 },\n    Crunch: { maxPower: 130 },\n    'Crush Claw': { maxPower: 130 },\n    'Crush Grip': { maxPower: 140 },\n    Cut: { maxPower: 100 },\n    'Darkest Lariat': { maxPower: 130 },\n    'Dark Pulse': { maxPower: 130 },\n    'Dazzling Gleam': { maxPower: 130 },\n    'Devastating Drake': { maxPower: 1 },\n    'Diamond Storm': { maxPower: 130 },\n    Dig: { maxPower: 130 },\n    'Disarming Voice': { maxPower: 90 },\n    Discharge: { maxPower: 130 },\n    Dive: { maxPower: 130 },\n    'Dizzy Punch': { maxPower: 120 },\n    'Doom Desire': { maxPower: 140 },\n    'Double-Edge': { maxPower: 140 },\n    'Double Hit': { maxPower: 120 },\n    'Double Iron Bash': { maxPower: 140 },\n    'Double Kick': { maxPower: 80 },\n    'Double Slap': { maxPower: 90 },\n    'Draco Meteor': { maxPower: 140 },\n    'Dragon Ascent': { maxPower: 140 },\n    'Dragon Breath': { maxPower: 110 },\n    'Dragon Claw': { maxPower: 130 },\n    'Dragon Hammer': { maxPower: 130 },\n    'Dragon Pulse': { maxPower: 130 },\n    'Dragon Rage': { maxPower: 100 },\n    'Dragon Rush': { maxPower: 130 },\n    'Dragon Tail': { maxPower: 110 },\n    'Draining Kiss': { maxPower: 100 },\n    'Drain Punch': { maxPower: 90 },\n    'Dream Eater': { maxPower: 130 },\n    'Drill Peck': { maxPower: 130 },\n    'Drill Run': { maxPower: 130 },\n    'Dual Chop': { maxPower: 130 },\n    'Dynamic Punch': { maxPower: 90 },\n    'Earth Power': { maxPower: 130 },\n    Earthquake: { maxPower: 130 },\n    'Echoed Voice': { maxPower: 90 },\n    'Egg Bomb': { maxPower: 130 },\n    'Electro Ball': { maxPower: 130 },\n    Electroweb: { maxPower: 110 },\n    Ember: { maxPower: 90 },\n    Endeavor: { maxPower: 130 },\n    'Energy Ball': { maxPower: 130 },\n    Eruption: { maxPower: 150 },\n    Explosion: { maxPower: 150 },\n    Extrasensory: { maxPower: 130 },\n    'Extreme Speed': { maxPower: 130 },\n    Facade: { maxPower: 120 },\n    'Fairy Wind': { maxPower: 90 },\n    'Fake Out': { maxPower: 90 },\n    'False Swipe': { maxPower: 90 },\n    Feint: { maxPower: 90 },\n    'Feint Attack': { maxPower: 110 },\n    'Fell Stinger': { maxPower: 100 },\n    'Fiery Dance': { maxPower: 130 },\n    'Final Gambit': { maxPower: 100 },\n    'Fire Blast': { maxPower: 140 },\n    'Fire Fang': { maxPower: 120 },\n    'Fire Lash': { maxPower: 130 },\n    'Fire Pledge': { maxPower: 130 },\n    'Fire Punch': { maxPower: 130 },\n    'Fire Spin': { maxPower: 90 },\n    'First Impression': { maxPower: 130 },\n    Fissure: { maxPower: 130 },\n    Flail: { maxPower: 130 },\n    'Flame Burst': { maxPower: 120 },\n    'Flame Charge': { maxPower: 100 },\n    'Flame Wheel': { maxPower: 110 },\n    Flamethrower: { maxPower: 130 },\n    'Flare Blitz': { maxPower: 140 },\n    'Flash Cannon': { maxPower: 130 },\n    'Fleur Cannon': { maxPower: 140 },\n    Fling: { maxPower: 100 },\n    Fly: { maxPower: 130 },\n    'Flying Press': { maxPower: 90 },\n    'Focus Blast': { maxPower: 95 },\n    'Focus Punch': { maxPower: 100 },\n    'Force Palm': { maxPower: 80 },\n    'Foul Play': { maxPower: 130 },\n    'Freeze-Dry': { maxPower: 120 },\n    'Freeze Shock': { maxPower: 140 },\n    'Frenzy Plant': { maxPower: 150 },\n    'Frost Breath': { maxPower: 110 },\n    Frustration: { maxPower: 130 },\n    'Fury Attack': { maxPower: 90 },\n    'Fury Cutter': { maxPower: 90 },\n    'Fury Swipes': { maxPower: 100 },\n    'Fusion Bolt': { maxPower: 130 },\n    'Fusion Flare': { maxPower: 130 },\n    'Future Sight': { maxPower: 140 },\n    'Gear Grind': { maxPower: 130 },\n    'Genesis Supernova': { maxPower: 1 },\n    'Giga Drain': { maxPower: 130 },\n    'Giga Impact': { maxPower: 150 },\n    'Gigavolt Havoc': { maxPower: 1 },\n    Glaciate: { maxPower: 120 },\n    'Grass Knot': { maxPower: 130 },\n    'Grass Pledge': { maxPower: 130 },\n    'Guardian of Alola': { maxPower: 1 },\n    Guillotine: { maxPower: 130 },\n    'Gunk Shot': { maxPower: 95 },\n    Gust: { maxPower: 90 },\n    'Gyro Ball': { maxPower: 130 },\n    'Hammer Arm': { maxPower: 90 },\n    Headbutt: { maxPower: 120 },\n    'Head Charge': { maxPower: 140 },\n    'Head Smash': { maxPower: 150 },\n    'Heart Stamp': { maxPower: 110 },\n    'Heat Crash': { maxPower: 130 },\n    'Heat Wave': { maxPower: 130 },\n    'Heavy Slam': { maxPower: 130 },\n    Hex: { maxPower: 120 },\n    'Hidden Power': { maxPower: 110 },\n    'Hidden Power Bug': { maxPower: 110 },\n    'Hidden Power Dark': { maxPower: 110 },\n    'Hidden Power Dragon': { maxPower: 110 },\n    'Hidden Power Electric': { maxPower: 110 },\n    'Hidden Power Fighting': { maxPower: 80 },\n    'Hidden Power Fire': { maxPower: 110 },\n    'Hidden Power Flying': { maxPower: 110 },\n    'Hidden Power Ghost': { maxPower: 110 },\n    'Hidden Power Grass': { maxPower: 110 },\n    'Hidden Power Ground': { maxPower: 110 },\n    'Hidden Power Ice': { maxPower: 110 },\n    'Hidden Power Poison': { maxPower: 80 },\n    'Hidden Power Psychic': { maxPower: 110 },\n    'Hidden Power Rock': { maxPower: 110 },\n    'Hidden Power Steel': { maxPower: 110 },\n    'Hidden Power Water': { maxPower: 110 },\n    'High Horsepower': { maxPower: 130 },\n    'High Jump Kick': { maxPower: 95 },\n    'Hold Back': { maxPower: 90 },\n    'Horn Attack': { maxPower: 120 },\n    'Horn Drill': { maxPower: 130 },\n    'Horn Leech': { maxPower: 130 },\n    Howl: { isSound: true },\n    Hurricane: { maxPower: 140 },\n    'Hydro Cannon': { maxPower: 150 },\n    'Hydro Pump': { maxPower: 140 },\n    'Hydro Vortex': { maxPower: 1 },\n    'Hyper Beam': { maxPower: 150 },\n    'Hyper Fang': { maxPower: 130 },\n    'Hyperspace Fury': { maxPower: 130 },\n    'Hyperspace Hole': { maxPower: 130 },\n    'Hyper Voice': { maxPower: 130 },\n    'Ice Ball': { maxPower: 90 },\n    'Ice Beam': { maxPower: 130 },\n    'Ice Burn': { maxPower: 140 },\n    'Ice Fang': { maxPower: 120 },\n    'Ice Hammer': { maxPower: 130 },\n    'Ice Punch': { maxPower: 130 },\n    'Ice Shard': { maxPower: 90 },\n    'Icicle Crash': { maxPower: 130 },\n    'Icicle Spear': { maxPower: 130 },\n    'Icy Wind': { maxPower: 110 },\n    Incinerate: { maxPower: 110 },\n    Inferno: { maxPower: 130 },\n    'Inferno Overdrive': { maxPower: 1 },\n    Infestation: { maxPower: 90 },\n    'Iron Head': { maxPower: 130 },\n    'Iron Tail': { maxPower: 130 },\n    Judgment: { maxPower: 130 },\n    'Jump Kick': { maxPower: 90 },\n    'Karate Chop': { maxPower: 75 },\n    'Knock Off': { maxPower: 120 },\n    'Land\\'s Wrath': { maxPower: 130 },\n    'Last Resort': { maxPower: 140 },\n    'Lava Plume': { maxPower: 130 },\n    Leafage: { maxPower: 90 },\n    'Leaf Blade': { maxPower: 130 },\n    'Leaf Storm': { maxPower: 140 },\n    'Leaf Tornado': { maxPower: 120 },\n    'Leech Life': { maxPower: 130 },\n    'Let\\'s Snuggle Forever': { maxPower: 1 },\n    Lick: { maxPower: 90 },\n    'Light of Ruin': { maxPower: 140 },\n    'Light That Burns the Sky': { maxPower: 1 },\n    Liquidation: { maxPower: 130 },\n    'Low Kick': { maxPower: 100 },\n    'Low Sweep': { maxPower: 85 },\n    Lunge: { maxPower: 130 },\n    'Luster Purge': { maxPower: 120 },\n    'Mach Punch': { maxPower: 70 },\n    'Magical Leaf': { maxPower: 110 },\n    'Magma Storm': { maxPower: 130 },\n    'Magnet Bomb': { maxPower: 110 },\n    Magnitude: { maxPower: 140 },\n    'Malicious Moonsault': { maxPower: 1 },\n    'Mega Drain': { maxPower: 90 },\n    Megahorn: { maxPower: 140 },\n    'Mega Kick': { maxPower: 140 },\n    'Mega Punch': { maxPower: 130 },\n    'Menacing Moonraze Maelstrom': { maxPower: 1 },\n    'Metal Burst': { maxPower: 100 },\n    'Metal Claw': { maxPower: 100 },\n    'Meteor Mash': { maxPower: 130 },\n    'Mind Blown': { maxPower: 150 },\n    'Mirror Coat': { maxPower: 100 },\n    'Mirror Shot': { maxPower: 120 },\n    'Mist Ball': { maxPower: 120 },\n    Moonblast: { maxPower: 130 },\n    'Moongeist Beam': { maxPower: 130 },\n    'Mud Bomb': { maxPower: 120 },\n    'Mud Shot': { maxPower: 110 },\n    'Mud-Slap': { maxPower: 90 },\n    'Muddy Water': { maxPower: 130 },\n    'Multi-Attack': { bp: 120, maxPower: 95 },\n    'Mystical Fire': { maxPower: 130 },\n    'Natural Gift': { maxPower: 130 },\n    'Nature\\'s Madness': { maxPower: 100 },\n    'Needle Arm': { maxPower: 110 },\n    'Never-Ending Nightmare': { maxPower: 1 },\n    'Night Daze': { maxPower: 130 },\n    'Night Shade': { maxPower: 100 },\n    'Night Slash': { maxPower: 120 },\n    Nuzzle: { maxPower: 90 },\n    'Oblivion Wing': { maxPower: 130 },\n    'Oceanic Operetta': { maxPower: 1 },\n    Octazooka: { maxPower: 120 },\n    'Ominous Wind': { maxPower: 110 },\n    'Origin Pulse': { maxPower: 140 },\n    Outrage: { maxPower: 140 },\n    Overheat: { maxPower: 140 },\n    'Paleo Wave': { maxPower: 130 },\n    'Parabolic Charge': { maxPower: 120 },\n    Payback: { maxPower: 100 },\n    'Pay Day': { maxPower: 90 },\n    Peck: { maxPower: 90 },\n    'Petal Blizzard': { maxPower: 130 },\n    'Petal Dance': { maxPower: 140 },\n    'Phantom Force': { maxPower: 130 },\n    'Photon Geyser': { maxPower: 130 },\n    'Pin Missile': { maxPower: 130 },\n    'Plasma Fists': { maxPower: 130 },\n    'Play Rough': { maxPower: 130 },\n    Pluck: { maxPower: 110 },\n    'Poison Fang': { maxPower: 75 },\n    'Poison Jab': { maxPower: 90 },\n    'Poison Sting': { maxPower: 70 },\n    'Poison Tail': { maxPower: 75 },\n    'Pollen Puff': { maxPower: 130 },\n    Pound: { maxPower: 90 },\n    'Powder Snow': { maxPower: 90 },\n    'Power Gem': { maxPower: 130 },\n    'Power Trip': { maxPower: 130 },\n    'Power-Up Punch': { maxPower: 70 },\n    'Power Whip': { maxPower: 140 },\n    'Precipice Blades': { maxPower: 140 },\n    Present: { maxPower: 100 },\n    'Prismatic Laser': { maxPower: 150 },\n    Psybeam: { maxPower: 120 },\n    Psychic: { maxPower: 130 },\n    'Psychic Fangs': { maxPower: 130 },\n    'Psycho Boost': { maxPower: 140 },\n    'Psycho Cut': { maxPower: 120 },\n    Psyshock: { maxPower: 130 },\n    Psystrike: { maxPower: 130 },\n    Psywave: { maxPower: 100 },\n    'Pulverizing Pancake': { maxPower: 1 },\n    Punishment: { maxPower: 130 },\n    Pursuit: { maxPower: 90 },\n    'Quick Attack': { maxPower: 90 },\n    Rage: { maxPower: 90 },\n    'Rapid Spin': { bp: 50, secondaries: true, maxPower: 100 },\n    'Razor Leaf': { maxPower: 110 },\n    'Razor Shell': { maxPower: 130 },\n    'Razor Wind': { maxPower: 130 },\n    'Relic Song': { maxPower: 130 },\n    Retaliate: { maxPower: 120 },\n    Return: { maxPower: 130 },\n    'Revelation Dance': { maxPower: 130 },\n    Revenge: { maxPower: 80 },\n    Reversal: { maxPower: 100 },\n    'Roar of Time': { maxPower: 150 },\n    'Rock Blast': { maxPower: 130 },\n    'Rock Climb': { maxPower: 130 },\n    'Rock Slide': { maxPower: 130 },\n    'Rock Smash': { maxPower: 70 },\n    'Rock Throw': { maxPower: 100 },\n    'Rock Tomb': { maxPower: 110 },\n    'Rock Wrecker': { maxPower: 150 },\n    'Rolling Kick': { maxPower: 80 },\n    Rollout: { maxPower: 90 },\n    Round: { maxPower: 110 },\n    'Sacred Fire': { maxPower: 130 },\n    'Sacred Sword': { maxPower: 90 },\n    'Sand Tomb': { maxPower: 90 },\n    'Savage Spin-Out': { maxPower: 1 },\n    Scald: { maxPower: 130 },\n    Scratch: { maxPower: 90 },\n    'Searing Shot': { maxPower: 130 },\n    'Searing Sunraze Smash': { maxPower: 1 },\n    'Secret Power': { maxPower: 120 },\n    'Secret Sword': { maxPower: 90 },\n    'Seed Bomb': { maxPower: 130 },\n    'Seed Flare': { maxPower: 140 },\n    'Seismic Toss': { maxPower: 75 },\n    'Self-Destruct': { maxPower: 150 },\n    'Shadow Ball': { maxPower: 130 },\n    'Shadow Bone': { maxPower: 130 },\n    'Shadow Claw': { maxPower: 120 },\n    'Shadow Force': { maxPower: 140 },\n    'Shadow Punch': { maxPower: 110 },\n    'Shadow Sneak': { maxPower: 90 },\n    'Shadow Strike': { maxPower: 130 },\n    'Shattered Psyche': { maxPower: 1 },\n    'Sheer Cold': { maxPower: 130 },\n    'Shell Trap': { maxPower: 150 },\n    'Shock Wave': { maxPower: 110 },\n    'Signal Beam': { maxPower: 130 },\n    'Silver Wind': { maxPower: 110 },\n    'Sinister Arrow Raid': { maxPower: 1 },\n    'Skull Bash': { maxPower: 140 },\n    'Sky Attack': { maxPower: 140 },\n    'Sky Drop': { maxPower: 110 },\n    'Sky Uppercut': { maxPower: 90 },\n    Slam: { maxPower: 130 },\n    Slash: { maxPower: 120 },\n    Sludge: { maxPower: 85 },\n    'Sludge Bomb': { maxPower: 90 },\n    'Sludge Wave': { maxPower: 90 },\n    'Smack Down': { maxPower: 100 },\n    'Smart Strike': { maxPower: 120 },\n    'Smelling Salts': { maxPower: 120 },\n    Smog: { maxPower: 70 },\n    Snarl: { maxPower: 110 },\n    Snore: { maxPower: 100 },\n    'Solar Beam': { maxPower: 140 },\n    'Solar Blade': { maxPower: 140 },\n    'Sonic Boom': { maxPower: 100 },\n    'Soul-Stealing 7-Star Strike': { maxPower: 1 },\n    'Spacial Rend': { maxPower: 130 },\n    Spark: { maxPower: 120 },\n    'Sparkling Aria': { maxPower: 130 },\n    'Spectral Thief': { maxPower: 130 },\n    'Spike Cannon': { maxPower: 120 },\n    'Spirit Shackle': { maxPower: 130 },\n    'Spit Up': { maxPower: 100 },\n    'Splintered Stormshards': { maxPower: 1 },\n    'Steam Eruption': { maxPower: 140 },\n    Steamroller: { maxPower: 120 },\n    'Steel Wing': { maxPower: 120 },\n    'Stoked Sparksurfer': { maxPower: 1 },\n    Stomp: { maxPower: 120 },\n    'Stomping Tantrum': { maxPower: 130 },\n    'Stone Edge': { maxPower: 130 },\n    'Stored Power': { maxPower: 130 },\n    'Storm Throw': { maxPower: 80 },\n    Strength: { maxPower: 130 },\n    'Struggle Bug': { maxPower: 100 },\n    Submission: { maxPower: 90 },\n    'Subzero Slammer': { maxPower: 1 },\n    'Sucker Punch': { maxPower: 120 },\n    'Sunsteel Strike': { maxPower: 130 },\n    'Super Fang': { maxPower: 100 },\n    Superpower: { maxPower: 95 },\n    'Supersonic Skystrike': { maxPower: 1 },\n    Surf: { maxPower: 130 },\n    Swift: { maxPower: 110 },\n    Synchronoise: { maxPower: 140 },\n    Tackle: { maxPower: 90 },\n    'Tail Slap': { maxPower: 130 },\n    'Take Down': { maxPower: 130 },\n    'Techno Blast': { maxPower: 140 },\n    'Tectonic Rage': { maxPower: 1 },\n    Thief: { maxPower: 110 },\n    'Thousand Arrows': { maxPower: 130 },\n    'Thousand Waves': { maxPower: 130 },\n    Thrash: { maxPower: 140 },\n    'Throat Chop': { maxPower: 130 },\n    Thunder: { maxPower: 140 },\n    Thunderbolt: { maxPower: 130 },\n    'Thunder Fang': { maxPower: 120 },\n    'Thunder Punch': { maxPower: 130 },\n    'Thunder Shock': { maxPower: 90 },\n    'Tri Attack': { maxPower: 130 },\n    'Triple Kick': { maxPower: 80 },\n    'Trop Kick': { maxPower: 120 },\n    'Trump Card': { maxPower: 130 },\n    Twineedle: { maxPower: 100 },\n    'Twinkle Tackle': { maxPower: 1 },\n    Twister: { maxPower: 90 },\n    'U-turn': { maxPower: 120 },\n    Uproar: { maxPower: 130 },\n    'Vacuum Wave': { maxPower: 70 },\n    'V-create': { maxPower: 150 },\n    Venoshock: { maxPower: 85 },\n    'Vine Whip': { maxPower: 100 },\n    'Vise Grip': { maxPower: 110 },\n    'Vital Throw': { maxPower: 85 },\n    'Volt Switch': { maxPower: 120 },\n    'Volt Tackle': { maxPower: 140 },\n    'Wake-Up Slap': { maxPower: 85 },\n    Waterfall: { maxPower: 130 },\n    'Water Gun': { maxPower: 90 },\n    'Water Pledge': { maxPower: 130 },\n    'Water Pulse': { maxPower: 110 },\n    'Water Shuriken': { maxPower: 90 },\n    'Water Spout': { maxPower: 150 },\n    'Weather Ball': { maxPower: 130 },\n    Whirlpool: { maxPower: 90 },\n    'Wild Charge': { maxPower: 130 },\n    'Wing Attack': { maxPower: 110 },\n    'Wood Hammer': { maxPower: 140 },\n    Wrap: { maxPower: 90 },\n    'Wring Out': { maxPower: 140 },\n    'X-Scissor': { maxPower: 130 },\n    'Zap Cannon': { maxPower: 140 },\n    'Zen Headbutt': { maxPower: 130 },\n    'Zing Zap': { maxPower: 130 }\n};\nvar SS = (0, util_1.extend)(true, {}, SM, SS_PATCH);\nvar LGPE_MOVES = [\n    'Baddy Bad',\n    'Bouncy Bubble',\n    'Buzzy Buzz',\n    'Freezy Frost',\n    'Glitzy Glow',\n    'Sappy Seed',\n    'Sizzly Slide',\n    'Sparkly Swirl',\n    'Zippy Zap',\n    'Floaty Fall',\n    'Pika Papow',\n    'Splishy Splash',\n    'Veevee Volley',\n];\ntry {\n    for (var LGPE_MOVES_1 = __values(LGPE_MOVES), LGPE_MOVES_1_1 = LGPE_MOVES_1.next(); !LGPE_MOVES_1_1.done; LGPE_MOVES_1_1 = LGPE_MOVES_1.next()) {\n        var m = LGPE_MOVES_1_1.value;\n        delete SS[m];\n    }\n}\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\nfinally {\n    try {\n        if (LGPE_MOVES_1_1 && !LGPE_MOVES_1_1.done && (_a = LGPE_MOVES_1[\"return\"])) _a.call(LGPE_MOVES_1);\n    }\n    finally { if (e_1) throw e_1.error; }\n}\nvar SV_PATCH = {\n    'Aerial Ace': { isSlicing: true },\n    'Air Cutter': { isSlicing: true, isWind: true },\n    'Air Slash': { isSlicing: true },\n    'Behemoth Blade': { isSlicing: true },\n    Blizzard: { isWind: true },\n    'Cross Poison': { isSlicing: true },\n    Cut: { isSlicing: true },\n    'Fairy Wind': { isWind: true },\n    'Fury Cutter': { isSlicing: true },\n    'Glacial Lance': { bp: 120, zp: 190 },\n    'Grassy Glide': { bp: 60, zp: 120, maxPower: 110 },\n    Gust: { isWind: true },\n    'Heat Wave': { isWind: true },\n    Hurricane: { isWind: true },\n    'Icy Wind': { isWind: true },\n    'Leaf Blade': { isSlicing: true },\n    'Night Slash': { isSlicing: true },\n    'Petal Blizzard': { isWind: true },\n    'Psycho Cut': { isSlicing: true },\n    'Razor Leaf': { isSlicing: true },\n    'Razor Shell': { isSlicing: true },\n    'Sacred Sword': { isSlicing: true },\n    Sandstorm: { isWind: true },\n    Slash: { isSlicing: true },\n    'Solar Blade': { isSlicing: true },\n    Tailwind: { isWind: true },\n    Twister: { isWind: true },\n    Whirlwind: { isWind: true },\n    'Wicked Blow': { bp: 75, zp: 140 },\n    'X-Scissor': { isSlicing: true },\n    'Aqua Cutter': {\n        bp: 70,\n        type: 'Water',\n        category: 'Physical',\n        zp: 140,\n        maxPower: 120,\n        isSlicing: true\n    },\n    'Aqua Step': {\n        bp: 80,\n        type: 'Water',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130,\n        secondaries: true,\n        makesContact: true\n    },\n    'Armor Cannon': {\n        bp: 120,\n        type: 'Fire',\n        category: 'Special',\n        zp: 190,\n        maxPower: 140\n    },\n    'Axe Kick': {\n        bp: 120,\n        type: 'Fighting',\n        category: 'Physical',\n        zp: 190,\n        maxPower: 95,\n        secondaries: true,\n        hasCrashDamage: true,\n        makesContact: true\n    },\n    'Barb Barrage': {\n        bp: 60,\n        type: 'Poison',\n        category: 'Physical',\n        zp: 120,\n        maxPower: 80,\n        secondaries: true\n    },\n    'Bitter Blade': {\n        bp: 90,\n        type: 'Fire',\n        category: 'Physical',\n        zp: 175,\n        maxPower: 130,\n        makesContact: true,\n        isSlicing: true,\n        drain: [1, 2]\n    },\n    'Bitter Malice': {\n        bp: 75,\n        type: 'Ghost',\n        category: 'Special',\n        zp: 140,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Blazing Torque': {\n        bp: 80,\n        type: 'Fire',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Bleakwind Storm': {\n        bp: 100,\n        type: 'Flying',\n        category: 'Special',\n        zp: 180,\n        maxPower: 130,\n        secondaries: true,\n        isWind: true,\n        target: 'allAdjacentFoes'\n    },\n    'Ceaseless Edge': {\n        bp: 65,\n        type: 'Dark',\n        category: 'Physical',\n        zp: 120,\n        maxPower: 120,\n        makesContact: true,\n        isSlicing: true,\n        secondaries: true\n    },\n    'Chilling Water': {\n        bp: 50,\n        type: 'Water',\n        category: 'Special',\n        zp: 100,\n        maxPower: 100,\n        secondaries: true\n    },\n    'Chilly Reception': {\n        bp: 0,\n        type: 'Ice',\n        category: 'Status'\n    },\n    'Chloroblast': {\n        bp: 150,\n        type: 'Grass',\n        mindBlownRecoil: true,\n        category: 'Special',\n        zp: 200,\n        maxPower: 150\n    },\n    'Collision Course': {\n        bp: 100,\n        type: 'Fighting',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 90,\n        makesContact: true\n    },\n    'Combat Torque': {\n        bp: 100,\n        type: 'Fighting',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 90,\n        secondaries: true\n    },\n    Comeuppance: {\n        bp: 0,\n        type: 'Dark',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 100,\n        makesContact: true\n    },\n    Doodle: {\n        bp: 0,\n        type: 'Normal',\n        category: 'Status'\n    },\n    'Double Shock': {\n        bp: 120,\n        type: 'Electric',\n        category: 'Physical',\n        zp: 190,\n        maxPower: 140,\n        makesContact: true\n    },\n    'Dire Claw': {\n        bp: 80,\n        type: 'Poison',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 90,\n        makesContact: true,\n        secondaries: true\n    },\n    'Electro Drift': {\n        bp: 100,\n        type: 'Electric',\n        category: 'Special',\n        zp: 180,\n        maxPower: 130,\n        makesContact: true\n    },\n    'Esper Wing': {\n        bp: 80,\n        type: 'Psychic',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Fillet Away': {\n        bp: 0,\n        type: 'Normal',\n        category: 'Status'\n    },\n    'Flower Trick': {\n        bp: 70,\n        type: 'Grass',\n        category: 'Physical',\n        willCrit: true,\n        zp: 140,\n        maxPower: 120\n    },\n    'Gigaton Hammer': {\n        bp: 160,\n        type: 'Steel',\n        category: 'Physical',\n        zp: 200,\n        maxPower: 150\n    },\n    'Glaive Rush': {\n        bp: 120,\n        type: 'Dragon',\n        category: 'Physical',\n        zp: 190,\n        maxPower: 140,\n        makesContact: true\n    },\n    'Headlong Rush': {\n        bp: 120,\n        type: 'Ground',\n        category: 'Physical',\n        zp: 190,\n        maxPower: 140,\n        makesContact: true,\n        isPunch: true\n    },\n    'Hyper Drill': {\n        bp: 100,\n        type: 'Normal',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 130,\n        makesContact: true,\n        breaksProtect: true\n    },\n    'Ice Spinner': {\n        bp: 80,\n        type: 'Ice',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130,\n        makesContact: true\n    },\n    'Infernal Parade': {\n        bp: 60,\n        type: 'Ghost',\n        category: 'Special',\n        zp: 120,\n        maxPower: 110,\n        secondaries: true\n    },\n    'Jet Punch': {\n        bp: 60,\n        type: 'Water',\n        category: 'Physical',\n        zp: 120,\n        maxPower: 110,\n        makesContact: true,\n        isPunch: true,\n        priority: 1\n    },\n    'Kowtow Cleave': {\n        bp: 85,\n        type: 'Dark',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130,\n        makesContact: true,\n        isSlicing: true\n    },\n    'Last Respects': {\n        bp: 50,\n        type: 'Ghost',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 100\n    },\n    'Lumina Crash': {\n        bp: 80,\n        type: 'Psychic',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Lunar Blessing': {\n        bp: 0,\n        type: 'Psychic',\n        category: 'Status'\n    },\n    'Magical Torque': {\n        bp: 100,\n        type: 'Fairy',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Make It Rain': {\n        bp: 120,\n        type: 'Steel',\n        category: 'Special',\n        zp: 190,\n        maxPower: 140,\n        target: 'allAdjacentFoes',\n        self: { boosts: { spa: -1 } }\n    },\n    'Mortal Spin': {\n        bp: 30,\n        type: 'Poison',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 70,\n        makesContact: true,\n        secondaries: true,\n        target: 'allAdjacentFoes'\n    },\n    'Mountain Gale': {\n        bp: 100,\n        type: 'Ice',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Mystical Power': {\n        bp: 70,\n        type: 'Psychic',\n        category: 'Special',\n        zp: 140,\n        maxPower: 120,\n        secondaries: true\n    },\n    'Noxious Torque': {\n        bp: 100,\n        type: 'Poison',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 90,\n        secondaries: true\n    },\n    'Order Up': {\n        bp: 80,\n        type: 'Dragon',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130,\n        isPulse: true\n    },\n    'Population Bomb': {\n        bp: 20,\n        type: 'Normal',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 90,\n        makesContact: true,\n        isSlicing: true,\n        multihit: 10\n    },\n    Pounce: {\n        bp: 50,\n        type: 'Bug',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 100,\n        makesContact: true,\n        secondaries: true\n    },\n    'Power Shift': {\n        bp: 0,\n        type: 'Normal',\n        category: 'Status'\n    },\n    'Psyshield Bash': {\n        bp: 70,\n        type: 'Psychic',\n        category: 'Physical',\n        zp: 140,\n        maxPower: 120,\n        makesContact: true,\n        secondaries: true\n    },\n    'Rage Fist': {\n        bp: 50,\n        type: 'Ghost',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 100,\n        makesContact: true,\n        isPunch: true\n    },\n    'Raging Bull': {\n        bp: 90,\n        type: 'Normal',\n        category: 'Physical',\n        zp: 175,\n        maxPower: 130,\n        makesContact: true\n    },\n    'Raging Fury': {\n        bp: 120,\n        type: 'Fire',\n        category: 'Physical',\n        zp: 190,\n        maxPower: 140\n    },\n    'Revival Blessing': {\n        bp: 0,\n        type: 'Normal',\n        category: 'Status'\n    },\n    Ruination: {\n        bp: 0,\n        type: 'Dark',\n        category: 'Special',\n        zp: 100,\n        maxPower: 100\n    },\n    'Salt Cure': {\n        bp: 40,\n        type: 'Rock',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 90,\n        secondaries: true\n    },\n    'Sandsear Storm': {\n        bp: 100,\n        type: 'Ground',\n        category: 'Special',\n        zp: 180,\n        maxPower: 130,\n        secondaries: true,\n        isWind: true,\n        target: 'allAdjacentFoes'\n    },\n    'Shed Tail': {\n        bp: 0,\n        type: 'Normal',\n        category: 'Status'\n    },\n    Shelter: {\n        bp: 0,\n        type: 'Steel',\n        category: 'Status'\n    },\n    'Silk Trap': {\n        bp: 0,\n        type: 'Bug',\n        category: 'Status',\n        priority: 4\n    },\n    Snowscape: {\n        bp: 0,\n        type: 'Ice',\n        category: 'Status'\n    },\n    'Spicy Extract': {\n        bp: 0,\n        type: 'Grass',\n        category: 'Status'\n    },\n    'Spin Out': {\n        bp: 100,\n        type: 'Steel',\n        category: 'Physical',\n        zp: 180,\n        maxPower: 130,\n        makesContact: true\n    },\n    'Springtide Storm': {\n        bp: 100,\n        type: 'Fairy',\n        category: 'Special',\n        zp: 180,\n        maxPower: 130,\n        secondaries: true,\n        isWind: true,\n        target: 'allAdjacentFoes'\n    },\n    'Stone Axe': {\n        bp: 65,\n        type: 'Rock',\n        category: 'Physical',\n        zp: 120,\n        maxPower: 120,\n        makesContact: true,\n        isSlicing: true,\n        secondaries: true\n    },\n    'Take Heart': {\n        bp: 0,\n        type: 'Psychic',\n        category: 'Status'\n    },\n    'Tera Blast': {\n        bp: 80,\n        type: 'Normal',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130\n    },\n    'Tidy Up': {\n        bp: 0,\n        type: 'Normal',\n        category: 'Status'\n    },\n    'Torch Song': {\n        bp: 80,\n        type: 'Fire',\n        category: 'Special',\n        zp: 160,\n        maxPower: 130,\n        secondaries: true,\n        isSound: true\n    },\n    Trailblaze: {\n        bp: 50,\n        type: 'Grass',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 100,\n        secondaries: true,\n        makesContact: true\n    },\n    'Triple Arrows': {\n        bp: 90,\n        type: 'Fighting',\n        category: 'Physical',\n        zp: 175,\n        maxPower: 90,\n        secondaries: true\n    },\n    'Triple Dive': {\n        bp: 30,\n        type: 'Water',\n        category: 'Physical',\n        zp: 100,\n        maxPower: 90,\n        makesContact: true,\n        multihit: 3\n    },\n    'Twin Beam': {\n        bp: 40,\n        type: 'Psychic',\n        category: 'Special',\n        zp: 100,\n        maxPower: 90,\n        multihit: 2\n    },\n    'Victory Dance': {\n        bp: 0,\n        type: 'Fighting',\n        category: 'Status'\n    },\n    'Wave Crash': {\n        bp: 120,\n        type: 'Water',\n        category: 'Physical',\n        zp: 190,\n        maxPower: 140,\n        makesContact: true,\n        recoil: [33, 100]\n    },\n    'Wicked Torque': {\n        bp: 80,\n        type: 'Dark',\n        category: 'Physical',\n        zp: 160,\n        maxPower: 130,\n        secondaries: true\n    },\n    'Wildbolt Storm': {\n        bp: 100,\n        type: 'Electric',\n        category: 'Special',\n        zp: 180,\n        maxPower: 130,\n        secondaries: true,\n        isWind: true,\n        target: 'allAdjacentFoes'\n    }\n};\nvar SV = (0, util_1.extend)(true, {}, SS, SV_PATCH);\nexports.MOVES = [{}, RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\nvar Moves = (function () {\n    function Moves(gen) {\n        this.gen = gen;\n    }\n    Moves.prototype.get = function (id) {\n        return MOVES_BY_ID[this.gen][id];\n    };\n    Moves.prototype[Symbol.iterator] = function () {\n        var _a, _b, _c, _i, id;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _a = MOVES_BY_ID[this.gen];\n                    _b = [];\n                    for (_c in _a)\n                        _b.push(_c);\n                    _i = 0;\n                    _d.label = 1;\n                case 1:\n                    if (!(_i < _b.length)) return [3, 4];\n                    _c = _b[_i];\n                    if (!(_c in _a)) return [3, 3];\n                    id = _c;\n                    return [4, this.get(id)];\n                case 2:\n                    _d.sent();\n                    _d.label = 3;\n                case 3:\n                    _i++;\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    };\n    return Moves;\n}());\nexports.Moves = Moves;\nvar Move = (function () {\n    function Move(name, data, gen) {\n        this.kind = 'Move';\n        this.id = (0, util_1.toID)(name);\n        this.name = name;\n        this.flags = {};\n        if (data.makesContact)\n            this.flags.contact = 1;\n        if (data.isPunch)\n            this.flags.punch = 1;\n        if (data.isBite)\n            this.flags.bite = 1;\n        if (data.isBullet)\n            this.flags.bullet = 1;\n        if (data.isSound)\n            this.flags.sound = 1;\n        if (data.isPulse)\n            this.flags.pulse = 1;\n        if (data.isSlicing)\n            this.flags.slicing = 1;\n        if (data.isWind)\n            this.flags.wind = 1;\n        (0, util_1.assignWithout)(this, data, Move.FLAGS);\n        this.basePower = data.bp;\n        if (data.zp)\n            this.zMove = { basePower: data.zp };\n        if (data.maxPower)\n            this.maxMove = { basePower: data.maxPower };\n        if (!this.category && gen >= 4)\n            this.category = 'Status';\n        if (this.struggleRecoil)\n            delete this.recoil;\n    }\n    Move.FLAGS = new Set([\n        'bp',\n        'makesContact',\n        'isPunch',\n        'isBite',\n        'isBullet',\n        'isSound',\n        'isPulse',\n        'zp',\n        'maxPower',\n        'isSlicing',\n        'isWind',\n    ]);\n    return Move;\n}());\nvar MOVES_BY_ID = [];\nvar gen = 0;\ntry {\n    for (var MOVES_1 = __values(exports.MOVES), MOVES_1_1 = MOVES_1.next(); !MOVES_1_1.done; MOVES_1_1 = MOVES_1.next()) {\n        var moves = MOVES_1_1.value;\n        var map = {};\n        for (var move in moves) {\n            var data = moves[move];\n            var m = new Move(move, data, gen);\n            map[m.id] = m;\n        }\n        MOVES_BY_ID.push(map);\n        gen++;\n    }\n}\ncatch (e_2_1) { e_2 = { error: e_2_1 }; }\nfinally {\n    try {\n        if (MOVES_1_1 && !MOVES_1_1.done && (_b = MOVES_1[\"return\"])) _b.call(MOVES_1);\n    }\n    finally { if (e_2) throw e_2.error; }\n}\n//# sourceMappingURL=moves.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/moves.js?\n}");

/***/ }),

/***/ "./calc/dist/data/natures.js":
/*!***********************************!*\
  !*** ./calc/dist/data/natures.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexports.__esModule = true;\nexports.Natures = exports.NATURES = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nexports.NATURES = {\n    Adamant: ['atk', 'spa'],\n    Bashful: ['spa', 'spa'],\n    Bold: ['def', 'atk'],\n    Brave: ['atk', 'spe'],\n    Calm: ['spd', 'atk'],\n    Careful: ['spd', 'spa'],\n    Docile: ['def', 'def'],\n    Gentle: ['spd', 'def'],\n    Hardy: ['atk', 'atk'],\n    Hasty: ['spe', 'def'],\n    Impish: ['def', 'spa'],\n    Jolly: ['spe', 'spa'],\n    Lax: ['def', 'spd'],\n    Lonely: ['atk', 'def'],\n    Mild: ['spa', 'def'],\n    Modest: ['spa', 'atk'],\n    Naive: ['spe', 'spd'],\n    Naughty: ['atk', 'spd'],\n    Quiet: ['spa', 'spe'],\n    Quirky: ['spd', 'spd'],\n    Rash: ['spa', 'spd'],\n    Relaxed: ['def', 'spe'],\n    Sassy: ['spd', 'spe'],\n    Serious: ['spe', 'spe'],\n    Timid: ['spe', 'atk']\n};\nvar Natures = (function () {\n    function Natures() {\n    }\n    Natures.prototype.get = function (id) {\n        return NATURES_BY_ID[id];\n    };\n    Natures.prototype[Symbol.iterator] = function () {\n        var _a, _b, _c, _i, id;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _a = NATURES_BY_ID;\n                    _b = [];\n                    for (_c in _a)\n                        _b.push(_c);\n                    _i = 0;\n                    _d.label = 1;\n                case 1:\n                    if (!(_i < _b.length)) return [3, 4];\n                    _c = _b[_i];\n                    if (!(_c in _a)) return [3, 3];\n                    id = _c;\n                    return [4, this.get(id)];\n                case 2:\n                    _d.sent();\n                    _d.label = 3;\n                case 3:\n                    _i++;\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    };\n    return Natures;\n}());\nexports.Natures = Natures;\nvar Nature = (function () {\n    function Nature(name, _a) {\n        var _b = __read(_a, 2), plus = _b[0], minus = _b[1];\n        this.kind = 'Nature';\n        this.id = (0, util_1.toID)(name);\n        this.name = name;\n        this.plus = plus;\n        this.minus = minus;\n    }\n    return Nature;\n}());\nvar NATURES_BY_ID = {};\nfor (var nature in exports.NATURES) {\n    var n = new Nature(nature, exports.NATURES[nature]);\n    NATURES_BY_ID[n.id] = n;\n}\n//# sourceMappingURL=natures.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/natures.js?\n}");

/***/ }),

/***/ "./calc/dist/data/species.js":
/*!***********************************!*\
  !*** ./calc/dist/data/species.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar e_1, _a;\nexports.__esModule = true;\nexports.Species = exports.SPECIES = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar RBY = {\n    Abra: {\n        types: ['Psychic'],\n        bs: { hp: 25, at: 20, df: 15, sp: 90, sl: 105 },\n        weightkg: 19.5,\n        nfe: true\n    },\n    Aerodactyl: {\n        types: ['Rock', 'Flying'],\n        bs: { hp: 80, at: 105, df: 65, sp: 130, sl: 60 },\n        weightkg: 59\n    },\n    Alakazam: {\n        types: ['Psychic'],\n        bs: { hp: 55, at: 50, df: 45, sp: 120, sl: 135 },\n        weightkg: 48\n    },\n    Arbok: { types: ['Poison'], bs: { hp: 60, at: 85, df: 69, sp: 80, sl: 65 }, weightkg: 65 },\n    Arcanine: {\n        types: ['Fire'],\n        bs: { hp: 90, at: 110, df: 80, sp: 95, sl: 80 },\n        weightkg: 155\n    },\n    Articuno: {\n        types: ['Ice', 'Flying'],\n        bs: { hp: 90, at: 85, df: 100, sp: 85, sl: 125 },\n        weightkg: 55.4\n    },\n    Beedrill: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 65, at: 80, df: 40, sp: 75, sl: 45 },\n        weightkg: 29.5\n    },\n    Bellsprout: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 50, at: 75, df: 35, sp: 40, sl: 70 },\n        weightkg: 4,\n        nfe: true\n    },\n    Blastoise: {\n        types: ['Water'],\n        bs: { hp: 79, at: 83, df: 100, sp: 78, sl: 85 },\n        weightkg: 85.5\n    },\n    Bulbasaur: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 45, at: 49, df: 49, sp: 45, sl: 65 },\n        weightkg: 6.9,\n        nfe: true\n    },\n    Butterfree: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 60, at: 45, df: 50, sp: 70, sl: 80 },\n        weightkg: 32\n    },\n    Caterpie: {\n        types: ['Bug'],\n        bs: { hp: 45, at: 30, df: 35, sp: 45, sl: 20 },\n        weightkg: 2.9,\n        nfe: true\n    },\n    Chansey: {\n        types: ['Normal'],\n        bs: { hp: 250, at: 5, df: 5, sp: 50, sl: 105 },\n        weightkg: 34.6\n    },\n    Charizard: {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 78, at: 84, df: 78, sp: 100, sl: 85 },\n        weightkg: 90.5\n    },\n    Charmander: {\n        types: ['Fire'],\n        bs: { hp: 39, at: 52, df: 43, sp: 65, sl: 50 },\n        weightkg: 8.5,\n        nfe: true\n    },\n    Charmeleon: {\n        types: ['Fire'],\n        bs: { hp: 58, at: 64, df: 58, sp: 80, sl: 65 },\n        weightkg: 19,\n        nfe: true\n    },\n    Clefable: { types: ['Normal'], bs: { hp: 95, at: 70, df: 73, sp: 60, sl: 85 }, weightkg: 40 },\n    Clefairy: {\n        types: ['Normal'],\n        bs: { hp: 70, at: 45, df: 48, sp: 35, sl: 60 },\n        weightkg: 7.5,\n        nfe: true\n    },\n    Cloyster: {\n        types: ['Water', 'Ice'],\n        bs: { hp: 50, at: 95, df: 180, sp: 70, sl: 85 },\n        weightkg: 132.5\n    },\n    Cubone: {\n        types: ['Ground'],\n        bs: { hp: 50, at: 50, df: 95, sp: 35, sl: 40 },\n        weightkg: 6.5,\n        nfe: true\n    },\n    Dewgong: {\n        types: ['Water', 'Ice'],\n        bs: { hp: 90, at: 70, df: 80, sp: 70, sl: 95 },\n        weightkg: 120\n    },\n    Diglett: {\n        types: ['Ground'],\n        bs: { hp: 10, at: 55, df: 25, sp: 95, sl: 45 },\n        weightkg: 0.8,\n        nfe: true\n    },\n    Ditto: { types: ['Normal'], bs: { hp: 48, at: 48, df: 48, sp: 48, sl: 48 }, weightkg: 4 },\n    Dodrio: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 60, at: 110, df: 70, sp: 100, sl: 60 },\n        weightkg: 85.2\n    },\n    Doduo: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 35, at: 85, df: 45, sp: 75, sl: 35 },\n        weightkg: 39.2,\n        nfe: true\n    },\n    Dragonair: {\n        types: ['Dragon'],\n        bs: { hp: 61, at: 84, df: 65, sp: 70, sl: 70 },\n        weightkg: 16.5,\n        nfe: true\n    },\n    Dragonite: {\n        types: ['Dragon', 'Flying'],\n        bs: { hp: 91, at: 134, df: 95, sp: 80, sl: 100 },\n        weightkg: 210\n    },\n    Dratini: {\n        types: ['Dragon'],\n        bs: { hp: 41, at: 64, df: 45, sp: 50, sl: 50 },\n        weightkg: 3.3,\n        nfe: true\n    },\n    Drowzee: {\n        types: ['Psychic'],\n        bs: { hp: 60, at: 48, df: 45, sp: 42, sl: 90 },\n        weightkg: 32.4,\n        nfe: true\n    },\n    Dugtrio: {\n        types: ['Ground'],\n        bs: { hp: 35, at: 80, df: 50, sp: 120, sl: 70 },\n        weightkg: 33.3\n    },\n    Eevee: {\n        types: ['Normal'],\n        bs: { hp: 55, at: 55, df: 50, sp: 55, sl: 65 },\n        weightkg: 6.5,\n        nfe: true\n    },\n    Ekans: {\n        types: ['Poison'],\n        bs: { hp: 35, at: 60, df: 44, sp: 55, sl: 40 },\n        weightkg: 6.9,\n        nfe: true\n    },\n    Electabuzz: {\n        types: ['Electric'],\n        bs: { hp: 65, at: 83, df: 57, sp: 105, sl: 85 },\n        weightkg: 30\n    },\n    Electrode: {\n        types: ['Electric'],\n        bs: { hp: 60, at: 50, df: 70, sp: 140, sl: 80 },\n        weightkg: 66.6\n    },\n    Exeggcute: {\n        types: ['Grass', 'Psychic'],\n        bs: { hp: 60, at: 40, df: 80, sp: 40, sl: 60 },\n        weightkg: 2.5,\n        nfe: true\n    },\n    Exeggutor: {\n        types: ['Grass', 'Psychic'],\n        bs: { hp: 95, at: 95, df: 85, sp: 55, sl: 125 },\n        weightkg: 120\n    },\n    'Farfetch\\u2019d': {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 52, at: 65, df: 55, sp: 60, sl: 58 },\n        weightkg: 15\n    },\n    Fearow: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 65, at: 90, df: 65, sp: 100, sl: 61 },\n        weightkg: 38\n    },\n    Flareon: { types: ['Fire'], bs: { hp: 65, at: 130, df: 60, sp: 65, sl: 110 }, weightkg: 25 },\n    Gastly: {\n        types: ['Ghost', 'Poison'],\n        bs: { hp: 30, at: 35, df: 30, sp: 80, sl: 100 },\n        weightkg: 0.1,\n        nfe: true\n    },\n    Gengar: {\n        types: ['Ghost', 'Poison'],\n        bs: { hp: 60, at: 65, df: 60, sp: 110, sl: 130 },\n        weightkg: 40.5\n    },\n    Geodude: {\n        types: ['Rock', 'Ground'],\n        bs: { hp: 40, at: 80, df: 100, sp: 20, sl: 30 },\n        weightkg: 20,\n        nfe: true\n    },\n    Gloom: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 60, at: 65, df: 70, sp: 40, sl: 85 },\n        weightkg: 8.6,\n        nfe: true\n    },\n    Golbat: {\n        types: ['Poison', 'Flying'],\n        bs: { hp: 75, at: 80, df: 70, sp: 90, sl: 75 },\n        weightkg: 55\n    },\n    Goldeen: {\n        types: ['Water'],\n        bs: { hp: 45, at: 67, df: 60, sp: 63, sl: 50 },\n        weightkg: 15,\n        nfe: true\n    },\n    Golduck: { types: ['Water'], bs: { hp: 80, at: 82, df: 78, sp: 85, sl: 80 }, weightkg: 76.6 },\n    Golem: {\n        types: ['Rock', 'Ground'],\n        bs: { hp: 80, at: 110, df: 130, sp: 45, sl: 55 },\n        weightkg: 300\n    },\n    Graveler: {\n        types: ['Rock', 'Ground'],\n        bs: { hp: 55, at: 95, df: 115, sp: 35, sl: 45 },\n        weightkg: 105,\n        nfe: true\n    },\n    Grimer: {\n        types: ['Poison'],\n        bs: { hp: 80, at: 80, df: 50, sp: 25, sl: 40 },\n        weightkg: 30,\n        nfe: true\n    },\n    Growlithe: {\n        types: ['Fire'],\n        bs: { hp: 55, at: 70, df: 45, sp: 60, sl: 50 },\n        weightkg: 19,\n        nfe: true\n    },\n    Gyarados: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 95, at: 125, df: 79, sp: 81, sl: 100 },\n        weightkg: 235\n    },\n    Haunter: {\n        types: ['Ghost', 'Poison'],\n        bs: { hp: 45, at: 50, df: 45, sp: 95, sl: 115 },\n        weightkg: 0.1,\n        nfe: true\n    },\n    Hitmonchan: {\n        types: ['Fighting'],\n        bs: { hp: 50, at: 105, df: 79, sp: 76, sl: 35 },\n        weightkg: 50.2\n    },\n    Hitmonlee: {\n        types: ['Fighting'],\n        bs: { hp: 50, at: 120, df: 53, sp: 87, sl: 35 },\n        weightkg: 49.8\n    },\n    Horsea: {\n        types: ['Water'],\n        bs: { hp: 30, at: 40, df: 70, sp: 60, sl: 70 },\n        weightkg: 8,\n        nfe: true\n    },\n    Hypno: {\n        types: ['Psychic'],\n        bs: { hp: 85, at: 73, df: 70, sp: 67, sl: 115 },\n        weightkg: 75.6\n    },\n    Ivysaur: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 60, at: 62, df: 63, sp: 60, sl: 80 },\n        weightkg: 13,\n        nfe: true\n    },\n    Jigglypuff: {\n        types: ['Normal'],\n        bs: { hp: 115, at: 45, df: 20, sp: 20, sl: 25 },\n        weightkg: 5.5,\n        nfe: true\n    },\n    Jolteon: {\n        types: ['Electric'],\n        bs: { hp: 65, at: 65, df: 60, sp: 130, sl: 110 },\n        weightkg: 24.5\n    },\n    Jynx: {\n        types: ['Ice', 'Psychic'],\n        bs: { hp: 65, at: 50, df: 35, sp: 95, sl: 95 },\n        weightkg: 40.6\n    },\n    Kabuto: {\n        types: ['Rock', 'Water'],\n        bs: { hp: 30, at: 80, df: 90, sp: 55, sl: 45 },\n        weightkg: 11.5,\n        nfe: true\n    },\n    Kabutops: {\n        types: ['Rock', 'Water'],\n        bs: { hp: 60, at: 115, df: 105, sp: 80, sl: 70 },\n        weightkg: 40.5\n    },\n    Kadabra: {\n        types: ['Psychic'],\n        bs: { hp: 40, at: 35, df: 30, sp: 105, sl: 120 },\n        weightkg: 56.5,\n        nfe: true\n    },\n    Kakuna: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 45, at: 25, df: 50, sp: 35, sl: 25 },\n        weightkg: 10,\n        nfe: true\n    },\n    Kangaskhan: {\n        types: ['Normal'],\n        bs: { hp: 105, at: 95, df: 80, sp: 90, sl: 40 },\n        weightkg: 80\n    },\n    Kingler: { types: ['Water'], bs: { hp: 55, at: 130, df: 115, sp: 75, sl: 50 }, weightkg: 60 },\n    Koffing: {\n        types: ['Poison'],\n        bs: { hp: 40, at: 65, df: 95, sp: 35, sl: 60 },\n        weightkg: 1,\n        nfe: true\n    },\n    Krabby: {\n        types: ['Water'],\n        bs: { hp: 30, at: 105, df: 90, sp: 50, sl: 25 },\n        weightkg: 6.5,\n        nfe: true\n    },\n    Lapras: {\n        types: ['Water', 'Ice'],\n        bs: { hp: 130, at: 85, df: 80, sp: 60, sl: 95 },\n        weightkg: 220\n    },\n    Lickitung: {\n        types: ['Normal'],\n        bs: { hp: 90, at: 55, df: 75, sp: 30, sl: 60 },\n        weightkg: 65.5\n    },\n    Machamp: {\n        types: ['Fighting'],\n        bs: { hp: 90, at: 130, df: 80, sp: 55, sl: 65 },\n        weightkg: 130\n    },\n    Machoke: {\n        types: ['Fighting'],\n        bs: { hp: 80, at: 100, df: 70, sp: 45, sl: 50 },\n        weightkg: 70.5,\n        nfe: true\n    },\n    Machop: {\n        types: ['Fighting'],\n        bs: { hp: 70, at: 80, df: 50, sp: 35, sl: 35 },\n        weightkg: 19.5,\n        nfe: true\n    },\n    Magikarp: {\n        types: ['Water'],\n        bs: { hp: 20, at: 10, df: 55, sp: 80, sl: 20 },\n        weightkg: 10,\n        nfe: true\n    },\n    Magmar: {\n        types: ['Fire'],\n        bs: { hp: 65, at: 95, df: 57, sp: 93, sl: 85 },\n        weightkg: 44.5\n    },\n    Magnemite: {\n        types: ['Electric'],\n        bs: { hp: 25, at: 35, df: 70, sp: 45, sl: 95 },\n        weightkg: 6,\n        nfe: true\n    },\n    Magneton: {\n        types: ['Electric'],\n        bs: { hp: 50, at: 60, df: 95, sp: 70, sl: 120 },\n        weightkg: 60\n    },\n    Mankey: {\n        types: ['Fighting'],\n        bs: { hp: 40, at: 80, df: 35, sp: 70, sl: 35 },\n        weightkg: 28,\n        nfe: true\n    },\n    Marowak: { types: ['Ground'], bs: { hp: 60, at: 80, df: 110, sp: 45, sl: 50 }, weightkg: 45 },\n    Meowth: {\n        types: ['Normal'],\n        bs: { hp: 40, at: 45, df: 35, sp: 90, sl: 40 },\n        weightkg: 4.2,\n        nfe: true\n    },\n    Metapod: {\n        types: ['Bug'],\n        bs: { hp: 50, at: 20, df: 55, sp: 30, sl: 25 },\n        weightkg: 9.9,\n        nfe: true\n    },\n    Mew: {\n        types: ['Psychic'],\n        bs: { hp: 100, at: 100, df: 100, sp: 100, sl: 100 },\n        weightkg: 4\n    },\n    Mewtwo: {\n        types: ['Psychic'],\n        bs: { hp: 106, at: 110, df: 90, sp: 130, sl: 154 },\n        weightkg: 122\n    },\n    Moltres: {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 90, at: 100, df: 90, sp: 90, sl: 125 },\n        weightkg: 60\n    },\n    'Mr. Mime': {\n        types: ['Psychic'],\n        bs: { hp: 40, at: 45, df: 65, sp: 90, sl: 100 },\n        weightkg: 54.5\n    },\n    Muk: { types: ['Poison'], bs: { hp: 105, at: 105, df: 75, sp: 50, sl: 65 }, weightkg: 30 },\n    Nidoking: {\n        types: ['Poison', 'Ground'],\n        bs: { hp: 81, at: 92, df: 77, sp: 85, sl: 75 },\n        weightkg: 62\n    },\n    Nidoqueen: {\n        types: ['Poison', 'Ground'],\n        bs: { hp: 90, at: 82, df: 87, sp: 76, sl: 75 },\n        weightkg: 60\n    },\n    'Nidoran-F': {\n        types: ['Poison'],\n        bs: { hp: 55, at: 47, df: 52, sp: 41, sl: 40 },\n        weightkg: 7,\n        nfe: true\n    },\n    'Nidoran-M': {\n        types: ['Poison'],\n        bs: { hp: 46, at: 57, df: 40, sp: 50, sl: 40 },\n        weightkg: 9,\n        nfe: true\n    },\n    Nidorina: {\n        types: ['Poison'],\n        bs: { hp: 70, at: 62, df: 67, sp: 56, sl: 55 },\n        weightkg: 20,\n        nfe: true\n    },\n    Nidorino: {\n        types: ['Poison'],\n        bs: { hp: 61, at: 72, df: 57, sp: 65, sl: 55 },\n        weightkg: 19.5,\n        nfe: true\n    },\n    Ninetales: {\n        types: ['Fire'],\n        bs: { hp: 73, at: 76, df: 75, sp: 100, sl: 100 },\n        weightkg: 19.9\n    },\n    Oddish: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 45, at: 50, df: 55, sp: 30, sl: 75 },\n        weightkg: 5.4,\n        nfe: true\n    },\n    Omanyte: {\n        types: ['Rock', 'Water'],\n        bs: { hp: 35, at: 40, df: 100, sp: 35, sl: 90 },\n        weightkg: 7.5,\n        nfe: true\n    },\n    Omastar: {\n        types: ['Rock', 'Water'],\n        bs: { hp: 70, at: 60, df: 125, sp: 55, sl: 115 },\n        weightkg: 35\n    },\n    Onix: {\n        types: ['Rock', 'Ground'],\n        bs: { hp: 35, at: 45, df: 160, sp: 70, sl: 30 },\n        weightkg: 210\n    },\n    Paras: {\n        types: ['Bug', 'Grass'],\n        bs: { hp: 35, at: 70, df: 55, sp: 25, sl: 55 },\n        weightkg: 5.4,\n        nfe: true\n    },\n    Parasect: {\n        types: ['Bug', 'Grass'],\n        bs: { hp: 60, at: 95, df: 80, sp: 30, sl: 80 },\n        weightkg: 29.5\n    },\n    Persian: { types: ['Normal'], bs: { hp: 65, at: 70, df: 60, sp: 115, sl: 65 }, weightkg: 32 },\n    Pidgeot: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 83, at: 80, df: 75, sp: 91, sl: 70 },\n        weightkg: 39.5\n    },\n    Pidgeotto: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 63, at: 60, df: 55, sp: 71, sl: 50 },\n        weightkg: 30,\n        nfe: true\n    },\n    Pidgey: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 40, at: 45, df: 40, sp: 56, sl: 35 },\n        weightkg: 1.8,\n        nfe: true\n    },\n    Pikachu: {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 30, sp: 90, sl: 50 },\n        weightkg: 6,\n        nfe: true\n    },\n    Pinsir: { types: ['Bug'], bs: { hp: 65, at: 125, df: 100, sp: 85, sl: 55 }, weightkg: 55 },\n    Poliwag: {\n        types: ['Water'],\n        bs: { hp: 40, at: 50, df: 40, sp: 90, sl: 40 },\n        weightkg: 12.4,\n        nfe: true\n    },\n    Poliwhirl: {\n        types: ['Water'],\n        bs: { hp: 65, at: 65, df: 65, sp: 90, sl: 50 },\n        weightkg: 20,\n        nfe: true\n    },\n    Poliwrath: {\n        types: ['Water', 'Fighting'],\n        bs: { hp: 90, at: 85, df: 95, sp: 70, sl: 70 },\n        weightkg: 54\n    },\n    Ponyta: {\n        types: ['Fire'],\n        bs: { hp: 50, at: 85, df: 55, sp: 90, sl: 65 },\n        weightkg: 30,\n        nfe: true\n    },\n    Porygon: {\n        types: ['Normal'],\n        bs: { hp: 65, at: 60, df: 70, sp: 40, sl: 75 },\n        weightkg: 36.5\n    },\n    Primeape: {\n        types: ['Fighting'],\n        bs: { hp: 65, at: 105, df: 60, sp: 95, sl: 60 },\n        weightkg: 32\n    },\n    Psyduck: {\n        types: ['Water'],\n        bs: { hp: 50, at: 52, df: 48, sp: 55, sl: 50 },\n        weightkg: 19.6,\n        nfe: true\n    },\n    Raichu: {\n        types: ['Electric'],\n        bs: { hp: 60, at: 90, df: 55, sp: 100, sl: 90 },\n        weightkg: 30\n    },\n    Rapidash: { types: ['Fire'], bs: { hp: 65, at: 100, df: 70, sp: 105, sl: 80 }, weightkg: 95 },\n    Raticate: {\n        types: ['Normal'],\n        bs: { hp: 55, at: 81, df: 60, sp: 97, sl: 50 },\n        weightkg: 18.5\n    },\n    Rattata: {\n        types: ['Normal'],\n        bs: { hp: 30, at: 56, df: 35, sp: 72, sl: 25 },\n        weightkg: 3.5,\n        nfe: true\n    },\n    Rhydon: {\n        types: ['Ground', 'Rock'],\n        bs: { hp: 105, at: 130, df: 120, sp: 40, sl: 45 },\n        weightkg: 120\n    },\n    Rhyhorn: {\n        types: ['Ground', 'Rock'],\n        bs: { hp: 80, at: 85, df: 95, sp: 25, sl: 30 },\n        weightkg: 115,\n        nfe: true\n    },\n    Sandshrew: {\n        types: ['Ground'],\n        bs: { hp: 50, at: 75, df: 85, sp: 40, sl: 30 },\n        weightkg: 12,\n        nfe: true\n    },\n    Sandslash: {\n        types: ['Ground'],\n        bs: { hp: 75, at: 100, df: 110, sp: 65, sl: 55 },\n        weightkg: 29.5\n    },\n    Scyther: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 70, at: 110, df: 80, sp: 105, sl: 55 },\n        weightkg: 56\n    },\n    Seadra: { types: ['Water'], bs: { hp: 55, at: 65, df: 95, sp: 85, sl: 95 }, weightkg: 25 },\n    Seaking: { types: ['Water'], bs: { hp: 80, at: 92, df: 65, sp: 68, sl: 80 }, weightkg: 39 },\n    Seel: {\n        types: ['Water'],\n        bs: { hp: 65, at: 45, df: 55, sp: 45, sl: 70 },\n        weightkg: 90,\n        nfe: true\n    },\n    Shellder: {\n        types: ['Water'],\n        bs: { hp: 30, at: 65, df: 100, sp: 40, sl: 45 },\n        weightkg: 4,\n        nfe: true\n    },\n    Slowbro: {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 95, at: 75, df: 110, sp: 30, sl: 80 },\n        weightkg: 78.5\n    },\n    Slowpoke: {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 90, at: 65, df: 65, sp: 15, sl: 40 },\n        weightkg: 36,\n        nfe: true\n    },\n    Snorlax: {\n        types: ['Normal'],\n        bs: { hp: 160, at: 110, df: 65, sp: 30, sl: 65 },\n        weightkg: 460\n    },\n    Spearow: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 40, at: 60, df: 30, sp: 70, sl: 31 },\n        weightkg: 2,\n        nfe: true\n    },\n    Squirtle: {\n        types: ['Water'],\n        bs: { hp: 44, at: 48, df: 65, sp: 43, sl: 50 },\n        weightkg: 9,\n        nfe: true\n    },\n    Starmie: {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 60, at: 75, df: 85, sp: 115, sl: 100 },\n        weightkg: 80\n    },\n    Staryu: {\n        types: ['Water'],\n        bs: { hp: 30, at: 45, df: 55, sp: 85, sl: 70 },\n        weightkg: 34.5,\n        nfe: true\n    },\n    Tangela: {\n        types: ['Grass'],\n        bs: { hp: 65, at: 55, df: 115, sp: 60, sl: 100 },\n        weightkg: 35\n    },\n    Tauros: {\n        types: ['Normal'],\n        bs: { hp: 75, at: 100, df: 95, sp: 110, sl: 70 },\n        weightkg: 88.4\n    },\n    Tentacool: {\n        types: ['Water', 'Poison'],\n        bs: { hp: 40, at: 40, df: 35, sp: 70, sl: 100 },\n        weightkg: 45.5,\n        nfe: true\n    },\n    Tentacruel: {\n        types: ['Water', 'Poison'],\n        bs: { hp: 80, at: 70, df: 65, sp: 100, sl: 120 },\n        weightkg: 55\n    },\n    Vaporeon: {\n        types: ['Water'],\n        bs: { hp: 130, at: 65, df: 60, sp: 65, sl: 110 },\n        weightkg: 29\n    },\n    Venomoth: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 70, at: 65, df: 60, sp: 90, sl: 90 },\n        weightkg: 12.5\n    },\n    Venonat: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 60, at: 55, df: 50, sp: 45, sl: 40 },\n        weightkg: 30,\n        nfe: true\n    },\n    Venusaur: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 80, at: 82, df: 83, sp: 80, sl: 100 },\n        weightkg: 100\n    },\n    Victreebel: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 80, at: 105, df: 65, sp: 70, sl: 100 },\n        weightkg: 15.5\n    },\n    Vileplume: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 75, at: 80, df: 85, sp: 50, sl: 100 },\n        weightkg: 18.6\n    },\n    Voltorb: {\n        types: ['Electric'],\n        bs: { hp: 40, at: 30, df: 50, sp: 100, sl: 55 },\n        weightkg: 10.4,\n        nfe: true\n    },\n    Vulpix: {\n        types: ['Fire'],\n        bs: { hp: 38, at: 41, df: 40, sp: 65, sl: 65 },\n        weightkg: 9.9,\n        nfe: true\n    },\n    Wartortle: {\n        types: ['Water'],\n        bs: { hp: 59, at: 63, df: 80, sp: 58, sl: 65 },\n        weightkg: 22.5,\n        nfe: true\n    },\n    Weedle: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 40, at: 35, df: 30, sp: 50, sl: 20 },\n        weightkg: 3.2,\n        nfe: true\n    },\n    Weepinbell: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 65, at: 90, df: 50, sp: 55, sl: 85 },\n        weightkg: 6.4,\n        nfe: true\n    },\n    Weezing: {\n        types: ['Poison'],\n        bs: { hp: 65, at: 90, df: 120, sp: 60, sl: 85 },\n        weightkg: 9.5\n    },\n    Wigglytuff: {\n        types: ['Normal'],\n        bs: { hp: 140, at: 70, df: 45, sp: 45, sl: 50 },\n        weightkg: 12\n    },\n    Zapdos: {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 90, at: 90, df: 85, sp: 100, sl: 125 },\n        weightkg: 52.6\n    },\n    Zubat: {\n        types: ['Poison', 'Flying'],\n        bs: { hp: 40, at: 45, df: 35, sp: 55, sl: 40 },\n        weightkg: 7.5,\n        nfe: true\n    }\n};\nvar GSC_PATCH = {\n    Abra: { bs: { sa: 105, sd: 55 } },\n    Aerodactyl: { bs: { sa: 60, sd: 75 } },\n    Alakazam: { bs: { sa: 135, sd: 85 } },\n    Arbok: { bs: { sa: 65, sd: 79 } },\n    Arcanine: { bs: { sa: 100, sd: 80 } },\n    Articuno: { bs: { sa: 95, sd: 125 }, gender: 'N' },\n    Beedrill: { bs: { sa: 45, sd: 80 } },\n    Bellsprout: { bs: { sa: 70, sd: 30 } },\n    Blastoise: { bs: { sa: 85, sd: 105 } },\n    Bulbasaur: { bs: { sa: 65, sd: 65 } },\n    Butterfree: { bs: { sa: 80, sd: 80 } },\n    Caterpie: { bs: { sa: 20, sd: 20 } },\n    Chansey: { bs: { sa: 35, sd: 105 }, nfe: true },\n    Charizard: { bs: { sa: 109, sd: 85 } },\n    Charmander: { bs: { sa: 60, sd: 50 } },\n    Charmeleon: { bs: { sa: 80, sd: 65 } },\n    Clefable: { bs: { sa: 85, sd: 90 } },\n    Clefairy: { bs: { sa: 60, sd: 65 } },\n    Cloyster: { bs: { sa: 85, sd: 45 } },\n    Cubone: { bs: { sa: 40, sd: 50 } },\n    Dewgong: { bs: { sa: 70, sd: 95 } },\n    Diglett: { bs: { sa: 35, sd: 45 } },\n    Ditto: { bs: { sa: 48, sd: 48 }, gender: 'N' },\n    Dodrio: { bs: { sa: 60, sd: 60 } },\n    Doduo: { bs: { sa: 35, sd: 35 } },\n    Dragonair: { bs: { sa: 70, sd: 70 } },\n    Dragonite: { bs: { sa: 100, sd: 100 } },\n    Dratini: { bs: { sa: 50, sd: 50 } },\n    Drowzee: { bs: { sa: 43, sd: 90 } },\n    Dugtrio: { bs: { sa: 50, sd: 70 } },\n    Eevee: { bs: { sa: 45, sd: 65 } },\n    Ekans: { bs: { sa: 40, sd: 54 } },\n    Electabuzz: { bs: { sa: 95, sd: 85 } },\n    Electrode: { bs: { sa: 80, sd: 80 }, gender: 'N' },\n    Exeggcute: { bs: { sa: 60, sd: 45 } },\n    Exeggutor: { bs: { sa: 125, sd: 65 } },\n    'Farfetch\\u2019d': { bs: { sa: 58, sd: 62 } },\n    Fearow: { bs: { sa: 61, sd: 61 } },\n    Flareon: { bs: { sa: 95, sd: 110 } },\n    Gastly: { bs: { sa: 100, sd: 35 } },\n    Gengar: { bs: { sa: 130, sd: 75 } },\n    Geodude: { bs: { sa: 30, sd: 30 } },\n    Gloom: { bs: { sa: 85, sd: 75 } },\n    Golbat: { bs: { sa: 65, sd: 75 }, nfe: true },\n    Goldeen: { bs: { sa: 35, sd: 50 } },\n    Golduck: { bs: { sa: 95, sd: 80 } },\n    Golem: { bs: { sa: 55, sd: 65 } },\n    Graveler: { bs: { sa: 45, sd: 45 } },\n    Grimer: { bs: { sa: 40, sd: 50 } },\n    Growlithe: { bs: { sa: 70, sd: 50 } },\n    Gyarados: { bs: { sa: 60, sd: 100 } },\n    Haunter: { bs: { sa: 115, sd: 55 } },\n    Hitmonchan: { bs: { sa: 35, sd: 110 } },\n    Hitmonlee: { bs: { sa: 35, sd: 110 } },\n    Horsea: { bs: { sa: 70, sd: 25 } },\n    Hypno: { bs: { sa: 73, sd: 115 } },\n    Ivysaur: { bs: { sa: 80, sd: 80 } },\n    Jigglypuff: { bs: { sa: 45, sd: 25 } },\n    Jolteon: { bs: { sa: 110, sd: 95 } },\n    Jynx: { bs: { sa: 115, sd: 95 } },\n    Kabuto: { bs: { sa: 55, sd: 45 } },\n    Kabutops: { bs: { sa: 65, sd: 70 } },\n    Kadabra: { bs: { sa: 120, sd: 70 } },\n    Kakuna: { bs: { sa: 25, sd: 25 } },\n    Kangaskhan: { bs: { sa: 40, sd: 80 } },\n    Kingler: { bs: { sa: 50, sd: 50 } },\n    Koffing: { bs: { sa: 60, sd: 45 } },\n    Krabby: { bs: { sa: 25, sd: 25 } },\n    Lapras: { bs: { sa: 85, sd: 95 } },\n    Lickitung: { bs: { sa: 60, sd: 75 } },\n    Machamp: { bs: { sa: 65, sd: 85 } },\n    Machoke: { bs: { sa: 50, sd: 60 } },\n    Machop: { bs: { sa: 35, sd: 35 } },\n    Magikarp: { bs: { sa: 15, sd: 20 } },\n    Magmar: { bs: { sa: 100, sd: 85 } },\n    Magnemite: { types: ['Electric', 'Steel'], bs: { sa: 95, sd: 55 }, gender: 'N' },\n    Magneton: { types: ['Electric', 'Steel'], bs: { sa: 120, sd: 70 }, gender: 'N' },\n    Mankey: { bs: { sa: 35, sd: 45 } },\n    Marowak: { bs: { sa: 50, sd: 80 } },\n    Meowth: { bs: { sa: 40, sd: 40 } },\n    Metapod: { bs: { sa: 25, sd: 25 } },\n    Mew: { bs: { sa: 100, sd: 100 }, gender: 'N' },\n    Mewtwo: { bs: { sa: 154, sd: 90 }, gender: 'N' },\n    Moltres: { bs: { sa: 125, sd: 85 }, gender: 'N' },\n    'Mr. Mime': { bs: { sa: 100, sd: 120 } },\n    Muk: { bs: { sa: 65, sd: 100 } },\n    Nidoking: { bs: { sa: 85, sd: 75 } },\n    Nidoqueen: { bs: { sa: 75, sd: 85 } },\n    'Nidoran-F': { bs: { sa: 40, sd: 40 } },\n    'Nidoran-M': { bs: { sa: 40, sd: 40 } },\n    Nidorina: { bs: { sa: 55, sd: 55 } },\n    Nidorino: { bs: { sa: 55, sd: 55 } },\n    Ninetales: { bs: { sa: 81, sd: 100 } },\n    Oddish: { bs: { sa: 75, sd: 65 } },\n    Omanyte: { bs: { sa: 90, sd: 55 } },\n    Omastar: { bs: { sa: 115, sd: 70 } },\n    Onix: { bs: { sa: 30, sd: 45 }, nfe: true },\n    Paras: { bs: { sa: 45, sd: 55 } },\n    Parasect: { bs: { sa: 60, sd: 80 } },\n    Persian: { bs: { sa: 65, sd: 65 } },\n    Pidgeot: { bs: { sa: 70, sd: 70 } },\n    Pidgeotto: { bs: { sa: 50, sd: 50 } },\n    Pidgey: { bs: { sa: 35, sd: 35 } },\n    Pikachu: { bs: { sa: 50, sd: 40 } },\n    Pinsir: { bs: { sa: 55, sd: 70 } },\n    Poliwag: { bs: { sa: 40, sd: 40 } },\n    Poliwhirl: { bs: { sa: 50, sd: 50 } },\n    Poliwrath: { bs: { sa: 70, sd: 90 } },\n    Ponyta: { bs: { sa: 65, sd: 65 } },\n    Porygon: { bs: { sa: 85, sd: 75 }, nfe: true, gender: 'N' },\n    Primeape: { bs: { sa: 60, sd: 70 } },\n    Psyduck: { bs: { sa: 65, sd: 50 } },\n    Raichu: { bs: { sa: 90, sd: 80 } },\n    Rapidash: { bs: { sa: 80, sd: 80 } },\n    Raticate: { bs: { sa: 50, sd: 70 } },\n    Rattata: { bs: { sa: 25, sd: 35 } },\n    Rhydon: { bs: { sa: 45, sd: 45 } },\n    Rhyhorn: { bs: { sa: 30, sd: 30 } },\n    Sandshrew: { bs: { sa: 20, sd: 30 } },\n    Sandslash: { bs: { sa: 45, sd: 55 } },\n    Scyther: { bs: { sa: 55, sd: 80 }, nfe: true },\n    Seadra: { bs: { sa: 95, sd: 45 }, nfe: true },\n    Seaking: { bs: { sa: 65, sd: 80 } },\n    Seel: { bs: { sa: 45, sd: 70 } },\n    Shellder: { bs: { sa: 45, sd: 25 } },\n    Slowbro: { bs: { sa: 100, sd: 80 } },\n    Slowpoke: { bs: { sa: 40, sd: 40 } },\n    Snorlax: { bs: { sa: 65, sd: 110 } },\n    Spearow: { bs: { sa: 31, sd: 31 } },\n    Squirtle: { bs: { sa: 50, sd: 64 } },\n    Starmie: { bs: { sa: 100, sd: 85 }, gender: 'N' },\n    Staryu: { bs: { sa: 70, sd: 55 }, gender: 'N' },\n    Tangela: { bs: { sa: 100, sd: 40 } },\n    Tauros: { bs: { sa: 40, sd: 70 } },\n    Tentacool: { bs: { sa: 50, sd: 100 } },\n    Tentacruel: { bs: { sa: 80, sd: 120 } },\n    Vaporeon: { bs: { sa: 110, sd: 95 } },\n    Venomoth: { bs: { sa: 90, sd: 75 } },\n    Venonat: { bs: { sa: 40, sd: 55 } },\n    Venusaur: { bs: { sa: 100, sd: 100 } },\n    Victreebel: { bs: { sa: 100, sd: 60 } },\n    Vileplume: { bs: { sa: 100, sd: 90 } },\n    Voltorb: { bs: { sa: 55, sd: 55 }, gender: 'N' },\n    Vulpix: { bs: { sa: 50, sd: 65 } },\n    Wartortle: { bs: { sa: 65, sd: 80 } },\n    Weedle: { bs: { sa: 20, sd: 20 } },\n    Weepinbell: { bs: { sa: 85, sd: 45 } },\n    Weezing: { bs: { sa: 85, sd: 70 } },\n    Wigglytuff: { bs: { sa: 75, sd: 50 } },\n    Zapdos: { bs: { sa: 125, sd: 90 }, gender: 'N' },\n    Zubat: { bs: { sa: 30, sd: 40 } },\n    Aipom: { types: ['Normal'], bs: { hp: 55, at: 70, df: 55, sa: 40, sd: 55, sp: 85 }, weightkg: 11.5 },\n    Ampharos: {\n        types: ['Electric'],\n        bs: { hp: 90, at: 75, df: 75, sa: 115, sd: 90, sp: 55 },\n        weightkg: 61.5\n    },\n    Ariados: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 70, at: 90, df: 70, sa: 60, sd: 60, sp: 40 },\n        weightkg: 33.5\n    },\n    Azumarill: {\n        types: ['Water'],\n        bs: { hp: 100, at: 65, df: 80, sa: 50, sd: 80, sp: 50 },\n        weightkg: 28.5\n    },\n    Bayleef: {\n        types: ['Grass'],\n        bs: { hp: 60, at: 62, df: 80, sa: 63, sd: 80, sp: 60 },\n        weightkg: 15.8,\n        nfe: true\n    },\n    Bellossom: {\n        types: ['Grass'],\n        bs: { hp: 75, at: 80, df: 85, sa: 90, sd: 100, sp: 50 },\n        weightkg: 5.8\n    },\n    Blissey: {\n        types: ['Normal'],\n        bs: { hp: 255, at: 10, df: 10, sa: 75, sd: 135, sp: 55 },\n        weightkg: 46.8\n    },\n    Celebi: {\n        types: ['Psychic', 'Grass'],\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\n        weightkg: 5,\n        gender: 'N'\n    },\n    Chikorita: {\n        types: ['Grass'],\n        bs: { hp: 45, at: 49, df: 65, sa: 49, sd: 65, sp: 45 },\n        weightkg: 6.4,\n        nfe: true\n    },\n    Chinchou: {\n        types: ['Water', 'Electric'],\n        bs: { hp: 75, at: 38, df: 38, sa: 56, sd: 56, sp: 67 },\n        weightkg: 12,\n        nfe: true\n    },\n    Cleffa: {\n        types: ['Normal'],\n        bs: { hp: 50, at: 25, df: 28, sa: 45, sd: 55, sp: 15 },\n        weightkg: 3,\n        nfe: true\n    },\n    Corsola: {\n        types: ['Water', 'Rock'],\n        bs: { hp: 55, at: 55, df: 85, sa: 65, sd: 85, sp: 35 },\n        weightkg: 5\n    },\n    Crobat: {\n        types: ['Poison', 'Flying'],\n        bs: { hp: 85, at: 90, df: 80, sa: 70, sd: 80, sp: 130 },\n        weightkg: 75\n    },\n    Croconaw: {\n        types: ['Water'],\n        bs: { hp: 65, at: 80, df: 80, sa: 59, sd: 63, sp: 58 },\n        weightkg: 25,\n        nfe: true\n    },\n    Cyndaquil: {\n        types: ['Fire'],\n        bs: { hp: 39, at: 52, df: 43, sa: 60, sd: 50, sp: 65 },\n        weightkg: 7.9,\n        nfe: true\n    },\n    Delibird: {\n        types: ['Ice', 'Flying'],\n        bs: { hp: 45, at: 55, df: 45, sa: 65, sd: 45, sp: 75 },\n        weightkg: 16\n    },\n    Donphan: {\n        types: ['Ground'],\n        bs: { hp: 90, at: 120, df: 120, sa: 60, sd: 60, sp: 50 },\n        weightkg: 120\n    },\n    Dunsparce: {\n        types: ['Normal'],\n        bs: { hp: 100, at: 70, df: 70, sa: 65, sd: 65, sp: 45 },\n        weightkg: 14\n    },\n    Elekid: {\n        types: ['Electric'],\n        bs: { hp: 45, at: 63, df: 37, sa: 65, sd: 55, sp: 95 },\n        weightkg: 23.5,\n        nfe: true\n    },\n    Entei: {\n        types: ['Fire'],\n        bs: { hp: 115, at: 115, df: 85, sa: 90, sd: 75, sp: 100 },\n        weightkg: 198,\n        gender: 'N'\n    },\n    Espeon: {\n        types: ['Psychic'],\n        bs: { hp: 65, at: 65, df: 60, sa: 130, sd: 95, sp: 110 },\n        weightkg: 26.5\n    },\n    Feraligatr: {\n        types: ['Water'],\n        bs: { hp: 85, at: 105, df: 100, sa: 79, sd: 83, sp: 78 },\n        weightkg: 88.8\n    },\n    Flaaffy: {\n        types: ['Electric'],\n        bs: { hp: 70, at: 55, df: 55, sa: 80, sd: 60, sp: 45 },\n        weightkg: 13.3,\n        nfe: true\n    },\n    Forretress: {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 75, at: 90, df: 140, sa: 60, sd: 60, sp: 40 },\n        weightkg: 125.8\n    },\n    Furret: { types: ['Normal'], bs: { hp: 85, at: 76, df: 64, sa: 45, sd: 55, sp: 90 }, weightkg: 32.5 },\n    Girafarig: {\n        types: ['Normal', 'Psychic'],\n        bs: { hp: 70, at: 80, df: 65, sa: 90, sd: 65, sp: 85 },\n        weightkg: 41.5\n    },\n    Gligar: {\n        types: ['Ground', 'Flying'],\n        bs: { hp: 65, at: 75, df: 105, sa: 35, sd: 65, sp: 85 },\n        weightkg: 64.8\n    },\n    Granbull: {\n        types: ['Normal'],\n        bs: { hp: 90, at: 120, df: 75, sa: 60, sd: 60, sp: 45 },\n        weightkg: 48.7\n    },\n    Heracross: {\n        types: ['Bug', 'Fighting'],\n        bs: { hp: 80, at: 125, df: 75, sa: 40, sd: 95, sp: 85 },\n        weightkg: 54\n    },\n    Hitmontop: {\n        types: ['Fighting'],\n        bs: { hp: 50, at: 95, df: 95, sa: 35, sd: 110, sp: 70 },\n        weightkg: 48\n    },\n    'Ho-Oh': {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 106, at: 130, df: 90, sa: 110, sd: 154, sp: 90 },\n        weightkg: 199,\n        gender: 'N'\n    },\n    Hoothoot: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 60, at: 30, df: 30, sa: 36, sd: 56, sp: 50 },\n        weightkg: 21.2,\n        nfe: true\n    },\n    Hoppip: {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 35, at: 35, df: 40, sa: 35, sd: 55, sp: 50 },\n        weightkg: 0.5,\n        nfe: true\n    },\n    Houndoom: {\n        types: ['Dark', 'Fire'],\n        bs: { hp: 75, at: 90, df: 50, sa: 110, sd: 80, sp: 95 },\n        weightkg: 35\n    },\n    Houndour: {\n        types: ['Dark', 'Fire'],\n        bs: { hp: 45, at: 60, df: 30, sa: 80, sd: 50, sp: 65 },\n        weightkg: 10.8,\n        nfe: true\n    },\n    Igglybuff: {\n        types: ['Normal'],\n        bs: { hp: 90, at: 30, df: 15, sa: 40, sd: 20, sp: 15 },\n        weightkg: 1,\n        nfe: true\n    },\n    Jumpluff: {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 75, at: 55, df: 70, sa: 55, sd: 85, sp: 110 },\n        weightkg: 3\n    },\n    Kingdra: {\n        types: ['Water', 'Dragon'],\n        bs: { hp: 75, at: 95, df: 95, sa: 95, sd: 95, sp: 85 },\n        weightkg: 152\n    },\n    Lanturn: {\n        types: ['Water', 'Electric'],\n        bs: { hp: 125, at: 58, df: 58, sa: 76, sd: 76, sp: 67 },\n        weightkg: 22.5\n    },\n    Larvitar: {\n        types: ['Rock', 'Ground'],\n        bs: { hp: 50, at: 64, df: 50, sa: 45, sd: 50, sp: 41 },\n        weightkg: 72,\n        nfe: true\n    },\n    Ledian: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 55, at: 35, df: 50, sa: 55, sd: 110, sp: 85 },\n        weightkg: 35.6\n    },\n    Ledyba: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 40, at: 20, df: 30, sa: 40, sd: 80, sp: 55 },\n        weightkg: 10.8,\n        nfe: true\n    },\n    Lugia: {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 106, at: 90, df: 130, sa: 90, sd: 154, sp: 110 },\n        weightkg: 216,\n        gender: 'N'\n    },\n    Magby: {\n        types: ['Fire'],\n        bs: { hp: 45, at: 75, df: 37, sa: 70, sd: 55, sp: 83 },\n        weightkg: 21.4,\n        nfe: true\n    },\n    Magcargo: {\n        types: ['Fire', 'Rock'],\n        bs: { hp: 50, at: 50, df: 120, sa: 80, sd: 80, sp: 30 },\n        weightkg: 55\n    },\n    Mantine: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 65, at: 40, df: 70, sa: 80, sd: 140, sp: 70 },\n        weightkg: 220\n    },\n    Mareep: {\n        types: ['Electric'],\n        bs: { hp: 55, at: 40, df: 40, sa: 65, sd: 45, sp: 35 },\n        weightkg: 7.8,\n        nfe: true\n    },\n    Marill: {\n        types: ['Water'],\n        bs: { hp: 70, at: 20, df: 50, sa: 20, sd: 50, sp: 40 },\n        weightkg: 8.5,\n        nfe: true\n    },\n    Meganium: {\n        types: ['Grass'],\n        bs: { hp: 80, at: 82, df: 100, sa: 83, sd: 100, sp: 80 },\n        weightkg: 100.5\n    },\n    Miltank: {\n        types: ['Normal'],\n        bs: { hp: 95, at: 80, df: 105, sa: 40, sd: 70, sp: 100 },\n        weightkg: 75.5\n    },\n    Misdreavus: {\n        types: ['Ghost'],\n        bs: { hp: 60, at: 60, df: 60, sa: 85, sd: 85, sp: 85 },\n        weightkg: 1\n    },\n    Murkrow: {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 60, at: 85, df: 42, sa: 85, sd: 42, sp: 91 },\n        weightkg: 2.1\n    },\n    Natu: {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 40, at: 50, df: 45, sa: 70, sd: 45, sp: 70 },\n        weightkg: 2,\n        nfe: true\n    },\n    Noctowl: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 100, at: 50, df: 50, sa: 76, sd: 96, sp: 70 },\n        weightkg: 40.8\n    },\n    Octillery: {\n        types: ['Water'],\n        bs: { hp: 75, at: 105, df: 75, sa: 105, sd: 75, sp: 45 },\n        weightkg: 28.5\n    },\n    Phanpy: {\n        types: ['Ground'],\n        bs: { hp: 90, at: 60, df: 60, sa: 40, sd: 40, sp: 40 },\n        weightkg: 33.5,\n        nfe: true\n    },\n    Pichu: {\n        types: ['Electric'],\n        bs: { hp: 20, at: 40, df: 15, sa: 35, sd: 35, sp: 60 },\n        weightkg: 2,\n        nfe: true\n    },\n    Piloswine: {\n        types: ['Ice', 'Ground'],\n        bs: { hp: 100, at: 100, df: 80, sa: 60, sd: 60, sp: 50 },\n        weightkg: 55.8\n    },\n    Pineco: {\n        types: ['Bug'],\n        bs: { hp: 50, at: 65, df: 90, sa: 35, sd: 35, sp: 15 },\n        weightkg: 7.2,\n        nfe: true\n    },\n    Politoed: {\n        types: ['Water'],\n        bs: { hp: 90, at: 75, df: 75, sa: 90, sd: 100, sp: 70 },\n        weightkg: 33.9\n    },\n    Porygon2: {\n        types: ['Normal'],\n        bs: { hp: 85, at: 80, df: 90, sa: 105, sd: 95, sp: 60 },\n        weightkg: 32.5,\n        gender: 'N'\n    },\n    Pupitar: {\n        types: ['Rock', 'Ground'],\n        bs: { hp: 70, at: 84, df: 70, sa: 65, sd: 70, sp: 51 },\n        weightkg: 152,\n        nfe: true\n    },\n    Quagsire: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 95, at: 85, df: 85, sa: 65, sd: 65, sp: 35 },\n        weightkg: 75\n    },\n    Quilava: {\n        types: ['Fire'],\n        bs: { hp: 58, at: 64, df: 58, sa: 80, sd: 65, sp: 80 },\n        weightkg: 19,\n        nfe: true\n    },\n    Qwilfish: {\n        types: ['Water', 'Poison'],\n        bs: { hp: 65, at: 95, df: 75, sa: 55, sd: 55, sp: 85 },\n        weightkg: 3.9\n    },\n    Raikou: {\n        types: ['Electric'],\n        bs: { hp: 90, at: 85, df: 75, sa: 115, sd: 100, sp: 115 },\n        weightkg: 178,\n        gender: 'N'\n    },\n    Remoraid: {\n        types: ['Water'],\n        bs: { hp: 35, at: 65, df: 35, sa: 65, sd: 35, sp: 65 },\n        weightkg: 12,\n        nfe: true\n    },\n    Scizor: {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 70, at: 130, df: 100, sa: 55, sd: 80, sp: 65 },\n        weightkg: 118\n    },\n    Sentret: {\n        types: ['Normal'],\n        bs: { hp: 35, at: 46, df: 34, sa: 35, sd: 45, sp: 20 },\n        weightkg: 6,\n        nfe: true\n    },\n    Shuckle: {\n        types: ['Bug', 'Rock'],\n        bs: { hp: 20, at: 10, df: 230, sa: 10, sd: 230, sp: 5 },\n        weightkg: 20.5\n    },\n    Skarmory: {\n        types: ['Steel', 'Flying'],\n        bs: { hp: 65, at: 80, df: 140, sa: 40, sd: 70, sp: 70 },\n        weightkg: 50.5\n    },\n    Skiploom: {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 55, at: 45, df: 50, sa: 45, sd: 65, sp: 80 },\n        weightkg: 1,\n        nfe: true\n    },\n    Slowking: {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 95, at: 75, df: 80, sa: 100, sd: 110, sp: 30 },\n        weightkg: 79.5\n    },\n    Slugma: {\n        types: ['Fire'],\n        bs: { hp: 40, at: 40, df: 40, sa: 70, sd: 40, sp: 20 },\n        weightkg: 35,\n        nfe: true\n    },\n    Smeargle: { types: ['Normal'], bs: { hp: 55, at: 20, df: 35, sa: 20, sd: 45, sp: 75 }, weightkg: 58 },\n    Smoochum: {\n        types: ['Ice', 'Psychic'],\n        bs: { hp: 45, at: 30, df: 15, sa: 85, sd: 65, sp: 65 },\n        weightkg: 6,\n        nfe: true\n    },\n    Sneasel: {\n        types: ['Dark', 'Ice'],\n        bs: { hp: 55, at: 95, df: 55, sa: 35, sd: 75, sp: 115 },\n        weightkg: 28\n    },\n    Snubbull: {\n        types: ['Normal'],\n        bs: { hp: 60, at: 80, df: 50, sa: 40, sd: 40, sp: 30 },\n        weightkg: 7.8,\n        nfe: true\n    },\n    Spinarak: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 40, at: 60, df: 40, sa: 40, sd: 40, sp: 30 },\n        weightkg: 8.5,\n        nfe: true\n    },\n    Stantler: {\n        types: ['Normal'],\n        bs: { hp: 73, at: 95, df: 62, sa: 85, sd: 65, sp: 85 },\n        weightkg: 71.2\n    },\n    Steelix: {\n        types: ['Steel', 'Ground'],\n        bs: { hp: 75, at: 85, df: 200, sa: 55, sd: 65, sp: 30 },\n        weightkg: 400\n    },\n    Sudowoodo: {\n        types: ['Rock'],\n        bs: { hp: 70, at: 100, df: 115, sa: 30, sd: 65, sp: 30 },\n        weightkg: 38\n    },\n    Suicune: {\n        types: ['Water'],\n        bs: { hp: 100, at: 75, df: 115, sa: 90, sd: 115, sp: 85 },\n        weightkg: 187,\n        gender: 'N'\n    },\n    Sunflora: {\n        types: ['Grass'],\n        bs: { hp: 75, at: 75, df: 55, sa: 105, sd: 85, sp: 30 },\n        weightkg: 8.5\n    },\n    Sunkern: {\n        types: ['Grass'],\n        bs: { hp: 30, at: 30, df: 30, sa: 30, sd: 30, sp: 30 },\n        weightkg: 1.8,\n        nfe: true\n    },\n    Swinub: {\n        types: ['Ice', 'Ground'],\n        bs: { hp: 50, at: 50, df: 40, sa: 30, sd: 30, sp: 50 },\n        weightkg: 6.5,\n        nfe: true\n    },\n    Teddiursa: {\n        types: ['Normal'],\n        bs: { hp: 60, at: 80, df: 50, sa: 50, sd: 50, sp: 40 },\n        weightkg: 8.8,\n        nfe: true\n    },\n    Togepi: {\n        types: ['Normal'],\n        bs: { hp: 35, at: 20, df: 65, sa: 40, sd: 65, sp: 20 },\n        weightkg: 1.5,\n        nfe: true\n    },\n    Togetic: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 55, at: 40, df: 85, sa: 80, sd: 105, sp: 40 },\n        weightkg: 3.2\n    },\n    Totodile: {\n        types: ['Water'],\n        bs: { hp: 50, at: 65, df: 64, sa: 44, sd: 48, sp: 43 },\n        weightkg: 9.5,\n        nfe: true\n    },\n    Typhlosion: {\n        types: ['Fire'],\n        bs: { hp: 78, at: 84, df: 78, sa: 109, sd: 85, sp: 100 },\n        weightkg: 79.5\n    },\n    Tyranitar: {\n        types: ['Rock', 'Dark'],\n        bs: { hp: 100, at: 134, df: 110, sa: 95, sd: 100, sp: 61 },\n        weightkg: 202\n    },\n    Tyrogue: {\n        types: ['Fighting'],\n        bs: { hp: 35, at: 35, df: 35, sa: 35, sd: 35, sp: 35 },\n        weightkg: 21,\n        nfe: true\n    },\n    Umbreon: { types: ['Dark'], bs: { hp: 95, at: 65, df: 110, sa: 60, sd: 130, sp: 65 }, weightkg: 27 },\n    Unown: {\n        types: ['Psychic'],\n        bs: { hp: 48, at: 72, df: 48, sa: 72, sd: 48, sp: 48 },\n        weightkg: 5,\n        gender: 'N'\n    },\n    Ursaring: {\n        types: ['Normal'],\n        bs: { hp: 90, at: 130, df: 75, sa: 75, sd: 75, sp: 55 },\n        weightkg: 125.8\n    },\n    Wobbuffet: {\n        types: ['Psychic'],\n        bs: { hp: 190, at: 33, df: 58, sa: 33, sd: 58, sp: 33 },\n        weightkg: 28.5\n    },\n    Wooper: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 55, at: 45, df: 45, sa: 25, sd: 25, sp: 15 },\n        weightkg: 8.5,\n        nfe: true\n    },\n    Xatu: {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 65, at: 75, df: 70, sa: 95, sd: 70, sp: 95 },\n        weightkg: 15\n    },\n    Yanma: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 65, at: 65, df: 45, sa: 75, sd: 45, sp: 95 },\n        weightkg: 38\n    }\n};\nvar GSC = (0, util_1.extend)(true, {}, RBY, GSC_PATCH);\nvar ADV_PATCH = {\n    Abra: { abilities: { 0: 'Synchronize' } },\n    Aerodactyl: { abilities: { 0: 'Rock Head' } },\n    Alakazam: { abilities: { 0: 'Synchronize' } },\n    Arbok: { abilities: { 0: 'Intimidate' } },\n    Arcanine: { abilities: { 0: 'Intimidate' } },\n    Articuno: { abilities: { 0: 'Pressure' } },\n    Beedrill: { abilities: { 0: 'Swarm' } },\n    Bellsprout: { abilities: { 0: 'Chlorophyll' } },\n    Blastoise: { abilities: { 0: 'Torrent' } },\n    Bulbasaur: { abilities: { 0: 'Overgrow' } },\n    Butterfree: { abilities: { 0: 'Compound Eyes' } },\n    Caterpie: { abilities: { 0: 'Shield Dust' } },\n    Chansey: { abilities: { 0: 'Natural Cure' } },\n    Charizard: { abilities: { 0: 'Blaze' } },\n    Charmander: { abilities: { 0: 'Blaze' } },\n    Charmeleon: { abilities: { 0: 'Blaze' } },\n    Clefable: { abilities: { 0: 'Cute Charm' } },\n    Clefairy: { abilities: { 0: 'Cute Charm' } },\n    Cloyster: { abilities: { 0: 'Shell Armor' } },\n    Cubone: { abilities: { 0: 'Rock Head' } },\n    Dewgong: { abilities: { 0: 'Thick Fat' } },\n    Diglett: { abilities: { 0: 'Sand Veil' } },\n    Ditto: { abilities: { 0: 'Limber' } },\n    Dodrio: { abilities: { 0: 'Run Away' } },\n    Doduo: { abilities: { 0: 'Run Away' } },\n    Dragonair: { abilities: { 0: 'Shed Skin' } },\n    Dragonite: { abilities: { 0: 'Inner Focus' } },\n    Dratini: { abilities: { 0: 'Shed Skin' } },\n    Drowzee: { abilities: { 0: 'Insomnia' } },\n    Dugtrio: { abilities: { 0: 'Sand Veil' } },\n    Eevee: { abilities: { 0: 'Run Away' } },\n    Ekans: { abilities: { 0: 'Intimidate' } },\n    Electabuzz: { abilities: { 0: 'Static' } },\n    Electrode: { abilities: { 0: 'Soundproof' } },\n    Exeggcute: { abilities: { 0: 'Chlorophyll' } },\n    Exeggutor: { abilities: { 0: 'Chlorophyll' } },\n    'Farfetch\\u2019d': { abilities: { 0: 'Keen Eye' } },\n    Fearow: { abilities: { 0: 'Keen Eye' } },\n    Flareon: { abilities: { 0: 'Flash Fire' } },\n    Gastly: { abilities: { 0: 'Levitate' } },\n    Gengar: { abilities: { 0: 'Levitate' } },\n    Geodude: { abilities: { 0: 'Rock Head' } },\n    Gloom: { abilities: { 0: 'Chlorophyll' } },\n    Golbat: { abilities: { 0: 'Inner Focus' } },\n    Goldeen: { abilities: { 0: 'Swift Swim' } },\n    Golduck: { abilities: { 0: 'Damp' } },\n    Golem: { abilities: { 0: 'Rock Head' } },\n    Graveler: { abilities: { 0: 'Rock Head' } },\n    Grimer: { abilities: { 0: 'Stench' } },\n    Growlithe: { abilities: { 0: 'Intimidate' } },\n    Gyarados: { abilities: { 0: 'Intimidate' } },\n    Haunter: { abilities: { 0: 'Levitate' } },\n    Hitmonchan: { abilities: { 0: 'Keen Eye' } },\n    Hitmonlee: { abilities: { 0: 'Limber' } },\n    Horsea: { abilities: { 0: 'Swift Swim' } },\n    Hypno: { abilities: { 0: 'Insomnia' } },\n    Ivysaur: { abilities: { 0: 'Overgrow' } },\n    Jigglypuff: { abilities: { 0: 'Cute Charm' } },\n    Jolteon: { abilities: { 0: 'Volt Absorb' } },\n    Jynx: { abilities: { 0: 'Oblivious' } },\n    Kabuto: { abilities: { 0: 'Swift Swim' } },\n    Kabutops: { abilities: { 0: 'Swift Swim' } },\n    Kadabra: { abilities: { 0: 'Synchronize' } },\n    Kakuna: { abilities: { 0: 'Shed Skin' } },\n    Kangaskhan: { abilities: { 0: 'Early Bird' } },\n    Kingler: { abilities: { 0: 'Hyper Cutter' } },\n    Koffing: { abilities: { 0: 'Levitate' } },\n    Krabby: { abilities: { 0: 'Hyper Cutter' } },\n    Lapras: { abilities: { 0: 'Water Absorb' } },\n    Lickitung: { abilities: { 0: 'Own Tempo' } },\n    Machamp: { abilities: { 0: 'Guts' } },\n    Machoke: { abilities: { 0: 'Guts' } },\n    Machop: { abilities: { 0: 'Guts' } },\n    Magikarp: { abilities: { 0: 'Swift Swim' } },\n    Magmar: { abilities: { 0: 'Flame Body' } },\n    Magnemite: { abilities: { 0: 'Magnet Pull' } },\n    Magneton: { abilities: { 0: 'Magnet Pull' } },\n    Mankey: { abilities: { 0: 'Vital Spirit' } },\n    Marowak: { abilities: { 0: 'Rock Head' } },\n    Meowth: { abilities: { 0: 'Pickup' } },\n    Metapod: { abilities: { 0: 'Shed Skin' } },\n    Mew: { abilities: { 0: 'Synchronize' } },\n    Mewtwo: { abilities: { 0: 'Pressure' } },\n    Moltres: { abilities: { 0: 'Pressure' } },\n    'Mr. Mime': { abilities: { 0: 'Soundproof' } },\n    Muk: { abilities: { 0: 'Stench' } },\n    Nidoking: { abilities: { 0: 'Poison Point' } },\n    Nidoqueen: { abilities: { 0: 'Poison Point' } },\n    'Nidoran-F': { abilities: { 0: 'Poison Point' } },\n    'Nidoran-M': { abilities: { 0: 'Poison Point' } },\n    Nidorina: { abilities: { 0: 'Poison Point' } },\n    Nidorino: { abilities: { 0: 'Poison Point' } },\n    Ninetales: { abilities: { 0: 'Flash Fire' } },\n    Oddish: { abilities: { 0: 'Chlorophyll' } },\n    Omanyte: { abilities: { 0: 'Swift Swim' } },\n    Omastar: { abilities: { 0: 'Swift Swim' } },\n    Onix: { abilities: { 0: 'Rock Head' } },\n    Paras: { abilities: { 0: 'Effect Spore' } },\n    Parasect: { abilities: { 0: 'Effect Spore' } },\n    Persian: { abilities: { 0: 'Limber' } },\n    Pidgeot: { abilities: { 0: 'Keen Eye' } },\n    Pidgeotto: { abilities: { 0: 'Keen Eye' } },\n    Pidgey: { abilities: { 0: 'Keen Eye' } },\n    Pikachu: { abilities: { 0: 'Static' } },\n    Pinsir: { abilities: { 0: 'Hyper Cutter' } },\n    Poliwag: { abilities: { 0: 'Water Absorb' } },\n    Poliwhirl: { abilities: { 0: 'Water Absorb' } },\n    Poliwrath: { abilities: { 0: 'Water Absorb' } },\n    Ponyta: { abilities: { 0: 'Run Away' } },\n    Porygon: { abilities: { 0: 'Trace' } },\n    Primeape: { abilities: { 0: 'Vital Spirit' } },\n    Psyduck: { abilities: { 0: 'Damp' } },\n    Raichu: { abilities: { 0: 'Static' } },\n    Rapidash: { abilities: { 0: 'Run Away' } },\n    Raticate: { abilities: { 0: 'Run Away' } },\n    Rattata: { abilities: { 0: 'Run Away' } },\n    Rhydon: { abilities: { 0: 'Lightning Rod' } },\n    Rhyhorn: { abilities: { 0: 'Lightning Rod' } },\n    Sandshrew: { abilities: { 0: 'Sand Veil' } },\n    Sandslash: { abilities: { 0: 'Sand Veil' } },\n    Scyther: { abilities: { 0: 'Swarm' } },\n    Seadra: { abilities: { 0: 'Poison Point' } },\n    Seaking: { abilities: { 0: 'Swift Swim' } },\n    Seel: { abilities: { 0: 'Thick Fat' } },\n    Shellder: { abilities: { 0: 'Shell Armor' } },\n    Slowbro: { abilities: { 0: 'Oblivious' } },\n    Slowpoke: { abilities: { 0: 'Oblivious' } },\n    Snorlax: { abilities: { 0: 'Immunity' } },\n    Spearow: { abilities: { 0: 'Keen Eye' } },\n    Squirtle: { abilities: { 0: 'Torrent' } },\n    Starmie: { abilities: { 0: 'Illuminate' } },\n    Staryu: { abilities: { 0: 'Illuminate' } },\n    Tangela: { abilities: { 0: 'Chlorophyll' } },\n    Tauros: { abilities: { 0: 'Intimidate' } },\n    Tentacool: { abilities: { 0: 'Clear Body' } },\n    Tentacruel: { abilities: { 0: 'Clear Body' } },\n    Vaporeon: { abilities: { 0: 'Water Absorb' } },\n    Venomoth: { abilities: { 0: 'Shield Dust' } },\n    Venonat: { abilities: { 0: 'Compound Eyes' } },\n    Venusaur: { abilities: { 0: 'Overgrow' } },\n    Victreebel: { abilities: { 0: 'Chlorophyll' } },\n    Vileplume: { abilities: { 0: 'Chlorophyll' } },\n    Voltorb: { abilities: { 0: 'Soundproof' } },\n    Vulpix: { abilities: { 0: 'Flash Fire' } },\n    Wartortle: { abilities: { 0: 'Torrent' } },\n    Weedle: { abilities: { 0: 'Shield Dust' } },\n    Weepinbell: { abilities: { 0: 'Chlorophyll' } },\n    Weezing: { abilities: { 0: 'Levitate' } },\n    Wigglytuff: { abilities: { 0: 'Cute Charm' } },\n    Zapdos: { abilities: { 0: 'Pressure' } },\n    Zubat: { abilities: { 0: 'Inner Focus' } },\n    Aipom: { abilities: { 0: 'Run Away' } },\n    Ampharos: { abilities: { 0: 'Static' } },\n    Ariados: { abilities: { 0: 'Swarm' } },\n    Azumarill: { abilities: { 0: 'Thick Fat' } },\n    Bayleef: { abilities: { 0: 'Overgrow' } },\n    Bellossom: { abilities: { 0: 'Chlorophyll' } },\n    Blissey: { abilities: { 0: 'Natural Cure' } },\n    Celebi: { abilities: { 0: 'Natural Cure' } },\n    Chikorita: { abilities: { 0: 'Overgrow' } },\n    Chinchou: { abilities: { 0: 'Volt Absorb' } },\n    Cleffa: { abilities: { 0: 'Cute Charm' } },\n    Corsola: { abilities: { 0: 'Hustle' } },\n    Crobat: { abilities: { 0: 'Inner Focus' } },\n    Croconaw: { abilities: { 0: 'Torrent' } },\n    Cyndaquil: { abilities: { 0: 'Blaze' } },\n    Delibird: { abilities: { 0: 'Vital Spirit' } },\n    Donphan: { abilities: { 0: 'Sturdy' } },\n    Dunsparce: { abilities: { 0: 'Serene Grace' } },\n    Elekid: { abilities: { 0: 'Static' } },\n    Entei: { abilities: { 0: 'Pressure' } },\n    Espeon: { abilities: { 0: 'Synchronize' } },\n    Feraligatr: { abilities: { 0: 'Torrent' } },\n    Flaaffy: { abilities: { 0: 'Static' } },\n    Forretress: { abilities: { 0: 'Sturdy' } },\n    Furret: { abilities: { 0: 'Run Away' } },\n    Girafarig: { abilities: { 0: 'Inner Focus' } },\n    Gligar: { abilities: { 0: 'Hyper Cutter' } },\n    Granbull: { abilities: { 0: 'Intimidate' } },\n    Heracross: { abilities: { 0: 'Swarm' } },\n    Hitmontop: { abilities: { 0: 'Intimidate' } },\n    'Ho-Oh': { abilities: { 0: 'Pressure' } },\n    Hoothoot: { abilities: { 0: 'Insomnia' } },\n    Hoppip: { abilities: { 0: 'Chlorophyll' } },\n    Houndoom: { abilities: { 0: 'Early Bird' } },\n    Houndour: { abilities: { 0: 'Early Bird' } },\n    Igglybuff: { abilities: { 0: 'Cute Charm' } },\n    Jumpluff: { abilities: { 0: 'Chlorophyll' } },\n    Kingdra: { abilities: { 0: 'Swift Swim' } },\n    Lanturn: { abilities: { 0: 'Volt Absorb' } },\n    Larvitar: { abilities: { 0: 'Guts' } },\n    Ledian: { abilities: { 0: 'Swarm' } },\n    Ledyba: { abilities: { 0: 'Swarm' } },\n    Lugia: { abilities: { 0: 'Pressure' } },\n    Magby: { abilities: { 0: 'Flame Body' } },\n    Magcargo: { abilities: { 0: 'Magma Armor' } },\n    Mantine: { abilities: { 0: 'Swift Swim' } },\n    Mareep: { abilities: { 0: 'Static' } },\n    Marill: { abilities: { 0: 'Thick Fat' } },\n    Meganium: { abilities: { 0: 'Overgrow' } },\n    Miltank: { abilities: { 0: 'Thick Fat' } },\n    Misdreavus: { abilities: { 0: 'Levitate' } },\n    Murkrow: { abilities: { 0: 'Insomnia' } },\n    Natu: { abilities: { 0: 'Synchronize' } },\n    Noctowl: { abilities: { 0: 'Insomnia' } },\n    Octillery: { abilities: { 0: 'Suction Cups' } },\n    Phanpy: { abilities: { 0: 'Pickup' } },\n    Pichu: { abilities: { 0: 'Static' } },\n    Piloswine: { abilities: { 0: 'Oblivious' } },\n    Pineco: { abilities: { 0: 'Sturdy' } },\n    Politoed: { abilities: { 0: 'Water Absorb' } },\n    Porygon2: { abilities: { 0: 'Trace' } },\n    Pupitar: { abilities: { 0: 'Shed Skin' } },\n    Quagsire: { abilities: { 0: 'Damp' } },\n    Quilava: { abilities: { 0: 'Blaze' } },\n    Qwilfish: { abilities: { 0: 'Poison Point' } },\n    Raikou: { abilities: { 0: 'Pressure' } },\n    Remoraid: { abilities: { 0: 'Hustle' } },\n    Scizor: { abilities: { 0: 'Swarm' } },\n    Sentret: { abilities: { 0: 'Run Away' } },\n    Shuckle: { abilities: { 0: 'Sturdy' } },\n    Skarmory: { abilities: { 0: 'Keen Eye' } },\n    Skiploom: { abilities: { 0: 'Chlorophyll' } },\n    Slowking: { abilities: { 0: 'Oblivious' } },\n    Slugma: { abilities: { 0: 'Magma Armor' } },\n    Smeargle: { abilities: { 0: 'Own Tempo' } },\n    Smoochum: { abilities: { 0: 'Oblivious' } },\n    Sneasel: { abilities: { 0: 'Inner Focus' } },\n    Snubbull: { abilities: { 0: 'Intimidate' } },\n    Spinarak: { abilities: { 0: 'Swarm' } },\n    Stantler: { abilities: { 0: 'Intimidate' } },\n    Steelix: { abilities: { 0: 'Rock Head' } },\n    Sudowoodo: { abilities: { 0: 'Sturdy' } },\n    Suicune: { abilities: { 0: 'Pressure' } },\n    Sunflora: { abilities: { 0: 'Chlorophyll' } },\n    Sunkern: { abilities: { 0: 'Chlorophyll' } },\n    Swinub: { abilities: { 0: 'Oblivious' } },\n    Teddiursa: { abilities: { 0: 'Pickup' } },\n    Togepi: { abilities: { 0: 'Hustle' } },\n    Togetic: { abilities: { 0: 'Hustle' } },\n    Totodile: { abilities: { 0: 'Torrent' } },\n    Typhlosion: { abilities: { 0: 'Blaze' } },\n    Tyranitar: { abilities: { 0: 'Sand Stream' } },\n    Tyrogue: { abilities: { 0: 'Guts' } },\n    Umbreon: { abilities: { 0: 'Synchronize' } },\n    Unown: { abilities: { 0: 'Levitate' } },\n    Ursaring: { abilities: { 0: 'Guts' } },\n    Wobbuffet: { abilities: { 0: 'Shadow Tag' } },\n    Wooper: { abilities: { 0: 'Damp' } },\n    Xatu: { abilities: { 0: 'Synchronize' } },\n    Yanma: { abilities: { 0: 'Speed Boost' } },\n    Absol: {\n        types: ['Dark'],\n        bs: { hp: 65, at: 130, df: 60, sa: 75, sd: 60, sp: 75 },\n        weightkg: 47,\n        abilities: { 0: 'Pressure' }\n    },\n    Aggron: {\n        types: ['Steel', 'Rock'],\n        bs: { hp: 70, at: 110, df: 180, sa: 60, sd: 60, sp: 50 },\n        weightkg: 360,\n        abilities: { 0: 'Sturdy' }\n    },\n    Altaria: {\n        types: ['Dragon', 'Flying'],\n        bs: { hp: 75, at: 70, df: 90, sa: 70, sd: 105, sp: 80 },\n        weightkg: 20.6,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Anorith: {\n        types: ['Rock', 'Bug'],\n        bs: { hp: 45, at: 95, df: 50, sa: 40, sd: 50, sp: 75 },\n        weightkg: 12.5,\n        nfe: true,\n        abilities: { 0: 'Battle Armor' }\n    },\n    Armaldo: {\n        types: ['Rock', 'Bug'],\n        bs: { hp: 75, at: 125, df: 100, sa: 70, sd: 80, sp: 45 },\n        weightkg: 68.2,\n        abilities: { 0: 'Battle Armor' }\n    },\n    Aron: {\n        types: ['Steel', 'Rock'],\n        bs: { hp: 50, at: 70, df: 100, sa: 40, sd: 40, sp: 30 },\n        weightkg: 60,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Azurill: {\n        types: ['Normal'],\n        bs: { hp: 50, at: 20, df: 40, sa: 20, sd: 40, sp: 20 },\n        weightkg: 2,\n        nfe: true,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Bagon: {\n        types: ['Dragon'],\n        bs: { hp: 45, at: 75, df: 60, sa: 40, sd: 30, sp: 50 },\n        weightkg: 42.1,\n        nfe: true,\n        abilities: { 0: 'Rock Head' }\n    },\n    Baltoy: {\n        types: ['Ground', 'Psychic'],\n        bs: { hp: 40, at: 40, df: 55, sa: 40, sd: 70, sp: 55 },\n        weightkg: 21.5,\n        abilities: { 0: 'Levitate' },\n        nfe: true,\n        gender: 'N'\n    },\n    Banette: {\n        types: ['Ghost'],\n        bs: { hp: 64, at: 115, df: 65, sa: 83, sd: 63, sp: 65 },\n        weightkg: 12.5,\n        abilities: { 0: 'Insomnia' }\n    },\n    Barboach: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 50, at: 48, df: 43, sa: 46, sd: 41, sp: 60 },\n        weightkg: 1.9,\n        nfe: true,\n        abilities: { 0: 'Oblivious' }\n    },\n    Beautifly: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 60, at: 70, df: 50, sa: 90, sd: 50, sp: 65 },\n        weightkg: 28.4,\n        abilities: { 0: 'Swarm' }\n    },\n    Beldum: {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 40, at: 55, df: 80, sa: 35, sd: 60, sp: 30 },\n        weightkg: 95.2,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Blaziken: {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 80, at: 120, df: 70, sa: 110, sd: 70, sp: 80 },\n        weightkg: 52,\n        abilities: { 0: 'Blaze' }\n    },\n    Breloom: {\n        types: ['Grass', 'Fighting'],\n        bs: { hp: 60, at: 130, df: 80, sa: 60, sd: 60, sp: 70 },\n        weightkg: 39.2,\n        abilities: { 0: 'Effect Spore' }\n    },\n    Cacnea: {\n        types: ['Grass'],\n        bs: { hp: 50, at: 85, df: 40, sa: 85, sd: 40, sp: 35 },\n        weightkg: 51.3,\n        nfe: true,\n        abilities: { 0: 'Sand Veil' }\n    },\n    Cacturne: {\n        types: ['Grass', 'Dark'],\n        bs: { hp: 70, at: 115, df: 60, sa: 115, sd: 60, sp: 55 },\n        weightkg: 77.4,\n        abilities: { 0: 'Sand Veil' }\n    },\n    Camerupt: {\n        types: ['Fire', 'Ground'],\n        bs: { hp: 70, at: 100, df: 70, sa: 105, sd: 75, sp: 40 },\n        weightkg: 220,\n        abilities: { 0: 'Magma Armor' }\n    },\n    Carvanha: {\n        types: ['Water', 'Dark'],\n        bs: { hp: 45, at: 90, df: 20, sa: 65, sd: 20, sp: 65 },\n        weightkg: 20.8,\n        nfe: true,\n        abilities: { 0: 'Rough Skin' }\n    },\n    Cascoon: {\n        types: ['Bug'],\n        bs: { hp: 50, at: 35, df: 55, sa: 25, sd: 25, sp: 15 },\n        weightkg: 11.5,\n        abilities: { 0: 'Shed Skin' },\n        nfe: true\n    },\n    Castform: {\n        types: ['Normal'],\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\n        weightkg: 0.8,\n        abilities: { 0: 'Forecast' },\n        otherFormes: ['Castform-Rainy', 'Castform-Snowy', 'Castform-Sunny']\n    },\n    'Castform-Rainy': {\n        types: ['Water'],\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\n        weightkg: 0.8,\n        abilities: { 0: 'Forecast' },\n        baseSpecies: 'Castform'\n    },\n    'Castform-Snowy': {\n        types: ['Ice'],\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\n        weightkg: 0.8,\n        abilities: { 0: 'Forecast' },\n        baseSpecies: 'Castform'\n    },\n    'Castform-Sunny': {\n        types: ['Fire'],\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\n        weightkg: 0.8,\n        abilities: { 0: 'Forecast' },\n        baseSpecies: 'Castform'\n    },\n    Chimecho: {\n        types: ['Psychic'],\n        bs: { hp: 65, at: 50, df: 70, sa: 95, sd: 80, sp: 65 },\n        weightkg: 1,\n        abilities: { 0: 'Levitate' }\n    },\n    Clamperl: {\n        types: ['Water'],\n        bs: { hp: 35, at: 64, df: 85, sa: 74, sd: 55, sp: 32 },\n        weightkg: 52.5,\n        nfe: true,\n        abilities: { 0: 'Shell Armor' }\n    },\n    Claydol: {\n        types: ['Ground', 'Psychic'],\n        bs: { hp: 60, at: 70, df: 105, sa: 70, sd: 120, sp: 75 },\n        weightkg: 108,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Combusken: {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 60, at: 85, df: 60, sa: 85, sd: 60, sp: 55 },\n        weightkg: 19.5,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Corphish: {\n        types: ['Water'],\n        bs: { hp: 43, at: 80, df: 65, sa: 50, sd: 35, sp: 35 },\n        weightkg: 11.5,\n        nfe: true,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Cradily: {\n        types: ['Rock', 'Grass'],\n        bs: { hp: 86, at: 81, df: 97, sa: 81, sd: 107, sp: 43 },\n        weightkg: 60.4,\n        abilities: { 0: 'Suction Cups' }\n    },\n    Crawdaunt: {\n        types: ['Water', 'Dark'],\n        bs: { hp: 63, at: 120, df: 85, sa: 90, sd: 55, sp: 55 },\n        weightkg: 32.8,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Delcatty: {\n        types: ['Normal'],\n        bs: { hp: 70, at: 65, df: 65, sa: 55, sd: 55, sp: 70 },\n        weightkg: 32.6,\n        abilities: { 0: 'Cute Charm' }\n    },\n    Deoxys: {\n        types: ['Psychic'],\n        bs: { hp: 50, at: 150, df: 50, sa: 150, sd: 50, sp: 150 },\n        weightkg: 60.8,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        otherFormes: ['Deoxys-Attack', 'Deoxys-Defense', 'Deoxys-Speed']\n    },\n    'Deoxys-Attack': {\n        types: ['Psychic'],\n        bs: { hp: 50, at: 180, df: 20, sa: 180, sd: 20, sp: 150 },\n        weightkg: 60.8,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        baseSpecies: 'Deoxys'\n    },\n    'Deoxys-Defense': {\n        types: ['Psychic'],\n        bs: { hp: 50, at: 70, df: 160, sa: 70, sd: 160, sp: 90 },\n        weightkg: 60.8,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        baseSpecies: 'Deoxys'\n    },\n    'Deoxys-Speed': {\n        types: ['Psychic'],\n        bs: { hp: 50, at: 95, df: 90, sa: 95, sd: 90, sp: 180 },\n        weightkg: 60.8,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        baseSpecies: 'Deoxys'\n    },\n    Dusclops: {\n        types: ['Ghost'],\n        bs: { hp: 40, at: 70, df: 130, sa: 60, sd: 130, sp: 25 },\n        weightkg: 30.6,\n        abilities: { 0: 'Pressure' }\n    },\n    Duskull: {\n        types: ['Ghost'],\n        bs: { hp: 20, at: 40, df: 90, sa: 30, sd: 90, sp: 25 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Levitate' }\n    },\n    Dustox: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 60, at: 50, df: 70, sa: 50, sd: 90, sp: 65 },\n        weightkg: 31.6,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Electrike: {\n        types: ['Electric'],\n        bs: { hp: 40, at: 45, df: 40, sa: 65, sd: 40, sp: 65 },\n        weightkg: 15.2,\n        nfe: true,\n        abilities: { 0: 'Static' }\n    },\n    Exploud: {\n        types: ['Normal'],\n        bs: { hp: 104, at: 91, df: 63, sa: 91, sd: 63, sp: 68 },\n        weightkg: 84,\n        abilities: { 0: 'Soundproof' }\n    },\n    Feebas: {\n        types: ['Water'],\n        bs: { hp: 20, at: 15, df: 20, sa: 10, sd: 55, sp: 80 },\n        weightkg: 7.4,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Flygon: {\n        types: ['Ground', 'Dragon'],\n        bs: { hp: 80, at: 100, df: 80, sa: 80, sd: 80, sp: 100 },\n        weightkg: 82,\n        abilities: { 0: 'Levitate' }\n    },\n    Gardevoir: {\n        types: ['Psychic'],\n        bs: { hp: 68, at: 65, df: 65, sa: 125, sd: 115, sp: 80 },\n        weightkg: 48.4,\n        abilities: { 0: 'Synchronize' }\n    },\n    Glalie: {\n        types: ['Ice'],\n        bs: { hp: 80, at: 80, df: 80, sa: 80, sd: 80, sp: 80 },\n        weightkg: 256.5,\n        abilities: { 0: 'Inner Focus' }\n    },\n    Gorebyss: {\n        types: ['Water'],\n        bs: { hp: 55, at: 84, df: 105, sa: 114, sd: 75, sp: 52 },\n        weightkg: 22.6,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Groudon: {\n        types: ['Ground'],\n        bs: { hp: 100, at: 150, df: 140, sa: 100, sd: 90, sp: 90 },\n        weightkg: 950,\n        abilities: { 0: 'Drought' },\n        gender: 'N'\n    },\n    Grovyle: {\n        types: ['Grass'],\n        bs: { hp: 50, at: 65, df: 45, sa: 85, sd: 65, sp: 95 },\n        weightkg: 21.6,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Grumpig: {\n        types: ['Psychic'],\n        bs: { hp: 80, at: 45, df: 65, sa: 90, sd: 110, sp: 80 },\n        weightkg: 71.5,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Gulpin: {\n        types: ['Poison'],\n        bs: { hp: 70, at: 43, df: 53, sa: 43, sd: 53, sp: 40 },\n        weightkg: 10.3,\n        nfe: true,\n        abilities: { 0: 'Liquid Ooze' }\n    },\n    Hariyama: {\n        types: ['Fighting'],\n        bs: { hp: 144, at: 120, df: 60, sa: 40, sd: 60, sp: 50 },\n        weightkg: 253.8,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Huntail: {\n        types: ['Water'],\n        bs: { hp: 55, at: 104, df: 105, sa: 94, sd: 75, sp: 52 },\n        weightkg: 27,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Illumise: {\n        types: ['Bug'],\n        bs: { hp: 65, at: 47, df: 55, sa: 73, sd: 75, sp: 85 },\n        abilities: { 0: 'Oblivious' },\n        weightkg: 17.7\n    },\n    Jirachi: {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\n        weightkg: 1.1,\n        abilities: { 0: 'Serene Grace' },\n        gender: 'N'\n    },\n    Kecleon: {\n        types: ['Normal'],\n        bs: { hp: 60, at: 90, df: 70, sa: 60, sd: 120, sp: 40 },\n        weightkg: 22,\n        abilities: { 0: 'Color Change' }\n    },\n    Kirlia: {\n        types: ['Psychic'],\n        bs: { hp: 38, at: 35, df: 35, sa: 65, sd: 55, sp: 50 },\n        weightkg: 20.2,\n        nfe: true,\n        abilities: { 0: 'Synchronize' }\n    },\n    Kyogre: {\n        types: ['Water'],\n        bs: { hp: 100, at: 100, df: 90, sa: 150, sd: 140, sp: 90 },\n        weightkg: 352,\n        abilities: { 0: 'Drizzle' },\n        gender: 'N'\n    },\n    Lairon: {\n        types: ['Steel', 'Rock'],\n        bs: { hp: 60, at: 90, df: 140, sa: 50, sd: 50, sp: 40 },\n        weightkg: 120,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Latias: {\n        types: ['Dragon', 'Psychic'],\n        bs: { hp: 80, at: 80, df: 90, sa: 110, sd: 130, sp: 110 },\n        weightkg: 40,\n        abilities: { 0: 'Levitate' }\n    },\n    Latios: {\n        types: ['Dragon', 'Psychic'],\n        bs: { hp: 80, at: 90, df: 80, sa: 130, sd: 110, sp: 110 },\n        weightkg: 60,\n        abilities: { 0: 'Levitate' }\n    },\n    Lileep: {\n        types: ['Rock', 'Grass'],\n        bs: { hp: 66, at: 41, df: 77, sa: 61, sd: 87, sp: 23 },\n        weightkg: 23.8,\n        nfe: true,\n        abilities: { 0: 'Suction Cups' }\n    },\n    Linoone: {\n        types: ['Normal'],\n        bs: { hp: 78, at: 70, df: 61, sa: 50, sd: 61, sp: 100 },\n        weightkg: 32.5,\n        abilities: { 0: 'Pickup' }\n    },\n    Lombre: {\n        types: ['Water', 'Grass'],\n        bs: { hp: 60, at: 50, df: 50, sa: 60, sd: 70, sp: 50 },\n        weightkg: 32.5,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Lotad: {\n        types: ['Water', 'Grass'],\n        bs: { hp: 40, at: 30, df: 30, sa: 40, sd: 50, sp: 30 },\n        weightkg: 2.6,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Loudred: {\n        types: ['Normal'],\n        bs: { hp: 84, at: 71, df: 43, sa: 71, sd: 43, sp: 48 },\n        weightkg: 40.5,\n        nfe: true,\n        abilities: { 0: 'Soundproof' }\n    },\n    Ludicolo: {\n        types: ['Water', 'Grass'],\n        bs: { hp: 80, at: 70, df: 70, sa: 90, sd: 100, sp: 70 },\n        weightkg: 55,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Lunatone: {\n        types: ['Rock', 'Psychic'],\n        bs: { hp: 70, at: 55, df: 65, sa: 95, sd: 85, sp: 70 },\n        weightkg: 168,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Luvdisc: {\n        types: ['Water'],\n        bs: { hp: 43, at: 30, df: 55, sa: 40, sd: 65, sp: 97 },\n        weightkg: 8.7,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Makuhita: {\n        types: ['Fighting'],\n        bs: { hp: 72, at: 60, df: 30, sa: 20, sd: 30, sp: 25 },\n        weightkg: 86.4,\n        nfe: true,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Manectric: {\n        types: ['Electric'],\n        bs: { hp: 70, at: 75, df: 60, sa: 105, sd: 60, sp: 105 },\n        weightkg: 40.2,\n        abilities: { 0: 'Static' }\n    },\n    Marshtomp: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 70, at: 85, df: 70, sa: 60, sd: 70, sp: 50 },\n        weightkg: 28,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Masquerain: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 70, at: 60, df: 62, sa: 80, sd: 82, sp: 60 },\n        weightkg: 3.6,\n        abilities: { 0: 'Intimidate' }\n    },\n    Mawile: {\n        types: ['Steel'],\n        bs: { hp: 50, at: 85, df: 85, sa: 55, sd: 55, sp: 50 },\n        weightkg: 11.5,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Medicham: {\n        types: ['Fighting', 'Psychic'],\n        bs: { hp: 60, at: 60, df: 75, sa: 60, sd: 75, sp: 80 },\n        weightkg: 31.5,\n        abilities: { 0: 'Pure Power' }\n    },\n    Meditite: {\n        types: ['Fighting', 'Psychic'],\n        bs: { hp: 30, at: 40, df: 55, sa: 40, sd: 55, sp: 60 },\n        weightkg: 11.2,\n        nfe: true,\n        abilities: { 0: 'Pure Power' }\n    },\n    Metagross: {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 80, at: 135, df: 130, sa: 95, sd: 90, sp: 70 },\n        weightkg: 550,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Metang: {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 60, at: 75, df: 100, sa: 55, sd: 80, sp: 50 },\n        weightkg: 202.5,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Mightyena: {\n        types: ['Dark'],\n        bs: { hp: 70, at: 90, df: 70, sa: 60, sd: 60, sp: 70 },\n        weightkg: 37,\n        abilities: { 0: 'Intimidate' }\n    },\n    Milotic: {\n        types: ['Water'],\n        bs: { hp: 95, at: 60, df: 79, sa: 100, sd: 125, sp: 81 },\n        weightkg: 162,\n        abilities: { 0: 'Marvel Scale' }\n    },\n    Minun: {\n        types: ['Electric'],\n        bs: { hp: 60, at: 40, df: 50, sa: 75, sd: 85, sp: 95 },\n        weightkg: 4.2,\n        abilities: { 0: 'Minus' }\n    },\n    Mudkip: {\n        types: ['Water'],\n        bs: { hp: 50, at: 70, df: 50, sa: 50, sd: 50, sp: 40 },\n        weightkg: 7.6,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Nincada: {\n        types: ['Bug', 'Ground'],\n        bs: { hp: 31, at: 45, df: 90, sa: 30, sd: 30, sp: 40 },\n        weightkg: 5.5,\n        nfe: true,\n        abilities: { 0: 'Compound Eyes' }\n    },\n    Ninjask: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 61, at: 90, df: 45, sa: 50, sd: 50, sp: 160 },\n        weightkg: 12,\n        abilities: { 0: 'Speed Boost' }\n    },\n    Nosepass: {\n        types: ['Rock'],\n        bs: { hp: 30, at: 45, df: 135, sa: 45, sd: 90, sp: 30 },\n        weightkg: 97,\n        abilities: { 0: 'Sturdy' }\n    },\n    Numel: {\n        types: ['Fire', 'Ground'],\n        bs: { hp: 60, at: 60, df: 40, sa: 65, sd: 45, sp: 35 },\n        weightkg: 24,\n        nfe: true,\n        abilities: { 0: 'Oblivious' }\n    },\n    Nuzleaf: {\n        types: ['Grass', 'Dark'],\n        bs: { hp: 70, at: 70, df: 40, sa: 60, sd: 40, sp: 60 },\n        weightkg: 28,\n        nfe: true,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Pelipper: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 60, at: 50, df: 100, sa: 85, sd: 70, sp: 65 },\n        weightkg: 28,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Plusle: {\n        types: ['Electric'],\n        bs: { hp: 60, at: 50, df: 40, sa: 85, sd: 75, sp: 95 },\n        weightkg: 4.2,\n        abilities: { 0: 'Plus' }\n    },\n    Poochyena: {\n        types: ['Dark'],\n        bs: { hp: 35, at: 55, df: 35, sa: 30, sd: 30, sp: 35 },\n        weightkg: 13.6,\n        nfe: true,\n        abilities: { 0: 'Run Away' }\n    },\n    Ralts: {\n        types: ['Psychic'],\n        bs: { hp: 28, at: 25, df: 25, sa: 45, sd: 35, sp: 40 },\n        weightkg: 6.6,\n        nfe: true,\n        abilities: { 0: 'Synchronize' }\n    },\n    Rayquaza: {\n        types: ['Dragon', 'Flying'],\n        bs: { hp: 105, at: 150, df: 90, sa: 150, sd: 90, sp: 95 },\n        weightkg: 206.5,\n        abilities: { 0: 'Air Lock' },\n        gender: 'N'\n    },\n    Regice: {\n        types: ['Ice'],\n        bs: { hp: 80, at: 50, df: 100, sa: 100, sd: 200, sp: 50 },\n        weightkg: 175,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Regirock: {\n        types: ['Rock'],\n        bs: { hp: 80, at: 100, df: 200, sa: 50, sd: 100, sp: 50 },\n        weightkg: 230,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Registeel: {\n        types: ['Steel'],\n        bs: { hp: 80, at: 75, df: 150, sa: 75, sd: 150, sp: 50 },\n        weightkg: 205,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Relicanth: {\n        types: ['Water', 'Rock'],\n        bs: { hp: 100, at: 90, df: 130, sa: 45, sd: 65, sp: 55 },\n        weightkg: 23.4,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Roselia: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 50, at: 60, df: 45, sa: 100, sd: 80, sp: 65 },\n        weightkg: 2,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Sableye: {\n        types: ['Dark', 'Ghost'],\n        bs: { hp: 50, at: 75, df: 75, sa: 65, sd: 65, sp: 50 },\n        weightkg: 11,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Salamence: {\n        types: ['Dragon', 'Flying'],\n        bs: { hp: 95, at: 135, df: 80, sa: 110, sd: 80, sp: 100 },\n        weightkg: 102.6,\n        abilities: { 0: 'Intimidate' }\n    },\n    Sceptile: {\n        types: ['Grass'],\n        bs: { hp: 70, at: 85, df: 65, sa: 105, sd: 85, sp: 120 },\n        weightkg: 52.2,\n        abilities: { 0: 'Overgrow' }\n    },\n    Sealeo: {\n        types: ['Ice', 'Water'],\n        bs: { hp: 90, at: 60, df: 70, sa: 75, sd: 70, sp: 45 },\n        weightkg: 87.6,\n        nfe: true,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Seedot: {\n        types: ['Grass'],\n        bs: { hp: 40, at: 40, df: 50, sa: 30, sd: 30, sp: 30 },\n        weightkg: 4,\n        nfe: true,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Seviper: {\n        types: ['Poison'],\n        bs: { hp: 73, at: 100, df: 60, sa: 100, sd: 60, sp: 65 },\n        weightkg: 52.5,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Sharpedo: {\n        types: ['Water', 'Dark'],\n        bs: { hp: 70, at: 120, df: 40, sa: 95, sd: 40, sp: 95 },\n        weightkg: 88.8,\n        abilities: { 0: 'Rough Skin' }\n    },\n    Shedinja: {\n        types: ['Bug', 'Ghost'],\n        bs: { hp: 1, at: 90, df: 45, sa: 30, sd: 30, sp: 40 },\n        weightkg: 1.2,\n        abilities: { 0: 'Wonder Guard' },\n        gender: 'N'\n    },\n    Shelgon: {\n        types: ['Dragon'],\n        bs: { hp: 65, at: 95, df: 100, sa: 60, sd: 50, sp: 50 },\n        weightkg: 110.5,\n        nfe: true,\n        abilities: { 0: 'Rock Head' }\n    },\n    Shiftry: {\n        types: ['Grass', 'Dark'],\n        bs: { hp: 90, at: 100, df: 60, sa: 90, sd: 60, sp: 80 },\n        weightkg: 59.6,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Shroomish: {\n        types: ['Grass'],\n        bs: { hp: 60, at: 40, df: 60, sa: 40, sd: 60, sp: 35 },\n        weightkg: 4.5,\n        nfe: true,\n        abilities: { 0: 'Effect Spore' }\n    },\n    Shuppet: {\n        types: ['Ghost'],\n        bs: { hp: 44, at: 75, df: 35, sa: 63, sd: 33, sp: 45 },\n        weightkg: 2.3,\n        nfe: true,\n        abilities: { 0: 'Insomnia' }\n    },\n    Silcoon: {\n        types: ['Bug'],\n        bs: { hp: 50, at: 35, df: 55, sa: 25, sd: 25, sp: 15 },\n        weightkg: 10,\n        abilities: { 0: 'Shed Skin' },\n        nfe: true\n    },\n    Skitty: {\n        types: ['Normal'],\n        bs: { hp: 50, at: 45, df: 45, sa: 35, sd: 35, sp: 50 },\n        weightkg: 11,\n        nfe: true,\n        abilities: { 0: 'Cute Charm' }\n    },\n    Slaking: {\n        types: ['Normal'],\n        bs: { hp: 150, at: 160, df: 100, sa: 95, sd: 65, sp: 100 },\n        weightkg: 130.5,\n        abilities: { 0: 'Truant' }\n    },\n    Slakoth: {\n        types: ['Normal'],\n        bs: { hp: 60, at: 60, df: 60, sa: 35, sd: 35, sp: 30 },\n        weightkg: 24,\n        abilities: { 0: 'Truant' },\n        nfe: true\n    },\n    Snorunt: {\n        types: ['Ice'],\n        bs: { hp: 50, at: 50, df: 50, sa: 50, sd: 50, sp: 50 },\n        weightkg: 16.8,\n        nfe: true,\n        abilities: { 0: 'Inner Focus' }\n    },\n    Solrock: {\n        types: ['Rock', 'Psychic'],\n        bs: { hp: 70, at: 95, df: 85, sa: 55, sd: 65, sp: 70 },\n        weightkg: 154,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Spheal: {\n        types: ['Ice', 'Water'],\n        bs: { hp: 70, at: 40, df: 50, sa: 55, sd: 50, sp: 25 },\n        weightkg: 39.5,\n        nfe: true,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Spinda: {\n        types: ['Normal'],\n        bs: { hp: 60, at: 60, df: 60, sa: 60, sd: 60, sp: 60 },\n        weightkg: 5,\n        abilities: { 0: 'Own Tempo' }\n    },\n    Spoink: {\n        types: ['Psychic'],\n        bs: { hp: 60, at: 25, df: 35, sa: 70, sd: 80, sp: 60 },\n        weightkg: 30.6,\n        nfe: true,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Surskit: {\n        types: ['Bug', 'Water'],\n        bs: { hp: 40, at: 30, df: 32, sa: 50, sd: 52, sp: 65 },\n        weightkg: 1.7,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Swablu: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 45, at: 40, df: 60, sa: 40, sd: 75, sp: 50 },\n        weightkg: 1.2,\n        nfe: true,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Swalot: {\n        types: ['Poison'],\n        bs: { hp: 100, at: 73, df: 83, sa: 73, sd: 83, sp: 55 },\n        weightkg: 80,\n        abilities: { 0: 'Liquid Ooze' }\n    },\n    Swampert: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 100, at: 110, df: 90, sa: 85, sd: 90, sp: 60 },\n        weightkg: 81.9,\n        abilities: { 0: 'Torrent' }\n    },\n    Swellow: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 60, at: 85, df: 60, sa: 50, sd: 50, sp: 125 },\n        weightkg: 19.8,\n        abilities: { 0: 'Guts' }\n    },\n    Taillow: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 40, at: 55, df: 30, sa: 30, sd: 30, sp: 85 },\n        weightkg: 2.3,\n        nfe: true,\n        abilities: { 0: 'Guts' }\n    },\n    Torchic: {\n        types: ['Fire'],\n        bs: { hp: 45, at: 60, df: 40, sa: 70, sd: 50, sp: 45 },\n        weightkg: 2.5,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Torkoal: {\n        types: ['Fire'],\n        bs: { hp: 70, at: 85, df: 140, sa: 85, sd: 70, sp: 20 },\n        weightkg: 80.4,\n        abilities: { 0: 'White Smoke' }\n    },\n    Trapinch: {\n        types: ['Ground'],\n        bs: { hp: 45, at: 100, df: 45, sa: 45, sd: 45, sp: 10 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Treecko: {\n        types: ['Grass'],\n        bs: { hp: 40, at: 45, df: 35, sa: 65, sd: 55, sp: 70 },\n        weightkg: 5,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Tropius: {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 99, at: 68, df: 83, sa: 72, sd: 87, sp: 51 },\n        weightkg: 100,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Vibrava: {\n        types: ['Ground', 'Dragon'],\n        bs: { hp: 50, at: 70, df: 50, sa: 50, sd: 50, sp: 70 },\n        weightkg: 15.3,\n        abilities: { 0: 'Levitate' },\n        nfe: true\n    },\n    Vigoroth: {\n        types: ['Normal'],\n        bs: { hp: 80, at: 80, df: 80, sa: 55, sd: 55, sp: 90 },\n        weightkg: 46.5,\n        abilities: { 0: 'Vital Spirit' },\n        nfe: true\n    },\n    Volbeat: {\n        types: ['Bug'],\n        bs: { hp: 65, at: 73, df: 55, sa: 47, sd: 75, sp: 85 },\n        weightkg: 17.7,\n        abilities: { 0: 'Illuminate' }\n    },\n    Wailmer: {\n        types: ['Water'],\n        bs: { hp: 130, at: 70, df: 35, sa: 70, sd: 35, sp: 60 },\n        weightkg: 130,\n        nfe: true,\n        abilities: { 0: 'Water Veil' }\n    },\n    Wailord: {\n        types: ['Water'],\n        bs: { hp: 170, at: 90, df: 45, sa: 90, sd: 45, sp: 60 },\n        weightkg: 398,\n        abilities: { 0: 'Water Veil' }\n    },\n    Walrein: {\n        types: ['Ice', 'Water'],\n        bs: { hp: 110, at: 80, df: 90, sa: 95, sd: 90, sp: 65 },\n        weightkg: 150.6,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Whiscash: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 110, at: 78, df: 73, sa: 76, sd: 71, sp: 60 },\n        weightkg: 23.6,\n        abilities: { 0: 'Oblivious' }\n    },\n    Whismur: {\n        types: ['Normal'],\n        bs: { hp: 64, at: 51, df: 23, sa: 51, sd: 23, sp: 28 },\n        weightkg: 16.3,\n        nfe: true,\n        abilities: { 0: 'Soundproof' }\n    },\n    Wingull: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 40, at: 30, df: 30, sa: 55, sd: 30, sp: 85 },\n        weightkg: 9.5,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Wurmple: {\n        types: ['Bug'],\n        bs: { hp: 45, at: 45, df: 35, sa: 20, sd: 30, sp: 20 },\n        weightkg: 3.6,\n        nfe: true,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Wynaut: {\n        types: ['Psychic'],\n        bs: { hp: 95, at: 23, df: 48, sa: 23, sd: 48, sp: 23 },\n        weightkg: 14,\n        nfe: true,\n        abilities: { 0: 'Shadow Tag' }\n    },\n    Zangoose: {\n        types: ['Normal'],\n        bs: { hp: 73, at: 115, df: 60, sa: 60, sd: 60, sp: 90 },\n        weightkg: 40.3,\n        abilities: { 0: 'Immunity' }\n    },\n    Zigzagoon: {\n        types: ['Normal'],\n        bs: { hp: 38, at: 30, df: 41, sa: 30, sd: 41, sp: 60 },\n        weightkg: 17.5,\n        nfe: true,\n        abilities: { 0: 'Pickup' }\n    }\n};\nvar ADV = (0, util_1.extend)(true, {}, GSC, ADV_PATCH);\nvar DPP_PATCH = {\n    Aipom: { nfe: true },\n    Dusclops: { nfe: true },\n    Electabuzz: { nfe: true },\n    Gligar: { nfe: true },\n    Lickitung: { nfe: true },\n    Magmar: { nfe: true },\n    Magneton: { nfe: true },\n    Misdreavus: { nfe: true },\n    Murkrow: { nfe: true },\n    Nosepass: { nfe: true },\n    Piloswine: { nfe: true },\n    Pichu: { otherFormes: ['Pichu-Spiky-eared'] },\n    Porygon2: { nfe: true },\n    Rhydon: { nfe: true },\n    Roselia: { nfe: true },\n    Sneasel: { nfe: true },\n    Tangela: { nfe: true },\n    Togetic: { nfe: true },\n    Yanma: { nfe: true },\n    Abomasnow: {\n        types: ['Grass', 'Ice'],\n        bs: { hp: 90, at: 92, df: 75, sa: 92, sd: 85, sp: 60 },\n        weightkg: 135.5,\n        abilities: { 0: 'Snow Warning' }\n    },\n    Ambipom: {\n        types: ['Normal'],\n        bs: { hp: 75, at: 100, df: 66, sa: 60, sd: 66, sp: 115 },\n        weightkg: 20.3,\n        abilities: { 0: 'Technician' }\n    },\n    Arceus: {\n        types: ['Normal'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        otherFormes: [\n            'Arceus-Bug',\n            'Arceus-Dark',\n            'Arceus-Dragon',\n            'Arceus-Electric',\n            'Arceus-Fighting',\n            'Arceus-Fire',\n            'Arceus-Flying',\n            'Arceus-Ghost',\n            'Arceus-Grass',\n            'Arceus-Ground',\n            'Arceus-Ice',\n            'Arceus-Poison',\n            'Arceus-Psychic',\n            'Arceus-Rock',\n            'Arceus-Steel',\n            'Arceus-Water',\n        ]\n    },\n    'Arceus-Bug': {\n        types: ['Bug'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Dark': {\n        types: ['Dark'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Dragon': {\n        types: ['Dragon'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Electric': {\n        types: ['Electric'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Fighting': {\n        types: ['Fighting'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Fire': {\n        types: ['Fire'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Flying': {\n        types: ['Flying'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Ghost': {\n        types: ['Ghost'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Grass': {\n        types: ['Grass'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Ground': {\n        types: ['Ground'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Ice': {\n        types: ['Ice'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Poison': {\n        types: ['Poison'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Psychic': {\n        types: ['Psychic'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Rock': {\n        types: ['Rock'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Steel': {\n        types: ['Steel'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    'Arceus-Water': {\n        types: ['Water'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        gender: 'N',\n        baseSpecies: 'Arceus'\n    },\n    Arghonaut: {\n        types: ['Water', 'Fighting'],\n        bs: { hp: 105, at: 110, df: 95, sa: 70, sd: 100, sp: 75 },\n        weightkg: 151,\n        abilities: { 0: 'Unaware' }\n    },\n    Azelf: {\n        types: ['Psychic'],\n        bs: { hp: 75, at: 125, df: 70, sa: 125, sd: 70, sp: 115 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Bastiodon: {\n        types: ['Rock', 'Steel'],\n        bs: { hp: 60, at: 52, df: 168, sa: 47, sd: 138, sp: 30 },\n        weightkg: 149.5,\n        abilities: { 0: 'Sturdy' }\n    },\n    Bibarel: {\n        types: ['Normal', 'Water'],\n        bs: { hp: 79, at: 85, df: 60, sa: 55, sd: 60, sp: 71 },\n        weightkg: 31.5,\n        abilities: { 0: 'Simple' }\n    },\n    Bidoof: {\n        types: ['Normal'],\n        bs: { hp: 59, at: 45, df: 40, sa: 35, sd: 40, sp: 31 },\n        weightkg: 20,\n        nfe: true,\n        abilities: { 0: 'Simple' }\n    },\n    Bonsly: {\n        types: ['Rock'],\n        bs: { hp: 50, at: 80, df: 95, sa: 10, sd: 45, sp: 10 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Breezi: {\n        types: ['Poison', 'Flying'],\n        bs: { hp: 50, at: 46, df: 69, sa: 60, sd: 50, sp: 75 },\n        weightkg: 0.6,\n        nfe: true,\n        abilities: { 0: 'Unburden' }\n    },\n    Bronzong: {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 67, at: 89, df: 116, sa: 79, sd: 116, sp: 33 },\n        weightkg: 187,\n        gender: 'N',\n        abilities: { 0: 'Levitate' }\n    },\n    Bronzor: {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 57, at: 24, df: 86, sa: 24, sd: 86, sp: 23 },\n        weightkg: 60.5,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Levitate' }\n    },\n    Budew: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 40, at: 30, df: 35, sa: 50, sd: 70, sp: 55 },\n        weightkg: 1.2,\n        nfe: true,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Buizel: {\n        types: ['Water'],\n        bs: { hp: 55, at: 65, df: 35, sa: 60, sd: 30, sp: 85 },\n        weightkg: 29.5,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Buneary: {\n        types: ['Normal'],\n        bs: { hp: 55, at: 66, df: 44, sa: 44, sd: 56, sp: 85 },\n        weightkg: 5.5,\n        nfe: true,\n        abilities: { 0: 'Run Away' }\n    },\n    Burmy: {\n        types: ['Bug'],\n        bs: { hp: 40, at: 29, df: 45, sa: 29, sd: 45, sp: 36 },\n        weightkg: 3.4,\n        nfe: true,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Carnivine: {\n        types: ['Grass'],\n        bs: { hp: 74, at: 100, df: 72, sa: 90, sd: 72, sp: 46 },\n        weightkg: 27,\n        abilities: { 0: 'Levitate' }\n    },\n    Chatot: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 76, at: 65, df: 45, sa: 92, sd: 42, sp: 91 },\n        weightkg: 1.9,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Cherrim: {\n        types: ['Grass'],\n        bs: { hp: 70, at: 60, df: 70, sa: 87, sd: 78, sp: 85 },\n        weightkg: 9.3,\n        abilities: { 0: 'Flower Gift' },\n        otherFormes: ['Cherrim-Sunshine']\n    },\n    'Cherrim-Sunshine': {\n        types: ['Grass'],\n        bs: { hp: 70, at: 60, df: 70, sa: 87, sd: 78, sp: 85 },\n        weightkg: 9.3,\n        abilities: { 0: 'Flower Gift' },\n        baseSpecies: 'Cherrim'\n    },\n    Cherubi: {\n        types: ['Grass'],\n        bs: { hp: 45, at: 35, df: 45, sa: 62, sd: 53, sp: 35 },\n        weightkg: 3.3,\n        abilities: { 0: 'Chlorophyll' },\n        nfe: true\n    },\n    Chimchar: {\n        types: ['Fire'],\n        bs: { hp: 44, at: 58, df: 44, sa: 58, sd: 44, sp: 61 },\n        weightkg: 6.2,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Chingling: {\n        types: ['Psychic'],\n        bs: { hp: 45, at: 30, df: 50, sa: 65, sd: 50, sp: 45 },\n        weightkg: 0.6,\n        abilities: { 0: 'Levitate' },\n        nfe: true\n    },\n    Colossoil: {\n        types: ['Ground', 'Dark'],\n        bs: { hp: 133, at: 122, df: 72, sa: 71, sd: 72, sp: 95 },\n        weightkg: 683.6,\n        abilities: { 0: 'Rebound' }\n    },\n    Combee: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 30, at: 30, df: 42, sa: 30, sd: 42, sp: 70 },\n        weightkg: 5.5,\n        nfe: true,\n        abilities: { 0: 'Honey Gather' }\n    },\n    Cranidos: {\n        types: ['Rock'],\n        bs: { hp: 67, at: 125, df: 40, sa: 30, sd: 30, sp: 58 },\n        weightkg: 31.5,\n        nfe: true,\n        abilities: { 0: 'Mold Breaker' }\n    },\n    Cresselia: {\n        types: ['Psychic'],\n        bs: { hp: 120, at: 70, df: 120, sa: 75, sd: 130, sp: 85 },\n        weightkg: 85.6,\n        abilities: { 0: 'Levitate' }\n    },\n    Croagunk: {\n        types: ['Poison', 'Fighting'],\n        bs: { hp: 48, at: 61, df: 40, sa: 61, sd: 40, sp: 50 },\n        weightkg: 23,\n        nfe: true,\n        abilities: { 0: 'Anticipation' }\n    },\n    Cyclohm: {\n        types: ['Electric', 'Dragon'],\n        bs: { hp: 108, at: 60, df: 118, sa: 112, sd: 70, sp: 80 },\n        weightkg: 59,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Darkrai: {\n        types: ['Dark'],\n        bs: { hp: 70, at: 90, df: 90, sa: 135, sd: 90, sp: 125 },\n        weightkg: 50.5,\n        abilities: { 0: 'Bad Dreams' },\n        gender: 'N'\n    },\n    Dialga: {\n        types: ['Steel', 'Dragon'],\n        bs: { hp: 100, at: 120, df: 120, sa: 150, sd: 100, sp: 90 },\n        weightkg: 683,\n        gender: 'N',\n        abilities: { 0: 'Pressure' }\n    },\n    Dorsoil: {\n        types: ['Ground'],\n        bs: { hp: 103, at: 72, df: 52, sa: 61, sd: 52, sp: 65 },\n        weightkg: 145,\n        nfe: true,\n        abilities: { 0: 'Oblivious' }\n    },\n    Drapion: {\n        types: ['Poison', 'Dark'],\n        bs: { hp: 70, at: 90, df: 110, sa: 60, sd: 75, sp: 95 },\n        weightkg: 61.5,\n        abilities: { 0: 'Battle Armor' }\n    },\n    Drifblim: {\n        types: ['Ghost', 'Flying'],\n        bs: { hp: 150, at: 80, df: 44, sa: 90, sd: 54, sp: 80 },\n        weightkg: 15,\n        abilities: { 0: 'Aftermath' }\n    },\n    Drifloon: {\n        types: ['Ghost', 'Flying'],\n        bs: { hp: 90, at: 50, df: 34, sa: 60, sd: 44, sp: 70 },\n        weightkg: 1.2,\n        nfe: true,\n        abilities: { 0: 'Aftermath' }\n    },\n    Duohm: {\n        types: ['Electric', 'Dragon'],\n        bs: { hp: 88, at: 40, df: 103, sa: 77, sd: 60, sp: 60 },\n        weightkg: 19.2,\n        nfe: true,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Dusknoir: {\n        types: ['Ghost'],\n        bs: { hp: 45, at: 100, df: 135, sa: 65, sd: 135, sp: 45 },\n        weightkg: 106.6,\n        abilities: { 0: 'Pressure' }\n    },\n    Electivire: {\n        types: ['Electric'],\n        bs: { hp: 75, at: 123, df: 67, sa: 95, sd: 85, sp: 95 },\n        weightkg: 138.6,\n        abilities: { 0: 'Motor Drive' }\n    },\n    Embirch: {\n        types: ['Fire', 'Grass'],\n        bs: { hp: 60, at: 40, df: 55, sa: 65, sd: 40, sp: 60 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Reckless' }\n    },\n    Empoleon: {\n        types: ['Water', 'Steel'],\n        bs: { hp: 84, at: 86, df: 88, sa: 111, sd: 101, sp: 60 },\n        weightkg: 84.5,\n        abilities: { 0: 'Torrent' }\n    },\n    Fidgit: {\n        types: ['Poison', 'Ground'],\n        bs: { hp: 95, at: 76, df: 109, sa: 90, sd: 80, sp: 105 },\n        weightkg: 53,\n        abilities: { 0: 'Persistent' }\n    },\n    Finneon: {\n        types: ['Water'],\n        bs: { hp: 49, at: 49, df: 56, sa: 49, sd: 61, sp: 66 },\n        weightkg: 7,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Flarelm: {\n        types: ['Fire', 'Grass'],\n        bs: { hp: 90, at: 50, df: 95, sa: 75, sd: 70, sp: 40 },\n        weightkg: 73,\n        nfe: true,\n        abilities: { 0: 'Rock Head' }\n    },\n    Floatzel: {\n        types: ['Water'],\n        bs: { hp: 85, at: 105, df: 55, sa: 85, sd: 50, sp: 115 },\n        weightkg: 33.5,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Froslass: {\n        types: ['Ice', 'Ghost'],\n        bs: { hp: 70, at: 80, df: 70, sa: 80, sd: 70, sp: 110 },\n        weightkg: 26.6,\n        abilities: { 0: 'Snow Cloak' }\n    },\n    Gabite: {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 68, at: 90, df: 65, sa: 50, sd: 55, sp: 82 },\n        weightkg: 56,\n        nfe: true,\n        abilities: { 0: 'Sand Veil' }\n    },\n    Gallade: {\n        types: ['Psychic', 'Fighting'],\n        bs: { hp: 68, at: 125, df: 65, sa: 65, sd: 115, sp: 80 },\n        weightkg: 52,\n        abilities: { 0: 'Steadfast' }\n    },\n    Garchomp: {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 108, at: 130, df: 95, sa: 80, sd: 85, sp: 102 },\n        weightkg: 95,\n        abilities: { 0: 'Sand Veil' }\n    },\n    Gastrodon: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 111, at: 83, df: 68, sa: 92, sd: 82, sp: 39 },\n        weightkg: 29.9,\n        abilities: { 0: 'Sticky Hold' }\n    },\n    Gible: {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 58, at: 70, df: 45, sa: 40, sd: 45, sp: 42 },\n        weightkg: 20.5,\n        nfe: true,\n        abilities: { 0: 'Sand Veil' }\n    },\n    Giratina: {\n        types: ['Ghost', 'Dragon'],\n        bs: { hp: 150, at: 100, df: 120, sa: 100, sd: 120, sp: 90 },\n        weightkg: 750,\n        gender: 'N',\n        otherFormes: ['Giratina-Origin'],\n        abilities: { 0: 'Pressure' }\n    },\n    'Giratina-Origin': {\n        types: ['Ghost', 'Dragon'],\n        bs: { hp: 150, at: 120, df: 100, sa: 120, sd: 100, sp: 90 },\n        weightkg: 650,\n        gender: 'N',\n        abilities: { 0: 'Levitate' },\n        baseSpecies: 'Giratina'\n    },\n    Glaceon: {\n        types: ['Ice'],\n        bs: { hp: 65, at: 60, df: 110, sa: 130, sd: 95, sp: 65 },\n        weightkg: 25.9,\n        abilities: { 0: 'Snow Cloak' }\n    },\n    Glameow: {\n        types: ['Normal'],\n        bs: { hp: 49, at: 55, df: 42, sa: 42, sd: 37, sp: 85 },\n        weightkg: 3.9,\n        nfe: true,\n        abilities: { 0: 'Limber' }\n    },\n    Gliscor: {\n        types: ['Ground', 'Flying'],\n        bs: { hp: 75, at: 95, df: 125, sa: 45, sd: 75, sp: 95 },\n        weightkg: 42.5,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Grotle: {\n        types: ['Grass'],\n        bs: { hp: 75, at: 89, df: 85, sa: 55, sd: 65, sp: 36 },\n        weightkg: 97,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Happiny: {\n        types: ['Normal'],\n        bs: { hp: 100, at: 5, df: 5, sa: 15, sd: 65, sp: 30 },\n        weightkg: 24.4,\n        nfe: true,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Heatran: {\n        types: ['Fire', 'Steel'],\n        bs: { hp: 91, at: 90, df: 106, sa: 130, sd: 106, sp: 77 },\n        weightkg: 430,\n        abilities: { 0: 'Flash Fire' }\n    },\n    Hippopotas: {\n        types: ['Ground'],\n        bs: { hp: 68, at: 72, df: 78, sa: 38, sd: 42, sp: 32 },\n        weightkg: 49.5,\n        nfe: true,\n        abilities: { 0: 'Sand Stream' }\n    },\n    Hippowdon: {\n        types: ['Ground'],\n        bs: { hp: 108, at: 112, df: 118, sa: 68, sd: 72, sp: 47 },\n        weightkg: 300,\n        abilities: { 0: 'Sand Stream' }\n    },\n    Honchkrow: {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 100, at: 125, df: 52, sa: 105, sd: 52, sp: 71 },\n        weightkg: 27.3,\n        abilities: { 0: 'Insomnia' }\n    },\n    Infernape: {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 76, at: 104, df: 71, sa: 104, sd: 71, sp: 108 },\n        weightkg: 55,\n        abilities: { 0: 'Blaze' }\n    },\n    Kitsunoh: {\n        types: ['Ghost', 'Steel'],\n        bs: { hp: 80, at: 103, df: 85, sa: 55, sd: 80, sp: 110 },\n        weightkg: 51,\n        abilities: { 0: 'Frisk' }\n    },\n    Kricketot: {\n        types: ['Bug'],\n        bs: { hp: 37, at: 25, df: 41, sa: 25, sd: 41, sp: 25 },\n        weightkg: 2.2,\n        nfe: true,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Kricketune: {\n        types: ['Bug'],\n        bs: { hp: 77, at: 85, df: 51, sa: 55, sd: 51, sp: 65 },\n        weightkg: 25.5,\n        abilities: { 0: 'Swarm' }\n    },\n    Krilowatt: {\n        types: ['Electric', 'Water'],\n        bs: { hp: 151, at: 84, df: 73, sa: 83, sd: 74, sp: 105 },\n        weightkg: 10.6,\n        abilities: { 0: 'Trace' }\n    },\n    Leafeon: {\n        types: ['Grass'],\n        bs: { hp: 65, at: 110, df: 130, sa: 60, sd: 65, sp: 95 },\n        weightkg: 25.5,\n        abilities: { 0: 'Leaf Guard' }\n    },\n    Lickilicky: {\n        types: ['Normal'],\n        bs: { hp: 110, at: 85, df: 95, sa: 80, sd: 95, sp: 50 },\n        weightkg: 140,\n        abilities: { 0: 'Own Tempo' }\n    },\n    Lopunny: {\n        types: ['Normal'],\n        bs: { hp: 65, at: 76, df: 84, sa: 54, sd: 96, sp: 105 },\n        weightkg: 33.3,\n        abilities: { 0: 'Cute Charm' }\n    },\n    Lucario: {\n        types: ['Fighting', 'Steel'],\n        bs: { hp: 70, at: 110, df: 70, sa: 115, sd: 70, sp: 90 },\n        weightkg: 54,\n        abilities: { 0: 'Steadfast' }\n    },\n    Lumineon: {\n        types: ['Water'],\n        bs: { hp: 69, at: 69, df: 76, sa: 69, sd: 86, sp: 91 },\n        weightkg: 24,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Luxio: {\n        types: ['Electric'],\n        bs: { hp: 60, at: 85, df: 49, sa: 60, sd: 49, sp: 60 },\n        weightkg: 30.5,\n        nfe: true,\n        abilities: { 0: 'Rivalry' }\n    },\n    Luxray: {\n        types: ['Electric'],\n        bs: { hp: 80, at: 120, df: 79, sa: 95, sd: 79, sp: 70 },\n        weightkg: 42,\n        abilities: { 0: 'Rivalry' }\n    },\n    Magmortar: {\n        types: ['Fire'],\n        bs: { hp: 75, at: 95, df: 67, sa: 125, sd: 95, sp: 83 },\n        weightkg: 68,\n        abilities: { 0: 'Flame Body' }\n    },\n    Magnezone: {\n        types: ['Electric', 'Steel'],\n        bs: { hp: 70, at: 70, df: 115, sa: 130, sd: 90, sp: 60 },\n        weightkg: 180,\n        gender: 'N',\n        abilities: { 0: 'Magnet Pull' }\n    },\n    Mamoswine: {\n        types: ['Ice', 'Ground'],\n        bs: { hp: 110, at: 130, df: 80, sa: 70, sd: 60, sp: 80 },\n        weightkg: 291,\n        abilities: { 0: 'Oblivious' }\n    },\n    Manaphy: {\n        types: ['Water'],\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\n        weightkg: 1.4,\n        abilities: { 0: 'Hydration' },\n        gender: 'N'\n    },\n    Mantyke: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 45, at: 20, df: 50, sa: 60, sd: 120, sp: 50 },\n        weightkg: 65,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Mesprit: {\n        types: ['Psychic'],\n        bs: { hp: 80, at: 105, df: 105, sa: 105, sd: 105, sp: 80 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    'Mime Jr.': {\n        types: ['Psychic'],\n        bs: { hp: 20, at: 25, df: 45, sa: 70, sd: 90, sp: 60 },\n        weightkg: 13,\n        nfe: true,\n        abilities: { 0: 'Soundproof' }\n    },\n    Mismagius: {\n        types: ['Ghost'],\n        bs: { hp: 60, at: 60, df: 60, sa: 105, sd: 105, sp: 105 },\n        weightkg: 4.4,\n        abilities: { 0: 'Levitate' }\n    },\n    Monferno: {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 64, at: 78, df: 52, sa: 78, sd: 52, sp: 81 },\n        weightkg: 22,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Monohm: {\n        types: ['Electric'],\n        bs: { hp: 53, at: 40, df: 58, sa: 67, sd: 55, sp: 55 },\n        weightkg: 4.1,\n        nfe: true,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Mothim: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 70, at: 94, df: 50, sa: 94, sd: 50, sp: 66 },\n        weightkg: 23.3,\n        abilities: { 0: 'Swarm' }\n    },\n    Munchlax: {\n        types: ['Normal'],\n        bs: { hp: 135, at: 85, df: 40, sa: 40, sd: 85, sp: 5 },\n        weightkg: 105,\n        nfe: true,\n        abilities: { 0: 'Pickup' }\n    },\n    Nohface: {\n        types: ['Ghost'],\n        bs: { hp: 50, at: 73, df: 50, sa: 30, sd: 50, sp: 80 },\n        weightkg: 5.9,\n        nfe: true,\n        abilities: { 0: 'Frisk' }\n    },\n    Pachirisu: {\n        types: ['Electric'],\n        bs: { hp: 60, at: 45, df: 70, sa: 45, sd: 90, sp: 95 },\n        weightkg: 3.9,\n        abilities: { 0: 'Run Away' }\n    },\n    Palkia: {\n        types: ['Water', 'Dragon'],\n        bs: { hp: 90, at: 120, df: 100, sa: 150, sd: 120, sp: 100 },\n        weightkg: 336,\n        gender: 'N',\n        abilities: { 0: 'Pressure' }\n    },\n    Phione: {\n        types: ['Water'],\n        bs: { hp: 80, at: 80, df: 80, sa: 80, sd: 80, sp: 80 },\n        weightkg: 3.1,\n        abilities: { 0: 'Hydration' },\n        gender: 'N'\n    },\n    'Pichu-Spiky-eared': {\n        types: ['Electric'],\n        bs: { hp: 20, at: 40, df: 15, sa: 35, sd: 35, sp: 60 },\n        weightkg: 2,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pichu'\n    },\n    Piplup: {\n        types: ['Water'],\n        bs: { hp: 53, at: 51, df: 53, sa: 61, sd: 56, sp: 40 },\n        weightkg: 5.2,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    'Porygon-Z': {\n        types: ['Normal'],\n        bs: { hp: 85, at: 80, df: 70, sa: 135, sd: 75, sp: 90 },\n        weightkg: 34,\n        gender: 'N',\n        abilities: { 0: 'Adaptability' }\n    },\n    Prinplup: {\n        types: ['Water'],\n        bs: { hp: 64, at: 66, df: 68, sa: 81, sd: 76, sp: 50 },\n        weightkg: 23,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Privatyke: {\n        types: ['Water', 'Fighting'],\n        bs: { hp: 65, at: 75, df: 65, sa: 40, sd: 60, sp: 45 },\n        weightkg: 35,\n        nfe: true,\n        abilities: { 0: 'Unaware' }\n    },\n    Probopass: {\n        types: ['Rock', 'Steel'],\n        bs: { hp: 60, at: 55, df: 145, sa: 75, sd: 150, sp: 40 },\n        weightkg: 340,\n        abilities: { 0: 'Sturdy' }\n    },\n    Protowatt: {\n        types: ['Electric', 'Water'],\n        bs: { hp: 51, at: 44, df: 33, sa: 43, sd: 34, sp: 65 },\n        weightkg: 0.1,\n        nfe: true,\n        abilities: { 0: 'Trace' }\n    },\n    Purugly: {\n        types: ['Normal'],\n        bs: { hp: 71, at: 82, df: 64, sa: 64, sd: 59, sp: 112 },\n        weightkg: 43.8,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Pyroak: {\n        types: ['Fire', 'Grass'],\n        bs: { hp: 120, at: 70, df: 105, sa: 95, sd: 90, sp: 60 },\n        weightkg: 168,\n        abilities: { 0: 'Rock Head' }\n    },\n    Rampardos: {\n        types: ['Rock'],\n        bs: { hp: 97, at: 165, df: 60, sa: 65, sd: 50, sp: 58 },\n        weightkg: 102.5,\n        abilities: { 0: 'Mold Breaker' }\n    },\n    Rebble: {\n        types: ['Rock'],\n        bs: { hp: 45, at: 25, df: 65, sa: 75, sd: 55, sp: 80 },\n        weightkg: 7,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Levitate' }\n    },\n    Regigigas: {\n        types: ['Normal'],\n        bs: { hp: 110, at: 160, df: 110, sa: 80, sd: 110, sp: 100 },\n        weightkg: 420,\n        abilities: { 0: 'Slow Start' },\n        gender: 'N'\n    },\n    Revenankh: {\n        types: ['Ghost', 'Fighting'],\n        bs: { hp: 90, at: 105, df: 90, sa: 65, sd: 110, sp: 65 },\n        weightkg: 44,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Rhyperior: {\n        types: ['Ground', 'Rock'],\n        bs: { hp: 115, at: 140, df: 130, sa: 55, sd: 55, sp: 40 },\n        weightkg: 282.8,\n        abilities: { 0: 'Lightning Rod' }\n    },\n    Riolu: {\n        types: ['Fighting'],\n        bs: { hp: 40, at: 70, df: 40, sa: 35, sd: 40, sp: 60 },\n        weightkg: 20.2,\n        nfe: true,\n        abilities: { 0: 'Steadfast' }\n    },\n    Roserade: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 60, at: 70, df: 55, sa: 125, sd: 105, sp: 90 },\n        weightkg: 14.5,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Rotom: {\n        types: ['Electric', 'Ghost'],\n        bs: { hp: 50, at: 50, df: 77, sa: 95, sd: 77, sp: 91 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N',\n        otherFormes: ['Rotom-Fan', 'Rotom-Frost', 'Rotom-Heat', 'Rotom-Mow', 'Rotom-Wash']\n    },\n    'Rotom-Mow': {\n        types: ['Electric', 'Ghost'],\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N',\n        baseSpecies: 'Rotom'\n    },\n    'Rotom-Frost': {\n        types: ['Electric', 'Ghost'],\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N',\n        baseSpecies: 'Rotom'\n    },\n    'Rotom-Heat': {\n        types: ['Electric', 'Ghost'],\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N',\n        baseSpecies: 'Rotom'\n    },\n    'Rotom-Fan': {\n        types: ['Electric', 'Ghost'],\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N',\n        baseSpecies: 'Rotom'\n    },\n    'Rotom-Wash': {\n        types: ['Electric', 'Ghost'],\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N',\n        baseSpecies: 'Rotom'\n    },\n    Shaymin: {\n        types: ['Grass'],\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\n        weightkg: 2.1,\n        abilities: { 0: 'Natural Cure' },\n        gender: 'N',\n        otherFormes: ['Shaymin-Sky']\n    },\n    'Shaymin-Sky': {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 100, at: 103, df: 75, sa: 120, sd: 75, sp: 127 },\n        weightkg: 5.2,\n        abilities: { 0: 'Serene Grace' },\n        gender: 'N',\n        baseSpecies: 'Shaymin'\n    },\n    Shellos: {\n        types: ['Water'],\n        bs: { hp: 76, at: 48, df: 48, sa: 57, sd: 62, sp: 34 },\n        weightkg: 6.3,\n        nfe: true,\n        abilities: { 0: 'Sticky Hold' }\n    },\n    Shieldon: {\n        types: ['Rock', 'Steel'],\n        bs: { hp: 30, at: 42, df: 118, sa: 42, sd: 88, sp: 30 },\n        weightkg: 57,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Shinx: {\n        types: ['Electric'],\n        bs: { hp: 45, at: 65, df: 34, sa: 40, sd: 34, sp: 45 },\n        weightkg: 9.5,\n        nfe: true,\n        abilities: { 0: 'Rivalry' }\n    },\n    Skorupi: {\n        types: ['Poison', 'Bug'],\n        bs: { hp: 40, at: 50, df: 90, sa: 30, sd: 55, sp: 65 },\n        weightkg: 12,\n        nfe: true,\n        abilities: { 0: 'Battle Armor' }\n    },\n    Skuntank: {\n        types: ['Poison', 'Dark'],\n        bs: { hp: 103, at: 93, df: 67, sa: 71, sd: 61, sp: 84 },\n        weightkg: 38,\n        abilities: { 0: 'Stench' }\n    },\n    Snover: {\n        types: ['Grass', 'Ice'],\n        bs: { hp: 60, at: 62, df: 50, sa: 62, sd: 60, sp: 40 },\n        weightkg: 50.5,\n        nfe: true,\n        abilities: { 0: 'Snow Warning' }\n    },\n    Spiritomb: {\n        types: ['Ghost', 'Dark'],\n        bs: { hp: 50, at: 92, df: 108, sa: 92, sd: 108, sp: 35 },\n        weightkg: 108,\n        abilities: { 0: 'Pressure' }\n    },\n    Staraptor: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 85, at: 120, df: 70, sa: 50, sd: 50, sp: 100 },\n        weightkg: 24.9,\n        abilities: { 0: 'Intimidate' }\n    },\n    Staravia: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 55, at: 75, df: 50, sa: 40, sd: 40, sp: 80 },\n        weightkg: 15.5,\n        nfe: true,\n        abilities: { 0: 'Intimidate' }\n    },\n    Starly: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 40, at: 55, df: 30, sa: 30, sd: 30, sp: 60 },\n        weightkg: 2,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Stratagem: {\n        types: ['Rock'],\n        bs: { hp: 90, at: 60, df: 65, sa: 120, sd: 70, sp: 130 },\n        weightkg: 45,\n        gender: 'N',\n        abilities: { 0: 'Levitate' }\n    },\n    Stunky: {\n        types: ['Poison', 'Dark'],\n        bs: { hp: 63, at: 63, df: 47, sa: 41, sd: 41, sp: 74 },\n        weightkg: 19.2,\n        nfe: true,\n        abilities: { 0: 'Stench' }\n    },\n    Syclant: {\n        types: ['Ice', 'Bug'],\n        bs: { hp: 70, at: 116, df: 70, sa: 114, sd: 64, sp: 121 },\n        weightkg: 52,\n        abilities: { 0: 'Compound Eyes' }\n    },\n    Syclar: {\n        types: ['Ice', 'Bug'],\n        bs: { hp: 40, at: 76, df: 45, sa: 74, sd: 39, sp: 91 },\n        weightkg: 4,\n        nfe: true,\n        abilities: { 0: 'Compound Eyes' }\n    },\n    Tactite: {\n        types: ['Rock'],\n        bs: { hp: 70, at: 40, df: 65, sa: 100, sd: 65, sp: 95 },\n        weightkg: 16,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Levitate' }\n    },\n    Tangrowth: {\n        types: ['Grass'],\n        bs: { hp: 100, at: 100, df: 125, sa: 110, sd: 50, sp: 50 },\n        weightkg: 128.6,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Togekiss: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 85, at: 50, df: 95, sa: 120, sd: 115, sp: 80 },\n        weightkg: 38,\n        abilities: { 0: 'Hustle' }\n    },\n    Torterra: {\n        types: ['Grass', 'Ground'],\n        bs: { hp: 95, at: 109, df: 105, sa: 75, sd: 85, sp: 56 },\n        weightkg: 310,\n        abilities: { 0: 'Overgrow' }\n    },\n    Toxicroak: {\n        types: ['Poison', 'Fighting'],\n        bs: { hp: 83, at: 106, df: 65, sa: 86, sd: 65, sp: 85 },\n        weightkg: 44.4,\n        abilities: { 0: 'Anticipation' }\n    },\n    Turtwig: {\n        types: ['Grass'],\n        bs: { hp: 55, at: 68, df: 64, sa: 45, sd: 55, sp: 31 },\n        weightkg: 10.2,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Uxie: {\n        types: ['Psychic'],\n        bs: { hp: 75, at: 75, df: 130, sa: 75, sd: 130, sp: 95 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Vespiquen: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 70, at: 80, df: 102, sa: 80, sd: 102, sp: 40 },\n        weightkg: 38.5,\n        abilities: { 0: 'Pressure' }\n    },\n    Voodoll: {\n        types: ['Normal', 'Dark'],\n        bs: { hp: 55, at: 40, df: 55, sa: 75, sd: 50, sp: 70 },\n        weightkg: 25,\n        nfe: true,\n        abilities: { 0: 'Volt Absorb' }\n    },\n    Voodoom: {\n        types: ['Fighting', 'Dark'],\n        bs: { hp: 90, at: 85, df: 80, sa: 105, sd: 80, sp: 110 },\n        weightkg: 75.5,\n        abilities: { 0: 'Volt Absorb' }\n    },\n    Weavile: {\n        types: ['Dark', 'Ice'],\n        bs: { hp: 70, at: 120, df: 65, sa: 45, sd: 85, sp: 125 },\n        weightkg: 34,\n        abilities: { 0: 'Pressure' }\n    },\n    Wormadam: {\n        types: ['Bug', 'Grass'],\n        bs: { hp: 60, at: 59, df: 85, sa: 79, sd: 105, sp: 36 },\n        weightkg: 6.5,\n        abilities: { 0: 'Anticipation' },\n        otherFormes: ['Wormadam-Sandy', 'Wormadam-Trash']\n    },\n    'Wormadam-Sandy': {\n        types: ['Bug', 'Ground'],\n        bs: { hp: 60, at: 79, df: 105, sa: 59, sd: 85, sp: 36 },\n        weightkg: 6.5,\n        abilities: { 0: 'Anticipation' },\n        baseSpecies: 'Wormadam'\n    },\n    'Wormadam-Trash': {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 60, at: 69, df: 95, sa: 69, sd: 95, sp: 36 },\n        weightkg: 6.5,\n        abilities: { 0: 'Anticipation' },\n        baseSpecies: 'Wormadam'\n    },\n    Yanmega: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 86, at: 76, df: 86, sa: 116, sd: 56, sp: 95 },\n        weightkg: 51.5,\n        abilities: { 0: 'Speed Boost' }\n    }\n};\nvar DPP = (0, util_1.extend)(true, {}, ADV, DPP_PATCH);\nvar BW_PATCH = {\n    'Rotom-Fan': { types: ['Electric', 'Flying'] },\n    'Rotom-Frost': { types: ['Electric', 'Ice'] },\n    'Rotom-Heat': { types: ['Electric', 'Fire'] },\n    'Rotom-Mow': { types: ['Electric', 'Grass'] },\n    'Rotom-Wash': { types: ['Electric', 'Water'] },\n    Accelgor: {\n        types: ['Bug'],\n        bs: { hp: 80, at: 70, df: 40, sa: 100, sd: 60, sp: 145 },\n        weightkg: 25.3,\n        abilities: { 0: 'Hydration' }\n    },\n    Alomomola: {\n        types: ['Water'],\n        bs: { hp: 165, at: 75, df: 80, sa: 40, sd: 45, sp: 65 },\n        weightkg: 31.6,\n        abilities: { 0: 'Healer' }\n    },\n    Amoonguss: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 114, at: 85, df: 70, sa: 85, sd: 80, sp: 30 },\n        weightkg: 10.5,\n        abilities: { 0: 'Effect Spore' }\n    },\n    Archen: {\n        types: ['Rock', 'Flying'],\n        bs: { hp: 55, at: 112, df: 45, sa: 74, sd: 45, sp: 70 },\n        weightkg: 9.5,\n        abilities: { 0: 'Defeatist' },\n        nfe: true\n    },\n    Archeops: {\n        types: ['Rock', 'Flying'],\n        bs: { hp: 75, at: 140, df: 65, sa: 112, sd: 65, sp: 110 },\n        weightkg: 32,\n        abilities: { 0: 'Defeatist' }\n    },\n    Argalis: {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 60, at: 90, df: 89, sa: 87, sd: 40, sp: 54 },\n        weightkg: 341.4,\n        nfe: true,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Audino: {\n        types: ['Normal'],\n        bs: { hp: 103, at: 60, df: 86, sa: 60, sd: 86, sp: 50 },\n        weightkg: 31,\n        abilities: { 0: 'Healer' }\n    },\n    Aurumoth: {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 110, at: 120, df: 99, sa: 117, sd: 60, sp: 94 },\n        weightkg: 193,\n        abilities: { 0: 'Weak Armor' }\n    },\n    Axew: {\n        types: ['Dragon'],\n        bs: { hp: 46, at: 87, df: 60, sa: 30, sd: 40, sp: 57 },\n        weightkg: 18,\n        nfe: true,\n        abilities: { 0: 'Rivalry' }\n    },\n    Basculin: {\n        types: ['Water'],\n        bs: { hp: 70, at: 92, df: 65, sa: 80, sd: 55, sp: 98 },\n        weightkg: 18,\n        abilities: { 0: 'Reckless' },\n        otherFormes: ['Basculin-Blue-Striped']\n    },\n    'Basculin-Blue-Striped': {\n        types: ['Water'],\n        bs: { hp: 70, at: 92, df: 65, sa: 80, sd: 55, sp: 98 },\n        weightkg: 18,\n        abilities: { 0: 'Rock Head' },\n        baseSpecies: 'Basculin'\n    },\n    Beartic: {\n        types: ['Ice'],\n        bs: { hp: 95, at: 110, df: 80, sa: 70, sd: 80, sp: 50 },\n        weightkg: 260,\n        abilities: { 0: 'Snow Cloak' }\n    },\n    Beheeyem: {\n        types: ['Psychic'],\n        bs: { hp: 75, at: 75, df: 75, sa: 125, sd: 95, sp: 40 },\n        weightkg: 34.5,\n        abilities: { 0: 'Telepathy' }\n    },\n    Bisharp: {\n        types: ['Dark', 'Steel'],\n        bs: { hp: 65, at: 125, df: 100, sa: 60, sd: 70, sp: 70 },\n        weightkg: 70,\n        abilities: { 0: 'Defiant' }\n    },\n    Blitzle: {\n        types: ['Electric'],\n        bs: { hp: 45, at: 60, df: 32, sa: 50, sd: 32, sp: 76 },\n        weightkg: 29.8,\n        nfe: true,\n        abilities: { 0: 'Lightning Rod' }\n    },\n    Boldore: {\n        types: ['Rock'],\n        bs: { hp: 70, at: 105, df: 105, sa: 50, sd: 40, sp: 20 },\n        weightkg: 102,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Bouffalant: {\n        types: ['Normal'],\n        bs: { hp: 95, at: 110, df: 95, sa: 40, sd: 95, sp: 55 },\n        weightkg: 94.6,\n        abilities: { 0: 'Reckless' }\n    },\n    Brattler: {\n        types: ['Dark', 'Grass'],\n        bs: { hp: 80, at: 70, df: 40, sa: 20, sd: 90, sp: 30 },\n        weightkg: 11.5,\n        nfe: true,\n        abilities: { 0: 'Harvest' }\n    },\n    Braviary: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 100, at: 123, df: 75, sa: 57, sd: 75, sp: 80 },\n        weightkg: 41,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Carracosta: {\n        types: ['Water', 'Rock'],\n        bs: { hp: 74, at: 108, df: 133, sa: 83, sd: 65, sp: 32 },\n        weightkg: 81,\n        abilities: { 0: 'Solid Rock' }\n    },\n    Cawdet: {\n        types: ['Steel', 'Flying'],\n        bs: { hp: 35, at: 72, df: 85, sa: 40, sd: 55, sp: 88 },\n        weightkg: 25,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Cawmodore: {\n        types: ['Steel', 'Flying'],\n        bs: { hp: 50, at: 92, df: 130, sa: 65, sd: 75, sp: 118 },\n        weightkg: 37,\n        abilities: { 0: 'Intimidate' }\n    },\n    Chandelure: {\n        types: ['Ghost', 'Fire'],\n        bs: { hp: 60, at: 55, df: 90, sa: 145, sd: 90, sp: 80 },\n        weightkg: 34.3,\n        abilities: { 0: 'Flash Fire' }\n    },\n    Cinccino: {\n        types: ['Normal'],\n        bs: { hp: 75, at: 95, df: 60, sa: 65, sd: 60, sp: 115 },\n        weightkg: 7.5,\n        abilities: { 0: 'Cute Charm' }\n    },\n    Cobalion: {\n        types: ['Steel', 'Fighting'],\n        bs: { hp: 91, at: 90, df: 129, sa: 90, sd: 72, sp: 108 },\n        weightkg: 250,\n        abilities: { 0: 'Justified' },\n        gender: 'N'\n    },\n    Cofagrigus: {\n        types: ['Ghost'],\n        bs: { hp: 58, at: 50, df: 145, sa: 95, sd: 105, sp: 30 },\n        weightkg: 76.5,\n        abilities: { 0: 'Mummy' }\n    },\n    Conkeldurr: {\n        types: ['Fighting'],\n        bs: { hp: 105, at: 140, df: 95, sa: 55, sd: 65, sp: 45 },\n        weightkg: 87,\n        abilities: { 0: 'Guts' }\n    },\n    Cottonee: {\n        types: ['Grass'],\n        bs: { hp: 40, at: 27, df: 60, sa: 37, sd: 50, sp: 66 },\n        weightkg: 0.6,\n        nfe: true,\n        abilities: { 0: 'Prankster' }\n    },\n    Crustle: {\n        types: ['Bug', 'Rock'],\n        bs: { hp: 70, at: 95, df: 125, sa: 65, sd: 75, sp: 45 },\n        weightkg: 200,\n        abilities: { 0: 'Sturdy' }\n    },\n    Cryogonal: {\n        types: ['Ice'],\n        bs: { hp: 70, at: 50, df: 30, sa: 95, sd: 135, sp: 105 },\n        weightkg: 148,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Cubchoo: {\n        types: ['Ice'],\n        bs: { hp: 55, at: 70, df: 40, sa: 60, sd: 40, sp: 40 },\n        weightkg: 8.5,\n        nfe: true,\n        abilities: { 0: 'Snow Cloak' }\n    },\n    Cupra: {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 50, at: 60, df: 49, sa: 67, sd: 30, sp: 44 },\n        weightkg: 4.8,\n        nfe: true,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Darmanitan: {\n        types: ['Fire'],\n        bs: { hp: 105, at: 140, df: 55, sa: 30, sd: 55, sp: 95 },\n        weightkg: 92.9,\n        abilities: { 0: 'Sheer Force' },\n        otherFormes: ['Darmanitan-Zen']\n    },\n    'Darmanitan-Zen': {\n        types: ['Fire', 'Psychic'],\n        bs: { hp: 105, at: 30, df: 105, sa: 140, sd: 105, sp: 55 },\n        weightkg: 92.9,\n        baseSpecies: 'Darmanitan',\n        abilities: { 0: 'Zen Mode' }\n    },\n    Darumaka: {\n        types: ['Fire'],\n        bs: { hp: 70, at: 90, df: 45, sa: 15, sd: 45, sp: 50 },\n        weightkg: 37.5,\n        nfe: true,\n        abilities: { 0: 'Hustle' }\n    },\n    Deerling: {\n        types: ['Normal', 'Grass'],\n        bs: { hp: 60, at: 60, df: 50, sa: 40, sd: 50, sp: 75 },\n        weightkg: 19.5,\n        nfe: true,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Deino: {\n        types: ['Dark', 'Dragon'],\n        bs: { hp: 52, at: 65, df: 50, sa: 45, sd: 50, sp: 38 },\n        weightkg: 17.3,\n        abilities: { 0: 'Hustle' },\n        nfe: true\n    },\n    Dewott: {\n        types: ['Water'],\n        bs: { hp: 75, at: 75, df: 60, sa: 83, sd: 60, sp: 60 },\n        weightkg: 24.5,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Drilbur: {\n        types: ['Ground'],\n        bs: { hp: 60, at: 85, df: 40, sa: 30, sd: 45, sp: 68 },\n        weightkg: 8.5,\n        nfe: true,\n        abilities: { 0: 'Sand Rush' }\n    },\n    Druddigon: {\n        types: ['Dragon'],\n        bs: { hp: 77, at: 120, df: 90, sa: 60, sd: 90, sp: 48 },\n        weightkg: 139,\n        abilities: { 0: 'Rough Skin' }\n    },\n    Ducklett: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 62, at: 44, df: 50, sa: 44, sd: 50, sp: 55 },\n        weightkg: 5.5,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Duosion: {\n        types: ['Psychic'],\n        bs: { hp: 65, at: 40, df: 50, sa: 125, sd: 60, sp: 30 },\n        weightkg: 8,\n        nfe: true,\n        abilities: { 0: 'Overcoat' }\n    },\n    Durant: {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 58, at: 109, df: 112, sa: 48, sd: 48, sp: 109 },\n        weightkg: 33,\n        abilities: { 0: 'Swarm' }\n    },\n    Dwebble: {\n        types: ['Bug', 'Rock'],\n        bs: { hp: 50, at: 65, df: 85, sa: 35, sd: 35, sp: 55 },\n        weightkg: 14.5,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Eelektrik: {\n        types: ['Electric'],\n        bs: { hp: 65, at: 85, df: 70, sa: 75, sd: 70, sp: 40 },\n        weightkg: 22,\n        abilities: { 0: 'Levitate' },\n        nfe: true\n    },\n    Eelektross: {\n        types: ['Electric'],\n        bs: { hp: 85, at: 115, df: 80, sa: 105, sd: 80, sp: 50 },\n        weightkg: 80.5,\n        abilities: { 0: 'Levitate' }\n    },\n    Elgyem: {\n        types: ['Psychic'],\n        bs: { hp: 55, at: 55, df: 55, sa: 85, sd: 55, sp: 30 },\n        weightkg: 9,\n        nfe: true,\n        abilities: { 0: 'Telepathy' }\n    },\n    Emboar: {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 110, at: 123, df: 65, sa: 100, sd: 65, sp: 65 },\n        weightkg: 150,\n        abilities: { 0: 'Blaze' }\n    },\n    Emolga: {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 55, at: 75, df: 60, sa: 75, sd: 60, sp: 103 },\n        weightkg: 5,\n        abilities: { 0: 'Static' }\n    },\n    Escavalier: {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 70, at: 135, df: 105, sa: 60, sd: 105, sp: 20 },\n        weightkg: 33,\n        abilities: { 0: 'Swarm' }\n    },\n    Excadrill: {\n        types: ['Ground', 'Steel'],\n        bs: { hp: 110, at: 135, df: 60, sa: 50, sd: 65, sp: 88 },\n        weightkg: 40.4,\n        abilities: { 0: 'Sand Rush' }\n    },\n    Ferroseed: {\n        types: ['Grass', 'Steel'],\n        bs: { hp: 44, at: 50, df: 91, sa: 24, sd: 86, sp: 10 },\n        weightkg: 18.8,\n        nfe: true,\n        abilities: { 0: 'Iron Barbs' }\n    },\n    Ferrothorn: {\n        types: ['Grass', 'Steel'],\n        bs: { hp: 74, at: 94, df: 131, sa: 54, sd: 116, sp: 20 },\n        weightkg: 110,\n        abilities: { 0: 'Iron Barbs' }\n    },\n    Foongus: {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 69, at: 55, df: 45, sa: 55, sd: 55, sp: 15 },\n        weightkg: 1,\n        nfe: true,\n        abilities: { 0: 'Effect Spore' }\n    },\n    Fraxure: {\n        types: ['Dragon'],\n        bs: { hp: 66, at: 117, df: 70, sa: 40, sd: 50, sp: 67 },\n        weightkg: 36,\n        nfe: true,\n        abilities: { 0: 'Rivalry' }\n    },\n    Frillish: {\n        types: ['Water', 'Ghost'],\n        bs: { hp: 55, at: 40, df: 50, sa: 65, sd: 85, sp: 40 },\n        weightkg: 33,\n        nfe: true,\n        abilities: { 0: 'Water Absorb' }\n    },\n    Galvantula: {\n        types: ['Bug', 'Electric'],\n        bs: { hp: 70, at: 77, df: 60, sa: 97, sd: 60, sp: 108 },\n        weightkg: 14.3,\n        abilities: { 0: 'Compound Eyes' }\n    },\n    Garbodor: {\n        types: ['Poison'],\n        bs: { hp: 80, at: 95, df: 82, sa: 60, sd: 82, sp: 75 },\n        weightkg: 107.3,\n        abilities: { 0: 'Stench' }\n    },\n    Genesect: {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\n        weightkg: 82.5,\n        abilities: { 0: 'Download' },\n        gender: 'N',\n        otherFormes: ['Genesect-Burn', 'Genesect-Chill', 'Genesect-Douse', 'Genesect-Shock']\n    },\n    'Genesect-Burn': {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\n        weightkg: 82.5,\n        abilities: { 0: 'Download' },\n        gender: 'N',\n        baseSpecies: 'Genesect'\n    },\n    'Genesect-Chill': {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\n        weightkg: 82.5,\n        abilities: { 0: 'Download' },\n        gender: 'N',\n        baseSpecies: 'Genesect'\n    },\n    'Genesect-Douse': {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\n        weightkg: 82.5,\n        abilities: { 0: 'Download' },\n        gender: 'N',\n        baseSpecies: 'Genesect'\n    },\n    'Genesect-Shock': {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\n        weightkg: 82.5,\n        abilities: { 0: 'Download' },\n        gender: 'N',\n        baseSpecies: 'Genesect'\n    },\n    Gigalith: {\n        types: ['Rock'],\n        bs: { hp: 85, at: 135, df: 130, sa: 60, sd: 70, sp: 25 },\n        weightkg: 260,\n        abilities: { 0: 'Sturdy' }\n    },\n    Golett: {\n        types: ['Ground', 'Ghost'],\n        bs: { hp: 59, at: 74, df: 50, sa: 35, sd: 50, sp: 35 },\n        weightkg: 92,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Iron Fist' }\n    },\n    Golurk: {\n        types: ['Ground', 'Ghost'],\n        bs: { hp: 89, at: 124, df: 80, sa: 55, sd: 80, sp: 55 },\n        weightkg: 330,\n        gender: 'N',\n        abilities: { 0: 'Iron Fist' }\n    },\n    Gothita: {\n        types: ['Psychic'],\n        bs: { hp: 45, at: 30, df: 50, sa: 55, sd: 65, sp: 45 },\n        weightkg: 5.8,\n        nfe: true,\n        abilities: { 0: 'Frisk' }\n    },\n    Gothitelle: {\n        types: ['Psychic'],\n        bs: { hp: 70, at: 55, df: 95, sa: 95, sd: 110, sp: 65 },\n        weightkg: 44,\n        abilities: { 0: 'Frisk' }\n    },\n    Gothorita: {\n        types: ['Psychic'],\n        bs: { hp: 60, at: 45, df: 70, sa: 75, sd: 85, sp: 55 },\n        weightkg: 18,\n        nfe: true,\n        abilities: { 0: 'Frisk' }\n    },\n    Gurdurr: {\n        types: ['Fighting'],\n        bs: { hp: 85, at: 105, df: 85, sa: 40, sd: 50, sp: 40 },\n        weightkg: 40,\n        nfe: true,\n        abilities: { 0: 'Guts' }\n    },\n    Haxorus: {\n        types: ['Dragon'],\n        bs: { hp: 76, at: 147, df: 90, sa: 60, sd: 70, sp: 97 },\n        weightkg: 105.5,\n        abilities: { 0: 'Rivalry' }\n    },\n    Heatmor: {\n        types: ['Fire'],\n        bs: { hp: 85, at: 97, df: 66, sa: 105, sd: 66, sp: 65 },\n        weightkg: 58,\n        abilities: { 0: 'Gluttony' }\n    },\n    Herdier: {\n        types: ['Normal'],\n        bs: { hp: 65, at: 80, df: 65, sa: 35, sd: 65, sp: 60 },\n        weightkg: 14.7,\n        nfe: true,\n        abilities: { 0: 'Intimidate' }\n    },\n    Hydreigon: {\n        types: ['Dark', 'Dragon'],\n        bs: { hp: 92, at: 105, df: 90, sa: 125, sd: 90, sp: 98 },\n        weightkg: 160,\n        abilities: { 0: 'Levitate' }\n    },\n    Jellicent: {\n        types: ['Water', 'Ghost'],\n        bs: { hp: 100, at: 60, df: 70, sa: 85, sd: 105, sp: 60 },\n        weightkg: 135,\n        abilities: { 0: 'Water Absorb' }\n    },\n    Joltik: {\n        types: ['Bug', 'Electric'],\n        bs: { hp: 50, at: 47, df: 50, sa: 57, sd: 50, sp: 65 },\n        weightkg: 0.6,\n        nfe: true,\n        abilities: { 0: 'Compound Eyes' }\n    },\n    Karrablast: {\n        types: ['Bug'],\n        bs: { hp: 50, at: 75, df: 45, sa: 40, sd: 45, sp: 60 },\n        weightkg: 5.9,\n        nfe: true,\n        abilities: { 0: 'Swarm' }\n    },\n    Keldeo: {\n        types: ['Water', 'Fighting'],\n        bs: { hp: 91, at: 72, df: 90, sa: 129, sd: 90, sp: 108 },\n        weightkg: 48.5,\n        abilities: { 0: 'Justified' },\n        gender: 'N',\n        otherFormes: ['Keldeo-Resolute']\n    },\n    'Keldeo-Resolute': {\n        types: ['Water', 'Fighting'],\n        bs: { hp: 91, at: 72, df: 90, sa: 129, sd: 90, sp: 108 },\n        weightkg: 48.5,\n        abilities: { 0: 'Justified' },\n        gender: 'N',\n        baseSpecies: 'Keldeo'\n    },\n    Klang: {\n        types: ['Steel'],\n        bs: { hp: 60, at: 80, df: 95, sa: 70, sd: 85, sp: 50 },\n        weightkg: 51,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Plus' }\n    },\n    Klink: {\n        types: ['Steel'],\n        bs: { hp: 40, at: 55, df: 70, sa: 45, sd: 60, sp: 30 },\n        weightkg: 21,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Plus' }\n    },\n    Klinklang: {\n        types: ['Steel'],\n        bs: { hp: 60, at: 100, df: 115, sa: 70, sd: 85, sp: 90 },\n        weightkg: 81,\n        gender: 'N',\n        abilities: { 0: 'Plus' }\n    },\n    Krokorok: {\n        types: ['Ground', 'Dark'],\n        bs: { hp: 60, at: 82, df: 45, sa: 45, sd: 45, sp: 74 },\n        weightkg: 33.4,\n        nfe: true,\n        abilities: { 0: 'Intimidate' }\n    },\n    Krookodile: {\n        types: ['Ground', 'Dark'],\n        bs: { hp: 95, at: 117, df: 70, sa: 65, sd: 70, sp: 92 },\n        weightkg: 96.3,\n        abilities: { 0: 'Intimidate' }\n    },\n    Kyurem: {\n        types: ['Dragon', 'Ice'],\n        bs: { hp: 125, at: 130, df: 90, sa: 130, sd: 90, sp: 95 },\n        weightkg: 325,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        otherFormes: ['Kyurem-Black', 'Kyurem-White']\n    },\n    'Kyurem-Black': {\n        types: ['Dragon', 'Ice'],\n        bs: { hp: 125, at: 170, df: 100, sa: 120, sd: 90, sp: 95 },\n        weightkg: 325,\n        abilities: { 0: 'Teravolt' },\n        gender: 'N',\n        baseSpecies: 'Kyurem'\n    },\n    'Kyurem-White': {\n        types: ['Dragon', 'Ice'],\n        bs: { hp: 125, at: 120, df: 90, sa: 170, sd: 100, sp: 95 },\n        weightkg: 325,\n        abilities: { 0: 'Turboblaze' },\n        gender: 'N',\n        baseSpecies: 'Kyurem'\n    },\n    Lampent: {\n        types: ['Ghost', 'Fire'],\n        bs: { hp: 60, at: 40, df: 60, sa: 95, sd: 60, sp: 55 },\n        weightkg: 13,\n        nfe: true,\n        abilities: { 0: 'Flash Fire' }\n    },\n    Landorus: {\n        types: ['Ground', 'Flying'],\n        bs: { hp: 89, at: 125, df: 90, sa: 115, sd: 80, sp: 101 },\n        weightkg: 68,\n        abilities: { 0: 'Sand Force' },\n        otherFormes: ['Landorus-Therian']\n    },\n    'Landorus-Therian': {\n        types: ['Ground', 'Flying'],\n        bs: { hp: 89, at: 145, df: 90, sa: 105, sd: 80, sp: 91 },\n        weightkg: 68,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Landorus'\n    },\n    Larvesta: {\n        types: ['Bug', 'Fire'],\n        bs: { hp: 55, at: 85, df: 55, sa: 50, sd: 55, sp: 60 },\n        weightkg: 28.8,\n        nfe: true,\n        abilities: { 0: 'Flame Body' }\n    },\n    Leavanny: {\n        types: ['Bug', 'Grass'],\n        bs: { hp: 75, at: 103, df: 80, sa: 70, sd: 70, sp: 92 },\n        weightkg: 20.5,\n        abilities: { 0: 'Swarm' }\n    },\n    Liepard: {\n        types: ['Dark'],\n        bs: { hp: 64, at: 88, df: 50, sa: 88, sd: 50, sp: 106 },\n        weightkg: 37.5,\n        abilities: { 0: 'Limber' }\n    },\n    Lilligant: {\n        types: ['Grass'],\n        bs: { hp: 70, at: 60, df: 75, sa: 110, sd: 75, sp: 90 },\n        weightkg: 16.3,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Lillipup: {\n        types: ['Normal'],\n        bs: { hp: 45, at: 60, df: 45, sa: 25, sd: 45, sp: 55 },\n        weightkg: 4.1,\n        nfe: true,\n        abilities: { 0: 'Vital Spirit' }\n    },\n    Litwick: {\n        types: ['Ghost', 'Fire'],\n        bs: { hp: 50, at: 30, df: 55, sa: 65, sd: 55, sp: 20 },\n        weightkg: 3.1,\n        nfe: true,\n        abilities: { 0: 'Flash Fire' }\n    },\n    Malaconda: {\n        types: ['Dark', 'Grass'],\n        bs: { hp: 115, at: 100, df: 60, sa: 40, sd: 130, sp: 55 },\n        weightkg: 108.8,\n        abilities: { 0: 'Harvest' }\n    },\n    Mandibuzz: {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 110, at: 65, df: 105, sa: 55, sd: 95, sp: 80 },\n        weightkg: 39.5,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Maractus: {\n        types: ['Grass'],\n        bs: { hp: 75, at: 86, df: 67, sa: 106, sd: 67, sp: 60 },\n        weightkg: 28,\n        abilities: { 0: 'Water Absorb' }\n    },\n    Meloetta: {\n        types: ['Normal', 'Psychic'],\n        bs: { hp: 100, at: 77, df: 77, sa: 128, sd: 128, sp: 90 },\n        weightkg: 6.5,\n        abilities: { 0: 'Serene Grace' },\n        otherFormes: ['Meloetta-Pirouette'],\n        gender: 'N'\n    },\n    'Meloetta-Pirouette': {\n        types: ['Normal', 'Fighting'],\n        bs: { hp: 100, at: 128, df: 90, sa: 77, sd: 77, sp: 128 },\n        weightkg: 6.5,\n        abilities: { 0: 'Serene Grace' },\n        baseSpecies: 'Meloetta',\n        gender: 'N'\n    },\n    Mienfoo: {\n        types: ['Fighting'],\n        bs: { hp: 45, at: 85, df: 50, sa: 55, sd: 50, sp: 65 },\n        weightkg: 20,\n        nfe: true,\n        abilities: { 0: 'Inner Focus' }\n    },\n    Mienshao: {\n        types: ['Fighting'],\n        bs: { hp: 65, at: 125, df: 60, sa: 95, sd: 60, sp: 105 },\n        weightkg: 35.5,\n        abilities: { 0: 'Inner Focus' }\n    },\n    Minccino: {\n        types: ['Normal'],\n        bs: { hp: 55, at: 50, df: 40, sa: 40, sd: 40, sp: 75 },\n        weightkg: 5.8,\n        nfe: true,\n        abilities: { 0: 'Cute Charm' }\n    },\n    Mollux: {\n        types: ['Fire', 'Poison'],\n        bs: { hp: 95, at: 45, df: 83, sa: 131, sd: 105, sp: 76 },\n        weightkg: 41,\n        abilities: { 0: 'Dry Skin' }\n    },\n    Munna: {\n        types: ['Psychic'],\n        bs: { hp: 76, at: 25, df: 45, sa: 67, sd: 55, sp: 24 },\n        weightkg: 23.3,\n        nfe: true,\n        abilities: { 0: 'Forewarn' }\n    },\n    Musharna: {\n        types: ['Psychic'],\n        bs: { hp: 116, at: 55, df: 85, sa: 107, sd: 95, sp: 29 },\n        weightkg: 60.5,\n        abilities: { 0: 'Forewarn' }\n    },\n    Necturine: {\n        types: ['Grass', 'Ghost'],\n        bs: { hp: 49, at: 55, df: 60, sa: 50, sd: 75, sp: 51 },\n        weightkg: 1.8,\n        nfe: true,\n        abilities: { 0: 'Anticipation' }\n    },\n    Necturna: {\n        types: ['Grass', 'Ghost'],\n        bs: { hp: 64, at: 120, df: 100, sa: 85, sd: 120, sp: 81 },\n        weightkg: 49.6,\n        abilities: { 0: 'Forewarn' }\n    },\n    Oshawott: {\n        types: ['Water'],\n        bs: { hp: 55, at: 55, df: 45, sa: 63, sd: 45, sp: 45 },\n        weightkg: 5.9,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Palpitoad: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 75, at: 65, df: 55, sa: 65, sd: 55, sp: 69 },\n        weightkg: 17,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Panpour: {\n        types: ['Water'],\n        bs: { hp: 50, at: 53, df: 48, sa: 53, sd: 48, sp: 64 },\n        weightkg: 13.5,\n        nfe: true,\n        abilities: { 0: 'Gluttony' }\n    },\n    Pansage: {\n        types: ['Grass'],\n        bs: { hp: 50, at: 53, df: 48, sa: 53, sd: 48, sp: 64 },\n        weightkg: 10.5,\n        nfe: true,\n        abilities: { 0: 'Gluttony' }\n    },\n    Pansear: {\n        types: ['Fire'],\n        bs: { hp: 50, at: 53, df: 48, sa: 53, sd: 48, sp: 64 },\n        weightkg: 11,\n        nfe: true,\n        abilities: { 0: 'Gluttony' }\n    },\n    Patrat: {\n        types: ['Normal'],\n        bs: { hp: 45, at: 55, df: 39, sa: 35, sd: 39, sp: 42 },\n        weightkg: 11.6,\n        nfe: true,\n        abilities: { 0: 'Run Away' }\n    },\n    Pawniard: {\n        types: ['Dark', 'Steel'],\n        bs: { hp: 45, at: 85, df: 70, sa: 40, sd: 40, sp: 60 },\n        weightkg: 10.2,\n        nfe: true,\n        abilities: { 0: 'Defiant' }\n    },\n    Petilil: {\n        types: ['Grass'],\n        bs: { hp: 45, at: 35, df: 50, sa: 70, sd: 50, sp: 30 },\n        weightkg: 6.6,\n        nfe: true,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Pidove: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 50, at: 55, df: 50, sa: 36, sd: 30, sp: 43 },\n        weightkg: 2.1,\n        nfe: true,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Pignite: {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 90, at: 93, df: 55, sa: 70, sd: 55, sp: 55 },\n        weightkg: 55.5,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Purrloin: {\n        types: ['Dark'],\n        bs: { hp: 41, at: 50, df: 37, sa: 50, sd: 37, sp: 66 },\n        weightkg: 10.1,\n        nfe: true,\n        abilities: { 0: 'Limber' }\n    },\n    Reshiram: {\n        types: ['Dragon', 'Fire'],\n        bs: { hp: 100, at: 120, df: 100, sa: 150, sd: 120, sp: 90 },\n        weightkg: 330,\n        abilities: { 0: 'Turboblaze' },\n        gender: 'N'\n    },\n    Reuniclus: {\n        types: ['Psychic'],\n        bs: { hp: 110, at: 65, df: 75, sa: 125, sd: 85, sp: 30 },\n        weightkg: 20.1,\n        abilities: { 0: 'Overcoat' }\n    },\n    Roggenrola: {\n        types: ['Rock'],\n        bs: { hp: 55, at: 75, df: 85, sa: 25, sd: 25, sp: 15 },\n        weightkg: 18,\n        nfe: true,\n        abilities: { 0: 'Sturdy' }\n    },\n    Rufflet: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 70, at: 83, df: 50, sa: 37, sd: 50, sp: 60 },\n        weightkg: 10.5,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Samurott: {\n        types: ['Water'],\n        bs: { hp: 95, at: 100, df: 85, sa: 108, sd: 70, sp: 70 },\n        weightkg: 94.6,\n        abilities: { 0: 'Torrent' }\n    },\n    Sandile: {\n        types: ['Ground', 'Dark'],\n        bs: { hp: 50, at: 72, df: 35, sa: 35, sd: 35, sp: 65 },\n        weightkg: 15.2,\n        nfe: true,\n        abilities: { 0: 'Intimidate' }\n    },\n    Sawk: {\n        types: ['Fighting'],\n        bs: { hp: 75, at: 125, df: 75, sa: 30, sd: 75, sp: 85 },\n        weightkg: 51,\n        abilities: { 0: 'Sturdy' }\n    },\n    Sawsbuck: {\n        types: ['Normal', 'Grass'],\n        bs: { hp: 80, at: 100, df: 70, sa: 60, sd: 70, sp: 95 },\n        weightkg: 92.5,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    Scolipede: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 60, at: 90, df: 89, sa: 55, sd: 69, sp: 112 },\n        weightkg: 200.5,\n        abilities: { 0: 'Poison Point' }\n    },\n    Scrafty: {\n        types: ['Dark', 'Fighting'],\n        bs: { hp: 65, at: 90, df: 115, sa: 45, sd: 115, sp: 58 },\n        weightkg: 30,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Scraggy: {\n        types: ['Dark', 'Fighting'],\n        bs: { hp: 50, at: 75, df: 70, sa: 35, sd: 70, sp: 48 },\n        weightkg: 11.8,\n        nfe: true,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Scratchet: {\n        types: ['Normal', 'Fighting'],\n        bs: { hp: 55, at: 85, df: 80, sa: 20, sd: 70, sp: 40 },\n        weightkg: 20,\n        nfe: true,\n        abilities: { 0: 'Scrappy' }\n    },\n    Seismitoad: {\n        types: ['Water', 'Ground'],\n        bs: { hp: 105, at: 85, df: 75, sa: 85, sd: 75, sp: 74 },\n        weightkg: 62,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Serperior: {\n        types: ['Grass'],\n        bs: { hp: 75, at: 75, df: 95, sa: 75, sd: 95, sp: 113 },\n        weightkg: 63,\n        abilities: { 0: 'Overgrow' }\n    },\n    Servine: {\n        types: ['Grass'],\n        bs: { hp: 60, at: 60, df: 75, sa: 60, sd: 75, sp: 83 },\n        weightkg: 16,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Sewaddle: {\n        types: ['Bug', 'Grass'],\n        bs: { hp: 45, at: 53, df: 70, sa: 40, sd: 60, sp: 42 },\n        weightkg: 2.5,\n        nfe: true,\n        abilities: { 0: 'Swarm' }\n    },\n    Shelmet: {\n        types: ['Bug'],\n        bs: { hp: 50, at: 40, df: 85, sa: 40, sd: 65, sp: 25 },\n        weightkg: 7.7,\n        nfe: true,\n        abilities: { 0: 'Hydration' }\n    },\n    Sigilyph: {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 72, at: 58, df: 80, sa: 103, sd: 80, sp: 97 },\n        weightkg: 14,\n        abilities: { 0: 'Wonder Skin' }\n    },\n    Simipour: {\n        types: ['Water'],\n        bs: { hp: 75, at: 98, df: 63, sa: 98, sd: 63, sp: 101 },\n        weightkg: 29,\n        abilities: { 0: 'Gluttony' }\n    },\n    Simisage: {\n        types: ['Grass'],\n        bs: { hp: 75, at: 98, df: 63, sa: 98, sd: 63, sp: 101 },\n        weightkg: 30.5,\n        abilities: { 0: 'Gluttony' }\n    },\n    Simisear: {\n        types: ['Fire'],\n        bs: { hp: 75, at: 98, df: 63, sa: 98, sd: 63, sp: 101 },\n        weightkg: 28,\n        abilities: { 0: 'Gluttony' }\n    },\n    Snivy: {\n        types: ['Grass'],\n        bs: { hp: 45, at: 45, df: 55, sa: 45, sd: 55, sp: 63 },\n        weightkg: 8.1,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Solosis: {\n        types: ['Psychic'],\n        bs: { hp: 45, at: 30, df: 40, sa: 105, sd: 50, sp: 20 },\n        weightkg: 1,\n        nfe: true,\n        abilities: { 0: 'Overcoat' }\n    },\n    Stoutland: {\n        types: ['Normal'],\n        bs: { hp: 85, at: 100, df: 90, sa: 45, sd: 90, sp: 80 },\n        weightkg: 61,\n        abilities: { 0: 'Intimidate' }\n    },\n    Stunfisk: {\n        types: ['Ground', 'Electric'],\n        bs: { hp: 109, at: 66, df: 84, sa: 81, sd: 99, sp: 32 },\n        weightkg: 11,\n        abilities: { 0: 'Static' }\n    },\n    Swadloon: {\n        types: ['Bug', 'Grass'],\n        bs: { hp: 55, at: 63, df: 90, sa: 50, sd: 80, sp: 42 },\n        weightkg: 7.3,\n        nfe: true,\n        abilities: { 0: 'Leaf Guard' }\n    },\n    Swanna: {\n        types: ['Water', 'Flying'],\n        bs: { hp: 75, at: 87, df: 63, sa: 87, sd: 63, sp: 98 },\n        weightkg: 24.2,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Swoobat: {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 67, at: 57, df: 55, sa: 77, sd: 55, sp: 114 },\n        weightkg: 10.5,\n        abilities: { 0: 'Unaware' }\n    },\n    Tepig: {\n        types: ['Fire'],\n        bs: { hp: 65, at: 63, df: 45, sa: 45, sd: 45, sp: 45 },\n        weightkg: 9.9,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Terrakion: {\n        types: ['Rock', 'Fighting'],\n        bs: { hp: 91, at: 129, df: 90, sa: 72, sd: 90, sp: 108 },\n        weightkg: 260,\n        abilities: { 0: 'Justified' },\n        gender: 'N'\n    },\n    Throh: {\n        types: ['Fighting'],\n        bs: { hp: 120, at: 100, df: 85, sa: 30, sd: 85, sp: 45 },\n        weightkg: 55.5,\n        abilities: { 0: 'Guts' }\n    },\n    Thundurus: {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 79, at: 115, df: 70, sa: 125, sd: 80, sp: 111 },\n        weightkg: 61,\n        abilities: { 0: 'Prankster' },\n        otherFormes: ['Thundurus-Therian']\n    },\n    'Thundurus-Therian': {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 79, at: 105, df: 70, sa: 145, sd: 80, sp: 101 },\n        weightkg: 61,\n        abilities: { 0: 'Volt Absorb' },\n        baseSpecies: 'Thundurus'\n    },\n    Timburr: {\n        types: ['Fighting'],\n        bs: { hp: 75, at: 80, df: 55, sa: 25, sd: 35, sp: 35 },\n        weightkg: 12.5,\n        nfe: true,\n        abilities: { 0: 'Guts' }\n    },\n    Tirtouga: {\n        types: ['Water', 'Rock'],\n        bs: { hp: 54, at: 78, df: 103, sa: 53, sd: 45, sp: 22 },\n        weightkg: 16.5,\n        nfe: true,\n        abilities: { 0: 'Solid Rock' }\n    },\n    Tomohawk: {\n        types: ['Flying', 'Fighting'],\n        bs: { hp: 105, at: 60, df: 90, sa: 115, sd: 80, sp: 85 },\n        weightkg: 37.2,\n        abilities: { 0: 'Intimidate' }\n    },\n    Tornadus: {\n        types: ['Flying'],\n        bs: { hp: 79, at: 115, df: 70, sa: 125, sd: 80, sp: 111 },\n        weightkg: 63,\n        abilities: { 0: 'Prankster' },\n        otherFormes: ['Tornadus-Therian']\n    },\n    'Tornadus-Therian': {\n        types: ['Flying'],\n        bs: { hp: 79, at: 100, df: 80, sa: 110, sd: 90, sp: 121 },\n        weightkg: 63,\n        abilities: { 0: 'Regenerator' },\n        baseSpecies: 'Tornadus'\n    },\n    Tranquill: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 62, at: 77, df: 62, sa: 50, sd: 42, sp: 65 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Trubbish: {\n        types: ['Poison'],\n        bs: { hp: 50, at: 50, df: 62, sa: 40, sd: 62, sp: 65 },\n        weightkg: 31,\n        nfe: true,\n        abilities: { 0: 'Stench' }\n    },\n    Tympole: {\n        types: ['Water'],\n        bs: { hp: 50, at: 50, df: 40, sa: 50, sd: 40, sp: 64 },\n        weightkg: 4.5,\n        nfe: true,\n        abilities: { 0: 'Swift Swim' }\n    },\n    Tynamo: {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 45, sd: 40, sp: 60 },\n        weightkg: 0.3,\n        abilities: { 0: 'Levitate' },\n        nfe: true\n    },\n    Unfezant: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 80, at: 105, df: 80, sa: 65, sd: 55, sp: 93 },\n        weightkg: 29,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Vanillish: {\n        types: ['Ice'],\n        bs: { hp: 51, at: 65, df: 65, sa: 80, sd: 75, sp: 59 },\n        weightkg: 41,\n        nfe: true,\n        abilities: { 0: 'Ice Body' }\n    },\n    Vanillite: {\n        types: ['Ice'],\n        bs: { hp: 36, at: 50, df: 50, sa: 65, sd: 60, sp: 44 },\n        weightkg: 5.7,\n        nfe: true,\n        abilities: { 0: 'Ice Body' }\n    },\n    Vanilluxe: {\n        types: ['Ice'],\n        bs: { hp: 71, at: 95, df: 85, sa: 110, sd: 95, sp: 79 },\n        weightkg: 57.5,\n        abilities: { 0: 'Ice Body' }\n    },\n    Venipede: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 30, at: 45, df: 59, sa: 30, sd: 39, sp: 57 },\n        weightkg: 5.3,\n        nfe: true,\n        abilities: { 0: 'Poison Point' }\n    },\n    Victini: {\n        types: ['Psychic', 'Fire'],\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\n        weightkg: 4,\n        abilities: { 0: 'Victory Star' },\n        gender: 'N'\n    },\n    Virizion: {\n        types: ['Grass', 'Fighting'],\n        bs: { hp: 91, at: 90, df: 72, sa: 90, sd: 129, sp: 108 },\n        weightkg: 200,\n        abilities: { 0: 'Justified' },\n        gender: 'N'\n    },\n    Volcarona: {\n        types: ['Bug', 'Fire'],\n        bs: { hp: 85, at: 60, df: 65, sa: 135, sd: 105, sp: 100 },\n        weightkg: 46,\n        abilities: { 0: 'Flame Body' }\n    },\n    Vullaby: {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 70, at: 55, df: 75, sa: 45, sd: 65, sp: 60 },\n        weightkg: 9,\n        nfe: true,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Watchog: {\n        types: ['Normal'],\n        bs: { hp: 60, at: 85, df: 69, sa: 60, sd: 69, sp: 77 },\n        weightkg: 27,\n        abilities: { 0: 'Illuminate' }\n    },\n    Whimsicott: {\n        types: ['Grass'],\n        bs: { hp: 60, at: 67, df: 85, sa: 77, sd: 75, sp: 116 },\n        weightkg: 6.6,\n        abilities: { 0: 'Prankster' }\n    },\n    Whirlipede: {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 40, at: 55, df: 99, sa: 40, sd: 79, sp: 47 },\n        weightkg: 58.5,\n        nfe: true,\n        abilities: { 0: 'Poison Point' }\n    },\n    Woobat: {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 55, at: 45, df: 43, sa: 55, sd: 43, sp: 72 },\n        weightkg: 2.1,\n        nfe: true,\n        abilities: { 0: 'Unaware' }\n    },\n    Yamask: {\n        types: ['Ghost'],\n        bs: { hp: 38, at: 30, df: 85, sa: 55, sd: 65, sp: 30 },\n        weightkg: 1.5,\n        abilities: { 0: 'Mummy' },\n        nfe: true\n    },\n    Zebstrika: {\n        types: ['Electric'],\n        bs: { hp: 75, at: 100, df: 63, sa: 80, sd: 63, sp: 116 },\n        weightkg: 79.5,\n        abilities: { 0: 'Lightning Rod' }\n    },\n    Zekrom: {\n        types: ['Dragon', 'Electric'],\n        bs: { hp: 100, at: 150, df: 120, sa: 120, sd: 100, sp: 90 },\n        weightkg: 345,\n        abilities: { 0: 'Teravolt' },\n        gender: 'N'\n    },\n    Zoroark: {\n        types: ['Dark'],\n        bs: { hp: 60, at: 105, df: 60, sa: 120, sd: 60, sp: 105 },\n        weightkg: 81.1,\n        abilities: { 0: 'Illusion' }\n    },\n    Zorua: {\n        types: ['Dark'],\n        bs: { hp: 40, at: 65, df: 40, sa: 80, sd: 40, sp: 65 },\n        weightkg: 12.5,\n        abilities: { 0: 'Illusion' },\n        nfe: true\n    },\n    Zweilous: {\n        types: ['Dark', 'Dragon'],\n        bs: { hp: 72, at: 85, df: 70, sa: 65, sd: 70, sp: 58 },\n        weightkg: 50,\n        abilities: { 0: 'Hustle' },\n        nfe: true\n    }\n};\nvar BW = (0, util_1.extend)(true, {}, DPP, BW_PATCH);\ndelete BW['Pichu'].otherFormes;\ndelete BW['Pichu-Spiky-eared'];\nvar XY_PATCH = {\n    Abomasnow: { otherFormes: ['Abomasnow-Mega'] },\n    Absol: { otherFormes: ['Absol-Mega'] },\n    Aerodactyl: { otherFormes: ['Aerodactyl-Mega'] },\n    Aggron: { otherFormes: ['Aggron-Mega'] },\n    Alakazam: { bs: { sd: 95 }, otherFormes: ['Alakazam-Mega'] },\n    Altaria: { otherFormes: ['Altaria-Mega'] },\n    Ampharos: { bs: { df: 85 }, otherFormes: ['Ampharos-Mega'] },\n    Audino: { otherFormes: ['Audino-Mega'] },\n    Azumarill: { types: ['Water', 'Fairy'], bs: { sa: 90 } },\n    Azurill: { types: ['Normal', 'Fairy'] },\n    Banette: { otherFormes: ['Banette-Mega'] },\n    Beautifly: { bs: { sa: 100 } },\n    Beedrill: { bs: { at: 90 }, otherFormes: ['Beedrill-Mega'] },\n    Bellossom: { bs: { df: 95 } },\n    Blastoise: { otherFormes: ['Blastoise-Mega'] },\n    Blaziken: { otherFormes: ['Blaziken-Mega'] },\n    Butterfree: { bs: { sa: 90 } },\n    Camerupt: { otherFormes: ['Camerupt-Mega'] },\n    Charizard: { otherFormes: ['Charizard-Mega-X', 'Charizard-Mega-Y'] },\n    Clefable: { types: ['Fairy'], bs: { sa: 95 } },\n    Clefairy: { types: ['Fairy'] },\n    Cleffa: { types: ['Fairy'] },\n    Cottonee: { types: ['Grass', 'Fairy'] },\n    Exploud: { bs: { sd: 73 } },\n    Gallade: { otherFormes: ['Gallade-Mega'] },\n    Garchomp: { otherFormes: ['Garchomp-Mega'] },\n    Gardevoir: { types: ['Psychic', 'Fairy'], otherFormes: ['Gardevoir-Mega'] },\n    Gengar: { otherFormes: ['Gengar-Mega'] },\n    Gigalith: { bs: { sd: 80 } },\n    Glalie: { otherFormes: ['Glalie-Mega'] },\n    Golem: { bs: { at: 120 } },\n    Granbull: { types: ['Fairy'] },\n    Groudon: { otherFormes: ['Groudon-Primal'] },\n    Gyarados: { otherFormes: ['Gyarados-Mega'] },\n    Heracross: { otherFormes: ['Heracross-Mega'] },\n    Houndoom: { otherFormes: ['Houndoom-Mega'] },\n    Igglybuff: { types: ['Normal', 'Fairy'] },\n    Jigglypuff: { types: ['Normal', 'Fairy'] },\n    Jumpluff: { bs: { sd: 95 } },\n    Kangaskhan: { otherFormes: ['Kangaskhan-Mega'] },\n    Kirlia: { types: ['Psychic', 'Fairy'] },\n    Krookodile: { bs: { df: 80 } },\n    Kyogre: { otherFormes: ['Kyogre-Primal'] },\n    Latias: { otherFormes: ['Latias-Mega'] },\n    Latios: { otherFormes: ['Latios-Mega'] },\n    Leavanny: { bs: { sd: 80 } },\n    Lopunny: { otherFormes: ['Lopunny-Mega'] },\n    Lucario: { otherFormes: ['Lucario-Mega'] },\n    Manectric: { otherFormes: ['Manectric-Mega'] },\n    Marill: { types: ['Water', 'Fairy'] },\n    Mawile: { types: ['Steel', 'Fairy'], otherFormes: ['Mawile-Mega'] },\n    Medicham: { otherFormes: ['Medicham-Mega'] },\n    Metagross: { otherFormes: ['Metagross-Mega'] },\n    Mewtwo: { otherFormes: ['Mewtwo-Mega-X', 'Mewtwo-Mega-Y'] },\n    'Mime Jr.': { types: ['Psychic', 'Fairy'] },\n    'Mr. Mime': { types: ['Psychic', 'Fairy'] },\n    Nidoking: { bs: { at: 102 } },\n    Nidoqueen: { bs: { at: 92 } },\n    Pidgeot: { bs: { sp: 101 }, otherFormes: ['Pidgeot-Mega'] },\n    Pikachu: {\n        bs: { df: 40, sd: 50 },\n        otherFormes: [\n            'Pikachu-Belle',\n            'Pikachu-Cosplay',\n            'Pikachu-Libre',\n            'Pikachu-PhD',\n            'Pikachu-Pop-Star',\n            'Pikachu-Rock-Star',\n        ]\n    },\n    Pinsir: { otherFormes: ['Pinsir-Mega'] },\n    Poliwrath: { bs: { at: 95 } },\n    Raichu: { bs: { sp: 110 } },\n    Ralts: { types: ['Psychic', 'Fairy'] },\n    Rayquaza: { otherFormes: ['Rayquaza-Mega'] },\n    Roserade: { bs: { df: 65 } },\n    Sableye: { otherFormes: ['Sableye-Mega'] },\n    Salamence: { otherFormes: ['Salamence-Mega'] },\n    Sceptile: { otherFormes: ['Sceptile-Mega'] },\n    Scizor: { otherFormes: ['Scizor-Mega'] },\n    Scolipede: { bs: { at: 100 } },\n    Seismitoad: { bs: { at: 95 } },\n    Sharpedo: { otherFormes: ['Sharpedo-Mega'] },\n    Slowbro: { otherFormes: ['Slowbro-Mega'] },\n    Snubbull: { types: ['Fairy'] },\n    Staraptor: { bs: { sd: 60 } },\n    Steelix: { otherFormes: ['Steelix-Mega'] },\n    Stoutland: { bs: { at: 110 } },\n    Swampert: { otherFormes: ['Swampert-Mega'] },\n    Togekiss: { types: ['Fairy', 'Flying'] },\n    Togepi: { types: ['Fairy'] },\n    Togetic: { types: ['Fairy', 'Flying'] },\n    Tyranitar: { otherFormes: ['Tyranitar-Mega'] },\n    Unfezant: { bs: { at: 115 } },\n    Venusaur: { otherFormes: ['Venusaur-Mega'] },\n    Victreebel: { bs: { sd: 70 } },\n    Vileplume: { bs: { sa: 110 } },\n    Whimsicott: { types: ['Grass', 'Fairy'] },\n    Wigglytuff: { types: ['Normal', 'Fairy'], bs: { sa: 85 } },\n    'Aegislash-Blade': {\n        types: ['Steel', 'Ghost'],\n        bs: { hp: 60, at: 150, df: 50, sa: 150, sd: 50, sp: 60 },\n        weightkg: 53,\n        abilities: { 0: 'Stance Change' },\n        otherFormes: ['Aegislash-Shield', 'Aegislash-Both']\n    },\n    'Aegislash-Shield': {\n        types: ['Steel', 'Ghost'],\n        bs: { hp: 60, at: 50, df: 150, sa: 50, sd: 150, sp: 60 },\n        weightkg: 53,\n        abilities: { 0: 'Stance Change' },\n        baseSpecies: 'Aegislash-Blade'\n    },\n    'Aegislash-Both': {\n        types: ['Steel', 'Ghost'],\n        bs: { hp: 60, at: 150, df: 150, sa: 150, sd: 150, sp: 60 },\n        weightkg: 53,\n        abilities: { 0: 'Stance Change' },\n        baseSpecies: 'Aegislash-Blade'\n    },\n    Amaura: {\n        types: ['Rock', 'Ice'],\n        bs: { hp: 77, at: 59, df: 50, sa: 67, sd: 63, sp: 46 },\n        weightkg: 25.2,\n        nfe: true,\n        abilities: { 0: 'Refrigerate' }\n    },\n    'Arceus-Fairy': {\n        types: ['Fairy'],\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\n        weightkg: 320,\n        abilities: { 0: 'Multitype' },\n        baseSpecies: 'Arceus',\n        gender: 'N'\n    },\n    Aromatisse: {\n        types: ['Fairy'],\n        bs: { hp: 101, at: 72, df: 72, sa: 99, sd: 89, sp: 29 },\n        weightkg: 15.5,\n        abilities: { 0: 'Healer' }\n    },\n    Aurorus: {\n        types: ['Rock', 'Ice'],\n        bs: { hp: 123, at: 77, df: 72, sa: 99, sd: 92, sp: 58 },\n        weightkg: 225,\n        abilities: { 0: 'Refrigerate' }\n    },\n    Avalugg: {\n        types: ['Ice'],\n        bs: { hp: 95, at: 117, df: 184, sa: 44, sd: 46, sp: 28 },\n        weightkg: 505,\n        abilities: { 0: 'Own Tempo' }\n    },\n    Barbaracle: {\n        types: ['Rock', 'Water'],\n        bs: { hp: 72, at: 105, df: 115, sa: 54, sd: 86, sp: 68 },\n        weightkg: 96,\n        abilities: { 0: 'Tough Claws' }\n    },\n    Bergmite: {\n        types: ['Ice'],\n        bs: { hp: 55, at: 69, df: 85, sa: 32, sd: 35, sp: 28 },\n        weightkg: 99.5,\n        nfe: true,\n        abilities: { 0: 'Own Tempo' }\n    },\n    Binacle: {\n        types: ['Rock', 'Water'],\n        bs: { hp: 42, at: 52, df: 67, sa: 39, sd: 56, sp: 50 },\n        weightkg: 31,\n        nfe: true,\n        abilities: { 0: 'Tough Claws' }\n    },\n    Braixen: {\n        types: ['Fire'],\n        bs: { hp: 59, at: 59, df: 58, sa: 90, sd: 70, sp: 73 },\n        weightkg: 14.5,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Bunnelby: {\n        types: ['Normal'],\n        bs: { hp: 38, at: 36, df: 38, sa: 32, sd: 36, sp: 57 },\n        weightkg: 5,\n        nfe: true,\n        abilities: { 0: 'Pickup' }\n    },\n    Caimanoe: {\n        types: ['Water', 'Steel'],\n        bs: { hp: 73, at: 85, df: 65, sa: 80, sd: 40, sp: 87 },\n        weightkg: 72.5,\n        nfe: true,\n        abilities: { 0: 'Water Veil' }\n    },\n    Carbink: {\n        types: ['Rock', 'Fairy'],\n        bs: { hp: 50, at: 50, df: 150, sa: 50, sd: 150, sp: 50 },\n        weightkg: 5.7,\n        gender: 'N',\n        abilities: { 0: 'Clear Body' }\n    },\n    Chesnaught: {\n        types: ['Grass', 'Fighting'],\n        bs: { hp: 88, at: 107, df: 122, sa: 74, sd: 75, sp: 64 },\n        weightkg: 90,\n        abilities: { 0: 'Overgrow' }\n    },\n    Chespin: {\n        types: ['Grass'],\n        bs: { hp: 56, at: 61, df: 65, sa: 48, sd: 45, sp: 38 },\n        weightkg: 9,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Clauncher: {\n        types: ['Water'],\n        bs: { hp: 50, at: 53, df: 62, sa: 58, sd: 63, sp: 44 },\n        weightkg: 8.3,\n        abilities: { 0: 'Mega Launcher' },\n        nfe: true\n    },\n    Clawitzer: {\n        types: ['Water'],\n        bs: { hp: 71, at: 73, df: 88, sa: 120, sd: 89, sp: 59 },\n        weightkg: 35.3,\n        abilities: { 0: 'Mega Launcher' }\n    },\n    Crucibelle: {\n        types: ['Rock', 'Poison'],\n        bs: { hp: 106, at: 105, df: 65, sa: 75, sd: 85, sp: 104 },\n        weightkg: 23.6,\n        abilities: { 0: 'Regenerator' },\n        otherFormes: ['Crucibelle-Mega']\n    },\n    Diancie: {\n        types: ['Rock', 'Fairy'],\n        bs: { hp: 50, at: 100, df: 150, sa: 100, sd: 150, sp: 50 },\n        weightkg: 8.8,\n        abilities: { 0: 'Clear Body' },\n        otherFormes: ['Diancie-Mega'],\n        gender: 'N'\n    },\n    Dedenne: {\n        types: ['Electric', 'Fairy'],\n        bs: { hp: 67, at: 58, df: 57, sa: 81, sd: 67, sp: 101 },\n        weightkg: 2.2,\n        abilities: { 0: 'Cheek Pouch' }\n    },\n    Delphox: {\n        types: ['Fire', 'Psychic'],\n        bs: { hp: 75, at: 69, df: 72, sa: 114, sd: 100, sp: 104 },\n        weightkg: 39,\n        abilities: { 0: 'Blaze' }\n    },\n    Diggersby: {\n        types: ['Normal', 'Ground'],\n        bs: { hp: 85, at: 71, df: 77, sa: 50, sd: 77, sp: 78 },\n        weightkg: 42.4,\n        abilities: { 0: 'Pickup' }\n    },\n    Doublade: {\n        types: ['Steel', 'Ghost'],\n        bs: { hp: 59, at: 110, df: 150, sa: 45, sd: 49, sp: 35 },\n        weightkg: 4.5,\n        abilities: { 0: 'No Guard' },\n        nfe: true\n    },\n    Dragalge: {\n        types: ['Poison', 'Dragon'],\n        bs: { hp: 65, at: 75, df: 90, sa: 97, sd: 123, sp: 44 },\n        weightkg: 81.5,\n        abilities: { 0: 'Poison Point' }\n    },\n    Espurr: {\n        types: ['Psychic'],\n        bs: { hp: 62, at: 48, df: 54, sa: 63, sd: 60, sp: 68 },\n        weightkg: 3.5,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Fennekin: {\n        types: ['Fire'],\n        bs: { hp: 40, at: 45, df: 40, sa: 62, sd: 60, sp: 60 },\n        weightkg: 9.4,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Flabébé: {\n        types: ['Fairy'],\n        bs: { hp: 44, at: 38, df: 39, sa: 61, sd: 79, sp: 42 },\n        weightkg: 0.1,\n        nfe: true,\n        abilities: { 0: 'Flower Veil' }\n    },\n    Fletchinder: {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 62, at: 73, df: 55, sa: 56, sd: 52, sp: 84 },\n        weightkg: 16,\n        nfe: true,\n        abilities: { 0: 'Flame Body' }\n    },\n    Fletchling: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 45, at: 50, df: 43, sa: 40, sd: 38, sp: 62 },\n        weightkg: 1.7,\n        nfe: true,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Floatoy: {\n        types: ['Water'],\n        bs: { hp: 48, at: 70, df: 40, sa: 70, sd: 30, sp: 77 },\n        weightkg: 1.9,\n        nfe: true,\n        abilities: { 0: 'Water Veil' }\n    },\n    Floette: {\n        types: ['Fairy'],\n        bs: { hp: 54, at: 45, df: 47, sa: 75, sd: 98, sp: 52 },\n        weightkg: 0.9,\n        nfe: true,\n        otherFormes: ['Floette-Eternal'],\n        abilities: { 0: 'Flower Veil' }\n    },\n    'Floette-Eternal': {\n        types: ['Fairy'],\n        bs: { hp: 74, at: 65, df: 67, sa: 125, sd: 128, sp: 92 },\n        weightkg: 0.9,\n        abilities: { 0: 'Flower Veil' },\n        baseSpecies: 'Floette'\n    },\n    Florges: {\n        types: ['Fairy'],\n        bs: { hp: 78, at: 65, df: 68, sa: 112, sd: 154, sp: 75 },\n        weightkg: 10,\n        abilities: { 0: 'Flower Veil' }\n    },\n    Froakie: {\n        types: ['Water'],\n        bs: { hp: 41, at: 56, df: 40, sa: 62, sd: 44, sp: 71 },\n        weightkg: 7,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Frogadier: {\n        types: ['Water'],\n        bs: { hp: 54, at: 63, df: 52, sa: 83, sd: 56, sp: 97 },\n        weightkg: 10.9,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Furfrou: {\n        types: ['Normal'],\n        bs: { hp: 75, at: 80, df: 60, sa: 65, sd: 90, sp: 102 },\n        weightkg: 28,\n        abilities: { 0: 'Fur Coat' }\n    },\n    Gogoat: {\n        types: ['Grass'],\n        bs: { hp: 123, at: 100, df: 62, sa: 97, sd: 81, sp: 68 },\n        weightkg: 91,\n        abilities: { 0: 'Sap Sipper' }\n    },\n    Goodra: {\n        types: ['Dragon'],\n        bs: { hp: 90, at: 100, df: 70, sa: 110, sd: 150, sp: 80 },\n        weightkg: 150.5,\n        abilities: { 0: 'Sap Sipper' }\n    },\n    Goomy: {\n        types: ['Dragon'],\n        bs: { hp: 45, at: 50, df: 35, sa: 55, sd: 75, sp: 40 },\n        weightkg: 2.8,\n        nfe: true,\n        abilities: { 0: 'Sap Sipper' }\n    },\n    Gourgeist: {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 65, at: 90, df: 122, sa: 58, sd: 75, sp: 84 },\n        weightkg: 12.5,\n        abilities: { 0: 'Pickup' },\n        otherFormes: ['Gourgeist-Large', 'Gourgeist-Small', 'Gourgeist-Super']\n    },\n    'Gourgeist-Large': {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 75, at: 95, df: 122, sa: 58, sd: 75, sp: 69 },\n        weightkg: 14,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Gourgeist'\n    },\n    'Gourgeist-Small': {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 55, at: 85, df: 122, sa: 58, sd: 75, sp: 99 },\n        weightkg: 9.5,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Gourgeist'\n    },\n    'Gourgeist-Super': {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 85, at: 100, df: 122, sa: 58, sd: 75, sp: 54 },\n        weightkg: 39,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Gourgeist'\n    },\n    Greninja: {\n        types: ['Water', 'Dark'],\n        bs: { hp: 72, at: 95, df: 67, sa: 103, sd: 71, sp: 122 },\n        weightkg: 40,\n        abilities: { 0: 'Torrent' }\n    },\n    Hawlucha: {\n        types: ['Fighting', 'Flying'],\n        bs: { hp: 78, at: 92, df: 75, sa: 74, sd: 63, sp: 118 },\n        weightkg: 21.5,\n        abilities: { 0: 'Limber' }\n    },\n    Heliolisk: {\n        types: ['Electric', 'Normal'],\n        bs: { hp: 62, at: 55, df: 52, sa: 109, sd: 94, sp: 109 },\n        weightkg: 21,\n        abilities: { 0: 'Dry Skin' }\n    },\n    Helioptile: {\n        types: ['Electric', 'Normal'],\n        bs: { hp: 44, at: 38, df: 33, sa: 61, sd: 43, sp: 70 },\n        weightkg: 6,\n        nfe: true,\n        abilities: { 0: 'Dry Skin' }\n    },\n    Honedge: {\n        types: ['Steel', 'Ghost'],\n        bs: { hp: 45, at: 80, df: 100, sa: 35, sd: 37, sp: 28 },\n        weightkg: 2,\n        abilities: { 0: 'No Guard' },\n        nfe: true\n    },\n    Hoopa: {\n        types: ['Psychic', 'Ghost'],\n        bs: { hp: 80, at: 110, df: 60, sa: 150, sd: 130, sp: 70 },\n        weightkg: 9,\n        gender: 'N',\n        abilities: { 0: 'Magician' },\n        otherFormes: ['Hoopa-Unbound']\n    },\n    'Hoopa-Unbound': {\n        types: ['Psychic', 'Dark'],\n        bs: { hp: 80, at: 160, df: 60, sa: 170, sd: 130, sp: 80 },\n        weightkg: 490,\n        gender: 'N',\n        abilities: { 0: 'Magician' },\n        baseSpecies: 'Hoopa'\n    },\n    Inkay: {\n        types: ['Dark', 'Psychic'],\n        bs: { hp: 53, at: 54, df: 53, sa: 37, sd: 46, sp: 45 },\n        weightkg: 3.5,\n        nfe: true,\n        abilities: { 0: 'Contrary' }\n    },\n    Kerfluffle: {\n        types: ['Fairy', 'Fighting'],\n        bs: { hp: 84, at: 78, df: 86, sa: 115, sd: 88, sp: 119 },\n        weightkg: 24.2,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Klefki: {\n        types: ['Steel', 'Fairy'],\n        bs: { hp: 57, at: 80, df: 91, sa: 80, sd: 87, sp: 75 },\n        weightkg: 3,\n        abilities: { 0: 'Prankster' }\n    },\n    Litleo: {\n        types: ['Fire', 'Normal'],\n        bs: { hp: 62, at: 50, df: 58, sa: 73, sd: 54, sp: 72 },\n        weightkg: 13.5,\n        nfe: true,\n        abilities: { 0: 'Rivalry' }\n    },\n    Malamar: {\n        types: ['Dark', 'Psychic'],\n        bs: { hp: 86, at: 92, df: 88, sa: 68, sd: 75, sp: 73 },\n        weightkg: 47,\n        abilities: { 0: 'Contrary' }\n    },\n    'Abomasnow-Mega': {\n        types: ['Grass', 'Ice'],\n        bs: { hp: 90, at: 132, df: 105, sa: 132, sd: 105, sp: 30 },\n        weightkg: 185,\n        abilities: { 0: 'Snow Warning' },\n        baseSpecies: 'Abomasnow'\n    },\n    'Absol-Mega': {\n        types: ['Dark'],\n        bs: { hp: 65, at: 150, df: 60, sa: 115, sd: 60, sp: 115 },\n        weightkg: 49,\n        abilities: { 0: 'Magic Bounce' },\n        baseSpecies: 'Absol'\n    },\n    'Aerodactyl-Mega': {\n        types: ['Rock', 'Flying'],\n        bs: { hp: 80, at: 135, df: 85, sa: 70, sd: 95, sp: 150 },\n        weightkg: 79,\n        abilities: { 0: 'Tough Claws' },\n        baseSpecies: 'Aerodactyl'\n    },\n    'Aggron-Mega': {\n        types: ['Steel'],\n        bs: { hp: 70, at: 140, df: 230, sa: 60, sd: 80, sp: 50 },\n        weightkg: 395,\n        abilities: { 0: 'Filter' },\n        baseSpecies: 'Aggron'\n    },\n    'Alakazam-Mega': {\n        types: ['Psychic'],\n        bs: { hp: 55, at: 50, df: 65, sa: 175, sd: 95, sp: 150 },\n        weightkg: 48,\n        abilities: { 0: 'Trace' },\n        baseSpecies: 'Alakazam'\n    },\n    'Altaria-Mega': {\n        types: ['Dragon', 'Fairy'],\n        bs: { hp: 75, at: 110, df: 110, sa: 110, sd: 105, sp: 80 },\n        weightkg: 20.6,\n        abilities: { 0: 'Pixilate' },\n        baseSpecies: 'Altaria'\n    },\n    'Ampharos-Mega': {\n        types: ['Electric', 'Dragon'],\n        bs: { hp: 90, at: 95, df: 105, sa: 165, sd: 110, sp: 45 },\n        weightkg: 61.5,\n        abilities: { 0: 'Mold Breaker' },\n        baseSpecies: 'Ampharos'\n    },\n    'Audino-Mega': {\n        types: ['Normal', 'Fairy'],\n        bs: { hp: 103, at: 60, df: 126, sa: 80, sd: 126, sp: 50 },\n        weightkg: 32,\n        abilities: { 0: 'Healer' },\n        baseSpecies: 'Audino'\n    },\n    'Banette-Mega': {\n        types: ['Ghost'],\n        bs: { hp: 64, at: 165, df: 75, sa: 93, sd: 83, sp: 75 },\n        weightkg: 13,\n        abilities: { 0: 'Prankster' },\n        baseSpecies: 'Banette'\n    },\n    'Beedrill-Mega': {\n        types: ['Bug', 'Poison'],\n        bs: { hp: 65, at: 150, df: 40, sa: 15, sd: 80, sp: 145 },\n        weightkg: 40.5,\n        abilities: { 0: 'Adaptability' },\n        baseSpecies: 'Beedrill'\n    },\n    'Blastoise-Mega': {\n        types: ['Water'],\n        bs: { hp: 79, at: 103, df: 120, sa: 135, sd: 115, sp: 78 },\n        weightkg: 101.1,\n        abilities: { 0: 'Mega Launcher' },\n        baseSpecies: 'Blastoise'\n    },\n    'Blaziken-Mega': {\n        types: ['Fire', 'Fighting'],\n        bs: { hp: 80, at: 160, df: 80, sa: 130, sd: 80, sp: 100 },\n        weightkg: 52,\n        abilities: { 0: 'Speed Boost' },\n        baseSpecies: 'Blaziken'\n    },\n    'Camerupt-Mega': {\n        types: ['Fire', 'Ground'],\n        bs: { hp: 70, at: 120, df: 100, sa: 145, sd: 105, sp: 20 },\n        weightkg: 320.5,\n        abilities: { 0: 'Sheer Force' },\n        baseSpecies: 'Camerupt'\n    },\n    'Charizard-Mega-X': {\n        types: ['Fire', 'Dragon'],\n        bs: { hp: 78, at: 130, df: 111, sa: 130, sd: 85, sp: 100 },\n        weightkg: 110.5,\n        abilities: { 0: 'Tough Claws' },\n        baseSpecies: 'Charizard'\n    },\n    'Charizard-Mega-Y': {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 78, at: 104, df: 78, sa: 159, sd: 115, sp: 100 },\n        weightkg: 100.5,\n        abilities: { 0: 'Drought' },\n        baseSpecies: 'Charizard'\n    },\n    'Crucibelle-Mega': {\n        types: ['Rock', 'Poison'],\n        bs: { hp: 106, at: 135, df: 75, sa: 85, sd: 125, sp: 114 },\n        weightkg: 22.5,\n        abilities: { 0: 'Magic Guard' },\n        baseSpecies: 'Crucibelle'\n    },\n    'Diancie-Mega': {\n        types: ['Rock', 'Fairy'],\n        bs: { hp: 50, at: 160, df: 110, sa: 160, sd: 110, sp: 110 },\n        weightkg: 27.8,\n        abilities: { 0: 'Magic Bounce' },\n        baseSpecies: 'Diancie',\n        gender: 'N'\n    },\n    'Gallade-Mega': {\n        types: ['Psychic', 'Fighting'],\n        bs: { hp: 68, at: 165, df: 95, sa: 65, sd: 115, sp: 110 },\n        weightkg: 56.4,\n        abilities: { 0: 'Inner Focus' },\n        baseSpecies: 'Gallade'\n    },\n    'Garchomp-Mega': {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 108, at: 170, df: 115, sa: 120, sd: 95, sp: 92 },\n        weightkg: 95,\n        abilities: { 0: 'Sand Force' },\n        baseSpecies: 'Garchomp'\n    },\n    'Gardevoir-Mega': {\n        types: ['Psychic', 'Fairy'],\n        bs: { hp: 68, at: 85, df: 65, sa: 165, sd: 135, sp: 100 },\n        weightkg: 48.4,\n        abilities: { 0: 'Pixilate' },\n        baseSpecies: 'Gardevoir'\n    },\n    'Gengar-Mega': {\n        types: ['Ghost', 'Poison'],\n        bs: { hp: 60, at: 65, df: 80, sa: 170, sd: 95, sp: 130 },\n        weightkg: 40.5,\n        abilities: { 0: 'Shadow Tag' },\n        baseSpecies: 'Gengar'\n    },\n    'Glalie-Mega': {\n        types: ['Ice'],\n        bs: { hp: 80, at: 120, df: 80, sa: 120, sd: 80, sp: 100 },\n        weightkg: 350.2,\n        abilities: { 0: 'Refrigerate' },\n        baseSpecies: 'Glalie'\n    },\n    'Gyarados-Mega': {\n        types: ['Water', 'Dark'],\n        bs: { hp: 95, at: 155, df: 109, sa: 70, sd: 130, sp: 81 },\n        weightkg: 305,\n        abilities: { 0: 'Mold Breaker' },\n        baseSpecies: 'Gyarados'\n    },\n    'Heracross-Mega': {\n        types: ['Bug', 'Fighting'],\n        bs: { hp: 80, at: 185, df: 115, sa: 40, sd: 105, sp: 75 },\n        weightkg: 62.5,\n        abilities: { 0: 'Skill Link' },\n        baseSpecies: 'Heracross'\n    },\n    'Houndoom-Mega': {\n        types: ['Dark', 'Fire'],\n        bs: { hp: 75, at: 90, df: 90, sa: 140, sd: 90, sp: 115 },\n        weightkg: 49.5,\n        abilities: { 0: 'Solar Power' },\n        baseSpecies: 'Houndoom'\n    },\n    'Kangaskhan-Mega': {\n        types: ['Normal'],\n        bs: { hp: 105, at: 125, df: 100, sa: 60, sd: 100, sp: 100 },\n        weightkg: 100,\n        abilities: { 0: 'Parental Bond' },\n        baseSpecies: 'Kangaskhan'\n    },\n    'Latias-Mega': {\n        types: ['Dragon', 'Psychic'],\n        bs: { hp: 80, at: 100, df: 120, sa: 140, sd: 150, sp: 110 },\n        weightkg: 52,\n        abilities: { 0: 'Levitate' },\n        baseSpecies: 'Latias'\n    },\n    'Latios-Mega': {\n        types: ['Dragon', 'Psychic'],\n        bs: { hp: 80, at: 130, df: 100, sa: 160, sd: 120, sp: 110 },\n        weightkg: 70,\n        abilities: { 0: 'Levitate' },\n        baseSpecies: 'Latios'\n    },\n    'Lopunny-Mega': {\n        types: ['Normal', 'Fighting'],\n        bs: { hp: 65, at: 136, df: 94, sa: 54, sd: 96, sp: 135 },\n        weightkg: 28.3,\n        abilities: { 0: 'Scrappy' },\n        baseSpecies: 'Lopunny'\n    },\n    'Lucario-Mega': {\n        types: ['Fighting', 'Steel'],\n        bs: { hp: 70, at: 145, df: 88, sa: 140, sd: 70, sp: 112 },\n        weightkg: 57.5,\n        abilities: { 0: 'Adaptability' },\n        baseSpecies: 'Lucario'\n    },\n    'Manectric-Mega': {\n        types: ['Electric'],\n        bs: { hp: 70, at: 75, df: 80, sa: 135, sd: 80, sp: 135 },\n        weightkg: 44,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Manectric'\n    },\n    'Mawile-Mega': {\n        types: ['Steel', 'Fairy'],\n        bs: { hp: 50, at: 105, df: 125, sa: 55, sd: 95, sp: 50 },\n        weightkg: 23.5,\n        abilities: { 0: 'Huge Power' },\n        baseSpecies: 'Mawile'\n    },\n    'Medicham-Mega': {\n        types: ['Fighting', 'Psychic'],\n        bs: { hp: 60, at: 100, df: 85, sa: 80, sd: 85, sp: 100 },\n        weightkg: 31.5,\n        abilities: { 0: 'Pure Power' },\n        baseSpecies: 'Medicham'\n    },\n    'Metagross-Mega': {\n        types: ['Steel', 'Psychic'],\n        bs: { hp: 80, at: 145, df: 150, sa: 105, sd: 110, sp: 110 },\n        weightkg: 942.9,\n        abilities: { 0: 'Tough Claws' },\n        baseSpecies: 'Metagross',\n        gender: 'N'\n    },\n    'Mewtwo-Mega-X': {\n        types: ['Psychic', 'Fighting'],\n        bs: { hp: 106, at: 190, df: 100, sa: 154, sd: 100, sp: 130 },\n        weightkg: 127,\n        abilities: { 0: 'Steadfast' },\n        baseSpecies: 'Mewtwo',\n        gender: 'N'\n    },\n    'Mewtwo-Mega-Y': {\n        types: ['Psychic'],\n        bs: { hp: 106, at: 150, df: 70, sa: 194, sd: 120, sp: 140 },\n        weightkg: 33,\n        abilities: { 0: 'Insomnia' },\n        baseSpecies: 'Mewtwo',\n        gender: 'N'\n    },\n    'Pidgeot-Mega': {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 83, at: 80, df: 80, sa: 135, sd: 80, sp: 121 },\n        weightkg: 50.5,\n        abilities: { 0: 'No Guard' },\n        baseSpecies: 'Pidgeot'\n    },\n    'Pinsir-Mega': {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 65, at: 155, df: 120, sa: 65, sd: 90, sp: 105 },\n        weightkg: 59,\n        abilities: { 0: 'Aerilate' },\n        baseSpecies: 'Pinsir'\n    },\n    'Rayquaza-Mega': {\n        types: ['Dragon', 'Flying'],\n        bs: { hp: 105, at: 180, df: 100, sa: 180, sd: 100, sp: 115 },\n        weightkg: 392,\n        gender: 'N',\n        abilities: { 0: 'Delta Stream' },\n        baseSpecies: 'Rayquaza'\n    },\n    'Sableye-Mega': {\n        types: ['Dark', 'Ghost'],\n        bs: { hp: 50, at: 85, df: 125, sa: 85, sd: 115, sp: 20 },\n        weightkg: 161,\n        abilities: { 0: 'Magic Bounce' },\n        baseSpecies: 'Sableye'\n    },\n    'Salamence-Mega': {\n        types: ['Dragon', 'Flying'],\n        bs: { hp: 95, at: 145, df: 130, sa: 120, sd: 90, sp: 120 },\n        weightkg: 112.6,\n        abilities: { 0: 'Aerilate' },\n        baseSpecies: 'Salamence'\n    },\n    'Sceptile-Mega': {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 70, at: 110, df: 75, sa: 145, sd: 85, sp: 145 },\n        weightkg: 55.2,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Sceptile'\n    },\n    'Scizor-Mega': {\n        types: ['Bug', 'Steel'],\n        bs: { hp: 70, at: 150, df: 140, sa: 65, sd: 100, sp: 75 },\n        weightkg: 125,\n        abilities: { 0: 'Technician' },\n        baseSpecies: 'Scizor'\n    },\n    'Sharpedo-Mega': {\n        types: ['Water', 'Dark'],\n        bs: { hp: 70, at: 140, df: 70, sa: 110, sd: 65, sp: 105 },\n        weightkg: 130.3,\n        abilities: { 0: 'Strong Jaw' },\n        baseSpecies: 'Sharpedo'\n    },\n    'Slowbro-Mega': {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 95, at: 75, df: 180, sa: 130, sd: 80, sp: 30 },\n        weightkg: 120,\n        abilities: { 0: 'Shell Armor' },\n        baseSpecies: 'Slowbro'\n    },\n    'Steelix-Mega': {\n        types: ['Steel', 'Ground'],\n        bs: { hp: 75, at: 125, df: 230, sa: 55, sd: 95, sp: 30 },\n        weightkg: 740,\n        abilities: { 0: 'Sand Force' },\n        baseSpecies: 'Steelix'\n    },\n    'Swampert-Mega': {\n        types: ['Water', 'Ground'],\n        bs: { hp: 100, at: 150, df: 110, sa: 95, sd: 110, sp: 70 },\n        weightkg: 102,\n        abilities: { 0: 'Swift Swim' },\n        baseSpecies: 'Swampert'\n    },\n    'Tyranitar-Mega': {\n        types: ['Rock', 'Dark'],\n        bs: { hp: 100, at: 164, df: 150, sa: 95, sd: 120, sp: 71 },\n        weightkg: 255,\n        abilities: { 0: 'Sand Stream' },\n        baseSpecies: 'Tyranitar'\n    },\n    'Venusaur-Mega': {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 80, at: 100, df: 123, sa: 122, sd: 120, sp: 80 },\n        weightkg: 155.5,\n        abilities: { 0: 'Thick Fat' },\n        baseSpecies: 'Venusaur'\n    },\n    Meowstic: {\n        types: ['Psychic'],\n        bs: { hp: 74, at: 48, df: 76, sa: 83, sd: 81, sp: 104 },\n        weightkg: 8.5,\n        abilities: { 0: 'Keen Eye' },\n        otherFormes: ['Meowstic-F']\n    },\n    'Meowstic-F': {\n        types: ['Psychic'],\n        bs: { hp: 74, at: 48, df: 76, sa: 83, sd: 81, sp: 104 },\n        weightkg: 8.5,\n        abilities: { 0: 'Keen Eye' },\n        baseSpecies: 'Meowstic'\n    },\n    Naviathan: {\n        types: ['Water', 'Steel'],\n        bs: { hp: 103, at: 110, df: 90, sa: 95, sd: 65, sp: 97 },\n        weightkg: 510,\n        abilities: { 0: 'Water Veil' }\n    },\n    Noibat: {\n        types: ['Flying', 'Dragon'],\n        bs: { hp: 40, at: 30, df: 35, sa: 45, sd: 40, sp: 55 },\n        weightkg: 8,\n        nfe: true,\n        abilities: { 0: 'Frisk' }\n    },\n    Noivern: {\n        types: ['Flying', 'Dragon'],\n        bs: { hp: 85, at: 70, df: 80, sa: 97, sd: 80, sp: 123 },\n        weightkg: 85,\n        abilities: { 0: 'Frisk' }\n    },\n    Pancham: {\n        types: ['Fighting'],\n        bs: { hp: 67, at: 82, df: 62, sa: 46, sd: 48, sp: 43 },\n        weightkg: 8,\n        nfe: true,\n        abilities: { 0: 'Iron Fist' }\n    },\n    Pangoro: {\n        types: ['Fighting', 'Dark'],\n        bs: { hp: 95, at: 124, df: 78, sa: 69, sd: 71, sp: 58 },\n        weightkg: 136,\n        abilities: { 0: 'Iron Fist' }\n    },\n    Phantump: {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 43, at: 70, df: 48, sa: 50, sd: 60, sp: 38 },\n        weightkg: 7,\n        nfe: true,\n        abilities: { 0: 'Natural Cure' }\n    },\n    'Pikachu-Cosplay': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Rock-Star': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Belle': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-PhD': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Pop-Star': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Libre': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Lightning Rod' },\n        baseSpecies: 'Pikachu'\n    },\n    Plasmanta: {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 60, at: 57, df: 119, sa: 131, sd: 98, sp: 100 },\n        weightkg: 460,\n        abilities: { 0: 'Storm Drain' }\n    },\n    Pluffle: {\n        types: ['Fairy'],\n        bs: { hp: 74, at: 38, df: 51, sa: 65, sd: 78, sp: 49 },\n        weightkg: 1.8,\n        nfe: true,\n        abilities: { 0: 'Natural Cure' }\n    },\n    'Groudon-Primal': {\n        types: ['Ground', 'Fire'],\n        bs: { hp: 100, at: 180, df: 160, sa: 150, sd: 90, sp: 90 },\n        weightkg: 999.7,\n        abilities: { 0: 'Desolate Land' },\n        baseSpecies: 'Groudon',\n        gender: 'N'\n    },\n    'Kyogre-Primal': {\n        types: ['Water'],\n        bs: { hp: 100, at: 150, df: 90, sa: 180, sd: 160, sp: 90 },\n        weightkg: 430,\n        abilities: { 0: 'Primordial Sea' },\n        baseSpecies: 'Kyogre',\n        gender: 'N'\n    },\n    Pumpkaboo: {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 49, at: 66, df: 70, sa: 44, sd: 55, sp: 51 },\n        weightkg: 5,\n        nfe: true,\n        abilities: { 0: 'Pickup' },\n        otherFormes: ['Pumpkaboo-Large', 'Pumpkaboo-Small', 'Pumpkaboo-Super']\n    },\n    'Pumpkaboo-Large': {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 54, at: 66, df: 70, sa: 44, sd: 55, sp: 46 },\n        weightkg: 7.5,\n        nfe: true,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Pumpkaboo'\n    },\n    'Pumpkaboo-Small': {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 44, at: 66, df: 70, sa: 44, sd: 55, sp: 56 },\n        weightkg: 3.5,\n        nfe: true,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Pumpkaboo'\n    },\n    'Pumpkaboo-Super': {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 59, at: 66, df: 70, sa: 44, sd: 55, sp: 41 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Pumpkaboo'\n    },\n    Pyroar: {\n        types: ['Fire', 'Normal'],\n        bs: { hp: 86, at: 68, df: 72, sa: 109, sd: 66, sp: 106 },\n        weightkg: 81.5,\n        abilities: { 0: 'Rivalry' }\n    },\n    Quilladin: {\n        types: ['Grass'],\n        bs: { hp: 61, at: 78, df: 95, sa: 56, sd: 58, sp: 57 },\n        weightkg: 29,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Scatterbug: {\n        types: ['Bug'],\n        bs: { hp: 38, at: 35, df: 40, sa: 27, sd: 25, sp: 35 },\n        weightkg: 2.5,\n        nfe: true,\n        abilities: { 0: 'Shield Dust' }\n    },\n    Skiddo: {\n        types: ['Grass'],\n        bs: { hp: 66, at: 65, df: 48, sa: 62, sd: 57, sp: 52 },\n        weightkg: 31,\n        nfe: true,\n        abilities: { 0: 'Sap Sipper' }\n    },\n    Skrelp: {\n        types: ['Poison', 'Water'],\n        bs: { hp: 50, at: 60, df: 60, sa: 60, sd: 60, sp: 30 },\n        weightkg: 7.3,\n        nfe: true,\n        abilities: { 0: 'Poison Point' }\n    },\n    Sliggoo: {\n        types: ['Dragon'],\n        bs: { hp: 68, at: 75, df: 53, sa: 83, sd: 113, sp: 60 },\n        weightkg: 17.5,\n        nfe: true,\n        abilities: { 0: 'Sap Sipper' }\n    },\n    Slurpuff: {\n        types: ['Fairy'],\n        bs: { hp: 82, at: 80, df: 86, sa: 85, sd: 75, sp: 72 },\n        weightkg: 5,\n        abilities: { 0: 'Sweet Veil' }\n    },\n    Snugglow: {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 40, at: 37, df: 79, sa: 91, sd: 68, sp: 70 },\n        weightkg: 6,\n        nfe: true,\n        abilities: { 0: 'Storm Drain' }\n    },\n    Spewpa: {\n        types: ['Bug'],\n        bs: { hp: 45, at: 22, df: 60, sa: 27, sd: 30, sp: 29 },\n        weightkg: 8.4,\n        nfe: true,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Spritzee: {\n        types: ['Fairy'],\n        bs: { hp: 78, at: 52, df: 60, sa: 63, sd: 65, sp: 23 },\n        weightkg: 0.5,\n        nfe: true,\n        abilities: { 0: 'Healer' }\n    },\n    Swirlix: {\n        types: ['Fairy'],\n        bs: { hp: 62, at: 48, df: 66, sa: 59, sd: 57, sp: 49 },\n        weightkg: 3.5,\n        nfe: true,\n        abilities: { 0: 'Sweet Veil' }\n    },\n    Sylveon: {\n        types: ['Fairy'],\n        bs: { hp: 95, at: 65, df: 65, sa: 110, sd: 130, sp: 60 },\n        weightkg: 23.5,\n        abilities: { 0: 'Cute Charm' }\n    },\n    Talonflame: {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 78, at: 81, df: 71, sa: 74, sd: 69, sp: 126 },\n        weightkg: 24.5,\n        abilities: { 0: 'Flame Body' }\n    },\n    Trevenant: {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 85, at: 110, df: 76, sa: 65, sd: 82, sp: 56 },\n        weightkg: 71,\n        abilities: { 0: 'Natural Cure' }\n    },\n    Tyrantrum: {\n        types: ['Rock', 'Dragon'],\n        bs: { hp: 82, at: 121, df: 119, sa: 69, sd: 59, sp: 71 },\n        weightkg: 270,\n        abilities: { 0: 'Strong Jaw' }\n    },\n    Tyrunt: {\n        types: ['Rock', 'Dragon'],\n        bs: { hp: 58, at: 89, df: 77, sa: 45, sd: 45, sp: 48 },\n        weightkg: 26,\n        nfe: true,\n        abilities: { 0: 'Strong Jaw' }\n    },\n    Vivillon: {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 80, at: 52, df: 50, sa: 90, sd: 50, sp: 89 },\n        weightkg: 17,\n        abilities: { 0: 'Shield Dust' },\n        otherFormes: ['Vivillon-Fancy', 'Vivillon-Pokeball']\n    },\n    'Vivillon-Fancy': {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 80, at: 52, df: 50, sa: 90, sd: 50, sp: 89 },\n        weightkg: 17,\n        abilities: { 0: 'Shield Dust' },\n        baseSpecies: 'Vivillon'\n    },\n    'Vivillon-Pokeball': {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 80, at: 52, df: 50, sa: 90, sd: 50, sp: 89 },\n        weightkg: 17,\n        abilities: { 0: 'Shield Dust' },\n        baseSpecies: 'Vivillon'\n    },\n    Volcanion: {\n        types: ['Fire', 'Water'],\n        bs: { hp: 80, at: 110, df: 120, sa: 130, sd: 90, sp: 70 },\n        weightkg: 195,\n        gender: 'N',\n        abilities: { 0: 'Water Absorb' }\n    },\n    Volkraken: {\n        types: ['Water', 'Fire'],\n        bs: { hp: 100, at: 45, df: 80, sa: 135, sd: 100, sp: 95 },\n        weightkg: 44.5,\n        abilities: { 0: 'Analytic' }\n    },\n    Volkritter: {\n        types: ['Water', 'Fire'],\n        bs: { hp: 60, at: 30, df: 50, sa: 80, sd: 60, sp: 70 },\n        weightkg: 15,\n        nfe: true,\n        abilities: { 0: 'Anticipation' }\n    },\n    Xerneas: {\n        types: ['Fairy'],\n        bs: { hp: 126, at: 131, df: 95, sa: 131, sd: 98, sp: 99 },\n        weightkg: 215,\n        abilities: { 0: 'Fairy Aura' },\n        gender: 'N'\n    },\n    Yveltal: {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 126, at: 131, df: 95, sa: 131, sd: 98, sp: 99 },\n        weightkg: 203,\n        abilities: { 0: 'Dark Aura' },\n        gender: 'N'\n    },\n    Zygarde: {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 108, at: 100, df: 121, sa: 81, sd: 95, sp: 95 },\n        weightkg: 305,\n        abilities: { 0: 'Aura Break' },\n        gender: 'N'\n    }\n};\nvar XY = (0, util_1.extend)(true, {}, BW, XY_PATCH);\nXY['Arceus'].otherFormes.push('Arceus-Fairy');\nXY['Arceus'].otherFormes.sort();\nvar SM_PATCH = {\n    'Alakazam-Mega': { bs: { sd: 105 } },\n    Arbok: { bs: { at: 95 } },\n    Ariados: { bs: { sd: 70 } },\n    Beartic: { bs: { at: 130 } },\n    Chimecho: { bs: { hp: 75, df: 80, sd: 90 } },\n    Corsola: { bs: { hp: 65, df: 95, sd: 95 } },\n    'Crucibelle-Mega': { bs: { sa: 91, sp: 108 } },\n    Crustle: { bs: { at: 105 } },\n    Cryogonal: { bs: { hp: 80, df: 50 } },\n    Delcatty: { bs: { sp: 90 } },\n    Diglett: { otherFormes: ['Diglett-Alola'] },\n    Dodrio: { bs: { sp: 110 } },\n    Dugtrio: { bs: { at: 100 }, otherFormes: ['Dugtrio-Alola'] },\n    Eevee: { otherFormes: ['Eevee-Starter'] },\n    Electrode: { bs: { sp: 150 } },\n    Exeggutor: { bs: { sd: 75 }, otherFormes: ['Exeggutor-Alola'] },\n    'Farfetch\\u2019d': { bs: { at: 90 } },\n    Gengar: { abilities: { 0: 'Cursed Body' } },\n    Geodude: { otherFormes: ['Geodude-Alola'] },\n    Golem: { otherFormes: ['Golem-Alola'] },\n    Graveler: { otherFormes: ['Graveler-Alola'] },\n    Greninja: { otherFormes: ['Greninja-Ash'] },\n    Grimer: { otherFormes: ['Grimer-Alola'] },\n    Illumise: { bs: { df: 75, sd: 85 } },\n    Lunatone: { bs: { hp: 90 } },\n    Magcargo: { bs: { hp: 60, sa: 90 } },\n    Mantine: { bs: { hp: 85 } },\n    Marowak: { otherFormes: ['Marowak-Alola', 'Marowak-Alola-Totem'] },\n    Masquerain: { bs: { sa: 100, sp: 80 } },\n    Meowth: { otherFormes: ['Meowth-Alola'] },\n    Muk: { otherFormes: ['Muk-Alola'] },\n    Necturna: { bs: { sp: 58 } },\n    Ninetales: { otherFormes: ['Ninetales-Alola'] },\n    Naviathan: { abilities: { 0: 'Guts' } },\n    Noctowl: { bs: { sa: 86 } },\n    Pelipper: { bs: { sa: 95 } },\n    Persian: { otherFormes: ['Persian-Alola'] },\n    Pikachu: {\n        otherFormes: [\n            'Pikachu-Alola',\n            'Pikachu-Hoenn',\n            'Pikachu-Kalos',\n            'Pikachu-Original',\n            'Pikachu-Partner',\n            'Pikachu-Sinnoh',\n            'Pikachu-Starter',\n            'Pikachu-Unova',\n        ]\n    },\n    Qwilfish: { bs: { df: 85 } },\n    Raichu: { otherFormes: ['Raichu-Alola'] },\n    Raticate: { otherFormes: ['Raticate-Alola', 'Raticate-Alola-Totem'] },\n    Rattata: { otherFormes: ['Rattata-Alola'] },\n    Sandshrew: { otherFormes: ['Sandshrew-Alola'] },\n    Sandslash: { otherFormes: ['Sandslash-Alola'] },\n    Solrock: { bs: { hp: 90 } },\n    Swellow: { bs: { sa: 75 } },\n    Volbeat: { bs: { df: 75, sd: 85 } },\n    Vulpix: { otherFormes: ['Vulpix-Alola'] },\n    Woobat: { bs: { hp: 65 } },\n    Zygarde: { otherFormes: ['Zygarde-10%', 'Zygarde-Complete'] },\n    Araquanid: {\n        types: ['Water', 'Bug'],\n        bs: { hp: 68, at: 70, df: 92, sa: 50, sd: 132, sp: 42 },\n        abilities: { 0: 'Water Bubble' },\n        weightkg: 82,\n        otherFormes: ['Araquanid-Totem']\n    },\n    'Araquanid-Totem': {\n        types: ['Water', 'Bug'],\n        bs: { hp: 68, at: 70, df: 92, sa: 50, sd: 132, sp: 42 },\n        abilities: { 0: 'Water Bubble' },\n        weightkg: 217.5,\n        baseSpecies: 'Araquanid'\n    },\n    Bewear: {\n        types: ['Normal', 'Fighting'],\n        bs: { hp: 120, at: 125, df: 80, sa: 55, sd: 60, sp: 60 },\n        abilities: { 0: 'Fluffy' },\n        weightkg: 135\n    },\n    Blacephalon: {\n        types: ['Fire', 'Ghost'],\n        bs: { hp: 53, at: 127, df: 53, sa: 151, sd: 79, sp: 107 },\n        weightkg: 13,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Bounsweet: {\n        types: ['Grass'],\n        bs: { hp: 42, at: 30, df: 38, sa: 30, sd: 38, sp: 32 },\n        weightkg: 3.2,\n        nfe: true,\n        abilities: { 0: 'Leaf Guard' }\n    },\n    Brionne: {\n        types: ['Water'],\n        bs: { hp: 60, at: 69, df: 69, sa: 91, sd: 81, sp: 50 },\n        weightkg: 17.5,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Bruxish: {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 68, at: 105, df: 70, sa: 70, sd: 70, sp: 92 },\n        weightkg: 19,\n        abilities: { 0: 'Dazzling' }\n    },\n    Buzzwole: {\n        types: ['Bug', 'Fighting'],\n        bs: { hp: 107, at: 139, df: 139, sa: 53, sd: 53, sp: 79 },\n        weightkg: 333.6,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Caribolt: {\n        types: ['Grass', 'Electric'],\n        bs: { hp: 84, at: 106, df: 82, sa: 77, sd: 80, sp: 106 },\n        weightkg: 140,\n        abilities: { 0: 'Overgrow' }\n    },\n    Celesteela: {\n        types: ['Steel', 'Flying'],\n        bs: { hp: 97, at: 101, df: 103, sa: 107, sd: 101, sp: 61 },\n        weightkg: 999.9,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Charjabug: {\n        types: ['Bug', 'Electric'],\n        bs: { hp: 57, at: 82, df: 95, sa: 55, sd: 75, sp: 36 },\n        weightkg: 10.5,\n        nfe: true,\n        abilities: { 0: 'Battery' }\n    },\n    Comfey: {\n        types: ['Fairy'],\n        bs: { hp: 51, at: 52, df: 90, sa: 82, sd: 110, sp: 100 },\n        weightkg: 0.3,\n        abilities: { 0: 'Flower Veil' }\n    },\n    Cosmoem: {\n        types: ['Psychic'],\n        bs: { hp: 43, at: 29, df: 131, sa: 29, sd: 131, sp: 37 },\n        weightkg: 999.9,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Sturdy' }\n    },\n    Coribalis: {\n        types: ['Water', 'Bug'],\n        bs: { hp: 76, at: 69, df: 90, sa: 65, sd: 77, sp: 43 },\n        weightkg: 24.5,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Cosmog: {\n        types: ['Psychic'],\n        bs: { hp: 43, at: 29, df: 31, sa: 29, sd: 31, sp: 37 },\n        weightkg: 0.1,\n        nfe: true,\n        gender: 'N',\n        abilities: { 0: 'Unaware' }\n    },\n    Crabominable: {\n        types: ['Fighting', 'Ice'],\n        bs: { hp: 97, at: 132, df: 77, sa: 62, sd: 67, sp: 43 },\n        weightkg: 180,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Crabrawler: {\n        types: ['Fighting'],\n        bs: { hp: 47, at: 82, df: 57, sa: 42, sd: 47, sp: 63 },\n        weightkg: 7,\n        nfe: true,\n        abilities: { 0: 'Hyper Cutter' }\n    },\n    Cutiefly: {\n        types: ['Bug', 'Fairy'],\n        bs: { hp: 40, at: 45, df: 40, sa: 55, sd: 40, sp: 84 },\n        weightkg: 0.2,\n        nfe: true,\n        abilities: { 0: 'Honey Gather' }\n    },\n    Dartrix: {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 78, at: 75, df: 75, sa: 70, sd: 70, sp: 52 },\n        weightkg: 16,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Decidueye: {\n        types: ['Grass', 'Ghost'],\n        bs: { hp: 78, at: 107, df: 75, sa: 100, sd: 100, sp: 70 },\n        weightkg: 36.6,\n        abilities: { 0: 'Overgrow' }\n    },\n    Dewpider: {\n        types: ['Water', 'Bug'],\n        bs: { hp: 38, at: 40, df: 52, sa: 40, sd: 72, sp: 27 },\n        weightkg: 4,\n        nfe: true,\n        abilities: { 0: 'Water Bubble' }\n    },\n    Dhelmise: {\n        types: ['Ghost', 'Grass'],\n        bs: { hp: 70, at: 131, df: 100, sa: 86, sd: 90, sp: 40 },\n        weightkg: 210,\n        gender: 'N',\n        abilities: { 0: 'Steelworker' }\n    },\n    Drampa: {\n        types: ['Normal', 'Dragon'],\n        bs: { hp: 78, at: 60, df: 85, sa: 135, sd: 91, sp: 36 },\n        weightkg: 185,\n        abilities: { 0: 'Berserk' }\n    },\n    'Diglett-Alola': {\n        types: ['Ground', 'Steel'],\n        bs: { hp: 10, at: 55, df: 30, sa: 35, sd: 45, sp: 90 },\n        weightkg: 1,\n        baseSpecies: 'Diglett',\n        nfe: true,\n        abilities: { 0: 'Sand Veil' }\n    },\n    'Dugtrio-Alola': {\n        types: ['Ground', 'Steel'],\n        bs: { hp: 35, at: 100, df: 60, sa: 50, sd: 70, sp: 110 },\n        weightkg: 66.6,\n        baseSpecies: 'Dugtrio',\n        abilities: { 0: 'Sand Veil' }\n    },\n    'Eevee-Starter': {\n        types: ['Normal'],\n        bs: { hp: 65, at: 75, df: 70, sa: 65, sd: 85, sp: 75 },\n        weightkg: 6.5,\n        abilities: { 0: 'Run Away' },\n        baseSpecies: 'Eevee'\n    },\n    Electrelk: {\n        types: ['Grass', 'Electric'],\n        bs: { hp: 59, at: 81, df: 67, sa: 57, sd: 55, sp: 101 },\n        weightkg: 41.5,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Equilibra: {\n        types: ['Steel', 'Ground'],\n        bs: { hp: 102, at: 50, df: 96, sa: 133, sd: 118, sp: 60 },\n        weightkg: 51.3,\n        gender: 'N',\n        abilities: { 0: 'Levitate' }\n    },\n    'Exeggutor-Alola': {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 95, at: 105, df: 85, sa: 125, sd: 75, sp: 45 },\n        weightkg: 415.6,\n        baseSpecies: 'Exeggutor',\n        abilities: { 0: 'Frisk' }\n    },\n    Fawnifer: {\n        types: ['Grass'],\n        bs: { hp: 49, at: 61, df: 42, sa: 52, sd: 40, sp: 76 },\n        weightkg: 6.9,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Fomantis: {\n        types: ['Grass'],\n        bs: { hp: 40, at: 55, df: 35, sa: 50, sd: 35, sp: 35 },\n        weightkg: 1.5,\n        nfe: true,\n        abilities: { 0: 'Leaf Guard' }\n    },\n    'Geodude-Alola': {\n        types: ['Rock', 'Electric'],\n        bs: { hp: 40, at: 80, df: 100, sa: 30, sd: 30, sp: 20 },\n        weightkg: 20.3,\n        baseSpecies: 'Geodude',\n        nfe: true,\n        abilities: { 0: 'Magnet Pull' }\n    },\n    'Golem-Alola': {\n        types: ['Rock', 'Electric'],\n        bs: { hp: 80, at: 120, df: 130, sa: 55, sd: 65, sp: 45 },\n        weightkg: 316,\n        abilities: { 0: 'Magnet Pull' },\n        baseSpecies: 'Golem'\n    },\n    Golisopod: {\n        types: ['Bug', 'Water'],\n        bs: { hp: 75, at: 125, df: 140, sa: 60, sd: 90, sp: 40 },\n        weightkg: 108,\n        abilities: { 0: 'Emergency Exit' }\n    },\n    'Graveler-Alola': {\n        types: ['Rock', 'Electric'],\n        bs: { hp: 55, at: 95, df: 115, sa: 45, sd: 45, sp: 35 },\n        weightkg: 110,\n        baseSpecies: 'Graveler',\n        nfe: true,\n        abilities: { 0: 'Magnet Pull' }\n    },\n    'Grimer-Alola': {\n        types: ['Poison', 'Dark'],\n        bs: { hp: 80, at: 80, df: 50, sa: 40, sd: 50, sp: 25 },\n        weightkg: 42,\n        baseSpecies: 'Grimer',\n        nfe: true,\n        abilities: { 0: 'Poison Touch' }\n    },\n    'Greninja-Ash': {\n        types: ['Water', 'Dark'],\n        bs: { hp: 72, at: 145, df: 67, sa: 153, sd: 71, sp: 132 },\n        weightkg: 40,\n        abilities: { 0: 'Battle Bond' },\n        baseSpecies: 'Greninja'\n    },\n    Grubbin: {\n        types: ['Bug'],\n        bs: { hp: 47, at: 62, df: 45, sa: 55, sd: 45, sp: 46 },\n        weightkg: 4.4,\n        nfe: true,\n        abilities: { 0: 'Swarm' }\n    },\n    Gumshoos: {\n        types: ['Normal'],\n        bs: { hp: 88, at: 110, df: 60, sa: 55, sd: 60, sp: 45 },\n        weightkg: 14.2,\n        otherFormes: ['Gumshoos-Totem'],\n        abilities: { 0: 'Stakeout' }\n    },\n    'Gumshoos-Totem': {\n        types: ['Normal'],\n        bs: { hp: 88, at: 110, df: 60, sa: 55, sd: 60, sp: 45 },\n        weightkg: 60,\n        baseSpecies: 'Gumshoos',\n        abilities: { 0: 'Adaptability' }\n    },\n    Guzzlord: {\n        types: ['Dark', 'Dragon'],\n        bs: { hp: 223, at: 101, df: 53, sa: 97, sd: 53, sp: 43 },\n        weightkg: 888,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    'Hakamo-o': {\n        types: ['Dragon', 'Fighting'],\n        bs: { hp: 55, at: 75, df: 90, sa: 65, sd: 70, sp: 65 },\n        weightkg: 47,\n        nfe: true,\n        abilities: { 0: 'Bulletproof' }\n    },\n    Incineroar: {\n        types: ['Fire', 'Dark'],\n        bs: { hp: 95, at: 115, df: 90, sa: 80, sd: 90, sp: 60 },\n        weightkg: 83,\n        abilities: { 0: 'Blaze' }\n    },\n    'Jangmo-o': {\n        types: ['Dragon'],\n        bs: { hp: 45, at: 55, df: 65, sa: 45, sd: 45, sp: 45 },\n        weightkg: 29.7,\n        nfe: true,\n        abilities: { 0: 'Bulletproof' }\n    },\n    Justyke: {\n        types: ['Steel', 'Ground'],\n        bs: { hp: 72, at: 70, df: 56, sa: 83, sd: 68, sp: 30 },\n        weightkg: 36.5,\n        nfe: true,\n        abilities: { 0: 'Levitate' },\n        gender: 'N'\n    },\n    Jumbao: {\n        types: ['Grass', 'Fairy'],\n        bs: { hp: 92, at: 63, df: 97, sa: 124, sd: 104, sp: 96 },\n        weightkg: 200,\n        abilities: { 0: 'Trace' }\n    },\n    Kartana: {\n        types: ['Grass', 'Steel'],\n        bs: { hp: 59, at: 181, df: 131, sa: 59, sd: 31, sp: 109 },\n        weightkg: 0.1,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Komala: {\n        types: ['Normal'],\n        bs: { hp: 65, at: 115, df: 65, sa: 75, sd: 95, sp: 65 },\n        weightkg: 19.9,\n        abilities: { 0: 'Comatose' }\n    },\n    'Kommo-o': {\n        types: ['Dragon', 'Fighting'],\n        bs: { hp: 75, at: 110, df: 125, sa: 100, sd: 105, sp: 85 },\n        weightkg: 78.2,\n        otherFormes: ['Kommo-o-Totem'],\n        abilities: { 0: 'Bulletproof' }\n    },\n    'Kommo-o-Totem': {\n        types: ['Dragon', 'Fighting'],\n        bs: { hp: 75, at: 110, df: 125, sa: 100, sd: 105, sp: 85 },\n        weightkg: 207.5,\n        abilities: { 0: 'Overcoat' },\n        baseSpecies: 'Kommo-o'\n    },\n    Litten: {\n        types: ['Fire'],\n        bs: { hp: 45, at: 65, df: 40, sa: 60, sd: 40, sp: 70 },\n        weightkg: 4.3,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Lunala: {\n        types: ['Psychic', 'Ghost'],\n        bs: { hp: 137, at: 113, df: 89, sa: 137, sd: 107, sp: 97 },\n        weightkg: 120,\n        abilities: { 0: 'Shadow Shield' },\n        gender: 'N'\n    },\n    Lurantis: {\n        types: ['Grass'],\n        bs: { hp: 70, at: 105, df: 90, sa: 80, sd: 90, sp: 45 },\n        weightkg: 18.5,\n        otherFormes: ['Lurantis-Totem'],\n        abilities: { 0: 'Leaf Guard' }\n    },\n    'Lurantis-Totem': {\n        types: ['Grass'],\n        bs: { hp: 70, at: 105, df: 90, sa: 80, sd: 90, sp: 45 },\n        weightkg: 58,\n        abilities: { 0: 'Leaf Guard' },\n        baseSpecies: 'Lurantis'\n    },\n    Lycanroc: {\n        types: ['Rock'],\n        bs: { hp: 75, at: 115, df: 65, sa: 55, sd: 65, sp: 112 },\n        weightkg: 25,\n        otherFormes: ['Lycanroc-Dusk', 'Lycanroc-Midnight'],\n        abilities: { 0: 'Keen Eye' }\n    },\n    'Lycanroc-Dusk': {\n        types: ['Rock'],\n        bs: { hp: 75, at: 117, df: 65, sa: 55, sd: 65, sp: 110 },\n        weightkg: 25,\n        abilities: { 0: 'Tough Claws' },\n        baseSpecies: 'Lycanroc'\n    },\n    'Lycanroc-Midnight': {\n        types: ['Rock'],\n        bs: { hp: 85, at: 115, df: 75, sa: 55, sd: 75, sp: 82 },\n        weightkg: 25,\n        baseSpecies: 'Lycanroc',\n        abilities: { 0: 'Keen Eye' }\n    },\n    Magearna: {\n        types: ['Steel', 'Fairy'],\n        bs: { hp: 80, at: 95, df: 115, sa: 130, sd: 115, sp: 65 },\n        weightkg: 80.5,\n        gender: 'N',\n        abilities: { 0: 'Soul-Heart' }\n    },\n    Mareanie: {\n        types: ['Poison', 'Water'],\n        bs: { hp: 50, at: 53, df: 62, sa: 43, sd: 52, sp: 45 },\n        weightkg: 8,\n        nfe: true,\n        abilities: { 0: 'Merciless' }\n    },\n    'Marowak-Alola': {\n        types: ['Fire', 'Ghost'],\n        bs: { hp: 60, at: 80, df: 110, sa: 50, sd: 80, sp: 45 },\n        weightkg: 34,\n        abilities: { 0: 'Cursed Body' },\n        baseSpecies: 'Marowak'\n    },\n    'Marowak-Alola-Totem': {\n        types: ['Fire', 'Ghost'],\n        bs: { hp: 60, at: 80, df: 110, sa: 50, sd: 80, sp: 45 },\n        weightkg: 98,\n        abilities: { 0: 'Rock Head' },\n        baseSpecies: 'Marowak'\n    },\n    Marshadow: {\n        types: ['Fighting', 'Ghost'],\n        bs: { hp: 90, at: 125, df: 80, sa: 90, sd: 90, sp: 125 },\n        weightkg: 22.2,\n        gender: 'N',\n        abilities: { 0: 'Technician' }\n    },\n    Melmetal: {\n        types: ['Steel'],\n        bs: { hp: 135, at: 143, df: 143, sa: 80, sd: 65, sp: 34 },\n        weightkg: 800,\n        gender: 'N',\n        abilities: { 0: 'Iron Fist' }\n    },\n    Meltan: {\n        types: ['Steel'],\n        bs: { hp: 46, at: 65, df: 65, sa: 55, sd: 35, sp: 34 },\n        weightkg: 8,\n        gender: 'N',\n        abilities: { 0: 'Magnet Pull' }\n    },\n    'Meowth-Alola': {\n        types: ['Dark'],\n        bs: { hp: 40, at: 35, df: 35, sa: 50, sd: 40, sp: 90 },\n        weightkg: 4.2,\n        baseSpecies: 'Meowth',\n        nfe: true,\n        abilities: { 0: 'Pickup' }\n    },\n    Mimikyu: {\n        types: ['Ghost', 'Fairy'],\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\n        weightkg: 0.7,\n        otherFormes: ['Mimikyu-Busted', 'Mimikyu-Busted-Totem', 'Mimikyu-Totem'],\n        abilities: { 0: 'Disguise' }\n    },\n    'Mimikyu-Busted': {\n        types: ['Ghost', 'Fairy'],\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\n        weightkg: 0.7,\n        baseSpecies: 'Mimikyu',\n        abilities: { 0: 'Disguise' }\n    },\n    'Mimikyu-Busted-Totem': {\n        types: ['Ghost', 'Fairy'],\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\n        weightkg: 2.8,\n        baseSpecies: 'Mimikyu',\n        abilities: { 0: 'Disguise' }\n    },\n    'Mimikyu-Totem': {\n        types: ['Ghost', 'Fairy'],\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\n        weightkg: 2.8,\n        baseSpecies: 'Mimikyu',\n        abilities: { 0: 'Disguise' }\n    },\n    Minior: {\n        types: ['Rock', 'Flying'],\n        bs: { hp: 60, at: 100, df: 60, sa: 100, sd: 60, sp: 120 },\n        weightkg: 0.3,\n        otherFormes: ['Minior-Meteor'],\n        gender: 'N',\n        abilities: { 0: 'Shields Down' }\n    },\n    'Minior-Meteor': {\n        types: ['Rock', 'Flying'],\n        bs: { hp: 60, at: 60, df: 100, sa: 60, sd: 100, sp: 60 },\n        weightkg: 40,\n        gender: 'N',\n        baseSpecies: 'Minior',\n        abilities: { 0: 'Shields Down' }\n    },\n    Morelull: {\n        types: ['Grass', 'Fairy'],\n        bs: { hp: 40, at: 35, df: 55, sa: 65, sd: 75, sp: 15 },\n        weightkg: 1.5,\n        nfe: true,\n        abilities: { 0: 'Illuminate' }\n    },\n    Mudbray: {\n        types: ['Ground'],\n        bs: { hp: 70, at: 100, df: 70, sa: 45, sd: 55, sp: 45 },\n        weightkg: 110,\n        nfe: true,\n        abilities: { 0: 'Own Tempo' }\n    },\n    Mudsdale: {\n        types: ['Ground'],\n        bs: { hp: 100, at: 125, df: 100, sa: 55, sd: 85, sp: 35 },\n        weightkg: 920,\n        abilities: { 0: 'Own Tempo' }\n    },\n    'Muk-Alola': {\n        types: ['Poison', 'Dark'],\n        bs: { hp: 105, at: 105, df: 75, sa: 65, sd: 100, sp: 50 },\n        weightkg: 52,\n        baseSpecies: 'Muk',\n        abilities: { 0: 'Poison Touch' }\n    },\n    Mumbao: {\n        types: ['Grass', 'Fairy'],\n        bs: { hp: 55, at: 30, df: 64, sa: 87, sd: 73, sp: 66 },\n        weightkg: 83,\n        nfe: true,\n        abilities: { 0: 'Trace' }\n    },\n    Naganadel: {\n        types: ['Poison', 'Dragon'],\n        bs: { hp: 73, at: 73, df: 73, sa: 127, sd: 73, sp: 121 },\n        weightkg: 150,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Necrozma: {\n        types: ['Psychic'],\n        bs: { hp: 97, at: 107, df: 101, sa: 127, sd: 89, sp: 79 },\n        weightkg: 230,\n        abilities: { 0: 'Prism Armor' },\n        otherFormes: ['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane', 'Necrozma-Ultra'],\n        gender: 'N'\n    },\n    'Necrozma-Dawn-Wings': {\n        types: ['Psychic', 'Ghost'],\n        bs: { hp: 97, at: 113, df: 109, sa: 157, sd: 127, sp: 77 },\n        weightkg: 350,\n        abilities: { 0: 'Prism Armor' },\n        baseSpecies: 'Necrozma',\n        gender: 'N'\n    },\n    'Necrozma-Dusk-Mane': {\n        types: ['Psychic', 'Steel'],\n        bs: { hp: 97, at: 157, df: 127, sa: 113, sd: 109, sp: 77 },\n        weightkg: 460,\n        abilities: { 0: 'Prism Armor' },\n        baseSpecies: 'Necrozma',\n        gender: 'N'\n    },\n    'Necrozma-Ultra': {\n        types: ['Psychic', 'Dragon'],\n        bs: { hp: 97, at: 167, df: 97, sa: 167, sd: 97, sp: 129 },\n        weightkg: 230,\n        abilities: { 0: 'Neuroforce' },\n        baseSpecies: 'Necrozma',\n        gender: 'N'\n    },\n    Nihilego: {\n        types: ['Rock', 'Poison'],\n        bs: { hp: 109, at: 53, df: 47, sa: 127, sd: 131, sp: 103 },\n        weightkg: 55.5,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    'Ninetales-Alola': {\n        types: ['Ice', 'Fairy'],\n        bs: { hp: 73, at: 67, df: 75, sa: 81, sd: 100, sp: 109 },\n        weightkg: 19.9,\n        abilities: { 0: 'Snow Cloak' },\n        baseSpecies: 'Ninetales'\n    },\n    Oranguru: {\n        types: ['Normal', 'Psychic'],\n        bs: { hp: 90, at: 60, df: 80, sa: 90, sd: 110, sp: 60 },\n        weightkg: 76,\n        abilities: { 0: 'Inner Focus' }\n    },\n    Oricorio: {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\n        weightkg: 3.4,\n        abilities: { 0: 'Dancer' },\n        otherFormes: ['Oricorio-Pa\\'u', 'Oricorio-Pom-Pom', 'Oricorio-Sensu']\n    },\n    'Oricorio-Pa\\'u': {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\n        weightkg: 3.4,\n        abilities: { 0: 'Dancer' },\n        baseSpecies: 'Oricorio'\n    },\n    'Oricorio-Pom-Pom': {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\n        weightkg: 3.4,\n        abilities: { 0: 'Dancer' },\n        baseSpecies: 'Oricorio'\n    },\n    'Oricorio-Sensu': {\n        types: ['Ghost', 'Flying'],\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\n        weightkg: 3.4,\n        abilities: { 0: 'Dancer' },\n        baseSpecies: 'Oricorio'\n    },\n    Pajantom: {\n        types: ['Dragon', 'Ghost'],\n        bs: { hp: 84, at: 133, df: 71, sa: 51, sd: 111, sp: 101 },\n        weightkg: 3.1,\n        abilities: { 0: 'Comatose' }\n    },\n    Palossand: {\n        types: ['Ghost', 'Ground'],\n        bs: { hp: 85, at: 75, df: 110, sa: 100, sd: 75, sp: 35 },\n        weightkg: 250,\n        abilities: { 0: 'Water Compaction' }\n    },\n    Passimian: {\n        types: ['Fighting'],\n        bs: { hp: 100, at: 120, df: 90, sa: 40, sd: 60, sp: 80 },\n        weightkg: 82.8,\n        abilities: { 0: 'Receiver' }\n    },\n    'Persian-Alola': {\n        types: ['Dark'],\n        bs: { hp: 65, at: 60, df: 60, sa: 75, sd: 65, sp: 115 },\n        weightkg: 33,\n        baseSpecies: 'Persian',\n        abilities: { 0: 'Fur Coat' }\n    },\n    Pheromosa: {\n        types: ['Bug', 'Fighting'],\n        bs: { hp: 71, at: 137, df: 37, sa: 137, sd: 37, sp: 151 },\n        weightkg: 25,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    'Pikachu-Alola': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Hoenn': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Kalos': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Original': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Partner': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Sinnoh': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Starter': {\n        types: ['Electric'],\n        bs: { hp: 45, at: 80, df: 50, sa: 75, sd: 60, sp: 120 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-Unova': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    Pikipek: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 35, at: 75, df: 30, sa: 30, sd: 30, sp: 65 },\n        weightkg: 1.2,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Poipole: {\n        types: ['Poison'],\n        bs: { hp: 67, at: 73, df: 67, sa: 73, sd: 67, sp: 73 },\n        weightkg: 1.8,\n        abilities: { 0: 'Beast Boost' },\n        nfe: true,\n        gender: 'N'\n    },\n    Popplio: {\n        types: ['Water'],\n        bs: { hp: 50, at: 54, df: 54, sa: 66, sd: 56, sp: 40 },\n        weightkg: 7.5,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    Primarina: {\n        types: ['Water', 'Fairy'],\n        bs: { hp: 80, at: 74, df: 74, sa: 126, sd: 116, sp: 60 },\n        weightkg: 44,\n        abilities: { 0: 'Torrent' }\n    },\n    Pyukumuku: {\n        types: ['Water'],\n        bs: { hp: 55, at: 60, df: 130, sa: 30, sd: 130, sp: 5 },\n        weightkg: 1.2,\n        abilities: { 0: 'Innards Out' }\n    },\n    'Raichu-Alola': {\n        types: ['Electric', 'Psychic'],\n        bs: { hp: 60, at: 85, df: 50, sa: 95, sd: 85, sp: 110 },\n        weightkg: 21,\n        baseSpecies: 'Raichu',\n        abilities: { 0: 'Surge Surfer' }\n    },\n    'Raticate-Alola': {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 75, at: 71, df: 70, sa: 40, sd: 80, sp: 77 },\n        weightkg: 25.5,\n        baseSpecies: 'Raticate',\n        abilities: { 0: 'Gluttony' }\n    },\n    'Raticate-Alola-Totem': {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 75, at: 71, df: 70, sa: 40, sd: 80, sp: 77 },\n        weightkg: 105,\n        abilities: { 0: 'Thick Fat' },\n        baseSpecies: 'Raticate'\n    },\n    'Rattata-Alola': {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 30, at: 56, df: 35, sa: 25, sd: 35, sp: 72 },\n        weightkg: 3.8,\n        baseSpecies: 'Rattata',\n        nfe: true,\n        abilities: { 0: 'Gluttony' }\n    },\n    Ribombee: {\n        types: ['Bug', 'Fairy'],\n        bs: { hp: 60, at: 55, df: 60, sa: 95, sd: 70, sp: 124 },\n        weightkg: 0.5,\n        otherFormes: ['Ribombee-Totem'],\n        abilities: { 0: 'Honey Gather' }\n    },\n    'Ribombee-Totem': {\n        types: ['Bug', 'Fairy'],\n        bs: { hp: 60, at: 55, df: 60, sa: 95, sd: 70, sp: 124 },\n        weightkg: 2,\n        abilities: { 0: 'Sweet Veil' },\n        baseSpecies: 'Ribombee'\n    },\n    Rockruff: {\n        types: ['Rock'],\n        bs: { hp: 45, at: 65, df: 40, sa: 30, sd: 40, sp: 60 },\n        weightkg: 9.2,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Rowlet: {\n        types: ['Grass', 'Flying'],\n        bs: { hp: 68, at: 55, df: 55, sa: 50, sd: 50, sp: 42 },\n        weightkg: 1.5,\n        nfe: true,\n        abilities: { 0: 'Overgrow' }\n    },\n    Salandit: {\n        types: ['Poison', 'Fire'],\n        bs: { hp: 48, at: 44, df: 40, sa: 71, sd: 40, sp: 77 },\n        weightkg: 4.8,\n        nfe: true,\n        abilities: { 0: 'Corrosion' }\n    },\n    Salazzle: {\n        types: ['Poison', 'Fire'],\n        bs: { hp: 68, at: 64, df: 60, sa: 111, sd: 60, sp: 117 },\n        weightkg: 22.2,\n        otherFormes: ['Salazzle-Totem'],\n        abilities: { 0: 'Corrosion' }\n    },\n    'Salazzle-Totem': {\n        types: ['Poison', 'Fire'],\n        bs: { hp: 68, at: 64, df: 60, sa: 111, sd: 60, sp: 117 },\n        weightkg: 81,\n        abilities: { 0: 'Corrosion' },\n        baseSpecies: 'Salazzle'\n    },\n    'Sandshrew-Alola': {\n        types: ['Ice', 'Steel'],\n        bs: { hp: 50, at: 75, df: 90, sa: 10, sd: 35, sp: 40 },\n        weightkg: 40,\n        baseSpecies: 'Sandshrew',\n        nfe: true,\n        abilities: { 0: 'Snow Cloak' }\n    },\n    'Sandslash-Alola': {\n        types: ['Ice', 'Steel'],\n        bs: { hp: 75, at: 100, df: 120, sa: 25, sd: 65, sp: 65 },\n        weightkg: 55,\n        baseSpecies: 'Sandslash',\n        abilities: { 0: 'Snow Cloak' }\n    },\n    Sandygast: {\n        types: ['Ghost', 'Ground'],\n        bs: { hp: 55, at: 55, df: 80, sa: 70, sd: 45, sp: 15 },\n        weightkg: 70,\n        nfe: true,\n        abilities: { 0: 'Water Compaction' }\n    },\n    Shiinotic: {\n        types: ['Grass', 'Fairy'],\n        bs: { hp: 60, at: 45, df: 80, sa: 90, sd: 100, sp: 30 },\n        weightkg: 11.5,\n        abilities: { 0: 'Illuminate' }\n    },\n    Silvally: {\n        types: ['Normal'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        gender: 'N',\n        otherFormes: [\n            'Silvally-Bug',\n            'Silvally-Dark',\n            'Silvally-Dragon',\n            'Silvally-Electric',\n            'Silvally-Fairy',\n            'Silvally-Fighting',\n            'Silvally-Fire',\n            'Silvally-Flying',\n            'Silvally-Ghost',\n            'Silvally-Grass',\n            'Silvally-Ground',\n            'Silvally-Ice',\n            'Silvally-Poison',\n            'Silvally-Psychic',\n            'Silvally-Rock',\n            'Silvally-Steel',\n            'Silvally-Water',\n        ]\n    },\n    'Silvally-Bug': {\n        types: ['Bug'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Dark': {\n        types: ['Dark'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Dragon': {\n        types: ['Dragon'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Electric': {\n        types: ['Electric'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Fairy': {\n        types: ['Fairy'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Fighting': {\n        types: ['Fighting'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Fire': {\n        types: ['Fire'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Flying': {\n        types: ['Flying'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Ghost': {\n        types: ['Ghost'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Grass': {\n        types: ['Grass'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Ground': {\n        types: ['Ground'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Ice': {\n        types: ['Ice'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Poison': {\n        types: ['Poison'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Psychic': {\n        types: ['Psychic'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Rock': {\n        types: ['Rock'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Steel': {\n        types: ['Steel'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    'Silvally-Water': {\n        types: ['Water'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\n        weightkg: 100.5,\n        abilities: { 0: 'RKS System' },\n        baseSpecies: 'Silvally',\n        gender: 'N'\n    },\n    Smogecko: {\n        types: ['Fire'],\n        bs: { hp: 48, at: 66, df: 43, sa: 58, sd: 48, sp: 56 },\n        weightkg: 8.5,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Smoguana: {\n        types: ['Fire', 'Ground'],\n        bs: { hp: 68, at: 86, df: 53, sa: 68, sd: 68, sp: 76 },\n        weightkg: 22.2,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Smokomodo: {\n        types: ['Fire', 'Ground'],\n        bs: { hp: 88, at: 116, df: 67, sa: 88, sd: 78, sp: 97 },\n        weightkg: 205,\n        abilities: { 0: 'Blaze' }\n    },\n    Snaelstrom: {\n        types: ['Water', 'Bug'],\n        bs: { hp: 91, at: 94, df: 110, sa: 80, sd: 97, sp: 63 },\n        weightkg: 120,\n        abilities: { 0: 'Torrent' }\n    },\n    Solgaleo: {\n        types: ['Psychic', 'Steel'],\n        bs: { hp: 137, at: 137, df: 107, sa: 113, sd: 89, sp: 97 },\n        weightkg: 230,\n        abilities: { 0: 'Full Metal Body' },\n        gender: 'N'\n    },\n    Stakataka: {\n        types: ['Rock', 'Steel'],\n        bs: { hp: 61, at: 131, df: 211, sa: 53, sd: 101, sp: 13 },\n        weightkg: 820,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Steenee: {\n        types: ['Grass'],\n        bs: { hp: 52, at: 40, df: 48, sa: 40, sd: 48, sp: 62 },\n        weightkg: 8.2,\n        nfe: true,\n        abilities: { 0: 'Leaf Guard' }\n    },\n    Stufful: {\n        types: ['Normal', 'Fighting'],\n        bs: { hp: 70, at: 75, df: 50, sa: 45, sd: 50, sp: 50 },\n        weightkg: 6.8,\n        abilities: { 0: 'Fluffy' },\n        nfe: true\n    },\n    Swirlpool: {\n        types: ['Water'],\n        bs: { hp: 61, at: 49, df: 70, sa: 50, sd: 62, sp: 28 },\n        weightkg: 7,\n        nfe: true,\n        abilities: { 0: 'Torrent' }\n    },\n    'Tapu Bulu': {\n        types: ['Grass', 'Fairy'],\n        bs: { hp: 70, at: 130, df: 115, sa: 85, sd: 95, sp: 75 },\n        weightkg: 45.5,\n        abilities: { 0: 'Grassy Surge' },\n        gender: 'N'\n    },\n    'Tapu Fini': {\n        types: ['Water', 'Fairy'],\n        bs: { hp: 70, at: 75, df: 115, sa: 95, sd: 130, sp: 85 },\n        weightkg: 21.2,\n        abilities: { 0: 'Misty Surge' },\n        gender: 'N'\n    },\n    'Tapu Koko': {\n        types: ['Electric', 'Fairy'],\n        bs: { hp: 70, at: 115, df: 85, sa: 95, sd: 75, sp: 130 },\n        weightkg: 20.5,\n        abilities: { 0: 'Electric Surge' },\n        gender: 'N'\n    },\n    'Tapu Lele': {\n        types: ['Psychic', 'Fairy'],\n        bs: { hp: 70, at: 85, df: 75, sa: 130, sd: 115, sp: 95 },\n        weightkg: 18.6,\n        abilities: { 0: 'Psychic Surge' },\n        gender: 'N'\n    },\n    Togedemaru: {\n        types: ['Electric', 'Steel'],\n        bs: { hp: 65, at: 98, df: 63, sa: 40, sd: 73, sp: 96 },\n        weightkg: 3.3,\n        abilities: { 0: 'Iron Barbs' },\n        otherFormes: ['Togedemaru-Totem']\n    },\n    'Togedemaru-Totem': {\n        types: ['Electric', 'Steel'],\n        bs: { hp: 65, at: 98, df: 63, sa: 40, sd: 73, sp: 96 },\n        weightkg: 13,\n        abilities: { 0: 'Sturdy' },\n        baseSpecies: 'Togedemaru'\n    },\n    Torracat: {\n        types: ['Fire'],\n        bs: { hp: 65, at: 85, df: 50, sa: 80, sd: 50, sp: 90 },\n        weightkg: 25,\n        nfe: true,\n        abilities: { 0: 'Blaze' }\n    },\n    Toucannon: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 80, at: 120, df: 75, sa: 75, sd: 75, sp: 60 },\n        weightkg: 26,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Toxapex: {\n        types: ['Poison', 'Water'],\n        bs: { hp: 50, at: 63, df: 152, sa: 53, sd: 142, sp: 35 },\n        weightkg: 14.5,\n        abilities: { 0: 'Merciless' }\n    },\n    Trumbeak: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 55, at: 85, df: 50, sa: 40, sd: 50, sp: 75 },\n        weightkg: 14.8,\n        nfe: true,\n        abilities: { 0: 'Keen Eye' }\n    },\n    Tsareena: {\n        types: ['Grass'],\n        bs: { hp: 72, at: 120, df: 98, sa: 50, sd: 98, sp: 72 },\n        weightkg: 21.4,\n        abilities: { 0: 'Leaf Guard' }\n    },\n    Turtonator: {\n        types: ['Fire', 'Dragon'],\n        bs: { hp: 60, at: 78, df: 135, sa: 91, sd: 85, sp: 36 },\n        weightkg: 212,\n        abilities: { 0: 'Shell Armor' }\n    },\n    'Type: Null': {\n        types: ['Normal'],\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 59 },\n        weightkg: 120.5,\n        abilities: { 0: 'Battle Armor' },\n        nfe: true,\n        gender: 'N'\n    },\n    Vikavolt: {\n        types: ['Bug', 'Electric'],\n        bs: { hp: 77, at: 70, df: 90, sa: 145, sd: 75, sp: 43 },\n        weightkg: 45,\n        abilities: { 0: 'Levitate' },\n        otherFormes: ['Vikavolt-Totem']\n    },\n    'Vikavolt-Totem': {\n        types: ['Bug', 'Electric'],\n        bs: { hp: 77, at: 70, df: 90, sa: 145, sd: 75, sp: 43 },\n        weightkg: 147.5,\n        abilities: { 0: 'Levitate' },\n        baseSpecies: 'Vikavolt'\n    },\n    'Vulpix-Alola': {\n        types: ['Ice'],\n        bs: { hp: 38, at: 41, df: 40, sa: 50, sd: 65, sp: 65 },\n        weightkg: 9.9,\n        baseSpecies: 'Vulpix',\n        nfe: true,\n        abilities: { 0: 'Snow Cloak' }\n    },\n    Wimpod: {\n        types: ['Bug', 'Water'],\n        bs: { hp: 25, at: 35, df: 40, sa: 20, sd: 30, sp: 80 },\n        weightkg: 12,\n        abilities: { 0: 'Wimp Out' },\n        nfe: true\n    },\n    Wishiwashi: {\n        types: ['Water'],\n        bs: { hp: 45, at: 20, df: 20, sa: 25, sd: 25, sp: 40 },\n        weightkg: 0.3,\n        otherFormes: ['Wishiwashi-School'],\n        abilities: { 0: 'Schooling' }\n    },\n    'Wishiwashi-School': {\n        types: ['Water'],\n        bs: { hp: 45, at: 140, df: 130, sa: 140, sd: 135, sp: 30 },\n        weightkg: 78.6,\n        baseSpecies: 'Wishiwashi',\n        abilities: { 0: 'Schooling' }\n    },\n    Xurkitree: {\n        types: ['Electric'],\n        bs: { hp: 83, at: 89, df: 71, sa: 173, sd: 71, sp: 83 },\n        weightkg: 100,\n        abilities: { 0: 'Beast Boost' },\n        gender: 'N'\n    },\n    Yungoos: {\n        types: ['Normal'],\n        bs: { hp: 48, at: 70, df: 30, sa: 30, sd: 30, sp: 45 },\n        weightkg: 6,\n        nfe: true,\n        abilities: { 0: 'Stakeout' }\n    },\n    Zeraora: {\n        types: ['Electric'],\n        bs: { hp: 88, at: 112, df: 75, sa: 102, sd: 80, sp: 143 },\n        weightkg: 44.5,\n        abilities: { 0: 'Volt Absorb' },\n        gender: 'N'\n    },\n    'Zygarde-10%': {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 54, at: 100, df: 71, sa: 61, sd: 85, sp: 115 },\n        weightkg: 33.5,\n        abilities: { 0: 'Aura Break' },\n        baseSpecies: 'Zygarde',\n        gender: 'N'\n    },\n    'Zygarde-Complete': {\n        types: ['Dragon', 'Ground'],\n        bs: { hp: 216, at: 100, df: 121, sa: 91, sd: 95, sp: 85 },\n        weightkg: 610,\n        abilities: { 0: 'Power Construct' },\n        baseSpecies: 'Zygarde',\n        gender: 'N'\n    }\n};\nvar SM = (0, util_1.extend)(true, {}, XY, SM_PATCH);\ndelete SM['Pikachu-Cosplay'];\ndelete SM['Pikachu-Rock-Star'];\ndelete SM['Pikachu-Belle'];\ndelete SM['Pikachu-PhD'];\ndelete SM['Pikachu-Pop-Star'];\ndelete SM['Pikachu-Libre'];\nvar SS_PATCH = {\n    'Aegislash-Blade': { bs: { at: 140, sa: 140 } },\n    'Aegislash-Both': { bs: { at: 140, df: 140, sa: 140, sd: 140 } },\n    'Aegislash-Shield': { bs: { df: 140, sd: 140 } },\n    Articuno: { otherFormes: ['Articuno-Galar'] },\n    Blastoise: { otherFormes: ['Blastoise-Gmax', 'Blastoise-Mega'] },\n    Butterfree: { otherFormes: ['Butterfree-Gmax'] },\n    Charizard: { otherFormes: ['Charizard-Gmax', 'Charizard-Mega-X', 'Charizard-Mega-Y'] },\n    Corsola: { otherFormes: ['Corsola-Galar'] },\n    Darmanitan: {\n        otherFormes: ['Darmanitan-Galar', 'Darmanitan-Galar-Zen', 'Darmanitan-Zen']\n    },\n    Darumaka: { otherFormes: ['Darumaka-Galar'] },\n    Eevee: { otherFormes: ['Eevee-Gmax'] },\n    Equilibra: { bs: { sa: 133 } },\n    'Farfetch\\u2019d': { otherFormes: ['Farfetch\\u2019d-Galar'] },\n    Garbodor: { otherFormes: ['Garbodor-Gmax'] },\n    Gengar: { otherFormes: ['Gengar-Gmax', 'Gengar-Mega'] },\n    Kingler: { otherFormes: ['Kingler-Gmax'] },\n    Lapras: { otherFormes: ['Lapras-Gmax'] },\n    Linoone: { otherFormes: ['Linoone-Galar'] },\n    Machamp: { otherFormes: ['Machamp-Gmax'] },\n    Melmetal: { otherFormes: ['Melmetal-Gmax'] },\n    Meowth: { otherFormes: ['Meowth-Alola', 'Meowth-Galar', 'Meowth-Gmax'] },\n    Moltres: { otherFormes: ['Moltres-Galar'] },\n    'Mr. Mime': { otherFormes: ['Mr. Mime-Galar'] },\n    Pikachu: {\n        otherFormes: [\n            'Pikachu-Alola',\n            'Pikachu-Gmax',\n            'Pikachu-Hoenn',\n            'Pikachu-Kalos',\n            'Pikachu-Original',\n            'Pikachu-Partner',\n            'Pikachu-Sinnoh',\n            'Pikachu-Unova',\n            'Pikachu-World',\n        ]\n    },\n    Ponyta: { otherFormes: ['Ponyta-Galar'] },\n    Pyroak: { bs: { sa: 70, sd: 65 } },\n    Rapidash: { otherFormes: ['Rapidash-Galar'] },\n    Slowbro: { otherFormes: ['Slowbro-Galar', 'Slowbro-Mega'] },\n    Slowking: { otherFormes: ['Slowking-Galar'] },\n    Slowpoke: { otherFormes: ['Slowpoke-Galar'] },\n    Snorlax: { otherFormes: ['Snorlax-Gmax'] },\n    Stunfisk: { otherFormes: ['Stunfisk-Galar'] },\n    Venusaur: { otherFormes: ['Venusaur-Gmax', 'Venusaur-Mega'] },\n    Voodoom: { bs: { sa: 130 } },\n    Weezing: { otherFormes: ['Weezing-Galar'] },\n    Yamask: { otherFormes: ['Yamask-Galar'] },\n    Zapdos: { otherFormes: ['Zapdos-Galar'] },\n    Zigzagoon: { otherFormes: ['Zigzagoon-Galar'] },\n    Alcremie: {\n        types: ['Fairy'],\n        bs: { hp: 65, at: 60, df: 75, sa: 110, sd: 121, sp: 64 },\n        weightkg: 0.5,\n        abilities: { 0: 'Sweet Veil' },\n        otherFormes: ['Alcremie-Gmax']\n    },\n    'Alcremie-Gmax': {\n        types: ['Fairy'],\n        bs: { hp: 65, at: 60, df: 75, sa: 110, sd: 121, sp: 64 },\n        weightkg: 0,\n        abilities: { 0: 'Sweet Veil' },\n        baseSpecies: 'Alcremie'\n    },\n    Appletun: {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 110, at: 85, df: 80, sa: 100, sd: 80, sp: 30 },\n        weightkg: 13,\n        abilities: { 0: 'Ripen' },\n        otherFormes: ['Appletun-Gmax']\n    },\n    'Appletun-Gmax': {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 110, at: 85, df: 80, sa: 100, sd: 80, sp: 30 },\n        weightkg: 0,\n        abilities: { 0: 'Ripen' },\n        baseSpecies: 'Appletun'\n    },\n    Applin: {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 40, at: 40, df: 80, sa: 40, sd: 40, sp: 20 },\n        weightkg: 0.5,\n        abilities: { 0: 'Ripen' },\n        nfe: true\n    },\n    Arctovish: {\n        types: ['Water', 'Ice'],\n        bs: { hp: 90, at: 90, df: 100, sa: 80, sd: 90, sp: 55 },\n        weightkg: 175,\n        abilities: { 0: 'Water Absorb' },\n        gender: 'N'\n    },\n    Arctozolt: {\n        types: ['Electric', 'Ice'],\n        bs: { hp: 90, at: 100, df: 90, sa: 90, sd: 80, sp: 55 },\n        weightkg: 150,\n        abilities: { 0: 'Volt Absorb' },\n        gender: 'N'\n    },\n    Arrokuda: {\n        types: ['Water'],\n        bs: { hp: 41, at: 63, df: 40, sa: 40, sd: 30, sp: 66 },\n        weightkg: 1,\n        abilities: { 0: 'Swift Swim' },\n        nfe: true\n    },\n    'Articuno-Galar': {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 90, at: 85, df: 85, sa: 125, sd: 100, sp: 95 },\n        weightkg: 50.9,\n        abilities: { 0: 'Competitive' },\n        gender: 'N',\n        baseSpecies: 'Articuno'\n    },\n    Astrolotl: {\n        types: ['Fire', 'Dragon'],\n        bs: { hp: 108, at: 108, df: 74, sa: 92, sd: 64, sp: 114 },\n        weightkg: 50,\n        abilities: { 0: 'Regenerator' }\n    },\n    Barraskewda: {\n        types: ['Water'],\n        bs: { hp: 61, at: 123, df: 60, sa: 60, sd: 50, sp: 136 },\n        weightkg: 30,\n        abilities: { 0: 'Swift Swim' }\n    },\n    'Blastoise-Gmax': {\n        types: ['Water'],\n        bs: { hp: 79, at: 83, df: 100, sa: 85, sd: 105, sp: 78 },\n        weightkg: 0,\n        abilities: { 0: 'Torrent' },\n        baseSpecies: 'Blastoise'\n    },\n    Blipbug: {\n        types: ['Bug'],\n        bs: { hp: 25, at: 20, df: 20, sa: 25, sd: 45, sp: 45 },\n        weightkg: 8,\n        abilities: { 0: 'Swarm' },\n        nfe: true\n    },\n    Boltund: {\n        types: ['Electric'],\n        bs: { hp: 69, at: 90, df: 60, sa: 90, sd: 60, sp: 121 },\n        weightkg: 34,\n        abilities: { 0: 'Strong Jaw' }\n    },\n    'Butterfree-Gmax': {\n        types: ['Bug', 'Flying'],\n        bs: { hp: 60, at: 45, df: 50, sa: 90, sd: 80, sp: 70 },\n        weightkg: 0,\n        abilities: { 0: 'Compound Eyes' },\n        baseSpecies: 'Butterfree'\n    },\n    Calyrex: {\n        types: ['Psychic', 'Grass'],\n        bs: { hp: 100, at: 80, df: 80, sa: 80, sd: 80, sp: 80 },\n        weightkg: 7.7,\n        abilities: { 0: 'Unnerve' },\n        gender: 'N',\n        otherFormes: ['Calyrex-Ice', 'Calyrex-Shadow']\n    },\n    'Calyrex-Ice': {\n        types: ['Psychic', 'Ice'],\n        bs: { hp: 100, at: 165, df: 150, sa: 85, sd: 130, sp: 50 },\n        weightkg: 809.1,\n        abilities: { 0: 'As One (Glastrier)' },\n        gender: 'N',\n        baseSpecies: 'Calyrex'\n    },\n    'Calyrex-Shadow': {\n        types: ['Psychic', 'Ghost'],\n        bs: { hp: 100, at: 85, df: 80, sa: 165, sd: 100, sp: 150 },\n        weightkg: 53.6,\n        abilities: { 0: 'As One (Spectrier)' },\n        gender: 'N',\n        baseSpecies: 'Calyrex'\n    },\n    Carkol: {\n        types: ['Rock', 'Fire'],\n        bs: { hp: 80, at: 60, df: 90, sa: 60, sd: 70, sp: 50 },\n        weightkg: 78,\n        abilities: { 0: 'Steam Engine' },\n        nfe: true\n    },\n    Centiskorch: {\n        types: ['Fire', 'Bug'],\n        bs: { hp: 100, at: 115, df: 65, sa: 90, sd: 90, sp: 65 },\n        weightkg: 120,\n        abilities: { 0: 'Flash Fire' },\n        otherFormes: ['Centiskorch-Gmax']\n    },\n    'Centiskorch-Gmax': {\n        types: ['Fire', 'Bug'],\n        bs: { hp: 100, at: 115, df: 65, sa: 90, sd: 90, sp: 65 },\n        weightkg: 0,\n        abilities: { 0: 'Flash Fire' },\n        baseSpecies: 'Centiskorch'\n    },\n    'Charizard-Gmax': {\n        types: ['Fire', 'Flying'],\n        bs: { hp: 78, at: 84, df: 78, sa: 109, sd: 85, sp: 100 },\n        weightkg: 0,\n        abilities: { 0: 'Blaze' },\n        baseSpecies: 'Charizard'\n    },\n    Chewtle: {\n        types: ['Water'],\n        bs: { hp: 50, at: 64, df: 50, sa: 38, sd: 38, sp: 44 },\n        weightkg: 8.5,\n        abilities: { 0: 'Strong Jaw' },\n        nfe: true\n    },\n    Chromera: {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 85, at: 85, df: 115, sa: 115, sd: 100, sp: 100 },\n        weightkg: 215,\n        abilities: { 0: 'Color Change' },\n        gender: 'N'\n    },\n    Cinderace: {\n        types: ['Fire'],\n        bs: { hp: 80, at: 116, df: 75, sa: 65, sd: 75, sp: 119 },\n        weightkg: 33,\n        abilities: { 0: 'Blaze' },\n        otherFormes: ['Cinderace-Gmax']\n    },\n    'Cinderace-Gmax': {\n        types: ['Fire'],\n        bs: { hp: 80, at: 116, df: 75, sa: 65, sd: 75, sp: 119 },\n        weightkg: 0,\n        abilities: { 0: 'Blaze' },\n        baseSpecies: 'Cinderace'\n    },\n    Clobbopus: {\n        types: ['Fighting'],\n        bs: { hp: 50, at: 68, df: 60, sa: 50, sd: 50, sp: 32 },\n        weightkg: 4,\n        abilities: { 0: 'Limber' },\n        nfe: true\n    },\n    Coalossal: {\n        types: ['Rock', 'Fire'],\n        bs: { hp: 110, at: 80, df: 120, sa: 80, sd: 90, sp: 30 },\n        weightkg: 310.5,\n        abilities: { 0: 'Steam Engine' },\n        otherFormes: ['Coalossal-Gmax']\n    },\n    'Coalossal-Gmax': {\n        types: ['Rock', 'Fire'],\n        bs: { hp: 110, at: 80, df: 120, sa: 80, sd: 90, sp: 30 },\n        weightkg: 0,\n        abilities: { 0: 'Steam Engine' },\n        baseSpecies: 'Coalossal'\n    },\n    Copperajah: {\n        types: ['Steel'],\n        bs: { hp: 122, at: 130, df: 69, sa: 80, sd: 69, sp: 30 },\n        weightkg: 650,\n        abilities: { 0: 'Sheer Force' },\n        otherFormes: ['Copperajah-Gmax']\n    },\n    'Copperajah-Gmax': {\n        types: ['Steel'],\n        bs: { hp: 122, at: 130, df: 69, sa: 80, sd: 69, sp: 30 },\n        weightkg: 0,\n        abilities: { 0: 'Sheer Force' },\n        baseSpecies: 'Copperajah'\n    },\n    'Corsola-Galar': {\n        types: ['Ghost'],\n        bs: { hp: 60, at: 55, df: 100, sa: 65, sd: 100, sp: 30 },\n        weightkg: 0.5,\n        abilities: { 0: 'Weak Armor' },\n        nfe: true,\n        baseSpecies: 'Corsola'\n    },\n    Corviknight: {\n        types: ['Flying', 'Steel'],\n        bs: { hp: 98, at: 87, df: 105, sa: 53, sd: 85, sp: 67 },\n        weightkg: 75,\n        abilities: { 0: 'Pressure' },\n        otherFormes: ['Corviknight-Gmax']\n    },\n    'Corviknight-Gmax': {\n        types: ['Flying', 'Steel'],\n        bs: { hp: 98, at: 87, df: 105, sa: 53, sd: 85, sp: 67 },\n        weightkg: 0,\n        abilities: { 0: 'Pressure' },\n        baseSpecies: 'Corviknight'\n    },\n    Corvisquire: {\n        types: ['Flying'],\n        bs: { hp: 68, at: 67, df: 55, sa: 43, sd: 55, sp: 77 },\n        weightkg: 16,\n        abilities: { 0: 'Keen Eye' },\n        nfe: true\n    },\n    Cramorant: {\n        types: ['Flying', 'Water'],\n        bs: { hp: 70, at: 85, df: 55, sa: 85, sd: 95, sp: 85 },\n        weightkg: 18,\n        abilities: { 0: 'Gulp Missile' },\n        otherFormes: ['Cramorant-Gorging', 'Cramorant-Gulping']\n    },\n    'Cramorant-Gorging': {\n        types: ['Flying', 'Water'],\n        bs: { hp: 70, at: 85, df: 55, sa: 85, sd: 95, sp: 85 },\n        weightkg: 18,\n        abilities: { 0: 'Gulp Missile' },\n        baseSpecies: 'Cramorant'\n    },\n    'Cramorant-Gulping': {\n        types: ['Flying', 'Water'],\n        bs: { hp: 70, at: 85, df: 55, sa: 85, sd: 95, sp: 85 },\n        weightkg: 18,\n        abilities: { 0: 'Gulp Missile' },\n        baseSpecies: 'Cramorant'\n    },\n    Cufant: {\n        types: ['Steel'],\n        bs: { hp: 72, at: 80, df: 49, sa: 40, sd: 49, sp: 40 },\n        weightkg: 100,\n        abilities: { 0: 'Sheer Force' },\n        nfe: true\n    },\n    Cursola: {\n        types: ['Ghost'],\n        bs: { hp: 60, at: 95, df: 50, sa: 145, sd: 130, sp: 30 },\n        weightkg: 0.4,\n        abilities: { 0: 'Weak Armor' }\n    },\n    'Darmanitan-Galar': {\n        types: ['Ice'],\n        bs: { hp: 105, at: 140, df: 55, sa: 30, sd: 55, sp: 95 },\n        weightkg: 120,\n        abilities: { 0: 'Gorilla Tactics' },\n        baseSpecies: 'Darmanitan'\n    },\n    'Darmanitan-Galar-Zen': {\n        types: ['Ice', 'Fire'],\n        bs: { hp: 105, at: 160, df: 55, sa: 30, sd: 55, sp: 135 },\n        weightkg: 120,\n        abilities: { 0: 'Zen Mode' },\n        baseSpecies: 'Darmanitan'\n    },\n    'Darumaka-Galar': {\n        types: ['Ice'],\n        bs: { hp: 70, at: 90, df: 45, sa: 15, sd: 45, sp: 50 },\n        weightkg: 40,\n        abilities: { 0: 'Hustle' },\n        nfe: true,\n        baseSpecies: 'Darumaka'\n    },\n    Dottler: {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 50, at: 35, df: 80, sa: 50, sd: 90, sp: 30 },\n        weightkg: 19.5,\n        abilities: { 0: 'Swarm' },\n        nfe: true\n    },\n    Dracovish: {\n        types: ['Water', 'Dragon'],\n        bs: { hp: 90, at: 90, df: 100, sa: 70, sd: 80, sp: 75 },\n        weightkg: 215,\n        abilities: { 0: 'Water Absorb' },\n        gender: 'N'\n    },\n    Dracozolt: {\n        types: ['Electric', 'Dragon'],\n        bs: { hp: 90, at: 100, df: 90, sa: 80, sd: 70, sp: 75 },\n        weightkg: 190,\n        abilities: { 0: 'Volt Absorb' },\n        gender: 'N'\n    },\n    Dragapult: {\n        types: ['Dragon', 'Ghost'],\n        bs: { hp: 88, at: 120, df: 75, sa: 100, sd: 75, sp: 142 },\n        weightkg: 50,\n        abilities: { 0: 'Clear Body' }\n    },\n    Drakloak: {\n        types: ['Dragon', 'Ghost'],\n        bs: { hp: 68, at: 80, df: 50, sa: 60, sd: 50, sp: 102 },\n        weightkg: 11,\n        abilities: { 0: 'Clear Body' },\n        nfe: true\n    },\n    Drednaw: {\n        types: ['Water', 'Rock'],\n        bs: { hp: 90, at: 115, df: 90, sa: 48, sd: 68, sp: 74 },\n        weightkg: 115.5,\n        abilities: { 0: 'Strong Jaw' },\n        otherFormes: ['Drednaw-Gmax']\n    },\n    'Drednaw-Gmax': {\n        types: ['Water', 'Rock'],\n        bs: { hp: 90, at: 115, df: 90, sa: 48, sd: 68, sp: 74 },\n        weightkg: 0,\n        abilities: { 0: 'Strong Jaw' },\n        baseSpecies: 'Drednaw'\n    },\n    Dreepy: {\n        types: ['Dragon', 'Ghost'],\n        bs: { hp: 28, at: 60, df: 30, sa: 40, sd: 30, sp: 82 },\n        weightkg: 2,\n        abilities: { 0: 'Clear Body' },\n        nfe: true\n    },\n    Drizzile: {\n        types: ['Water'],\n        bs: { hp: 65, at: 60, df: 55, sa: 95, sd: 55, sp: 90 },\n        weightkg: 11.5,\n        abilities: { 0: 'Torrent' },\n        nfe: true\n    },\n    Dubwool: {\n        types: ['Normal'],\n        bs: { hp: 72, at: 80, df: 100, sa: 60, sd: 90, sp: 88 },\n        weightkg: 43,\n        abilities: { 0: 'Fluffy' }\n    },\n    Duraludon: {\n        types: ['Steel', 'Dragon'],\n        bs: { hp: 70, at: 95, df: 115, sa: 120, sd: 50, sp: 85 },\n        weightkg: 40,\n        abilities: { 0: 'Light Metal' },\n        otherFormes: ['Duraludon-Gmax']\n    },\n    'Duraludon-Gmax': {\n        types: ['Steel', 'Dragon'],\n        bs: { hp: 70, at: 95, df: 115, sa: 120, sd: 50, sp: 85 },\n        weightkg: 0,\n        abilities: { 0: 'Light Metal' },\n        baseSpecies: 'Duraludon'\n    },\n    'Eevee-Gmax': {\n        types: ['Normal'],\n        bs: { hp: 55, at: 55, df: 50, sa: 45, sd: 65, sp: 55 },\n        weightkg: 0,\n        abilities: { 0: 'Run Away' },\n        baseSpecies: 'Eevee'\n    },\n    Eiscue: {\n        types: ['Ice'],\n        bs: { hp: 75, at: 80, df: 110, sa: 65, sd: 90, sp: 50 },\n        weightkg: 89,\n        abilities: { 0: 'Ice Face' },\n        otherFormes: ['Eiscue-Noice']\n    },\n    'Eiscue-Noice': {\n        types: ['Ice'],\n        bs: { hp: 75, at: 80, df: 70, sa: 65, sd: 50, sp: 130 },\n        weightkg: 89,\n        abilities: { 0: 'Ice Face' },\n        baseSpecies: 'Eiscue'\n    },\n    Eldegoss: {\n        types: ['Grass'],\n        bs: { hp: 60, at: 50, df: 90, sa: 80, sd: 120, sp: 60 },\n        weightkg: 2.5,\n        abilities: { 0: 'Cotton Down' }\n    },\n    Eternatus: {\n        types: ['Poison', 'Dragon'],\n        bs: { hp: 140, at: 85, df: 95, sa: 145, sd: 95, sp: 130 },\n        weightkg: 950,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        otherFormes: ['Eternatus-Eternamax']\n    },\n    'Eternatus-Eternamax': {\n        types: ['Poison', 'Dragon'],\n        bs: { hp: 255, at: 115, df: 250, sa: 125, sd: 250, sp: 130 },\n        weightkg: 0,\n        abilities: { 0: 'Pressure' },\n        gender: 'N',\n        baseSpecies: 'Eternatus'\n    },\n    Falinks: {\n        types: ['Fighting'],\n        bs: { hp: 65, at: 100, df: 100, sa: 70, sd: 60, sp: 75 },\n        weightkg: 62,\n        abilities: { 0: 'Battle Armor' },\n        gender: 'N'\n    },\n    'Farfetch\\u2019d-Galar': {\n        types: ['Fighting'],\n        bs: { hp: 52, at: 95, df: 55, sa: 58, sd: 62, sp: 55 },\n        weightkg: 15,\n        abilities: { 0: 'Steadfast' },\n        nfe: true,\n        baseSpecies: 'Farfetch\\u2019d'\n    },\n    Flapple: {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 70, at: 110, df: 80, sa: 95, sd: 60, sp: 70 },\n        weightkg: 1,\n        abilities: { 0: 'Ripen' },\n        otherFormes: ['Flapple-Gmax']\n    },\n    'Flapple-Gmax': {\n        types: ['Grass', 'Dragon'],\n        bs: { hp: 70, at: 110, df: 80, sa: 95, sd: 60, sp: 70 },\n        weightkg: 0,\n        abilities: { 0: 'Ripen' },\n        baseSpecies: 'Flapple'\n    },\n    Frosmoth: {\n        types: ['Ice', 'Bug'],\n        bs: { hp: 70, at: 65, df: 60, sa: 125, sd: 90, sp: 65 },\n        weightkg: 42,\n        abilities: { 0: 'Shield Dust' }\n    },\n    'Garbodor-Gmax': {\n        types: ['Poison'],\n        bs: { hp: 80, at: 95, df: 82, sa: 60, sd: 82, sp: 75 },\n        weightkg: 0,\n        abilities: { 0: 'Stench' },\n        baseSpecies: 'Garbodor'\n    },\n    'Gengar-Gmax': {\n        types: ['Ghost', 'Poison'],\n        bs: { hp: 60, at: 65, df: 60, sa: 130, sd: 75, sp: 110 },\n        weightkg: 0,\n        abilities: { 0: 'Cursed Body' },\n        baseSpecies: 'Gengar'\n    },\n    Glastrier: {\n        types: ['Ice'],\n        bs: { hp: 100, at: 145, df: 130, sa: 65, sd: 110, sp: 30 },\n        weightkg: 800,\n        abilities: { 0: 'Chilling Neigh' },\n        gender: 'N'\n    },\n    Gossifleur: {\n        types: ['Grass'],\n        bs: { hp: 40, at: 40, df: 60, sa: 40, sd: 60, sp: 10 },\n        weightkg: 2.2,\n        abilities: { 0: 'Cotton Down' },\n        nfe: true\n    },\n    Grapploct: {\n        types: ['Fighting'],\n        bs: { hp: 80, at: 118, df: 90, sa: 70, sd: 80, sp: 42 },\n        weightkg: 39,\n        abilities: { 0: 'Limber' }\n    },\n    Greedent: {\n        types: ['Normal'],\n        bs: { hp: 120, at: 95, df: 95, sa: 55, sd: 75, sp: 20 },\n        weightkg: 6,\n        abilities: { 0: 'Cheek Pouch' }\n    },\n    Grimmsnarl: {\n        types: ['Dark', 'Fairy'],\n        bs: { hp: 95, at: 120, df: 65, sa: 95, sd: 75, sp: 60 },\n        weightkg: 61,\n        abilities: { 0: 'Prankster' },\n        otherFormes: ['Grimmsnarl-Gmax']\n    },\n    'Grimmsnarl-Gmax': {\n        types: ['Dark', 'Fairy'],\n        bs: { hp: 95, at: 120, df: 65, sa: 95, sd: 75, sp: 60 },\n        weightkg: 0,\n        abilities: { 0: 'Prankster' },\n        baseSpecies: 'Grimmsnarl'\n    },\n    Grookey: {\n        types: ['Grass'],\n        bs: { hp: 50, at: 65, df: 50, sa: 40, sd: 40, sp: 65 },\n        weightkg: 5,\n        abilities: { 0: 'Overgrow' },\n        nfe: true\n    },\n    Hatenna: {\n        types: ['Psychic'],\n        bs: { hp: 42, at: 30, df: 45, sa: 56, sd: 53, sp: 39 },\n        weightkg: 3.4,\n        abilities: { 0: 'Healer' },\n        nfe: true\n    },\n    Hatterene: {\n        types: ['Psychic', 'Fairy'],\n        bs: { hp: 57, at: 90, df: 95, sa: 136, sd: 103, sp: 29 },\n        weightkg: 5.1,\n        abilities: { 0: 'Healer' },\n        otherFormes: ['Hatterene-Gmax']\n    },\n    'Hatterene-Gmax': {\n        types: ['Psychic', 'Fairy'],\n        bs: { hp: 57, at: 90, df: 95, sa: 136, sd: 103, sp: 29 },\n        weightkg: 0,\n        abilities: { 0: 'Healer' },\n        baseSpecies: 'Hatterene'\n    },\n    Hattrem: {\n        types: ['Psychic'],\n        bs: { hp: 57, at: 40, df: 65, sa: 86, sd: 73, sp: 49 },\n        weightkg: 4.8,\n        abilities: { 0: 'Healer' },\n        nfe: true\n    },\n    Impidimp: {\n        types: ['Dark', 'Fairy'],\n        bs: { hp: 45, at: 45, df: 30, sa: 55, sd: 40, sp: 50 },\n        weightkg: 5.5,\n        abilities: { 0: 'Prankster' },\n        nfe: true\n    },\n    Indeedee: {\n        types: ['Psychic', 'Normal'],\n        bs: { hp: 60, at: 65, df: 55, sa: 105, sd: 95, sp: 95 },\n        weightkg: 28,\n        abilities: { 0: 'Inner Focus' },\n        otherFormes: ['Indeedee-F']\n    },\n    'Indeedee-F': {\n        types: ['Psychic', 'Normal'],\n        bs: { hp: 70, at: 55, df: 65, sa: 95, sd: 105, sp: 85 },\n        weightkg: 28,\n        abilities: { 0: 'Own Tempo' },\n        baseSpecies: 'Indeedee'\n    },\n    Inteleon: {\n        types: ['Water'],\n        bs: { hp: 70, at: 85, df: 65, sa: 125, sd: 65, sp: 120 },\n        weightkg: 45.2,\n        abilities: { 0: 'Torrent' },\n        otherFormes: ['Inteleon-Gmax']\n    },\n    'Inteleon-Gmax': {\n        types: ['Water'],\n        bs: { hp: 70, at: 85, df: 65, sa: 125, sd: 65, sp: 120 },\n        weightkg: 0,\n        abilities: { 0: 'Torrent' },\n        baseSpecies: 'Inteleon'\n    },\n    'Kingler-Gmax': {\n        types: ['Water'],\n        bs: { hp: 55, at: 130, df: 115, sa: 50, sd: 50, sp: 75 },\n        weightkg: 0,\n        abilities: { 0: 'Hyper Cutter' },\n        baseSpecies: 'Kingler'\n    },\n    'Kubfu': {\n        types: ['Fighting'],\n        bs: { hp: 60, at: 90, df: 60, sa: 53, sd: 50, sp: 72 },\n        weightkg: 12,\n        nfe: true,\n        abilities: { 0: 'Inner Focus' }\n    },\n    'Lapras-Gmax': {\n        types: ['Water', 'Ice'],\n        bs: { hp: 130, at: 85, df: 80, sa: 85, sd: 95, sp: 60 },\n        weightkg: 0,\n        abilities: { 0: 'Water Absorb' },\n        baseSpecies: 'Lapras'\n    },\n    'Linoone-Galar': {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 78, at: 70, df: 61, sa: 50, sd: 61, sp: 100 },\n        weightkg: 32.5,\n        abilities: { 0: 'Pickup' },\n        nfe: true,\n        baseSpecies: 'Linoone'\n    },\n    Magearna: { otherFormes: ['Magearna-Original'] },\n    'Magearna-Original': {\n        baseSpecies: 'Magearna',\n        types: ['Steel', 'Fairy'],\n        bs: { hp: 80, at: 95, df: 115, sa: 130, sd: 115, sp: 65 },\n        weightkg: 80.5,\n        gender: 'N',\n        abilities: { 0: 'Soul-Heart' }\n    },\n    'Machamp-Gmax': {\n        types: ['Fighting'],\n        bs: { hp: 90, at: 130, df: 80, sa: 65, sd: 85, sp: 55 },\n        weightkg: 0,\n        abilities: { 0: 'Guts' },\n        baseSpecies: 'Machamp'\n    },\n    'Melmetal-Gmax': {\n        types: ['Steel'],\n        bs: { hp: 135, at: 143, df: 143, sa: 80, sd: 65, sp: 34 },\n        weightkg: 0,\n        abilities: { 0: 'Iron Fist' },\n        baseSpecies: 'Melmetal',\n        gender: 'N'\n    },\n    'Meowth-Galar': {\n        types: ['Steel'],\n        bs: { hp: 50, at: 65, df: 55, sa: 40, sd: 40, sp: 40 },\n        weightkg: 7.5,\n        abilities: { 0: 'Pickup' },\n        nfe: true,\n        baseSpecies: 'Meowth'\n    },\n    'Meowth-Gmax': {\n        types: ['Normal'],\n        bs: { hp: 40, at: 45, df: 35, sa: 40, sd: 40, sp: 90 },\n        weightkg: 0,\n        abilities: { 0: 'Pickup' },\n        baseSpecies: 'Meowth'\n    },\n    Miasmaw: {\n        types: ['Bug', 'Dragon'],\n        bs: { hp: 85, at: 135, df: 60, sa: 88, sd: 105, sp: 99 },\n        weightkg: 57,\n        abilities: { 0: 'Neutralizing Gas' }\n    },\n    Miasmite: {\n        types: ['Bug', 'Dragon'],\n        bs: { hp: 40, at: 85, df: 60, sa: 52, sd: 52, sp: 44 },\n        weightkg: 10.1,\n        abilities: { 0: 'Neutralizing Gas' },\n        nfe: true\n    },\n    Milcery: {\n        types: ['Fairy'],\n        bs: { hp: 45, at: 40, df: 40, sa: 50, sd: 61, sp: 34 },\n        weightkg: 0.3,\n        abilities: { 0: 'Sweet Veil' },\n        nfe: true\n    },\n    'Moltres-Galar': {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 90, at: 85, df: 90, sa: 100, sd: 125, sp: 90 },\n        weightkg: 66,\n        abilities: { 0: 'Berserk' },\n        gender: 'N',\n        baseSpecies: 'Moltres'\n    },\n    Morgrem: {\n        types: ['Dark', 'Fairy'],\n        bs: { hp: 65, at: 60, df: 45, sa: 75, sd: 55, sp: 70 },\n        weightkg: 12.5,\n        abilities: { 0: 'Prankster' },\n        nfe: true\n    },\n    Morpeko: {\n        types: ['Electric', 'Dark'],\n        bs: { hp: 58, at: 95, df: 58, sa: 70, sd: 58, sp: 97 },\n        weightkg: 3,\n        abilities: { 0: 'Hunger Switch' },\n        otherFormes: ['Morpeko-Hangry']\n    },\n    'Morpeko-Hangry': {\n        types: ['Electric', 'Dark'],\n        bs: { hp: 58, at: 95, df: 58, sa: 70, sd: 58, sp: 97 },\n        weightkg: 3,\n        abilities: { 0: 'Hunger Switch' },\n        baseSpecies: 'Morpeko'\n    },\n    'Mr. Mime-Galar': {\n        types: ['Ice', 'Psychic'],\n        bs: { hp: 50, at: 65, df: 65, sa: 90, sd: 90, sp: 100 },\n        weightkg: 56.8,\n        abilities: { 0: 'Vital Spirit' },\n        nfe: true,\n        baseSpecies: 'Mr. Mime'\n    },\n    'Mr. Rime': {\n        types: ['Ice', 'Psychic'],\n        bs: { hp: 80, at: 85, df: 75, sa: 110, sd: 100, sp: 70 },\n        weightkg: 58.2,\n        abilities: { 0: 'Tangled Feet' }\n    },\n    Nickit: {\n        types: ['Dark'],\n        bs: { hp: 40, at: 28, df: 28, sa: 47, sd: 52, sp: 50 },\n        weightkg: 8.9,\n        abilities: { 0: 'Run Away' },\n        nfe: true\n    },\n    Obstagoon: {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 93, at: 90, df: 101, sa: 60, sd: 81, sp: 95 },\n        weightkg: 46,\n        abilities: { 0: 'Reckless' }\n    },\n    Orbeetle: {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 60, at: 45, df: 110, sa: 80, sd: 120, sp: 90 },\n        weightkg: 40.8,\n        abilities: { 0: 'Swarm' },\n        otherFormes: ['Orbeetle-Gmax']\n    },\n    'Orbeetle-Gmax': {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 60, at: 45, df: 110, sa: 80, sd: 120, sp: 90 },\n        weightkg: 0,\n        abilities: { 0: 'Swarm' },\n        baseSpecies: 'Orbeetle'\n    },\n    Perrserker: {\n        types: ['Steel'],\n        bs: { hp: 70, at: 110, df: 100, sa: 50, sd: 60, sp: 50 },\n        weightkg: 28,\n        abilities: { 0: 'Battle Armor' }\n    },\n    'Pikachu-Gmax': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 0,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    'Pikachu-World': {\n        types: ['Electric'],\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Static' },\n        baseSpecies: 'Pikachu'\n    },\n    Pincurchin: {\n        types: ['Electric'],\n        bs: { hp: 48, at: 101, df: 95, sa: 91, sd: 85, sp: 15 },\n        weightkg: 1,\n        abilities: { 0: 'Lightning Rod' }\n    },\n    Polteageist: {\n        types: ['Ghost'],\n        bs: { hp: 60, at: 65, df: 65, sa: 134, sd: 114, sp: 70 },\n        weightkg: 0.4,\n        abilities: { 0: 'Weak Armor' },\n        otherFormes: ['Polteageist-Antique'],\n        gender: 'N'\n    },\n    'Polteageist-Antique': {\n        types: ['Ghost'],\n        bs: { hp: 60, at: 65, df: 65, sa: 134, sd: 114, sp: 70 },\n        weightkg: 0.4,\n        abilities: { 0: 'Weak Armor' },\n        baseSpecies: 'Polteageist',\n        gender: 'N'\n    },\n    'Ponyta-Galar': {\n        types: ['Psychic'],\n        bs: { hp: 50, at: 85, df: 55, sa: 65, sd: 65, sp: 90 },\n        weightkg: 24,\n        abilities: { 0: 'Run Away' },\n        nfe: true,\n        baseSpecies: 'Ponyta'\n    },\n    Raboot: {\n        types: ['Fire'],\n        bs: { hp: 65, at: 86, df: 60, sa: 55, sd: 60, sp: 94 },\n        weightkg: 9,\n        abilities: { 0: 'Blaze' },\n        nfe: true\n    },\n    'Rapidash-Galar': {\n        types: ['Psychic', 'Fairy'],\n        bs: { hp: 65, at: 100, df: 70, sa: 80, sd: 80, sp: 105 },\n        weightkg: 80,\n        abilities: { 0: 'Run Away' },\n        baseSpecies: 'Rapidash'\n    },\n    Regidrago: {\n        types: ['Dragon'],\n        bs: { hp: 200, at: 100, df: 50, sa: 100, sd: 50, sp: 80 },\n        weightkg: 200,\n        abilities: { 0: 'Dragon\\'s Maw' },\n        gender: 'N'\n    },\n    Regieleki: {\n        types: ['Electric'],\n        bs: { hp: 80, at: 100, df: 50, sa: 100, sd: 50, sp: 200 },\n        weightkg: 145,\n        abilities: { 0: 'Transistor' },\n        gender: 'N'\n    },\n    Rillaboom: {\n        types: ['Grass'],\n        bs: { hp: 100, at: 125, df: 90, sa: 60, sd: 70, sp: 85 },\n        weightkg: 90,\n        abilities: { 0: 'Overgrow' },\n        otherFormes: ['Rillaboom-Gmax']\n    },\n    'Rillaboom-Gmax': {\n        types: ['Grass'],\n        bs: { hp: 100, at: 125, df: 90, sa: 60, sd: 70, sp: 85 },\n        weightkg: 0,\n        abilities: { 0: 'Overgrow' },\n        baseSpecies: 'Rillaboom'\n    },\n    Rolycoly: {\n        types: ['Rock'],\n        bs: { hp: 30, at: 40, df: 50, sa: 40, sd: 50, sp: 30 },\n        weightkg: 12,\n        abilities: { 0: 'Steam Engine' },\n        nfe: true\n    },\n    Rookidee: {\n        types: ['Flying'],\n        bs: { hp: 38, at: 47, df: 35, sa: 33, sd: 35, sp: 57 },\n        weightkg: 1.8,\n        abilities: { 0: 'Keen Eye' },\n        nfe: true\n    },\n    Runerigus: {\n        types: ['Ground', 'Ghost'],\n        bs: { hp: 58, at: 95, df: 145, sa: 50, sd: 105, sp: 30 },\n        weightkg: 66.6,\n        abilities: { 0: 'Wandering Spirit' }\n    },\n    Saharaja: {\n        types: ['Ground'],\n        bs: { hp: 70, at: 112, df: 105, sa: 65, sd: 123, sp: 78 },\n        weightkg: 303.9,\n        abilities: { 0: 'Water Absorb' }\n    },\n    Saharascal: {\n        types: ['Ground'],\n        bs: { hp: 50, at: 80, df: 65, sa: 45, sd: 90, sp: 70 },\n        weightkg: 48,\n        abilities: { 0: 'Water Absorb' },\n        nfe: true\n    },\n    Sandaconda: {\n        types: ['Ground'],\n        bs: { hp: 72, at: 107, df: 125, sa: 65, sd: 70, sp: 71 },\n        weightkg: 65.5,\n        abilities: { 0: 'Sand Spit' },\n        otherFormes: ['Sandaconda-Gmax']\n    },\n    'Sandaconda-Gmax': {\n        types: ['Ground'],\n        bs: { hp: 72, at: 107, df: 125, sa: 65, sd: 70, sp: 71 },\n        weightkg: 0,\n        abilities: { 0: 'Sand Spit' },\n        baseSpecies: 'Sandaconda'\n    },\n    Scorbunny: {\n        types: ['Fire'],\n        bs: { hp: 50, at: 71, df: 40, sa: 40, sd: 40, sp: 69 },\n        weightkg: 4.5,\n        abilities: { 0: 'Blaze' },\n        nfe: true\n    },\n    Silicobra: {\n        types: ['Ground'],\n        bs: { hp: 52, at: 57, df: 75, sa: 35, sd: 50, sp: 46 },\n        weightkg: 7.6,\n        abilities: { 0: 'Sand Spit' },\n        nfe: true\n    },\n    Sinistea: {\n        types: ['Ghost'],\n        bs: { hp: 40, at: 45, df: 45, sa: 74, sd: 54, sp: 50 },\n        weightkg: 0.2,\n        abilities: { 0: 'Weak Armor' },\n        nfe: true,\n        otherFormes: ['Sinistea-Antique'],\n        gender: 'N'\n    },\n    'Sinistea-Antique': {\n        types: ['Ghost'],\n        bs: { hp: 40, at: 45, df: 45, sa: 74, sd: 54, sp: 50 },\n        weightkg: 0.2,\n        abilities: { 0: 'Weak Armor' },\n        nfe: true,\n        baseSpecies: 'Sinistea',\n        gender: 'N'\n    },\n    'Sirfetch\\u2019d': {\n        types: ['Fighting'],\n        bs: { hp: 62, at: 135, df: 95, sa: 68, sd: 82, sp: 65 },\n        weightkg: 117,\n        abilities: { 0: 'Steadfast' }\n    },\n    Sizzlipede: {\n        types: ['Fire', 'Bug'],\n        bs: { hp: 50, at: 65, df: 45, sa: 50, sd: 50, sp: 45 },\n        weightkg: 1,\n        abilities: { 0: 'Flash Fire' },\n        nfe: true\n    },\n    Skwovet: {\n        types: ['Normal'],\n        bs: { hp: 70, at: 55, df: 55, sa: 35, sd: 35, sp: 25 },\n        weightkg: 2.5,\n        abilities: { 0: 'Cheek Pouch' },\n        nfe: true\n    },\n    'Slowbro-Galar': {\n        types: ['Poison', 'Psychic'],\n        bs: { hp: 95, at: 100, df: 95, sa: 100, sd: 70, sp: 30 },\n        weightkg: 70.5,\n        abilities: { 0: 'Quick Draw' },\n        baseSpecies: 'Slowbro'\n    },\n    'Slowking-Galar': {\n        types: ['Poison', 'Psychic'],\n        bs: { hp: 95, at: 65, df: 80, sa: 110, sd: 110, sp: 30 },\n        weightkg: 79.5,\n        abilities: { 0: 'Curious Medicine' },\n        baseSpecies: 'Slowking'\n    },\n    'Slowpoke-Galar': {\n        types: ['Psychic'],\n        bs: { hp: 90, at: 65, df: 65, sa: 40, sd: 40, sp: 15 },\n        weightkg: 36,\n        nfe: true,\n        abilities: { 0: 'Gluttony' },\n        baseSpecies: 'Slowpoke'\n    },\n    Solotl: {\n        types: ['Fire', 'Dragon'],\n        bs: { hp: 68, at: 48, df: 34, sa: 72, sd: 24, sp: 84 },\n        weightkg: 11.8,\n        nfe: true,\n        abilities: { 0: 'Regenerator' }\n    },\n    Snom: {\n        types: ['Ice', 'Bug'],\n        bs: { hp: 30, at: 25, df: 35, sa: 45, sd: 30, sp: 20 },\n        weightkg: 3.8,\n        abilities: { 0: 'Shield Dust' },\n        nfe: true\n    },\n    'Snorlax-Gmax': {\n        types: ['Normal'],\n        bs: { hp: 160, at: 110, df: 65, sa: 65, sd: 110, sp: 30 },\n        weightkg: 0,\n        abilities: { 0: 'Immunity' },\n        baseSpecies: 'Snorlax'\n    },\n    Sobble: {\n        types: ['Water'],\n        bs: { hp: 50, at: 40, df: 40, sa: 70, sd: 40, sp: 70 },\n        weightkg: 4,\n        abilities: { 0: 'Torrent' },\n        nfe: true\n    },\n    Spectrier: {\n        types: ['Ghost'],\n        bs: { hp: 100, at: 65, df: 60, sa: 145, sd: 80, sp: 130 },\n        weightkg: 44.5,\n        abilities: { 0: 'Grim Neigh' },\n        gender: 'N'\n    },\n    Stonjourner: {\n        types: ['Rock'],\n        bs: { hp: 100, at: 125, df: 135, sa: 20, sd: 20, sp: 70 },\n        weightkg: 520,\n        abilities: { 0: 'Power Spot' }\n    },\n    'Stunfisk-Galar': {\n        types: ['Ground', 'Steel'],\n        bs: { hp: 109, at: 81, df: 99, sa: 66, sd: 84, sp: 32 },\n        weightkg: 20.5,\n        abilities: { 0: 'Mimicry' },\n        baseSpecies: 'Stunfisk'\n    },\n    Thievul: {\n        types: ['Dark'],\n        bs: { hp: 70, at: 58, df: 58, sa: 87, sd: 92, sp: 90 },\n        weightkg: 19.9,\n        abilities: { 0: 'Run Away' }\n    },\n    Thwackey: {\n        types: ['Grass'],\n        bs: { hp: 70, at: 85, df: 70, sa: 55, sd: 60, sp: 80 },\n        weightkg: 14,\n        abilities: { 0: 'Overgrow' },\n        nfe: true\n    },\n    Toxel: {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 40, at: 38, df: 35, sa: 54, sd: 35, sp: 40 },\n        weightkg: 11,\n        abilities: { 0: 'Rattled' },\n        nfe: true\n    },\n    Toxtricity: {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\n        weightkg: 40,\n        abilities: { 0: 'Punk Rock' },\n        otherFormes: ['Toxtricity-Gmax', 'Toxtricity-Low-Key', 'Toxtricity-Low-Key-Gmax']\n    },\n    'Toxtricity-Gmax': {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\n        weightkg: 0,\n        abilities: { 0: 'Punk Rock' },\n        baseSpecies: 'Toxtricity'\n    },\n    'Toxtricity-Low-Key': {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\n        weightkg: 40,\n        abilities: { 0: 'Punk Rock' },\n        baseSpecies: 'Toxtricity'\n    },\n    'Toxtricity-Low-Key-Gmax': {\n        types: ['Electric', 'Poison'],\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\n        weightkg: 0,\n        abilities: { 0: 'Punk Rock' },\n        baseSpecies: 'Toxtricity'\n    },\n    Urshifu: {\n        types: ['Fighting', 'Dark'],\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\n        weightkg: 105,\n        abilities: { 0: 'Unseen Fist' },\n        otherFormes: ['Urshifu-Gmax', 'Urshifu-Rapid-Strike', 'Urshifu-Rapid-Strike-Gmax']\n    },\n    'Urshifu-Rapid-Strike': {\n        types: ['Fighting', 'Water'],\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\n        weightkg: 105,\n        abilities: { 0: 'Unseen Fist' },\n        baseSpecies: 'Urshifu'\n    },\n    'Urshifu-Rapid-Strike-Gmax': {\n        types: ['Fighting', 'Water'],\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\n        weightkg: 105,\n        abilities: { 0: 'Unseen Fist' },\n        baseSpecies: 'Urshifu'\n    },\n    'Urshifu-Gmax': {\n        types: ['Fighting', 'Dark'],\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\n        weightkg: 0,\n        abilities: { 0: 'Unseen Fist' },\n        baseSpecies: 'Urshifu'\n    },\n    Venomicon: {\n        types: ['Poison', 'Flying'],\n        bs: { hp: 85, at: 50, df: 113, sa: 118, sd: 90, sp: 64 },\n        weightkg: 11.5,\n        abilities: { 0: 'Stamina' },\n        otherFormes: ['Venomicon-Epilogue'],\n        gender: 'N'\n    },\n    'Venomicon-Epilogue': {\n        types: ['Poison', 'Flying'],\n        bs: { hp: 85, at: 102, df: 85, sa: 62, sd: 85, sp: 101 },\n        weightkg: 12.4,\n        abilities: { 0: 'Tinted Lens' },\n        baseSpecies: 'Venomicon',\n        gender: 'N'\n    },\n    'Venusaur-Gmax': {\n        types: ['Grass', 'Poison'],\n        bs: { hp: 80, at: 82, df: 83, sa: 100, sd: 100, sp: 80 },\n        weightkg: 0,\n        abilities: { 0: 'Overgrow' },\n        baseSpecies: 'Venusaur'\n    },\n    'Weezing-Galar': {\n        types: ['Poison', 'Fairy'],\n        bs: { hp: 65, at: 90, df: 120, sa: 85, sd: 70, sp: 60 },\n        weightkg: 16,\n        abilities: { 0: 'Levitate' },\n        baseSpecies: 'Weezing'\n    },\n    Wooloo: {\n        types: ['Normal'],\n        bs: { hp: 42, at: 40, df: 55, sa: 40, sd: 45, sp: 48 },\n        weightkg: 6,\n        abilities: { 0: 'Fluffy' },\n        nfe: true\n    },\n    'Yamask-Galar': {\n        types: ['Ground', 'Ghost'],\n        bs: { hp: 38, at: 55, df: 85, sa: 30, sd: 65, sp: 30 },\n        weightkg: 1.5,\n        abilities: { 0: 'Wandering Spirit' },\n        nfe: true,\n        baseSpecies: 'Yamask'\n    },\n    Yamper: {\n        types: ['Electric'],\n        bs: { hp: 59, at: 45, df: 50, sa: 40, sd: 50, sp: 26 },\n        weightkg: 13.5,\n        abilities: { 0: 'Ball Fetch' },\n        nfe: true\n    },\n    Zacian: {\n        types: ['Fairy'],\n        bs: { hp: 92, at: 130, df: 115, sa: 80, sd: 115, sp: 138 },\n        weightkg: 110,\n        abilities: { 0: 'Intrepid Sword' },\n        gender: 'N',\n        otherFormes: ['Zacian-Crowned']\n    },\n    'Zacian-Crowned': {\n        types: ['Fairy', 'Steel'],\n        bs: { hp: 92, at: 170, df: 115, sa: 80, sd: 115, sp: 148 },\n        weightkg: 355,\n        abilities: { 0: 'Intrepid Sword' },\n        baseSpecies: 'Zacian',\n        gender: 'N'\n    },\n    Zamazenta: {\n        types: ['Fighting'],\n        bs: { hp: 92, at: 130, df: 115, sa: 80, sd: 115, sp: 138 },\n        weightkg: 210,\n        abilities: { 0: 'Dauntless Shield' },\n        gender: 'N',\n        otherFormes: ['Zamazenta-Crowned']\n    },\n    'Zamazenta-Crowned': {\n        types: ['Fighting', 'Steel'],\n        bs: { hp: 92, at: 130, df: 145, sa: 80, sd: 145, sp: 128 },\n        weightkg: 785,\n        abilities: { 0: 'Dauntless Shield' },\n        baseSpecies: 'Zamazenta',\n        gender: 'N'\n    },\n    'Zapdos-Galar': {\n        types: ['Fighting', 'Flying'],\n        bs: { hp: 90, at: 125, df: 90, sa: 85, sd: 90, sp: 100 },\n        weightkg: 58.2,\n        abilities: { 0: 'Defiant' },\n        gender: 'N',\n        baseSpecies: 'Zapdos'\n    },\n    Zarude: {\n        types: ['Dark', 'Grass'],\n        bs: { hp: 105, at: 120, df: 105, sa: 70, sd: 95, sp: 105 },\n        weightkg: 70,\n        abilities: { 0: 'Leaf Guard' },\n        gender: 'N',\n        otherFormes: ['Zarude-Dada']\n    },\n    'Zarude-Dada': {\n        types: ['Dark', 'Grass'],\n        bs: { hp: 105, at: 120, df: 105, sa: 70, sd: 95, sp: 105 },\n        weightkg: 70,\n        abilities: { 0: 'Leaf Guard' },\n        baseSpecies: 'Zarude',\n        gender: 'N'\n    },\n    'Zigzagoon-Galar': {\n        types: ['Dark', 'Normal'],\n        bs: { hp: 38, at: 30, df: 41, sa: 30, sd: 41, sp: 60 },\n        weightkg: 17.5,\n        abilities: { 0: 'Pickup' },\n        nfe: true,\n        baseSpecies: 'Zigzagoon'\n    }\n};\nvar PLA_PATCH = {\n    Arcanine: { otherFormes: ['Arcanine-Hisui'] },\n    Avalugg: { otherFormes: ['Avalugg-Hisui'] },\n    Basculin: { otherFormes: ['Basculin-Blue-Striped', 'Basculin-White-Striped'] },\n    Braviary: { otherFormes: ['Braviary-Hisui'] },\n    Decidueye: { otherFormes: ['Decidueye-Hisui'] },\n    Dialga: { otherFormes: ['Dialga-Origin'] },\n    Electrode: { otherFormes: ['Electrode-Hisui'] },\n    Goodra: { otherFormes: ['Goodra-Hisui'] },\n    Growlithe: { otherFormes: ['Growlithe-Hisui'] },\n    Lilligant: { otherFormes: ['Lilligant-Hisui'] },\n    Palkia: { otherFormes: ['Palkia-Origin'] },\n    Qwilfish: { otherFormes: ['Qwilfish-Hisui'] },\n    Samurott: { otherFormes: ['Samurott-Hisui'] },\n    Sliggoo: { otherFormes: ['Sliggoo-Hisui'] },\n    Sneasel: { otherFormes: ['Sneasel-Hisui'] },\n    Stantler: { nfe: true },\n    Typhlosion: { otherFormes: ['Typhlosion-Hisui'] },\n    Ursaring: { nfe: true },\n    Voltorb: { otherFormes: ['Voltorb-Hisui'] },\n    Zoroark: { otherFormes: ['Zoroark-Hisui'] },\n    Zorua: { otherFormes: ['Zorua-Hisui'] },\n    'Arcanine-Hisui': {\n        types: ['Fire', 'Rock'],\n        bs: { hp: 95, at: 115, df: 80, sa: 95, sd: 80, sp: 90 },\n        weightkg: 168,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Arcanine'\n    },\n    'Avalugg-Hisui': {\n        types: ['Ice', 'Rock'],\n        bs: { hp: 95, at: 127, df: 184, sa: 34, sd: 36, sp: 38 },\n        weightkg: 262.4,\n        abilities: { 0: 'Strong Jaw' },\n        baseSpecies: 'Avalugg'\n    },\n    Basculegion: {\n        types: ['Water', 'Ghost'],\n        bs: { hp: 120, at: 112, df: 65, sa: 80, sd: 75, sp: 78 },\n        weightkg: 110,\n        abilities: { 0: 'Swift Swim' },\n        otherFormes: ['Basculegion-F']\n    },\n    'Basculegion-F': {\n        types: ['Water', 'Ghost'],\n        bs: { hp: 120, at: 92, df: 65, sa: 100, sd: 75, sp: 78 },\n        weightkg: 110,\n        abilities: { 0: 'Swift Swim' },\n        baseSpecies: 'Basculegion'\n    },\n    'Basculin-White-Striped': {\n        types: ['Water'],\n        bs: { hp: 70, at: 92, df: 65, sa: 80, sd: 55, sp: 98 },\n        weightkg: 18,\n        abilities: { 0: 'Rattled' },\n        baseSpecies: 'Basculin',\n        nfe: true\n    },\n    'Braviary-Hisui': {\n        types: ['Psychic', 'Flying'],\n        bs: { hp: 110, at: 83, df: 70, sa: 112, sd: 70, sp: 65 },\n        weightkg: 43.4,\n        abilities: { 0: 'Keen Eye' },\n        baseSpecies: 'Braviary'\n    },\n    'Decidueye-Hisui': {\n        types: ['Grass', 'Fighting'],\n        bs: { hp: 88, at: 112, df: 80, sa: 95, sd: 95, sp: 60 },\n        weightkg: 37,\n        abilities: { 0: 'Overgrow' },\n        baseSpecies: 'Decidueye'\n    },\n    'Dialga-Origin': {\n        types: ['Steel', 'Dragon'],\n        bs: { hp: 100, at: 100, df: 120, sa: 150, sd: 120, sp: 90 },\n        weightkg: 850,\n        gender: 'N',\n        abilities: { 0: 'Pressure' },\n        baseSpecies: 'Dialga'\n    },\n    'Electrode-Hisui': {\n        types: ['Electric', 'Grass'],\n        bs: { hp: 60, at: 50, df: 70, sa: 80, sd: 80, sp: 150 },\n        weightkg: 71,\n        gender: 'N',\n        abilities: { 0: 'Soundproof' },\n        baseSpecies: 'Electrode'\n    },\n    Enamorus: {\n        types: ['Fairy', 'Flying'],\n        bs: { hp: 74, at: 115, df: 70, sa: 135, sd: 80, sp: 106 },\n        weightkg: 48,\n        abilities: { 0: 'Cute Charm' },\n        otherFormes: ['Enamorus-Therian']\n    },\n    'Enamorus-Therian': {\n        types: ['Fairy', 'Flying'],\n        bs: { hp: 74, at: 115, df: 110, sa: 135, sd: 100, sp: 46 },\n        weightkg: 48,\n        abilities: { 0: 'Overcoat' },\n        baseSpecies: 'Enamorus'\n    },\n    'Goodra-Hisui': {\n        types: ['Steel', 'Dragon'],\n        bs: { hp: 80, at: 100, df: 100, sa: 110, sd: 150, sp: 60 },\n        weightkg: 334.1,\n        abilities: { 0: 'Sap Sipper' },\n        baseSpecies: 'Goodra'\n    },\n    'Growlithe-Hisui': {\n        types: ['Fire', 'Rock'],\n        bs: { hp: 60, at: 75, df: 45, sa: 65, sd: 50, sp: 55 },\n        weightkg: 22.7,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Growlithe',\n        nfe: true\n    },\n    Kleavor: {\n        types: ['Bug', 'Rock'],\n        bs: { hp: 70, at: 130, df: 95, sa: 45, sd: 75, sp: 85 },\n        weightkg: 89,\n        abilities: { 0: 'Swarm' }\n    },\n    'Lilligant-Hisui': {\n        types: ['Grass', 'Fighting'],\n        bs: { hp: 70, at: 105, df: 75, sa: 50, sd: 75, sp: 105 },\n        weightkg: 19.2,\n        abilities: { 0: 'Chlorophyll' },\n        baseSpecies: 'Lilligant'\n    },\n    Overqwil: {\n        types: ['Dark', 'Poison'],\n        bs: { hp: 85, at: 115, df: 95, sa: 65, sd: 65, sp: 85 },\n        weightkg: 3.9,\n        abilities: { 0: 'Poison Point' }\n    },\n    'Palkia-Origin': {\n        types: ['Water', 'Dragon'],\n        bs: { hp: 90, at: 100, df: 100, sa: 150, sd: 120, sp: 120 },\n        weightkg: 660,\n        gender: 'N',\n        abilities: { 0: 'Pressure' },\n        baseSpecies: 'Palkia'\n    },\n    'Qwilfish-Hisui': {\n        types: ['Dark', 'Poison'],\n        bs: { hp: 65, at: 95, df: 85, sa: 55, sd: 55, sp: 85 },\n        weightkg: 3.9,\n        abilities: { 0: 'Poison Point' },\n        baseSpecies: 'Qwilfish',\n        nfe: true\n    },\n    'Samurott-Hisui': {\n        types: ['Water', 'Dark'],\n        bs: { hp: 90, at: 108, df: 80, sa: 100, sd: 65, sp: 85 },\n        weightkg: 58.2,\n        abilities: { 0: 'Torrent' },\n        baseSpecies: 'Samurott'\n    },\n    'Sliggoo-Hisui': {\n        types: ['Steel', 'Dragon'],\n        bs: { hp: 58, at: 75, df: 83, sa: 83, sd: 113, sp: 40 },\n        weightkg: 68.5,\n        abilities: { 0: 'Sap Sipper' },\n        baseSpecies: 'Sliggoo',\n        nfe: true\n    },\n    'Sneasel-Hisui': {\n        types: ['Fighting', 'Poison'],\n        bs: { hp: 55, at: 95, df: 55, sa: 35, sd: 75, sp: 115 },\n        weightkg: 27,\n        abilities: { 0: 'Inner Focus' },\n        baseSpecies: 'Sneasel',\n        nfe: true\n    },\n    Sneasler: {\n        types: ['Fighting', 'Poison'],\n        bs: { hp: 80, at: 130, df: 60, sa: 40, sd: 80, sp: 120 },\n        weightkg: 43,\n        abilities: { 0: 'Pressure' }\n    },\n    'Typhlosion-Hisui': {\n        types: ['Fire', 'Ghost'],\n        bs: { hp: 73, at: 84, df: 78, sa: 119, sd: 85, sp: 95 },\n        weightkg: 69.8,\n        abilities: { 0: 'Blaze' },\n        baseSpecies: 'Typhlosion'\n    },\n    Ursaluna: {\n        types: ['Ground', 'Normal'],\n        bs: { hp: 130, at: 140, df: 105, sa: 45, sd: 80, sp: 50 },\n        weightkg: 290,\n        abilities: { 0: 'Guts' }\n    },\n    'Voltorb-Hisui': {\n        types: ['Electric', 'Grass'],\n        bs: { hp: 40, at: 30, df: 50, sa: 55, sd: 55, sp: 100 },\n        weightkg: 13,\n        gender: 'N',\n        abilities: { 0: 'Soundproof' },\n        baseSpecies: 'Voltorb',\n        nfe: true\n    },\n    Wyrdeer: {\n        types: ['Normal', 'Psychic'],\n        bs: { hp: 103, at: 105, df: 72, sa: 105, sd: 75, sp: 65 },\n        weightkg: 95.1,\n        abilities: { 0: 'Intimidate' }\n    },\n    'Zoroark-Hisui': {\n        types: ['Normal', 'Ghost'],\n        bs: { hp: 60, at: 105, df: 60, sa: 120, sd: 60, sp: 105 },\n        weightkg: 73,\n        abilities: { 0: 'Illusion' },\n        baseSpecies: 'Zoroark'\n    },\n    'Zorua-Hisui': {\n        types: ['Normal', 'Ghost'],\n        bs: { hp: 35, at: 60, df: 40, sa: 85, sd: 40, sp: 70 },\n        weightkg: 12.5,\n        abilities: { 0: 'Illusion' },\n        baseSpecies: 'Zorua',\n        nfe: true\n    }\n};\nvar SS = (0, util_1.extend)(true, {}, SM, SS_PATCH, PLA_PATCH);\ndelete SS['Pikachu-Starter'];\ndelete SS['Eevee-Starter'];\nvar SV_PATCH = {\n    Bisharp: { nfe: true },\n    Cresselia: { bs: { df: 110, sd: 120 } },\n    Dunsparce: { nfe: true },\n    Girafarig: { nfe: true },\n    Primeape: { nfe: true },\n    Tauros: { otherFormes: ['Tauros-Paldea', 'Tauros-Paldea-Fire', 'Tauros-Paldea-Water'] },\n    Wooper: { otherFormes: ['Wooper-Paldea'] },\n    Zacian: { bs: { at: 120 } },\n    'Zacian-Crowned': { bs: { at: 150 } },\n    Zamazenta: { bs: { at: 120 } },\n    'Zamazenta-Crowned': { bs: { at: 120, df: 140, sd: 140 } },\n    Annihilape: {\n        types: ['Fighting', 'Ghost'],\n        bs: { hp: 110, at: 115, df: 80, sa: 50, sd: 90, sp: 90 },\n        weightkg: 56,\n        abilities: { 0: 'Vital Spirit' }\n    },\n    Arboliva: {\n        types: ['Grass', 'Normal'],\n        bs: { hp: 78, at: 69, df: 90, sa: 125, sd: 109, sp: 39 },\n        weightkg: 48.2,\n        abilities: { 0: 'Seed Sower' }\n    },\n    Arctibax: {\n        types: ['Dragon', 'Ice'],\n        bs: { hp: 90, at: 95, df: 66, sa: 45, sd: 65, sp: 62 },\n        weightkg: 30,\n        abilities: { 0: 'Thermal Exchange' },\n        nfe: true\n    },\n    Armarouge: {\n        types: ['Fire', 'Psychic'],\n        bs: { hp: 85, at: 60, df: 100, sa: 125, sd: 80, sp: 75 },\n        weightkg: 85,\n        abilities: { 0: 'Flash Fire' }\n    },\n    Baxcalibur: {\n        types: ['Dragon', 'Ice'],\n        bs: { hp: 115, at: 145, df: 92, sa: 75, sd: 86, sp: 87 },\n        weightkg: 210,\n        abilities: { 0: 'Thermal Exchange' }\n    },\n    Bellibolt: {\n        types: ['Electric'],\n        bs: { hp: 109, at: 64, df: 91, sa: 103, sd: 83, sp: 45 },\n        weightkg: 113,\n        abilities: { 0: 'Electromorphosis' }\n    },\n    Bombirdier: {\n        types: ['Flying', 'Dark'],\n        bs: { hp: 70, at: 103, df: 85, sa: 60, sd: 85, sp: 82 },\n        weightkg: 42.9,\n        abilities: { 0: 'Big Pecks' }\n    },\n    Brambleghast: {\n        types: ['Grass', 'Ghost'],\n        bs: { hp: 55, at: 115, df: 70, sa: 80, sd: 70, sp: 90 },\n        weightkg: 6,\n        abilities: { 0: 'Wind Rider' }\n    },\n    Bramblin: {\n        types: ['Grass', 'Ghost'],\n        bs: { hp: 40, at: 65, df: 30, sa: 45, sd: 35, sp: 60 },\n        weightkg: 0.6,\n        abilities: { 0: 'Wind Rider' },\n        nfe: true\n    },\n    'Brute Bonnet': {\n        types: ['Grass', 'Dark'],\n        bs: { hp: 111, at: 127, df: 99, sa: 79, sd: 99, sp: 55 },\n        weightkg: 21,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    Capsakid: {\n        types: ['Grass'],\n        bs: { hp: 52, at: 62, df: 40, sa: 62, sd: 40, sp: 50 },\n        weightkg: 3,\n        abilities: { 0: 'Chlorophyll' },\n        nfe: true\n    },\n    Ceruledge: {\n        types: ['Fire', 'Ghost'],\n        bs: { hp: 75, at: 125, df: 80, sa: 60, sd: 100, sp: 85 },\n        weightkg: 62,\n        abilities: { 0: 'Flash Fire' }\n    },\n    Cetitan: {\n        types: ['Ice'],\n        bs: { hp: 170, at: 113, df: 65, sa: 45, sd: 55, sp: 73 },\n        weightkg: 700,\n        abilities: { 0: 'Thick Fat' }\n    },\n    Cetoddle: {\n        types: ['Ice'],\n        bs: { hp: 108, at: 68, df: 45, sa: 30, sd: 40, sp: 43 },\n        weightkg: 45,\n        abilities: { 0: 'Thick Fat' },\n        nfe: true\n    },\n    Charcadet: {\n        types: ['Fire'],\n        bs: { hp: 40, at: 50, df: 40, sa: 50, sd: 40, sp: 35 },\n        weightkg: 10.5,\n        abilities: { 0: 'Flash Fire' },\n        nfe: true\n    },\n    'Chi-Yu': {\n        types: ['Dark', 'Fire'],\n        bs: { hp: 55, at: 80, df: 80, sa: 135, sd: 120, sp: 100 },\n        weightkg: 4.9,\n        gender: 'N',\n        abilities: { 0: 'Beads of Ruin' }\n    },\n    'Chien-Pao': {\n        types: ['Dark', 'Ice'],\n        bs: { hp: 80, at: 120, df: 80, sa: 90, sd: 65, sp: 135 },\n        weightkg: 152.2,\n        gender: 'N',\n        abilities: { 0: 'Sword of Ruin' }\n    },\n    Clodsire: {\n        types: ['Poison', 'Ground'],\n        bs: { hp: 130, at: 75, df: 60, sa: 45, sd: 100, sp: 20 },\n        weightkg: 223,\n        abilities: { 0: 'Poison Point' }\n    },\n    Crocalor: {\n        types: ['Fire'],\n        bs: { hp: 81, at: 55, df: 78, sa: 90, sd: 58, sp: 49 },\n        weightkg: 30.7,\n        abilities: { 0: 'Blaze' },\n        nfe: true\n    },\n    Cyclizar: {\n        types: ['Dragon', 'Normal'],\n        bs: { hp: 70, at: 95, df: 65, sa: 85, sd: 65, sp: 121 },\n        weightkg: 63,\n        abilities: { 0: 'Shed Skin' }\n    },\n    Dachsbun: {\n        types: ['Fairy'],\n        bs: { hp: 57, at: 80, df: 115, sa: 50, sd: 80, sp: 95 },\n        weightkg: 14.9,\n        abilities: { 0: 'Well-Baked Body' }\n    },\n    Dolliv: {\n        types: ['Grass', 'Normal'],\n        bs: { hp: 52, at: 53, df: 60, sa: 78, sd: 78, sp: 33 },\n        weightkg: 11.9,\n        abilities: { 0: 'Early Bird' },\n        nfe: true\n    },\n    Dondozo: {\n        types: ['Water'],\n        bs: { hp: 150, at: 100, df: 115, sa: 65, sd: 65, sp: 35 },\n        weightkg: 220,\n        abilities: { 0: 'Unaware' }\n    },\n    Dudunsparce: {\n        types: ['Normal'],\n        bs: { hp: 125, at: 100, df: 80, sa: 85, sd: 75, sp: 55 },\n        weightkg: 39.2,\n        abilities: { 0: 'Serene Grace' },\n        otherFormes: ['Dudunsparce-Three-Segment']\n    },\n    'Dudunsparce-Three-Segment': {\n        types: ['Normal'],\n        bs: { hp: 125, at: 100, df: 80, sa: 85, sd: 75, sp: 55 },\n        weightkg: 47.4,\n        abilities: { 0: 'Serene Grace' },\n        baseSpecies: 'Dudunsparce'\n    },\n    Espathra: {\n        types: ['Psychic'],\n        bs: { hp: 95, at: 60, df: 60, sa: 101, sd: 60, sp: 105 },\n        weightkg: 90,\n        abilities: { 0: 'Opportunist' }\n    },\n    Farigiraf: {\n        types: ['Normal', 'Psychic'],\n        bs: { hp: 120, at: 90, df: 70, sa: 110, sd: 70, sp: 60 },\n        weightkg: 160,\n        abilities: { 0: 'Cud Chew' }\n    },\n    Fidough: {\n        types: ['Fairy'],\n        bs: { hp: 37, at: 55, df: 70, sa: 30, sd: 55, sp: 65 },\n        weightkg: 10.9,\n        abilities: { 0: 'Own Tempo' },\n        nfe: true\n    },\n    Finizen: {\n        types: ['Water'],\n        bs: { hp: 70, at: 45, df: 40, sa: 45, sd: 40, sp: 75 },\n        weightkg: 60.2,\n        abilities: { 0: 'Water Veil' },\n        nfe: true\n    },\n    Flamigo: {\n        types: ['Flying', 'Fighting'],\n        bs: { hp: 82, at: 115, df: 74, sa: 75, sd: 64, sp: 90 },\n        weightkg: 37,\n        abilities: { 0: 'Scrappy' }\n    },\n    Flittle: {\n        types: ['Psychic'],\n        bs: { hp: 30, at: 35, df: 30, sa: 55, sd: 40, sp: 75 },\n        weightkg: 1.5,\n        abilities: { 0: 'Anticipation' },\n        nfe: true\n    },\n    Floragato: {\n        types: ['Grass'],\n        bs: { hp: 61, at: 80, df: 63, sa: 60, sd: 63, sp: 83 },\n        weightkg: 12.2,\n        abilities: { 0: 'Overgrow' },\n        nfe: true\n    },\n    'Flutter Mane': {\n        types: ['Ghost', 'Fairy'],\n        bs: { hp: 55, at: 55, df: 55, sa: 135, sd: 135, sp: 135 },\n        weightkg: 4,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    Frigibax: {\n        types: ['Dragon', 'Ice'],\n        bs: { hp: 65, at: 75, df: 45, sa: 35, sd: 45, sp: 55 },\n        weightkg: 17,\n        abilities: { 0: 'Thermal Exchange' },\n        nfe: true\n    },\n    Fuecoco: {\n        types: ['Fire'],\n        bs: { hp: 67, at: 45, df: 59, sa: 63, sd: 40, sp: 36 },\n        weightkg: 9.8,\n        abilities: { 0: 'Blaze' },\n        nfe: true\n    },\n    Garganacl: {\n        types: ['Rock'],\n        bs: { hp: 100, at: 100, df: 130, sa: 45, sd: 90, sp: 35 },\n        weightkg: 240,\n        abilities: { 0: 'Purifying Salt' }\n    },\n    Gholdengo: {\n        types: ['Steel', 'Ghost'],\n        bs: { hp: 87, at: 60, df: 95, sa: 133, sd: 91, sp: 84 },\n        weightkg: 30,\n        gender: 'N',\n        abilities: { 0: 'Good as Gold' }\n    },\n    Gimmighoul: {\n        types: ['Ghost'],\n        bs: { hp: 45, at: 30, df: 70, sa: 75, sd: 70, sp: 10 },\n        weightkg: 5,\n        gender: 'N',\n        abilities: { 0: 'Rattled' },\n        nfe: true\n    },\n    Glimmet: {\n        types: ['Rock', 'Poison'],\n        bs: { hp: 48, at: 35, df: 42, sa: 105, sd: 60, sp: 60 },\n        weightkg: 8,\n        abilities: { 0: 'Toxic Debris' },\n        nfe: true\n    },\n    Glimmora: {\n        types: ['Rock', 'Poison'],\n        bs: { hp: 83, at: 55, df: 90, sa: 130, sd: 81, sp: 86 },\n        weightkg: 45,\n        abilities: { 0: 'Toxic Debris' }\n    },\n    Grafaiai: {\n        types: ['Poison', 'Normal'],\n        bs: { hp: 63, at: 95, df: 65, sa: 80, sd: 72, sp: 110 },\n        weightkg: 27.2,\n        abilities: { 0: 'Unburden' }\n    },\n    'Great Tusk': {\n        types: ['Ground', 'Fighting'],\n        bs: { hp: 115, at: 131, df: 131, sa: 53, sd: 53, sp: 87 },\n        weightkg: 320,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    Greavard: {\n        types: ['Ghost'],\n        bs: { hp: 50, at: 61, df: 60, sa: 30, sd: 55, sp: 34 },\n        weightkg: 35,\n        abilities: { 0: 'Pickup' },\n        nfe: true\n    },\n    Houndstone: {\n        types: ['Ghost'],\n        bs: { hp: 72, at: 101, df: 100, sa: 50, sd: 97, sp: 68 },\n        weightkg: 15,\n        abilities: { 0: 'Sand Rush' }\n    },\n    'Iron Bundle': {\n        types: ['Ice', 'Water'],\n        bs: { hp: 56, at: 80, df: 114, sa: 124, sd: 60, sp: 136 },\n        weightkg: 11,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    'Iron Hands': {\n        types: ['Fighting', 'Electric'],\n        bs: { hp: 154, at: 140, df: 108, sa: 50, sd: 68, sp: 50 },\n        weightkg: 380.7,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    'Iron Jugulis': {\n        types: ['Dark', 'Flying'],\n        bs: { hp: 94, at: 80, df: 86, sa: 122, sd: 80, sp: 108 },\n        weightkg: 111,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    'Iron Moth': {\n        types: ['Fire', 'Poison'],\n        bs: { hp: 80, at: 70, df: 60, sa: 140, sd: 110, sp: 110 },\n        weightkg: 36,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    'Iron Thorns': {\n        types: ['Rock', 'Electric'],\n        bs: { hp: 100, at: 134, df: 110, sa: 70, sd: 84, sp: 72 },\n        weightkg: 303,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    'Iron Treads': {\n        types: ['Ground', 'Steel'],\n        bs: { hp: 90, at: 112, df: 120, sa: 72, sd: 70, sp: 106 },\n        weightkg: 240,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    'Iron Valiant': {\n        types: ['Fairy', 'Fighting'],\n        bs: { hp: 74, at: 130, df: 90, sa: 120, sd: 60, sp: 116 },\n        weightkg: 35,\n        gender: 'N',\n        abilities: { 0: 'Quark Drive' }\n    },\n    Kilowattrel: {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 70, at: 70, df: 60, sa: 105, sd: 60, sp: 125 },\n        weightkg: 38.6,\n        abilities: { 0: 'Wind Power' }\n    },\n    Kingambit: {\n        types: ['Dark', 'Steel'],\n        bs: { hp: 100, at: 135, df: 120, sa: 60, sd: 85, sp: 50 },\n        weightkg: 120,\n        abilities: { 0: 'Defiant' }\n    },\n    Klawf: {\n        types: ['Rock'],\n        bs: { hp: 70, at: 100, df: 115, sa: 35, sd: 55, sp: 75 },\n        weightkg: 79,\n        abilities: { 0: 'Anger Shell' }\n    },\n    Koraidon: {\n        types: ['Fighting', 'Dragon'],\n        bs: { hp: 100, at: 135, df: 115, sa: 85, sd: 100, sp: 135 },\n        weightkg: 303,\n        gender: 'N',\n        abilities: { 0: 'Orichalcum Pulse' }\n    },\n    Lechonk: {\n        types: ['Normal'],\n        bs: { hp: 54, at: 45, df: 40, sa: 35, sd: 45, sp: 35 },\n        weightkg: 10.2,\n        abilities: { 0: 'Aroma Veil' },\n        nfe: true\n    },\n    Lokix: {\n        types: ['Bug', 'Dark'],\n        bs: { hp: 71, at: 102, df: 78, sa: 52, sd: 55, sp: 92 },\n        weightkg: 17.5,\n        abilities: { 0: 'Swarm' }\n    },\n    Mabosstiff: {\n        types: ['Dark'],\n        bs: { hp: 80, at: 120, df: 90, sa: 60, sd: 70, sp: 85 },\n        weightkg: 61,\n        abilities: { 0: 'Intimidate' }\n    },\n    Maschiff: {\n        types: ['Dark'],\n        bs: { hp: 60, at: 78, df: 60, sa: 40, sd: 51, sp: 51 },\n        weightkg: 16,\n        abilities: { 0: 'Intimidate' },\n        nfe: true\n    },\n    Maushold: {\n        types: ['Normal'],\n        bs: { hp: 74, at: 75, df: 70, sa: 65, sd: 75, sp: 111 },\n        weightkg: 2.3,\n        gender: 'N',\n        abilities: { 0: 'Friend Guard' },\n        otherFormes: ['Maushold-Four']\n    },\n    'Maushold-Four': {\n        types: ['Normal'],\n        bs: { hp: 74, at: 75, df: 70, sa: 65, sd: 75, sp: 111 },\n        weightkg: 2.8,\n        gender: 'N',\n        abilities: { 0: 'Friend Guard' },\n        baseSpecies: 'Maushold'\n    },\n    Meowscarada: {\n        types: ['Grass', 'Dark'],\n        bs: { hp: 76, at: 110, df: 70, sa: 81, sd: 70, sp: 123 },\n        weightkg: 31.2,\n        abilities: { 0: 'Overgrow' }\n    },\n    Miraidon: {\n        types: ['Electric', 'Dragon'],\n        bs: { hp: 100, at: 85, df: 100, sa: 135, sd: 115, sp: 135 },\n        weightkg: 240,\n        gender: 'N',\n        abilities: { 0: 'Hadron Engine' }\n    },\n    Nacli: {\n        types: ['Rock'],\n        bs: { hp: 55, at: 55, df: 75, sa: 35, sd: 35, sp: 25 },\n        weightkg: 16,\n        abilities: { 0: 'Purifying Salt' },\n        nfe: true\n    },\n    Naclstack: {\n        types: ['Rock'],\n        bs: { hp: 60, at: 60, df: 100, sa: 35, sd: 65, sp: 35 },\n        weightkg: 105,\n        abilities: { 0: 'Purifying Salt' },\n        nfe: true\n    },\n    Nymble: {\n        types: ['Bug'],\n        bs: { hp: 33, at: 46, df: 40, sa: 21, sd: 25, sp: 45 },\n        weightkg: 1,\n        abilities: { 0: 'Swarm' },\n        nfe: true\n    },\n    Oinkologne: {\n        types: ['Normal'],\n        bs: { hp: 110, at: 100, df: 75, sa: 59, sd: 80, sp: 65 },\n        weightkg: 120,\n        abilities: { 0: 'Lingering Aroma' },\n        otherFormes: ['Oinkologne-F']\n    },\n    'Oinkologne-F': {\n        types: ['Normal'],\n        bs: { hp: 115, at: 90, df: 70, sa: 59, sd: 90, sp: 65 },\n        weightkg: 120,\n        abilities: { 0: 'Aroma Veil' },\n        baseSpecies: 'Oinkologne'\n    },\n    Orthworm: {\n        types: ['Steel'],\n        bs: { hp: 70, at: 85, df: 145, sa: 60, sd: 55, sp: 65 },\n        weightkg: 310,\n        abilities: { 0: 'Earth Eater' }\n    },\n    Palafin: {\n        types: ['Water'],\n        bs: { hp: 100, at: 70, df: 72, sa: 53, sd: 62, sp: 100 },\n        weightkg: 60.2,\n        abilities: { 0: 'Zero to Hero' },\n        otherFormes: ['Palafin-Hero']\n    },\n    'Palafin-Hero': {\n        types: ['Water'],\n        bs: { hp: 100, at: 160, df: 97, sa: 106, sd: 87, sp: 100 },\n        weightkg: 97.4,\n        abilities: { 0: 'Zero to Hero' },\n        baseSpecies: 'Palafin'\n    },\n    Pawmi: {\n        types: ['Electric'],\n        bs: { hp: 45, at: 50, df: 20, sa: 40, sd: 25, sp: 60 },\n        weightkg: 2.5,\n        abilities: { 0: 'Static' },\n        nfe: true\n    },\n    Pawmo: {\n        types: ['Electric', 'Fighting'],\n        bs: { hp: 60, at: 75, df: 40, sa: 50, sd: 40, sp: 85 },\n        weightkg: 6.5,\n        abilities: { 0: 'Volt Absorb' },\n        nfe: true\n    },\n    Pawmot: {\n        types: ['Electric', 'Fighting'],\n        bs: { hp: 70, at: 115, df: 70, sa: 70, sd: 60, sp: 105 },\n        weightkg: 41,\n        abilities: { 0: 'Volt Absorb' }\n    },\n    Quaquaval: {\n        types: ['Water', 'Fighting'],\n        bs: { hp: 85, at: 120, df: 80, sa: 85, sd: 75, sp: 85 },\n        weightkg: 61.9,\n        abilities: { 0: 'Torrent' }\n    },\n    Quaxly: {\n        types: ['Water'],\n        bs: { hp: 55, at: 65, df: 45, sa: 50, sd: 45, sp: 50 },\n        weightkg: 6.1,\n        abilities: { 0: 'Torrent' },\n        nfe: true\n    },\n    Quaxwell: {\n        types: ['Water'],\n        bs: { hp: 70, at: 85, df: 65, sa: 65, sd: 60, sp: 65 },\n        weightkg: 21.5,\n        abilities: { 0: 'Torrent' },\n        nfe: true\n    },\n    Rabsca: {\n        types: ['Bug', 'Psychic'],\n        bs: { hp: 75, at: 50, df: 85, sa: 115, sd: 100, sp: 45 },\n        weightkg: 3.5,\n        abilities: { 0: 'Synchronize' }\n    },\n    Rellor: {\n        types: ['Bug'],\n        bs: { hp: 41, at: 50, df: 60, sa: 31, sd: 58, sp: 30 },\n        weightkg: 1,\n        abilities: { 0: 'Compound Eyes' },\n        nfe: true\n    },\n    Revavroom: {\n        types: ['Steel', 'Poison'],\n        bs: { hp: 80, at: 119, df: 90, sa: 54, sd: 67, sp: 90 },\n        weightkg: 120,\n        abilities: { 0: 'Overcoat' }\n    },\n    'Roaring Moon': {\n        types: ['Dragon', 'Dark'],\n        bs: { hp: 105, at: 139, df: 71, sa: 55, sd: 101, sp: 119 },\n        weightkg: 380,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    'Sandy Shocks': {\n        types: ['Electric', 'Ground'],\n        bs: { hp: 85, at: 81, df: 97, sa: 121, sd: 85, sp: 101 },\n        weightkg: 60,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    Scovillain: {\n        types: ['Grass', 'Fire'],\n        bs: { hp: 65, at: 108, df: 65, sa: 108, sd: 65, sp: 75 },\n        weightkg: 15,\n        abilities: { 0: 'Chlorophyll' }\n    },\n    'Scream Tail': {\n        types: ['Fairy', 'Psychic'],\n        bs: { hp: 115, at: 65, df: 99, sa: 65, sd: 115, sp: 111 },\n        weightkg: 8,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    Shroodle: {\n        types: ['Poison', 'Normal'],\n        bs: { hp: 40, at: 65, df: 35, sa: 40, sd: 35, sp: 75 },\n        weightkg: 0.7,\n        abilities: { 0: 'Unburden' },\n        nfe: true\n    },\n    Skeledirge: {\n        types: ['Fire', 'Ghost'],\n        bs: { hp: 104, at: 75, df: 100, sa: 110, sd: 75, sp: 66 },\n        weightkg: 326.5,\n        abilities: { 0: 'Blaze' }\n    },\n    'Slither Wing': {\n        types: ['Bug', 'Fighting'],\n        bs: { hp: 85, at: 135, df: 79, sa: 85, sd: 105, sp: 81 },\n        weightkg: 92,\n        gender: 'N',\n        abilities: { 0: 'Protosynthesis' }\n    },\n    Smoliv: {\n        types: ['Grass', 'Normal'],\n        bs: { hp: 41, at: 35, df: 45, sa: 58, sd: 51, sp: 30 },\n        weightkg: 6.5,\n        abilities: { 0: 'Early Bird' },\n        nfe: true\n    },\n    Spidops: {\n        types: ['Bug'],\n        bs: { hp: 60, at: 79, df: 92, sa: 52, sd: 86, sp: 35 },\n        weightkg: 16.5,\n        abilities: { 0: 'Insomnia' }\n    },\n    Sprigatito: {\n        types: ['Grass'],\n        bs: { hp: 40, at: 61, df: 54, sa: 45, sd: 45, sp: 65 },\n        weightkg: 4.1,\n        abilities: { 0: 'Overgrow' },\n        nfe: true\n    },\n    Squawkabilly: {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\n        weightkg: 2.4,\n        abilities: { 0: 'Intimidate' },\n        otherFormes: ['Squawkabilly-Blue', 'Squawkabilly-White', 'Squawkabilly-Yellow']\n    },\n    'Squawkabilly-Blue': {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\n        weightkg: 2.4,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Squawkabilly'\n    },\n    'Squawkabilly-White': {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\n        weightkg: 2.4,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Squawkabilly'\n    },\n    'Squawkabilly-Yellow': {\n        types: ['Normal', 'Flying'],\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\n        weightkg: 2.4,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Squawkabilly'\n    },\n    Tadbulb: {\n        types: ['Electric'],\n        bs: { hp: 61, at: 31, df: 41, sa: 59, sd: 35, sp: 45 },\n        weightkg: 0.4,\n        abilities: { 0: 'Own Tempo' },\n        nfe: true\n    },\n    Tandemaus: {\n        types: ['Normal'],\n        bs: { hp: 50, at: 50, df: 45, sa: 40, sd: 45, sp: 75 },\n        weightkg: 1.8,\n        gender: 'N',\n        abilities: { 0: 'Run Away' },\n        nfe: true\n    },\n    Tarountula: {\n        types: ['Bug'],\n        bs: { hp: 35, at: 41, df: 45, sa: 29, sd: 40, sp: 20 },\n        weightkg: 4,\n        abilities: { 0: 'Insomnia' },\n        nfe: true\n    },\n    Tatsugiri: {\n        types: ['Dragon', 'Water'],\n        bs: { hp: 68, at: 50, df: 60, sa: 120, sd: 95, sp: 82 },\n        weightkg: 8,\n        abilities: { 0: 'Commander' }\n    },\n    'Tauros-Paldea': {\n        types: ['Fighting'],\n        bs: { hp: 75, at: 110, df: 105, sa: 30, sd: 70, sp: 100 },\n        weightkg: 88.4,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Tauros'\n    },\n    'Tauros-Paldea-Fire': {\n        types: ['Fighting', 'Fire'],\n        bs: { hp: 75, at: 110, df: 105, sa: 30, sd: 70, sp: 100 },\n        weightkg: 88.4,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Tauros'\n    },\n    'Tauros-Paldea-Water': {\n        types: ['Fighting', 'Water'],\n        bs: { hp: 75, at: 110, df: 105, sa: 30, sd: 70, sp: 100 },\n        weightkg: 88.4,\n        abilities: { 0: 'Intimidate' },\n        baseSpecies: 'Tauros'\n    },\n    'Ting-Lu': {\n        types: ['Dark', 'Ground'],\n        bs: { hp: 155, at: 110, df: 125, sa: 55, sd: 80, sp: 45 },\n        weightkg: 699.7,\n        gender: 'N',\n        abilities: { 0: 'Vessel of Ruin' }\n    },\n    Tinkatink: {\n        types: ['Fairy', 'Steel'],\n        bs: { hp: 50, at: 45, df: 45, sa: 35, sd: 64, sp: 58 },\n        weightkg: 8.9,\n        abilities: { 0: 'Mold Breaker' },\n        nfe: true\n    },\n    Tinkaton: {\n        types: ['Fairy', 'Steel'],\n        bs: { hp: 85, at: 75, df: 77, sa: 70, sd: 105, sp: 94 },\n        weightkg: 112.8,\n        abilities: { 0: 'Mold Breaker' }\n    },\n    Tinkatuff: {\n        types: ['Fairy', 'Steel'],\n        bs: { hp: 65, at: 55, df: 55, sa: 45, sd: 82, sp: 78 },\n        weightkg: 59.1,\n        abilities: { 0: 'Mold Breaker' },\n        nfe: true\n    },\n    Toedscool: {\n        types: ['Ground', 'Grass'],\n        bs: { hp: 40, at: 40, df: 35, sa: 50, sd: 100, sp: 70 },\n        weightkg: 33,\n        abilities: { 0: 'Mycelium Might' },\n        nfe: true\n    },\n    Toedscruel: {\n        types: ['Ground', 'Grass'],\n        bs: { hp: 80, at: 70, df: 65, sa: 80, sd: 120, sp: 100 },\n        weightkg: 58,\n        abilities: { 0: 'Mycelium Might' }\n    },\n    Varoom: {\n        types: ['Steel', 'Poison'],\n        bs: { hp: 45, at: 70, df: 63, sa: 30, sd: 45, sp: 47 },\n        weightkg: 35,\n        abilities: { 0: 'Overcoat' },\n        nfe: true\n    },\n    Veluza: {\n        types: ['Water', 'Psychic'],\n        bs: { hp: 90, at: 102, df: 73, sa: 78, sd: 65, sp: 70 },\n        weightkg: 90,\n        abilities: { 0: 'Mold Breaker' }\n    },\n    Wattrel: {\n        types: ['Electric', 'Flying'],\n        bs: { hp: 40, at: 40, df: 35, sa: 55, sd: 40, sp: 70 },\n        weightkg: 3.6,\n        abilities: { 0: 'Wind Power' },\n        nfe: true\n    },\n    Wiglett: {\n        types: ['Water'],\n        bs: { hp: 10, at: 55, df: 25, sa: 35, sd: 25, sp: 95 },\n        weightkg: 1.8,\n        abilities: { 0: 'Gooey' },\n        nfe: true\n    },\n    'Wo-Chien': {\n        types: ['Dark', 'Grass'],\n        bs: { hp: 85, at: 85, df: 100, sa: 95, sd: 135, sp: 70 },\n        weightkg: 74.2,\n        gender: 'N',\n        abilities: { 0: 'Tablets of Ruin' }\n    },\n    'Wooper-Paldea': {\n        types: ['Poison', 'Ground'],\n        bs: { hp: 55, at: 45, df: 45, sa: 25, sd: 25, sp: 15 },\n        weightkg: 8.5,\n        abilities: { 0: 'Poison Point' },\n        baseSpecies: 'Wooper',\n        nfe: true\n    },\n    Wugtrio: {\n        types: ['Water'],\n        bs: { hp: 35, at: 100, df: 50, sa: 50, sd: 70, sp: 120 },\n        weightkg: 5.4,\n        abilities: { 0: 'Gooey' }\n    }\n};\nvar SV = (0, util_1.extend)(true, {}, SS, SV_PATCH, PLA_PATCH);\nexports.SPECIES = [{}, RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\nvar Species = (function () {\n    function Species(gen) {\n        this.gen = gen;\n    }\n    Species.prototype.get = function (id) {\n        return SPECIES_BY_ID[this.gen][id];\n    };\n    Species.prototype[Symbol.iterator] = function () {\n        var _a, _b, _c, _i, id;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _a = SPECIES_BY_ID[this.gen];\n                    _b = [];\n                    for (_c in _a)\n                        _b.push(_c);\n                    _i = 0;\n                    _d.label = 1;\n                case 1:\n                    if (!(_i < _b.length)) return [3, 4];\n                    _c = _b[_i];\n                    if (!(_c in _a)) return [3, 3];\n                    id = _c;\n                    return [4, this.get(id)];\n                case 2:\n                    _d.sent();\n                    _d.label = 3;\n                case 3:\n                    _i++;\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    };\n    return Species;\n}());\nexports.Species = Species;\nvar Specie = (function () {\n    function Specie(name, data) {\n        this.kind = 'Species';\n        this.id = (0, util_1.toID)(name);\n        this.name = name;\n        var baseStats = {};\n        baseStats.hp = data.bs.hp;\n        baseStats.atk = data.bs.at;\n        baseStats.def = data.bs.df;\n        baseStats.spa = gen >= 2 ? data.bs.sa : data.bs.sl;\n        baseStats.spd = gen >= 2 ? data.bs.sd : data.bs.sl;\n        baseStats.spe = data.bs.sp;\n        this.baseStats = baseStats;\n        if (data.otherFormes) {\n            this.otherFormes = data.otherFormes;\n            if (gen >= 9 && !['toxtricity', 'urshifu'].includes(this.id)) {\n                this.otherFormes = this.otherFormes.filter(function (f) { return !f.endsWith('-Gmax'); });\n                if (!this.otherFormes.length)\n                    this.otherFormes = undefined;\n                if (this.otherFormes)\n                    this.otherFormes = __spreadArray([], __read(new Set(this.otherFormes)), false);\n            }\n        }\n        (0, util_1.assignWithout)(this, data, Specie.EXCLUDE);\n    }\n    Specie.EXCLUDE = new Set(['bs', 'otherFormes']);\n    return Specie;\n}());\nvar SPECIES_BY_ID = [];\nvar gen = 0;\ntry {\n    for (var SPECIES_1 = __values(exports.SPECIES), SPECIES_1_1 = SPECIES_1.next(); !SPECIES_1_1.done; SPECIES_1_1 = SPECIES_1.next()) {\n        var species = SPECIES_1_1.value;\n        var map = {};\n        for (var specie in species) {\n            if (gen >= 2 && species[specie].bs.sl)\n                delete species[specie].bs.sl;\n            var m = new Specie(specie, species[specie]);\n            map[m.id] = m;\n        }\n        SPECIES_BY_ID.push(map);\n        gen++;\n    }\n}\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\nfinally {\n    try {\n        if (SPECIES_1_1 && !SPECIES_1_1.done && (_a = SPECIES_1[\"return\"])) _a.call(SPECIES_1);\n    }\n    finally { if (e_1) throw e_1.error; }\n}\n//# sourceMappingURL=species.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/species.js?\n}");

/***/ }),

/***/ "./calc/dist/data/types.js":
/*!*********************************!*\
  !*** ./calc/dist/data/types.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar e_1, _a;\nexports.__esModule = true;\nexports.Types = exports.TYPE_CHART = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar RBY = {\n    '???': {\n        Normal: 1,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 1\n    },\n    Normal: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 1,\n        Rock: 0.5,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 0,\n        Dragon: 1\n    },\n    Grass: {\n        '???': 1,\n        Normal: 1,\n        Grass: 0.5,\n        Fire: 0.5,\n        Water: 2,\n        Electric: 1,\n        Ice: 1,\n        Flying: 0.5,\n        Bug: 0.5,\n        Poison: 0.5,\n        Ground: 2,\n        Rock: 2,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 0.5\n    },\n    Fire: {\n        '???': 1,\n        Normal: 1,\n        Grass: 2,\n        Fire: 0.5,\n        Water: 0.5,\n        Electric: 1,\n        Ice: 2,\n        Flying: 1,\n        Bug: 2,\n        Poison: 1,\n        Ground: 1,\n        Rock: 0.5,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 0.5\n    },\n    Water: {\n        '???': 1,\n        Normal: 1,\n        Grass: 0.5,\n        Fire: 2,\n        Water: 0.5,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 2,\n        Rock: 2,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 0.5\n    },\n    Electric: {\n        '???': 1,\n        Normal: 1,\n        Grass: 0.5,\n        Fire: 1,\n        Water: 2,\n        Electric: 0.5,\n        Ice: 1,\n        Flying: 2,\n        Bug: 1,\n        Poison: 1,\n        Ground: 0,\n        Rock: 1,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 0.5\n    },\n    Ice: {\n        '???': 1,\n        Normal: 1,\n        Grass: 2,\n        Fire: 1,\n        Water: 0.5,\n        Electric: 1,\n        Ice: 0.5,\n        Flying: 2,\n        Bug: 1,\n        Poison: 1,\n        Ground: 2,\n        Rock: 1,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 2\n    },\n    Flying: {\n        '???': 1,\n        Normal: 1,\n        Grass: 2,\n        Fire: 1,\n        Water: 1,\n        Electric: 0.5,\n        Ice: 1,\n        Flying: 1,\n        Bug: 2,\n        Poison: 1,\n        Ground: 1,\n        Rock: 0.5,\n        Fighting: 2,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 1\n    },\n    Bug: {\n        '???': 1,\n        Normal: 1,\n        Grass: 2,\n        Fire: 0.5,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 0.5,\n        Bug: 1,\n        Poison: 2,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 0.5,\n        Psychic: 2,\n        Ghost: 0.5,\n        Dragon: 1\n    },\n    Poison: {\n        '???': 1,\n        Normal: 1,\n        Grass: 2,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 2,\n        Poison: 0.5,\n        Ground: 0.5,\n        Rock: 0.5,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 0.5,\n        Dragon: 1\n    },\n    Ground: {\n        '???': 1,\n        Normal: 1,\n        Grass: 0.5,\n        Fire: 2,\n        Water: 1,\n        Electric: 2,\n        Ice: 1,\n        Flying: 0,\n        Bug: 0.5,\n        Poison: 2,\n        Ground: 1,\n        Rock: 2,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 1\n    },\n    Rock: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 2,\n        Water: 1,\n        Electric: 1,\n        Ice: 2,\n        Flying: 2,\n        Bug: 2,\n        Poison: 1,\n        Ground: 0.5,\n        Rock: 1,\n        Fighting: 0.5,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 1\n    },\n    Fighting: {\n        '???': 1,\n        Normal: 2,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 2,\n        Flying: 0.5,\n        Bug: 0.5,\n        Poison: 0.5,\n        Ground: 1,\n        Rock: 2,\n        Fighting: 1,\n        Psychic: 0.5,\n        Ghost: 0,\n        Dragon: 1\n    },\n    Psychic: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 2,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 2,\n        Psychic: 0.5,\n        Ghost: 1,\n        Dragon: 1\n    },\n    Ghost: {\n        '???': 1,\n        Normal: 0,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 1,\n        Psychic: 0,\n        Ghost: 2,\n        Dragon: 1\n    },\n    Dragon: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 2\n    }\n};\nvar GSC = (0, util_1.extend)(true, {}, RBY, {\n    '???': { Dark: 1, Steel: 1 },\n    Normal: { Dark: 1, Steel: 0.5 },\n    Grass: { Dark: 1, Steel: 0.5 },\n    Fire: { Dark: 1, Steel: 2 },\n    Water: { Dark: 1, Steel: 1 },\n    Electric: { Dark: 1, Steel: 1 },\n    Ice: { Fire: 0.5, Dark: 1, Steel: 0.5 },\n    Flying: { Dark: 1, Steel: 0.5 },\n    Bug: { Poison: 0.5, Dark: 2, Steel: 0.5 },\n    Poison: { Bug: 1, Dark: 1, Steel: 0 },\n    Ground: { Dark: 1, Steel: 2 },\n    Rock: { Dark: 1, Steel: 0.5 },\n    Fighting: { Dark: 2, Steel: 2 },\n    Psychic: { Dark: 0, Steel: 0.5 },\n    Ghost: { Psychic: 2, Dark: 0.5, Steel: 0.5 },\n    Dragon: { Dark: 1, Steel: 0.5 },\n    Dark: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 1,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 0.5,\n        Psychic: 2,\n        Ghost: 2,\n        Dragon: 1,\n        Dark: 0.5,\n        Steel: 0.5\n    },\n    Steel: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 0.5,\n        Water: 0.5,\n        Electric: 0.5,\n        Ice: 2,\n        Flying: 1,\n        Bug: 1,\n        Poison: 1,\n        Ground: 1,\n        Rock: 2,\n        Fighting: 1,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 1,\n        Dark: 1,\n        Steel: 0.5\n    }\n});\nvar ADV = GSC;\nvar DPP = GSC;\nvar BW = GSC;\nvar XY = (0, util_1.extend)(true, {}, GSC, {\n    '???': { Fairy: 1 },\n    Normal: { Fairy: 1 },\n    Grass: { Fairy: 1 },\n    Fire: { Fairy: 1 },\n    Water: { Fairy: 1 },\n    Electric: { Fairy: 1 },\n    Ice: { Fairy: 1 },\n    Flying: { Fairy: 1 },\n    Bug: { Fairy: 0.5 },\n    Poison: { Fairy: 2 },\n    Ground: { Fairy: 1 },\n    Rock: { Fairy: 1 },\n    Fighting: { Fairy: 0.5 },\n    Psychic: { Fairy: 1 },\n    Ghost: { Steel: 1, Fairy: 1 },\n    Dragon: { Fairy: 0 },\n    Dark: { Steel: 1, Fairy: 0.5 },\n    Steel: { Fairy: 2 },\n    Fairy: {\n        '???': 1,\n        Normal: 1,\n        Grass: 1,\n        Fire: 0.5,\n        Water: 1,\n        Electric: 1,\n        Ice: 1,\n        Flying: 1,\n        Bug: 1,\n        Poison: 0.5,\n        Ground: 1,\n        Rock: 1,\n        Fighting: 2,\n        Psychic: 1,\n        Ghost: 1,\n        Dragon: 2,\n        Dark: 2,\n        Steel: 0.5,\n        Fairy: 1\n    }\n});\nvar SM = XY;\nvar SS = SM;\nvar SV = SS;\nexports.TYPE_CHART = [{}, RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\nvar Types = (function () {\n    function Types(gen) {\n        this.gen = gen;\n    }\n    Types.prototype.get = function (id) {\n        return TYPES_BY_ID[this.gen][id];\n    };\n    Types.prototype[Symbol.iterator] = function () {\n        var _a, _b, _c, _i, id;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _a = TYPES_BY_ID[this.gen];\n                    _b = [];\n                    for (_c in _a)\n                        _b.push(_c);\n                    _i = 0;\n                    _d.label = 1;\n                case 1:\n                    if (!(_i < _b.length)) return [3, 4];\n                    _c = _b[_i];\n                    if (!(_c in _a)) return [3, 3];\n                    id = _c;\n                    return [4, this.get(id)];\n                case 2:\n                    _d.sent();\n                    _d.label = 3;\n                case 3:\n                    _i++;\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    };\n    return Types;\n}());\nexports.Types = Types;\nvar Type = (function () {\n    function Type(name, effectiveness) {\n        this.kind = 'Type';\n        this.id = (0, util_1.toID)(name);\n        this.name = name;\n        this.effectiveness = effectiveness;\n    }\n    return Type;\n}());\nvar TYPES_BY_ID = [];\ntry {\n    for (var TYPE_CHART_1 = __values(exports.TYPE_CHART), TYPE_CHART_1_1 = TYPE_CHART_1.next(); !TYPE_CHART_1_1.done; TYPE_CHART_1_1 = TYPE_CHART_1.next()) {\n        var typeChart = TYPE_CHART_1_1.value;\n        var map = {};\n        for (var type in typeChart) {\n            var t = new Type(type, __assign({}, typeChart[type]));\n            map[t.id] = t;\n        }\n        TYPES_BY_ID.push(map);\n    }\n}\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\nfinally {\n    try {\n        if (TYPE_CHART_1_1 && !TYPE_CHART_1_1.done && (_a = TYPE_CHART_1[\"return\"])) _a.call(TYPE_CHART_1);\n    }\n    finally { if (e_1) throw e_1.error; }\n}\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/types.js?\n}");

/***/ }),

/***/ "./calc/dist/desc.js":
/*!***************************!*\
  !*** ./calc/dist/desc.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexports.__esModule = true;\nexports.getKOChance = exports.getRecoil = exports.getRecovery = exports.displayMove = exports.display = void 0;\nvar result_1 = __webpack_require__(/*! ./result */ \"./calc/dist/result.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\nvar util_2 = __webpack_require__(/*! ./mechanics/util */ \"./calc/dist/mechanics/util.js\");\nfunction display(gen, attacker, defender, move, field, damage, rawDesc, notation, err) {\n    if (notation === void 0) { notation = '%'; }\n    if (err === void 0) { err = true; }\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\n    var min = (typeof minDamage === 'number' ? minDamage : minDamage[0] + minDamage[1]) * move.hits;\n    var max = (typeof maxDamage === 'number' ? maxDamage : maxDamage[0] + maxDamage[1]) * move.hits;\n    var minDisplay = toDisplay(notation, min, defender.maxHP());\n    var maxDisplay = toDisplay(notation, max, defender.maxHP());\n    var desc = buildDescription(rawDesc, attacker, defender);\n    var damageText = \"\".concat(min, \"-\").concat(max, \" (\").concat(minDisplay, \" - \").concat(maxDisplay).concat(notation, \")\");\n    if (move.category === 'Status' && !move.named('Nature Power'))\n        return \"\".concat(desc, \": \").concat(damageText);\n    var koChanceText = getKOChance(gen, attacker, defender, move, field, damage, err).text;\n    return koChanceText ? \"\".concat(desc, \": \").concat(damageText, \" -- \").concat(koChanceText) : \"\".concat(desc, \": \").concat(damageText);\n}\nexports.display = display;\nfunction displayMove(gen, attacker, defender, move, damage, notation) {\n    if (notation === void 0) { notation = '%'; }\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\n    var min = (typeof minDamage === 'number' ? minDamage : minDamage[0] + minDamage[1]) * move.hits;\n    var max = (typeof maxDamage === 'number' ? maxDamage : maxDamage[0] + maxDamage[1]) * move.hits;\n    var minDisplay = toDisplay(notation, min, defender.maxHP());\n    var maxDisplay = toDisplay(notation, max, defender.maxHP());\n    var recoveryText = getRecovery(gen, attacker, defender, move, damage, notation).text;\n    var recoilText = getRecoil(gen, attacker, defender, move, damage, notation).text;\n    return \"\".concat(minDisplay, \" - \").concat(maxDisplay).concat(notation).concat(recoveryText &&\n        \" (\".concat(recoveryText, \")\")).concat(recoilText && \" (\".concat(recoilText, \")\"));\n}\nexports.displayMove = displayMove;\nfunction getRecovery(gen, attacker, defender, move, damage, notation) {\n    if (notation === void 0) { notation = '%'; }\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\n    var minD = typeof minDamage === 'number' ? [minDamage] : minDamage;\n    var maxD = typeof maxDamage === 'number' ? [maxDamage] : maxDamage;\n    var recovery = [0, 0];\n    var text = '';\n    var ignoresShellBell = gen.num === 3 && move.named('Doom Desire', 'Future Sight');\n    if (attacker.hasItem('Shell Bell') && !ignoresShellBell) {\n        var max = Math.round(defender.maxHP() / 8);\n        for (var i = 0; i < minD.length; i++) {\n            recovery[0] += Math.min(Math.round(minD[i] * move.hits / 8), max);\n            recovery[1] += Math.min(Math.round(maxD[i] * move.hits / 8), max);\n        }\n    }\n    if (move.named('G-Max Finale')) {\n        recovery[0] = recovery[1] = Math.round(attacker.maxHP() / 6);\n    }\n    if (move.drain) {\n        var percentHealed = move.drain[0] / move.drain[1];\n        var max = Math.round(defender.maxHP() * percentHealed);\n        for (var i = 0; i < minD.length; i++) {\n            recovery[0] += Math.min(Math.round(minD[i] * move.hits * percentHealed), max);\n            recovery[1] += Math.min(Math.round(maxD[i] * move.hits * percentHealed), max);\n        }\n    }\n    if (recovery[1] === 0)\n        return { recovery: recovery, text: text };\n    var minHealthRecovered = toDisplay(notation, recovery[0], attacker.maxHP());\n    var maxHealthRecovered = toDisplay(notation, recovery[1], attacker.maxHP());\n    text = \"\".concat(minHealthRecovered, \" - \").concat(maxHealthRecovered).concat(notation, \" recovered\");\n    return { recovery: recovery, text: text };\n}\nexports.getRecovery = getRecovery;\nfunction getRecoil(gen, attacker, defender, move, damage, notation) {\n    if (notation === void 0) { notation = '%'; }\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\n    var min = (typeof minDamage === 'number' ? minDamage : minDamage[0] + minDamage[1]) * move.hits;\n    var max = (typeof maxDamage === 'number' ? maxDamage : maxDamage[0] + maxDamage[1]) * move.hits;\n    var recoil = [0, 0];\n    var text = '';\n    var damageOverflow = minDamage > defender.curHP() || maxDamage > defender.curHP();\n    if (move.recoil) {\n        var mod = (move.recoil[0] / move.recoil[1]) * 100;\n        var minRecoilDamage = void 0, maxRecoilDamage = void 0;\n        if (damageOverflow) {\n            minRecoilDamage =\n                toDisplay(notation, defender.curHP() * mod, attacker.maxHP(), 100);\n            maxRecoilDamage =\n                toDisplay(notation, defender.curHP() * mod, attacker.maxHP(), 100);\n        }\n        else {\n            minRecoilDamage = toDisplay(notation, Math.min(min, defender.curHP()) * mod, attacker.maxHP(), 100);\n            maxRecoilDamage = toDisplay(notation, Math.min(max, defender.curHP()) * mod, attacker.maxHP(), 100);\n        }\n        if (!attacker.hasAbility('Rock Head')) {\n            recoil = [minRecoilDamage, maxRecoilDamage];\n            text = \"\".concat(minRecoilDamage, \" - \").concat(maxRecoilDamage).concat(notation, \" recoil damage\");\n        }\n    }\n    else if (move.hasCrashDamage) {\n        var genMultiplier = gen.num === 2 ? 12.5 : gen.num >= 3 ? 50 : 1;\n        var minRecoilDamage = void 0, maxRecoilDamage = void 0;\n        if (damageOverflow && gen.num !== 2) {\n            minRecoilDamage =\n                toDisplay(notation, defender.curHP() * genMultiplier, attacker.maxHP(), 100);\n            maxRecoilDamage =\n                toDisplay(notation, defender.curHP() * genMultiplier, attacker.maxHP(), 100);\n        }\n        else {\n            minRecoilDamage = toDisplay(notation, Math.min(min, defender.maxHP()) * genMultiplier, attacker.maxHP(), 100);\n            maxRecoilDamage = toDisplay(notation, Math.min(max, defender.maxHP()) * genMultiplier, attacker.maxHP(), 100);\n        }\n        recoil = [minRecoilDamage, maxRecoilDamage];\n        switch (gen.num) {\n            case 1:\n                recoil = toDisplay(notation, 1, attacker.maxHP());\n                text = '1hp damage on miss';\n                break;\n            case 2:\n            case 3:\n            case 4:\n                if (defender.hasType('Ghost')) {\n                    if (gen.num === 4) {\n                        var gen4CrashDamage = Math.floor(((defender.maxHP() * 0.5) / attacker.maxHP()) * 100);\n                        recoil = notation === '%' ? gen4CrashDamage : Math.floor((gen4CrashDamage / 100) * 48);\n                        text = \"\".concat(gen4CrashDamage, \"% crash damage\");\n                    }\n                    else {\n                        recoil = 0;\n                        text = 'no crash damage on Ghost types';\n                    }\n                }\n                else {\n                    text = \"\".concat(minRecoilDamage, \" - \").concat(maxRecoilDamage).concat(notation, \" crash damage on miss\");\n                }\n                break;\n            default:\n                recoil = notation === '%' ? 24 : 50;\n                text = '50% crash damage';\n        }\n    }\n    else if (move.struggleRecoil) {\n        recoil = notation === '%' ? 12 : 25;\n        text = '25% struggle damage';\n        if (gen.num === 4)\n            text += ' (rounded down)';\n    }\n    else if (move.mindBlownRecoil) {\n        recoil = notation === '%' ? 24 : 50;\n        text = '50% recoil damage';\n    }\n    return { recoil: recoil, text: text };\n}\nexports.getRecoil = getRecoil;\nfunction getKOChance(gen, attacker, defender, move, field, damage, err) {\n    if (err === void 0) { err = true; }\n    damage = combine(damage);\n    if (isNaN(damage[0])) {\n        (0, util_1.error)(err, 'damage[0] must be a number.');\n        return { chance: 0, n: 0, text: '' };\n    }\n    if (damage[damage.length - 1] === 0) {\n        (0, util_1.error)(err, 'damage[damage.length - 1] === 0.');\n        return { chance: 0, n: 0, text: '' };\n    }\n    if (move.timesUsed === undefined)\n        move.timesUsed = 1;\n    if (move.timesUsedWithMetronome === undefined)\n        move.timesUsedWithMetronome = 1;\n    if (damage[0] >= defender.maxHP() && move.timesUsed === 1 && move.timesUsedWithMetronome === 1) {\n        return { chance: 1, n: 1, text: 'guaranteed OHKO' };\n    }\n    var hazards = getHazards(gen, defender, field.defenderSide);\n    var eot = getEndOfTurn(gen, attacker, defender, move, field);\n    var toxicCounter = defender.hasStatus('tox') && !defender.hasAbility('Magic Guard') ? defender.toxicCounter : 0;\n    var qualifier = '';\n    if (move.hits > 1) {\n        qualifier = 'approx. ';\n        damage = squashMultihit(gen, damage, move.hits, err);\n    }\n    var hazardsText = hazards.texts.length > 0\n        ? ' after ' + serializeText(hazards.texts)\n        : '';\n    var afterText = hazards.texts.length > 0 || eot.texts.length > 0\n        ? ' after ' + serializeText(hazards.texts.concat(eot.texts))\n        : '';\n    if ((move.timesUsed === 1 && move.timesUsedWithMetronome === 1) || move.isZ) {\n        var chance = computeKOChance(damage, defender.curHP() - hazards.damage, 0, 1, 1, defender.maxHP(), toxicCounter);\n        if (chance === 1) {\n            return { chance: chance, n: 1, text: \"guaranteed OHKO\".concat(hazardsText) };\n        }\n        else if (chance > 0) {\n            return {\n                chance: chance,\n                n: 1,\n                text: qualifier + Math.round(chance * 1000) / 10 + \"% chance to OHKO\".concat(hazardsText)\n            };\n        }\n        if (damage.length === 256) {\n            qualifier = 'approx. ';\n        }\n        for (var i = 2; i <= 4; i++) {\n            var chance_1 = computeKOChance(damage, defender.curHP() - hazards.damage, eot.damage, i, 1, defender.maxHP(), toxicCounter);\n            if (chance_1 === 1) {\n                return { chance: chance_1, n: i, text: \"\".concat(qualifier || 'guaranteed ').concat(i, \"HKO\").concat(afterText) };\n            }\n            else if (chance_1 > 0) {\n                return {\n                    chance: chance_1,\n                    n: i,\n                    text: qualifier + Math.round(chance_1 * 1000) / 10 + \"% chance to \".concat(i, \"HKO\").concat(afterText)\n                };\n            }\n        }\n        for (var i = 5; i <= 9; i++) {\n            if (predictTotal(damage[0], eot.damage, i, 1, toxicCounter, defender.maxHP()) >=\n                defender.curHP() - hazards.damage) {\n                return { chance: 1, n: i, text: \"\".concat(qualifier || 'guaranteed ').concat(i, \"HKO\").concat(afterText) };\n            }\n            else if (predictTotal(damage[damage.length - 1], eot.damage, i, 1, toxicCounter, defender.maxHP()) >=\n                defender.curHP() - hazards.damage) {\n                return { n: i, text: qualifier + \"possible \".concat(i, \"HKO\").concat(afterText) };\n            }\n        }\n    }\n    else {\n        var chance = computeKOChance(damage, defender.maxHP() - hazards.damage, eot.damage, move.hits || 1, move.timesUsed || 1, defender.maxHP(), toxicCounter);\n        if (chance === 1) {\n            return {\n                chance: chance,\n                n: move.timesUsed,\n                text: \"\".concat(qualifier || 'guaranteed ', \"KO in \").concat(move.timesUsed, \" turns\").concat(afterText)\n            };\n        }\n        else if (chance > 0) {\n            return {\n                chance: chance,\n                n: move.timesUsed,\n                text: qualifier +\n                    Math.round(chance * 1000) / 10 +\n                    \"% chance to \".concat(move.timesUsed, \"HKO\").concat(afterText)\n            };\n        }\n        if (predictTotal(damage[0], eot.damage, move.hits, move.timesUsed, toxicCounter, defender.maxHP()) >=\n            defender.curHP() - hazards.damage) {\n            return {\n                chance: 1,\n                n: move.timesUsed,\n                text: \"\".concat(qualifier || 'guaranteed ', \"KO in \").concat(move.timesUsed, \" turns\").concat(afterText)\n            };\n        }\n        else if (predictTotal(damage[damage.length - 1], eot.damage, move.hits, move.timesUsed, toxicCounter, defender.maxHP()) >=\n            defender.curHP() - hazards.damage) {\n            return {\n                n: move.timesUsed,\n                text: qualifier + \"possible KO in \".concat(move.timesUsed, \" turns\").concat(afterText)\n            };\n        }\n        return { n: move.timesUsed, text: qualifier + 'not a KO' };\n    }\n    return { chance: 0, n: 0, text: '' };\n}\nexports.getKOChance = getKOChance;\nfunction combine(damage) {\n    if (typeof damage === 'number')\n        return [damage];\n    if (damage.length > 2) {\n        if (damage[0] > damage[damage.length - 1])\n            damage = damage.slice().sort();\n        return damage;\n    }\n    if (typeof damage[0] === 'number' && typeof damage[1] === 'number') {\n        return [damage[0] + damage[1]];\n    }\n    var d = damage;\n    var combined = [];\n    for (var i = 0; i < d[0].length; i++) {\n        for (var j = 0; j < d[1].length; j++) {\n            combined.push(d[0][i] + d[1][j]);\n        }\n    }\n    return combined.sort();\n}\nvar TRAPPING = [\n    'Bind', 'Clamp', 'Fire Spin', 'Infestation', 'Magma Storm', 'Sand Tomb',\n    'Thunder Cage', 'Whirlpool', 'Wrap', 'G-Max Sandblast', 'G-Max Centiferno',\n];\nfunction getHazards(gen, defender, defenderSide) {\n    var damage = 0;\n    var texts = [];\n    if (defender.hasItem('Heavy-Duty Boots')) {\n        return { damage: damage, texts: texts };\n    }\n    if (defenderSide.isSR && !defender.hasAbility('Magic Guard', 'Mountaineer')) {\n        var rockType = gen.types.get('rock');\n        var effectiveness = rockType.effectiveness[defender.types[0]] *\n            (defender.types[1] ? rockType.effectiveness[defender.types[1]] : 1);\n        damage += Math.floor((effectiveness * defender.maxHP()) / 8);\n        texts.push('Stealth Rock');\n    }\n    if (defenderSide.steelsurge && !defender.hasAbility('Magic Guard', 'Mountaineer')) {\n        var steelType = gen.types.get('steel');\n        var effectiveness = steelType.effectiveness[defender.types[0]] *\n            (defender.types[1] ? steelType.effectiveness[defender.types[1]] : 1);\n        damage += Math.floor((effectiveness * defender.maxHP()) / 8);\n        texts.push('Steelsurge');\n    }\n    if (!defender.hasType('Flying') &&\n        !defender.hasAbility('Magic Guard', 'Levitate') &&\n        !defender.hasItem('Air Balloon')) {\n        if (defenderSide.spikes === 1) {\n            damage += Math.floor(defender.maxHP() / 8);\n            if (gen.num === 2) {\n                texts.push('Spikes');\n            }\n            else {\n                texts.push('1 layer of Spikes');\n            }\n        }\n        else if (defenderSide.spikes === 2) {\n            damage += Math.floor(defender.maxHP() / 6);\n            texts.push('2 layers of Spikes');\n        }\n        else if (defenderSide.spikes === 3) {\n            damage += Math.floor(defender.maxHP() / 4);\n            texts.push('3 layers of Spikes');\n        }\n    }\n    if (isNaN(damage)) {\n        damage = 0;\n    }\n    return { damage: damage, texts: texts };\n}\nfunction getEndOfTurn(gen, attacker, defender, move, field) {\n    var damage = 0;\n    var texts = [];\n    if (field.hasWeather('Sun', 'Harsh Sunshine')) {\n        if (defender.hasAbility('Dry Skin', 'Solar Power')) {\n            damage -= Math.floor(defender.maxHP() / 8);\n            texts.push(defender.ability + ' damage');\n        }\n    }\n    else if (field.hasWeather('Rain', 'Heavy Rain')) {\n        if (defender.hasAbility('Dry Skin')) {\n            damage += Math.floor(defender.maxHP() / 8);\n            texts.push('Dry Skin recovery');\n        }\n        else if (defender.hasAbility('Rain Dish')) {\n            damage += Math.floor(defender.maxHP() / 16);\n            texts.push('Rain Dish recovery');\n        }\n    }\n    else if (field.hasWeather('Sand')) {\n        if (!defender.hasType('Rock', 'Ground', 'Steel') &&\n            !defender.hasAbility('Magic Guard', 'Overcoat', 'Sand Force', 'Sand Rush', 'Sand Veil') &&\n            !defender.hasItem('Safety Goggles')) {\n            damage -= Math.floor(defender.maxHP() / (gen.num === 2 ? 8 : 16));\n            texts.push('sandstorm damage');\n        }\n    }\n    else if (field.hasWeather('Hail', 'Snow')) {\n        if (defender.hasAbility('Ice Body')) {\n            damage += Math.floor(defender.maxHP() / 16);\n            texts.push('Ice Body recovery');\n        }\n        else if (!defender.hasType('Ice') &&\n            !defender.hasAbility('Magic Guard', 'Overcoat', 'Snow Cloak') &&\n            !defender.hasItem('Safety Goggles') &&\n            field.hasWeather('Hail')) {\n            damage -= Math.floor(defender.maxHP() / 16);\n            texts.push('hail damage');\n        }\n    }\n    var loseItem = move.named('Knock Off') && !defender.hasAbility('Sticky Hold');\n    if (defender.hasItem('Leftovers') && !loseItem) {\n        damage += Math.floor(defender.maxHP() / 16);\n        texts.push('Leftovers recovery');\n    }\n    else if (defender.hasItem('Black Sludge') && !loseItem) {\n        if (defender.hasType('Poison')) {\n            damage += Math.floor(defender.maxHP() / 16);\n            texts.push('Black Sludge recovery');\n        }\n        else if (!defender.hasAbility('Magic Guard', 'Klutz')) {\n            damage -= Math.floor(defender.maxHP() / 8);\n            texts.push('Black Sludge damage');\n        }\n    }\n    else if (defender.hasItem('Sticky Barb')) {\n        damage -= Math.floor(defender.maxHP() / 8);\n        texts.push('Sticky Barb damage');\n    }\n    if (field.defenderSide.isSeeded) {\n        if (!defender.hasAbility('Magic Guard')) {\n            damage -= Math.floor(defender.maxHP() / (gen.num >= 2 ? 8 : 16));\n            texts.push('Leech Seed damage');\n        }\n    }\n    if (field.attackerSide.isSeeded && !attacker.hasAbility('Magic Guard')) {\n        if (attacker.hasAbility('Liquid Ooze')) {\n            damage -= Math.floor(attacker.maxHP() / (gen.num >= 2 ? 8 : 16));\n            texts.push('Liquid Ooze damage');\n        }\n        else {\n            damage += Math.floor(attacker.maxHP() / (gen.num >= 2 ? 8 : 16));\n            texts.push('Leech Seed recovery');\n        }\n    }\n    if (field.hasTerrain('Grassy')) {\n        if ((0, util_2.isGrounded)(defender, field)) {\n            damage += Math.floor(defender.maxHP() / 16);\n            texts.push('Grassy Terrain recovery');\n        }\n    }\n    if (defender.hasStatus('psn')) {\n        if (defender.hasAbility('Poison Heal')) {\n            damage += Math.floor(defender.maxHP() / 8);\n            texts.push('Poison Heal');\n        }\n        else if (!defender.hasAbility('Magic Guard')) {\n            damage -= Math.floor(defender.maxHP() / (gen.num === 1 ? 16 : 8));\n            texts.push('poison damage');\n        }\n    }\n    else if (defender.hasStatus('tox')) {\n        if (defender.hasAbility('Poison Heal')) {\n            damage += Math.floor(defender.maxHP() / 8);\n            texts.push('Poison Heal');\n        }\n        else if (!defender.hasAbility('Magic Guard')) {\n            texts.push('toxic damage');\n        }\n    }\n    else if (defender.hasStatus('brn')) {\n        if (defender.hasAbility('Heatproof')) {\n            damage -= Math.floor(defender.maxHP() / (gen.num > 6 ? 32 : 16));\n            texts.push('reduced burn damage');\n        }\n        else if (!defender.hasAbility('Magic Guard')) {\n            damage -= Math.floor(defender.maxHP() / (gen.num === 1 || gen.num > 6 ? 16 : 8));\n            texts.push('burn damage');\n        }\n    }\n    else if ((defender.hasStatus('slp') || defender.hasAbility('Comatose')) &&\n        attacker.hasAbility('isBadDreams') &&\n        !defender.hasAbility('Magic Guard')) {\n        damage -= Math.floor(defender.maxHP() / 8);\n        texts.push('Bad Dreams');\n    }\n    if (!defender.hasAbility('Magic Guard') && TRAPPING.includes(move.name)) {\n        if (attacker.hasItem('Binding Band')) {\n            damage -= gen.num > 5 ? Math.floor(defender.maxHP() / 6) : Math.floor(defender.maxHP() / 8);\n            texts.push('trapping damage');\n        }\n        else {\n            damage -= gen.num > 5 ? Math.floor(defender.maxHP() / 8) : Math.floor(defender.maxHP() / 16);\n            texts.push('trapping damage');\n        }\n    }\n    if (defender.isSaltCure && !defender.hasAbility('Magic Guard')) {\n        var isWaterOrSteel = defender.hasType('Water', 'Steel') ||\n            (defender.teraType && ['Water', 'Steel'].includes(defender.teraType));\n        damage -= Math.floor(defender.maxHP() / (isWaterOrSteel ? 4 : 8));\n        texts.push('Salt Cure');\n    }\n    if (!defender.hasType('Fire') && !defender.hasAbility('Magic Guard') &&\n        (move.named('Fire Pledge (Grass Pledge Boosted)', 'Grass Pledge (Fire Pledge Boosted)'))) {\n        damage -= Math.floor(defender.maxHP() / 8);\n        texts.push('Sea of Fire damage');\n    }\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Grass') &&\n        (field.defenderSide.vinelash || move.named('G-Max Vine Lash'))) {\n        damage -= Math.floor(defender.maxHP() / 6);\n        texts.push('Vine Lash damage');\n    }\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Fire') &&\n        (field.defenderSide.wildfire || move.named('G-Max Wildfire'))) {\n        damage -= Math.floor(defender.maxHP() / 6);\n        texts.push('Wildfire damage');\n    }\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Water') &&\n        (field.defenderSide.cannonade || move.named('G-Max Cannonade'))) {\n        damage -= Math.floor(defender.maxHP() / 6);\n        texts.push('Cannonade damage');\n    }\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Rock') &&\n        (field.defenderSide.volcalith || move.named('G-Max Volcalith'))) {\n        damage -= Math.floor(defender.maxHP() / 6);\n        texts.push('Volcalith damage');\n    }\n    return { damage: damage, texts: texts };\n}\nfunction computeKOChance(damage, hp, eot, hits, timesUsed, maxHP, toxicCounter) {\n    var n = damage.length;\n    if (hits === 1) {\n        for (var i = 0; i < n; i++) {\n            if (damage[n - 1] < hp)\n                return 0;\n            if (damage[i] >= hp) {\n                return (n - i) / n;\n            }\n        }\n    }\n    var toxicDamage = 0;\n    if (toxicCounter > 0) {\n        toxicDamage = Math.floor((toxicCounter * maxHP) / 16);\n        toxicCounter++;\n    }\n    var sum = 0;\n    var lastc = 0;\n    for (var i = 0; i < n; i++) {\n        var c = void 0;\n        if (i === 0 || damage[i] !== damage[i - 1]) {\n            c = computeKOChance(damage, hp - damage[i] + eot - toxicDamage, eot, hits - 1, timesUsed, maxHP, toxicCounter);\n        }\n        else {\n            c = lastc;\n        }\n        if (c === 1) {\n            sum += n - i;\n            break;\n        }\n        else {\n            sum += c;\n        }\n        lastc = c;\n    }\n    return sum / n;\n}\nfunction predictTotal(damage, eot, hits, timesUsed, toxicCounter, maxHP) {\n    var toxicDamage = 0;\n    if (toxicCounter > 0) {\n        for (var i = 0; i < hits - 1; i++) {\n            toxicDamage += Math.floor(((toxicCounter + i) * maxHP) / 16);\n        }\n    }\n    var total = 0;\n    if (hits > 1 && timesUsed === 1) {\n        total = damage * hits - eot * (hits - 1) + toxicDamage;\n    }\n    else {\n        total = damage - eot * (hits - 1) + toxicDamage;\n    }\n    return total;\n}\nfunction squashMultihit(gen, d, hits, err) {\n    if (err === void 0) { err = true; }\n    if (d.length === 1) {\n        return [d[0] * hits];\n    }\n    else if (gen.num === 1) {\n        var r = [];\n        for (var i = 0; i < d.length; i++) {\n            r[i] = d[i] * hits;\n        }\n        return r;\n    }\n    else if (d.length === 16) {\n        switch (hits) {\n            case 2:\n                return [\n                    2 * d[0], d[2] + d[3], d[4] + d[4], d[4] + d[5], d[5] + d[6], d[6] + d[6],\n                    d[6] + d[7], d[7] + d[7], d[8] + d[8], d[8] + d[9], d[9] + d[9], d[9] + d[10],\n                    d[10] + d[11], d[11] + d[11], d[12] + d[13], 2 * d[15],\n                ];\n            case 3:\n                return [\n                    3 * d[0], d[3] + d[3] + d[4], d[4] + d[4] + d[5], d[5] + d[5] + d[6],\n                    d[5] + d[6] + d[6], d[6] + d[6] + d[7], d[6] + d[7] + d[7], d[7] + d[7] + d[8],\n                    d[7] + d[8] + d[8], d[8] + d[8] + d[9], d[8] + d[9] + d[9], d[9] + d[9] + d[10],\n                    d[9] + d[10] + d[10], d[10] + d[11] + d[11], d[11] + d[12] + d[12], 3 * d[15],\n                ];\n            case 4:\n                return [\n                    4 * d[0], 4 * d[4], d[4] + d[5] + d[5] + d[5], d[5] + d[5] + d[6] + d[6],\n                    4 * d[6], d[6] + d[6] + d[7] + d[7], 4 * d[7], d[7] + d[7] + d[7] + d[8],\n                    d[7] + d[8] + d[8] + d[8], 4 * d[8], d[8] + d[8] + d[9] + d[9], 4 * d[9],\n                    d[9] + d[9] + d[10] + d[10], d[10] + d[10] + d[10] + d[11], 4 * d[11], 4 * d[15],\n                ];\n            case 5:\n                return [\n                    5 * d[0], d[4] + d[4] + d[4] + d[5] + d[5], d[5] + d[5] + d[5] + d[5] + d[6],\n                    d[5] + d[6] + d[6] + d[6] + d[6], d[6] + d[6] + d[6] + d[6] + d[7],\n                    d[6] + d[6] + d[7] + d[7] + d[7], 5 * d[7], d[7] + d[7] + d[7] + d[8] + d[8],\n                    d[7] + d[7] + d[8] + d[8] + d[8], 5 * d[8], d[8] + d[8] + d[8] + d[9] + d[9],\n                    d[8] + d[9] + d[9] + d[9] + d[9], d[9] + d[9] + d[9] + d[9] + d[10],\n                    d[9] + d[10] + d[10] + d[10] + d[10], d[10] + d[10] + d[11] + d[11] + d[11], 5 * d[15],\n                ];\n            case 10:\n                return [\n                    10 * d[0], 10 * d[4], 3 * d[4] + 7 * d[5], 5 * d[5] + 5 * d[6], 10 * d[6],\n                    5 * d[6] + 5 * d[7], 10 * d[7], 7 * d[7] + 3 * d[8], 3 * d[7] + 7 * d[8], 10 * d[8],\n                    5 * d[8] + 5 * d[9], 4 * d[9], 5 * d[9] + 5 * d[10], 7 * d[10] + 3 * d[11], 10 * d[11],\n                    10 * d[15],\n                ];\n            default:\n                (0, util_1.error)(err, \"Unexpected # of hits: \".concat(hits));\n                return d;\n        }\n    }\n    else if (d.length === 39) {\n        switch (hits) {\n            case 2:\n                return [\n                    2 * d[0], 2 * d[7], 2 * d[10], 2 * d[12], 2 * d[14], d[15] + d[16],\n                    2 * d[17], d[18] + d[19], d[19] + d[20], 2 * d[21], d[22] + d[23],\n                    2 * d[24], 2 * d[26], 2 * d[28], 2 * d[31], 2 * d[38],\n                ];\n            case 3:\n                return [\n                    3 * d[0], 3 * d[9], 3 * d[12], 3 * d[13], 3 * d[15], 3 * d[16],\n                    3 * d[17], 3 * d[18], 3 * d[20], 3 * d[21], 3 * d[22], 3 * d[23],\n                    3 * d[25], 3 * d[26], 3 * d[29], 3 * d[38],\n                ];\n            case 4:\n                return [\n                    4 * d[0], 2 * d[10] + 2 * d[11], 4 * d[13], 4 * d[14], 2 * d[15] + 2 * d[16],\n                    2 * d[16] + 2 * d[17], 2 * d[17] + 2 * d[18], 2 * d[18] + 2 * d[19],\n                    2 * d[19] + 2 * d[20], 2 * d[20] + 2 * d[21], 2 * d[21] + 2 * d[22],\n                    2 * d[22] + 2 * d[23], 4 * d[24], 4 * d[25], 2 * d[27] + 2 * d[28], 4 * d[38],\n                ];\n            case 5:\n                return [\n                    5 * d[0], 5 * d[11], 5 * d[13], 5 * d[15], 5 * d[16], 5 * d[17],\n                    5 * d[18], 5 * d[19], 5 * d[19], 5 * d[20], 5 * d[21], 5 * d[22],\n                    5 * d[23], 5 * d[25], 5 * d[27], 5 * d[38],\n                ];\n            case 10:\n                return [\n                    10 * d[0], 10 * d[11], 10 * d[13], 10 * d[15], 10 * d[16], 10 * d[17],\n                    10 * d[18], 10 * d[19], 10 * d[19], 10 * d[20], 10 * d[21], 10 * d[22],\n                    10 * d[23], 10 * d[25], 10 * d[27], 10 * d[38],\n                ];\n            default:\n                (0, util_1.error)(err, \"Unexpected # of hits: \".concat(hits));\n                return d;\n        }\n    }\n    else if (d.length === 256) {\n        if (hits > 1) {\n            (0, util_1.error)(err, \"Unexpected # of hits for Parental Bond: \".concat(hits));\n        }\n        var r = [];\n        for (var i = 0; i < 16; i++) {\n            var val = 0;\n            for (var j = 0; j < 16; j++) {\n                val += d[i + j];\n            }\n            r[i] = Math.round(val / 16);\n        }\n        return r;\n    }\n    else {\n        (0, util_1.error)(err, \"Unexpected # of possible damage values: \".concat(d.length));\n        return d;\n    }\n}\nfunction buildDescription(description, attacker, defender) {\n    var _a = __read(getDescriptionLevels(attacker, defender), 2), attackerLevel = _a[0], defenderLevel = _a[1];\n    var output = '';\n    if (description.attackBoost) {\n        if (description.attackBoost > 0) {\n            output += '+';\n        }\n        output += description.attackBoost + ' ';\n    }\n    output = appendIfSet(output, attackerLevel);\n    output = appendIfSet(output, description.attackEVs);\n    output = appendIfSet(output, description.attackerItem);\n    output = appendIfSet(output, description.attackerAbility);\n    output = appendIfSet(output, description.rivalry);\n    if (description.isBurned) {\n        output += 'burned ';\n    }\n    if (description.alliesFainted) {\n        output += Math.min(5, description.alliesFainted) +\n            \" \".concat(description.alliesFainted === 1 ? 'ally' : 'allies', \" fainted \");\n    }\n    if (description.attackerTera) {\n        output += \"Tera \".concat(description.attackerTera, \" \");\n    }\n    if (description.isBeadsOfRuin) {\n        output += 'Beads of Ruin ';\n    }\n    if (description.isSwordOfRuin) {\n        output += 'Sword of Ruin ';\n    }\n    output += description.attackerName + ' ';\n    if (description.isHelpingHand) {\n        output += 'Helping Hand ';\n    }\n    if (description.isFlowerGiftAttacker) {\n        output += ' with an ally\\'s Flower Gift ';\n    }\n    if (description.isBattery) {\n        output += ' Battery boosted ';\n    }\n    if (description.isPowerSpot) {\n        output += ' Power Spot boosted ';\n    }\n    if (description.isSwitching) {\n        output += ' switching boosted ';\n    }\n    output += description.moveName + ' ';\n    if (description.moveBP && description.moveType) {\n        output += '(' + description.moveBP + ' BP ' + description.moveType + ') ';\n    }\n    else if (description.moveBP) {\n        output += '(' + description.moveBP + ' BP) ';\n    }\n    else if (description.moveType) {\n        output += '(' + description.moveType + ') ';\n    }\n    if (description.hits) {\n        output += '(' + description.hits + ' hits) ';\n    }\n    output = appendIfSet(output, description.moveTurns);\n    output += 'vs. ';\n    if (description.defenseBoost) {\n        if (description.defenseBoost > 0) {\n            output += '+';\n        }\n        output += description.defenseBoost + ' ';\n    }\n    output = appendIfSet(output, defenderLevel);\n    output = appendIfSet(output, description.HPEVs);\n    if (description.defenseEVs) {\n        output += '/ ' + description.defenseEVs + ' ';\n    }\n    output = appendIfSet(output, description.defenderItem);\n    output = appendIfSet(output, description.defenderAbility);\n    if (description.isTabletsOfRuin) {\n        output += 'Tablets of Ruin ';\n    }\n    if (description.isVesselOfRuin) {\n        output += 'Vessel of Ruin ';\n    }\n    if (description.isProtected) {\n        output += 'protected ';\n    }\n    if (description.isDefenderDynamaxed) {\n        output += 'Dynamax ';\n    }\n    if (description.defenderTera) {\n        output += \"Tera \".concat(description.defenderTera, \" \");\n    }\n    output += description.defenderName;\n    if (description.weather && description.terrain) {\n    }\n    else if (description.weather) {\n        output += ' in ' + description.weather;\n    }\n    else if (description.terrain) {\n        output += ' in ' + description.terrain + ' Terrain';\n    }\n    if (description.isReflect) {\n        output += ' through Reflect';\n    }\n    else if (description.isLightScreen) {\n        output += ' through Light Screen';\n    }\n    if (description.isFlowerGiftDefender) {\n        output += ' with an ally\\'s Flower Gift';\n    }\n    if (description.isFriendGuard) {\n        output += ' with an ally\\'s Friend Guard';\n    }\n    if (description.isAuroraVeil) {\n        output += ' with an ally\\'s Aurora Veil';\n    }\n    if (description.isCritical) {\n        output += ' on a critical hit';\n    }\n    if (description.isWonderRoom) {\n        output += ' in Wonder Room';\n    }\n    if (description.isTrickRoom) {\n        output += ' in Trick Room';\n    }\n    return output;\n}\nfunction getDescriptionLevels(attacker, defender) {\n    if (attacker.level !== defender.level) {\n        return [\n            attacker.level === 100 ? '' : \"Lvl \".concat(attacker.level),\n            defender.level === 100 ? '' : \"Lvl \".concat(defender.level),\n        ];\n    }\n    var elide = [100, 50, 5].includes(attacker.level);\n    var level = elide ? '' : \"Lvl \".concat(attacker.level);\n    return [level, level];\n}\nfunction serializeText(arr) {\n    if (arr.length === 0) {\n        return '';\n    }\n    else if (arr.length === 1) {\n        return arr[0];\n    }\n    else if (arr.length === 2) {\n        return arr[0] + ' and ' + arr[1];\n    }\n    else {\n        var text = '';\n        for (var i = 0; i < arr.length - 1; i++) {\n            text += arr[i] + ', ';\n        }\n        return text + 'and ' + arr[arr.length - 1];\n    }\n}\nfunction appendIfSet(str, toAppend) {\n    return toAppend ? \"\".concat(str).concat(toAppend, \" \") : str;\n}\nfunction toDisplay(notation, a, b, f) {\n    if (f === void 0) { f = 1; }\n    return notation === '%' ? Math.floor((a * (1000 / f)) / b) / 10 : Math.floor((a * (48 / f)) / b);\n}\n//# sourceMappingURL=desc.js.map\n\n//# sourceURL=webpack:///./calc/dist/desc.js?\n}");

/***/ }),

/***/ "./calc/dist/field.js":
/*!****************************!*\
  !*** ./calc/dist/field.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports) {

eval("{\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexports.__esModule = true;\nexports.Side = exports.Field = void 0;\nvar Field = (function () {\n    function Field(field) {\n        if (field === void 0) { field = {}; }\n        this.gameType = field.gameType || 'Singles';\n        this.terrain = field.terrain;\n        this.weather = field.weather;\n        this.isMagicRoom = !!field.isMagicRoom;\n        this.isTrickRoom = !!field.isTrickRoom;\n        this.isWonderRoom = !!field.isWonderRoom;\n        this.isGravity = !!field.isGravity;\n        this.isAuraBreak = field.isAuraBreak || false;\n        this.isFairyAura = field.isFairyAura || false;\n        this.isDarkAura = field.isDarkAura || false;\n        this.isBeadsOfRuin = field.isBeadsOfRuin || false;\n        this.isSwordOfRuin = field.isSwordOfRuin || false;\n        this.isTabletsOfRuin = field.isTabletsOfRuin || false;\n        this.isVesselOfRuin = field.isVesselOfRuin || false;\n        this.attackerSide = new Side(field.attackerSide || {});\n        this.defenderSide = new Side(field.defenderSide || {});\n    }\n    Field.prototype.hasWeather = function () {\n        var weathers = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            weathers[_i] = arguments[_i];\n        }\n        return !!(this.weather && weathers.includes(this.weather));\n    };\n    Field.prototype.hasTerrain = function () {\n        var terrains = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            terrains[_i] = arguments[_i];\n        }\n        return !!(this.terrain && terrains.includes(this.terrain));\n    };\n    Field.prototype.swap = function () {\n        var _a;\n        _a = __read([this.defenderSide, this.attackerSide], 2), this.attackerSide = _a[0], this.defenderSide = _a[1];\n        return this;\n    };\n    Field.prototype.clone = function () {\n        return new Field({\n            gameType: this.gameType,\n            weather: this.weather,\n            terrain: this.terrain,\n            isMagicRoom: this.isMagicRoom,\n            isWonderRoom: this.isWonderRoom,\n            isTrickRoom: this.isTrickRoom,\n            isGravity: this.isGravity,\n            attackerSide: this.attackerSide,\n            defenderSide: this.defenderSide,\n            isAuraBreak: this.isAuraBreak,\n            isDarkAura: this.isDarkAura,\n            isFairyAura: this.isFairyAura,\n            isBeadsOfRuin: this.isBeadsOfRuin,\n            isSwordOfRuin: this.isSwordOfRuin,\n            isTabletsOfRuin: this.isTabletsOfRuin,\n            isVesselOfRuin: this.isVesselOfRuin\n        });\n    };\n    return Field;\n}());\nexports.Field = Field;\nvar Side = (function () {\n    function Side(side) {\n        if (side === void 0) { side = {}; }\n        this.spikes = side.spikes || 0;\n        this.steelsurge = !!side.steelsurge;\n        this.vinelash = !!side.vinelash;\n        this.wildfire = !!side.wildfire;\n        this.cannonade = !!side.cannonade;\n        this.volcalith = !!side.volcalith;\n        this.isSR = !!side.isSR;\n        this.isReflect = !!side.isReflect;\n        this.isLightScreen = !!side.isLightScreen;\n        this.isProtected = !!side.isProtected;\n        this.isSeeded = !!side.isSeeded;\n        this.isForesight = !!side.isForesight;\n        this.isTailwind = !!side.isTailwind;\n        this.isHelpingHand = !!side.isHelpingHand;\n        this.isFlowerGift = !!side.isFlowerGift;\n        this.isFriendGuard = !!side.isFriendGuard;\n        this.isAuroraVeil = !!side.isAuroraVeil;\n        this.isBattery = !!side.isBattery;\n        this.isPowerSpot = !!side.isPowerSpot;\n        this.isSwitching = side.isSwitching;\n    }\n    Side.prototype.clone = function () {\n        return new Side(this);\n    };\n    return Side;\n}());\nexports.Side = Side;\n//# sourceMappingURL=field.js.map\n\n//# sourceURL=webpack:///./calc/dist/field.js?\n}");

/***/ }),

/***/ "./calc/dist/index.js":
/*!****************************!*\
  !*** ./calc/dist/index.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nexports.__esModule = true;\nexports.Stats = exports.STATS = exports.TYPE_CHART = exports.NATURES = exports.SPECIES = exports.MOVES = exports.MEGA_STONES = exports.ITEMS = exports.ABILITIES = exports.toID = exports.Generations = exports.Result = exports.Side = exports.Field = exports.calcStat = exports.Pokemon = exports.Move = exports.calculate = exports.I = exports.A = void 0;\nvar data_1 = __webpack_require__(/*! ./data */ \"./calc/dist/data/index.js\");\nvar I = __importStar(__webpack_require__(/*! ./data/interface */ \"./calc/dist/data/interface.js\"));\nexports.I = I;\nvar A = __importStar(__webpack_require__(/*! ./adaptable */ \"./calc/dist/adaptable.js\"));\nexports.A = A;\nvar Acalculate = exports.calculate;\nfunction calculate(gen, attacker, defender, move, field) {\n    return (Acalculate || A.calculate)(typeof gen === 'number' ? data_1.Generations.get(gen) : gen, attacker, defender, move, field);\n}\nexports.calculate = calculate;\nvar Move = (function (_super) {\n    __extends(Move, _super);\n    function Move(gen, name, options) {\n        if (options === void 0) { options = {}; }\n        return _super.call(this, typeof gen === 'number' ? data_1.Generations.get(gen) : gen, name, options) || this;\n    }\n    return Move;\n}(A.Move));\nexports.Move = Move;\nvar Pokemon = (function (_super) {\n    __extends(Pokemon, _super);\n    function Pokemon(gen, name, options) {\n        if (options === void 0) { options = {}; }\n        return _super.call(this, typeof gen === 'number' ? data_1.Generations.get(gen) : gen, name, options) || this;\n    }\n    Pokemon.getForme = function (gen, speciesName, item, moveName) {\n        return A.Pokemon.getForme(typeof gen === 'number' ? data_1.Generations.get(gen) : gen, speciesName, item, moveName);\n    };\n    return Pokemon;\n}(A.Pokemon));\nexports.Pokemon = Pokemon;\nfunction calcStat(gen, stat, base, iv, ev, level, nature) {\n    return A.Stats.calcStat(typeof gen === 'number' ? data_1.Generations.get(gen) : gen, stat === 'spc' ? 'spa' : stat, base, iv, ev, level, nature);\n}\nexports.calcStat = calcStat;\nvar field_1 = __webpack_require__(/*! ./field */ \"./calc/dist/field.js\");\n__createBinding(exports, field_1, \"Field\");\n__createBinding(exports, field_1, \"Side\");\nvar result_1 = __webpack_require__(/*! ./result */ \"./calc/dist/result.js\");\n__createBinding(exports, result_1, \"Result\");\nvar index_1 = __webpack_require__(/*! ./data/index */ \"./calc/dist/data/index.js\");\n__createBinding(exports, index_1, \"Generations\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\n__createBinding(exports, util_1, \"toID\");\nvar abilities_1 = __webpack_require__(/*! ./data/abilities */ \"./calc/dist/data/abilities.js\");\n__createBinding(exports, abilities_1, \"ABILITIES\");\nvar items_1 = __webpack_require__(/*! ./data/items */ \"./calc/dist/data/items.js\");\n__createBinding(exports, items_1, \"ITEMS\");\n__createBinding(exports, items_1, \"MEGA_STONES\");\nvar moves_1 = __webpack_require__(/*! ./data/moves */ \"./calc/dist/data/moves.js\");\n__createBinding(exports, moves_1, \"MOVES\");\nvar species_1 = __webpack_require__(/*! ./data/species */ \"./calc/dist/data/species.js\");\n__createBinding(exports, species_1, \"SPECIES\");\nvar natures_1 = __webpack_require__(/*! ./data/natures */ \"./calc/dist/data/natures.js\");\n__createBinding(exports, natures_1, \"NATURES\");\nvar types_1 = __webpack_require__(/*! ./data/types */ \"./calc/dist/data/types.js\");\n__createBinding(exports, types_1, \"TYPE_CHART\");\nvar stats_1 = __webpack_require__(/*! ./stats */ \"./calc/dist/stats.js\");\n__createBinding(exports, stats_1, \"STATS\");\n__createBinding(exports, stats_1, \"Stats\");\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./calc/dist/index.js?\n}");

/***/ }),

/***/ "./calc/dist/items.js":
/*!****************************!*\
  !*** ./calc/dist/items.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.getMultiAttack = exports.getTechnoBlast = exports.getNaturalGift = exports.getFlingPower = exports.getBerryResistType = exports.getItemBoostType = exports.SEED_BOOSTED_STAT = void 0;\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\nexports.SEED_BOOSTED_STAT = {\n    'Electric Seed': 'def',\n    'Grassy Seed': 'def',\n    'Misty Seed': 'spd',\n    'Psychic Seed': 'spd'\n};\nfunction getItemBoostType(item) {\n    switch (item) {\n        case 'Draco Plate':\n        case 'Dragon Fang':\n            return 'Dragon';\n        case 'Dread Plate':\n        case 'Black Glasses':\n            return 'Dark';\n        case 'Earth Plate':\n        case 'Soft Sand':\n            return 'Ground';\n        case 'Fist Plate':\n        case 'Black Belt':\n            return 'Fighting';\n        case 'Flame Plate':\n        case 'Charcoal':\n            return 'Fire';\n        case 'Icicle Plate':\n        case 'Never-Melt Ice':\n            return 'Ice';\n        case 'Insect Plate':\n        case 'Silver Powder':\n            return 'Bug';\n        case 'Iron Plate':\n        case 'Metal Coat':\n            return 'Steel';\n        case 'Meadow Plate':\n        case 'Rose Incense':\n        case 'Miracle Seed':\n            return 'Grass';\n        case 'Mind Plate':\n        case 'Odd Incense':\n        case 'Twisted Spoon':\n            return 'Psychic';\n        case 'Pixie Plate':\n            return 'Fairy';\n        case 'Sky Plate':\n        case 'Sharp Beak':\n            return 'Flying';\n        case 'Splash Plate':\n        case 'Sea Incense':\n        case 'Wave Incense':\n        case 'Mystic Water':\n            return 'Water';\n        case 'Spooky Plate':\n        case 'Spell Tag':\n            return 'Ghost';\n        case 'Stone Plate':\n        case 'Rock Incense':\n        case 'Hard Stone':\n            return 'Rock';\n        case 'Toxic Plate':\n        case 'Poison Barb':\n            return 'Poison';\n        case 'Zap Plate':\n        case 'Magnet':\n            return 'Electric';\n        case 'Silk Scarf':\n        case 'Pink Bow':\n        case 'Polkadot Bow':\n            return 'Normal';\n        default:\n            return undefined;\n    }\n}\nexports.getItemBoostType = getItemBoostType;\nfunction getBerryResistType(berry) {\n    switch (berry) {\n        case 'Chilan Berry':\n            return 'Normal';\n        case 'Occa Berry':\n            return 'Fire';\n        case 'Passho Berry':\n            return 'Water';\n        case 'Wacan Berry':\n            return 'Electric';\n        case 'Rindo Berry':\n            return 'Grass';\n        case 'Yache Berry':\n            return 'Ice';\n        case 'Chople Berry':\n            return 'Fighting';\n        case 'Kebia Berry':\n            return 'Poison';\n        case 'Shuca Berry':\n            return 'Ground';\n        case 'Coba Berry':\n            return 'Flying';\n        case 'Payapa Berry':\n            return 'Psychic';\n        case 'Tanga Berry':\n            return 'Bug';\n        case 'Charti Berry':\n            return 'Rock';\n        case 'Kasib Berry':\n            return 'Ghost';\n        case 'Haban Berry':\n            return 'Dragon';\n        case 'Colbur Berry':\n            return 'Dark';\n        case 'Babiri Berry':\n            return 'Steel';\n        case 'Roseli Berry':\n            return 'Fairy';\n        default:\n            return undefined;\n    }\n}\nexports.getBerryResistType = getBerryResistType;\nvar FLING_120 = new Set([\n    'TR24',\n    'TR28',\n    'TR34',\n    'TR39',\n    'TR53',\n    'TR55',\n    'TR64',\n    'TR66',\n    'TR72',\n    'TR73',\n]);\nvar FLING_100 = new Set([\n    'Hard Stone',\n    'Room Service',\n    'Claw Fossil',\n    'Dome Fossil',\n    'Helix Fossil',\n    'Old Amber',\n    'Root Fossil',\n    'Armor Fossil',\n    'Old Amber',\n    'Fossilized Bird',\n    'Fossilized Dino',\n    'Fossilized Drake',\n    'Fossilized Fish',\n    'Plume Fossil',\n    'Jaw Fossil',\n    'Cover Fossil',\n    'Sail Fossil',\n    'Rare Bone',\n    'Skull Fossil',\n    'TR10',\n    'TR31',\n    'TR75',\n]);\nvar FLING_90 = new Set([\n    'Deep Sea Tooth',\n    'Thick Club',\n    'TR02',\n    'TR04',\n    'TR05',\n    'TR08',\n    'TR11',\n    'TR22',\n    'TR35',\n    'TR42',\n    'TR45',\n    'TR50',\n    'TR61',\n    'TR65',\n    'TR67',\n    'TR86',\n    'TR90',\n    'TR96',\n]);\nvar FLING_85 = new Set(['TR01', 'TR41', 'TR62', 'TR93', 'TR97', 'TR98']);\nvar FLING_80 = new Set([\n    'Assault Vest',\n    'Blunder Policy',\n    'Chipped Pot',\n    'Cracked Pot',\n    'Heavy-Duty Boots',\n    'Weakness Policy',\n    'Quick Claw',\n    'Dawn Stone',\n    'Dusk Stone',\n    'Electirizer',\n    'Magmarizer',\n    'Oval Stone',\n    'Protector',\n    'Sachet',\n    'Whipped Dream',\n    'Razor Claw',\n    'Shiny Stone',\n    'TR16',\n    'TR18',\n    'TR19',\n    'TR25',\n    'TR32',\n    'TR33',\n    'TR47',\n    'TR56',\n    'TR57',\n    'TR58',\n    'TR59',\n    'TR60',\n    'TR63',\n    'TR69',\n    'TR70',\n    'TR74',\n    'TR84',\n    'TR87',\n    'TR92',\n    'TR95',\n    'TR99',\n]);\nvar FLING_70 = new Set([\n    'Poison Barb',\n    'Dragon Fang',\n    'Power Anklet',\n    'Power Band',\n    'Power Belt',\n    'Power Bracer',\n    'Power Lens',\n    'Power Weight',\n]);\nvar FLING_60 = new Set([\n    'Adamant Orb',\n    'Damp Rock',\n    'Heat Rock',\n    'Leek',\n    'Lustrous Orb',\n    'Macho Brace',\n    'Rocky Helmet',\n    'Stick',\n    'Utility Umbrella',\n    'Terrain Extender',\n]);\nvar FLING_30 = new Set([\n    'Absorb Bulb',\n    'Black Belt',\n    'Black Sludge',\n    'Black Glasses',\n    'Cell Battery',\n    'Charcoal',\n    'Deep Sea Scale',\n    'Flame Orb',\n    'King\\'s Rock',\n    'Life Orb',\n    'Light Ball',\n    'Light Clay',\n    'Magnet',\n    'Metal Coat',\n    'Miracle Seed',\n    'Mystic Water',\n    'Never-Melt Ice',\n    'Razor Fang',\n    'Scope Lens',\n    'Soul Dew',\n    'Spell Tag',\n    'Sweet Apple',\n    'Tart Apple',\n    'Throat Spray',\n    'Toxic Orb',\n    'Twisted Spoon',\n    'Dragon Scale',\n    'Energy Powder',\n    'Fire Stone',\n    'Leaf Stone',\n    'Moon Stone',\n    'Sun Stone',\n    'Thunder Stone',\n    'Up-Grade',\n    'Water Stone',\n    'Berry Juice',\n    'Black Sludge',\n    'Prism Scale',\n    'Ice Stone',\n    'Gold Bottle Cap',\n    'Luminous Moss',\n    'Eject Button',\n    'Snowball',\n    'Bottle Cap',\n]);\nvar FLING_10 = new Set([\n    'Air Balloon',\n    'Berry Sweet',\n    'Choice Band',\n    'Choice Scarf',\n    'Choice Specs',\n    'Clover Sweet',\n    'Destiny Knot',\n    'Electric Seed',\n    'Expert Belt',\n    'Flower Sweet',\n    'Focus Band',\n    'Focus Sash',\n    'Full Incense',\n    'Grassy Seed',\n    'Lagging Tail',\n    'Lax Incense',\n    'Leftovers',\n    'Love Sweet',\n    'Mental Herb',\n    'Metal Powder',\n    'Mint Berry',\n    'Miracle Berry',\n    'Misty Seed',\n    'Muscle Band',\n    'Power Herb',\n    'Psychic Seed',\n    'Odd Incense',\n    'Quick Powder',\n    'Reaper Cloth',\n    'Red Card',\n    'Ribbon Sweet',\n    'Ring Target',\n    'Rock Incense',\n    'Rose Incense',\n    'Sea Incense',\n    'Shed Shell',\n    'Silk Scarf',\n    'Silver Powder',\n    'Smooth Rock',\n    'Soft Sand',\n    'Soothe Bell',\n    'Star Sweet',\n    'Strawberry Sweet',\n    'Wave Incense',\n    'White Herb',\n    'Wide Lens',\n    'Wise Glasses',\n    'Zoom Lens',\n    'Silver Powder',\n    'Power Herb',\n    'TR00',\n    'TR07',\n    'TR12',\n    'TR13',\n    'TR14',\n    'TR17',\n    'TR20',\n    'TR21',\n    'TR23',\n    'TR26',\n    'TR27',\n    'TR29',\n    'TR30',\n    'TR37',\n    'TR38',\n    'TR40',\n    'TR44',\n    'TR46',\n    'TR48',\n    'TR49',\n    'TR51',\n    'TR52',\n    'TR54',\n    'TR68',\n    'TR76',\n    'TR77',\n    'TR79',\n    'TR80',\n    'TR83',\n    'TR85',\n    'TR88',\n    'TR91',\n]);\nfunction getFlingPower(item) {\n    if (!item)\n        return 0;\n    if (['Iron Ball', 'TR43', 'TR71'].includes(item))\n        return 130;\n    if (FLING_120.has(item))\n        return 85;\n    if (['TR03', 'TR06', 'TR09', 'TR15', 'TR89'].includes(item))\n        return 110;\n    if (FLING_100.has(item))\n        return 100;\n    if (['TR36', 'TR78', 'TR81', 'TR94'].includes(item))\n        return 95;\n    if (item.includes('Plate') || FLING_90.has(item))\n        return 90;\n    if (FLING_85.has(item))\n        return 85;\n    if (FLING_80.has(item))\n        return 80;\n    if (FLING_70.has(item))\n        return 70;\n    if (FLING_60.has(item))\n        return 60;\n    if (['Eject Pack', 'Sharp Beak', 'Dubious Disc'].includes(item))\n        return 50;\n    if (['Icy Rock', 'Eviolite', 'Lucky Punch'].includes(item))\n        return 40;\n    if (FLING_30.has(item))\n        return 30;\n    if (item === 'TR82')\n        return 20;\n    if (item.includes('Berry') || FLING_10.has(item))\n        return 10;\n    return 0;\n}\nexports.getFlingPower = getFlingPower;\nfunction getNaturalGift(gen, item) {\n    var _a;\n    var gift = (_a = gen.items.get((0, util_1.toID)(item))) === null || _a === void 0 ? void 0 : _a.naturalGift;\n    return gift ? { t: gift.type, p: gift.basePower } : { t: 'Normal', p: 1 };\n}\nexports.getNaturalGift = getNaturalGift;\nfunction getTechnoBlast(item) {\n    switch (item) {\n        case 'Burn Drive':\n            return 'Fire';\n        case 'Chill Drive':\n            return 'Ice';\n        case 'Douse Drive':\n            return 'Water';\n        case 'Shock Drive':\n            return 'Electric';\n        default:\n            return undefined;\n    }\n}\nexports.getTechnoBlast = getTechnoBlast;\nfunction getMultiAttack(item) {\n    if (item.includes('Memory')) {\n        return item.substring(0, item.indexOf(' '));\n    }\n    return undefined;\n}\nexports.getMultiAttack = getMultiAttack;\n//# sourceMappingURL=items.js.map\n\n//# sourceURL=webpack:///./calc/dist/items.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen12.js":
/*!**************************************!*\
  !*** ./calc/dist/mechanics/gen12.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexports.__esModule = true;\nexports.calculateRBYGSC = void 0;\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\nfunction calculateRBYGSC(gen, attacker, defender, move, field) {\n    (0, util_1.computeFinalStats)(gen, attacker, defender, field, 'atk', 'def', 'spa', 'spd', 'spe');\n    var desc = {\n        attackerName: attacker.name,\n        moveName: move.name,\n        defenderName: defender.name\n    };\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\n    if (move.category === 'Status') {\n        return result;\n    }\n    if (field.defenderSide.isProtected) {\n        desc.isProtected = true;\n        return result;\n    }\n    if (gen.num === 1) {\n        var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\n        if (fixedDamage) {\n            result.damage = fixedDamage;\n            return result;\n        }\n    }\n    var type1Effectiveness = (0, util_1.getMoveEffectiveness)(gen, move, defender.types[0], field.defenderSide.isForesight);\n    var type2Effectiveness = defender.types[1]\n        ? (0, util_1.getMoveEffectiveness)(gen, move, defender.types[1], field.defenderSide.isForesight)\n        : 1;\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\n    if (typeEffectiveness === 0) {\n        return result;\n    }\n    if (gen.num === 2) {\n        var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\n        if (fixedDamage) {\n            result.damage = fixedDamage;\n            return result;\n        }\n    }\n    if (move.hits > 1) {\n        desc.hits = move.hits;\n    }\n    if (move.named('Flail', 'Reversal')) {\n        move.isCrit = false;\n        var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\n        move.bp = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\n        desc.moveBP = move.bp;\n    }\n    else if (move.named('Present') && !move.bp) {\n        move.bp = 40;\n    }\n    if (move.bp === 0) {\n        return result;\n    }\n    var isPhysical = move.category === 'Physical';\n    var attackStat = isPhysical ? 'atk' : 'spa';\n    var defenseStat = isPhysical ? 'def' : 'spd';\n    var at = attacker.stats[attackStat];\n    var df = defender.stats[defenseStat];\n    var ignoreMods = move.isCrit &&\n        (gen.num === 1 ||\n            (gen.num === 2 && attacker.boosts[attackStat] <= defender.boosts[defenseStat]));\n    var lv = attacker.level;\n    if (ignoreMods) {\n        at = attacker.rawStats[attackStat];\n        df = defender.rawStats[defenseStat];\n        if (gen.num === 1) {\n            lv *= 2;\n            desc.isCritical = true;\n        }\n    }\n    else {\n        if (attacker.boosts[attackStat] !== 0)\n            desc.attackBoost = attacker.boosts[attackStat];\n        if (defender.boosts[defenseStat] !== 0)\n            desc.defenseBoost = defender.boosts[defenseStat];\n        if (isPhysical && attacker.hasStatus('brn')) {\n            at = Math.floor(at / 2);\n            desc.isBurned = true;\n        }\n    }\n    if (move.named('Explosion', 'Self-Destruct')) {\n        df = Math.floor(df / 2);\n    }\n    if (!ignoreMods) {\n        if (isPhysical && field.defenderSide.isReflect) {\n            df *= 2;\n            desc.isReflect = true;\n        }\n        else if (!isPhysical && field.defenderSide.isLightScreen) {\n            df *= 2;\n            desc.isLightScreen = true;\n        }\n    }\n    if ((attacker.named('Pikachu') && attacker.hasItem('Light Ball') && !isPhysical) ||\n        (attacker.named('Cubone', 'Marowak') && attacker.hasItem('Thick Club') && isPhysical)) {\n        at *= 2;\n        desc.attackerItem = attacker.item;\n    }\n    if (at > 255 || df > 255) {\n        at = Math.floor(at / 4) % 256;\n        df = Math.floor(df / 4) % 256;\n    }\n    if (move.named('Present')) {\n        var lookup = {\n            Normal: 0, Fighting: 1, Flying: 2, Poison: 3, Ground: 4, Rock: 5, Bug: 7,\n            Ghost: 8, Steel: 9, '???': 19, Fire: 20, Water: 21, Grass: 22, Electric: 23,\n            Psychic: 24, Ice: 25, Dragon: 26, Dark: 27\n        };\n        at = 10;\n        df = Math.max(lookup[attacker.types[1] ? attacker.types[1] : attacker.types[0]], 1);\n        lv = Math.max(lookup[defender.types[1] ? defender.types[1] : defender.types[0]], 1);\n    }\n    if (defender.named('Ditto') && defender.hasItem('Metal Powder')) {\n        df = Math.floor(df * 1.5);\n        desc.defenderItem = defender.item;\n    }\n    var baseDamage = Math.floor(Math.floor((Math.floor((2 * lv) / 5 + 2) * Math.max(1, at) * move.bp) / Math.max(1, df)) / 50);\n    if (gen.num === 2 && move.isCrit) {\n        baseDamage *= 2;\n        desc.isCritical = true;\n    }\n    if (move.named('Pursuit') && field.defenderSide.isSwitching === 'out') {\n        baseDamage = Math.floor(baseDamage * 2);\n        desc.isSwitching = 'out';\n    }\n    var itemBoostType = attacker.hasItem('Dragon Fang')\n        ? undefined\n        : (0, items_1.getItemBoostType)(attacker.hasItem('Dragon Scale') ? 'Dragon Fang' : attacker.item);\n    if (move.hasType(itemBoostType)) {\n        baseDamage = Math.floor(baseDamage * 1.1);\n        desc.attackerItem = attacker.item;\n    }\n    baseDamage = Math.min(997, baseDamage) + 2;\n    if ((field.hasWeather('Sun') && move.hasType('Fire')) ||\n        (field.hasWeather('Rain') && move.hasType('Water'))) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n        desc.weather = field.weather;\n    }\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\n        (field.hasWeather('Rain') && (move.hasType('Fire') || move.named('Solar Beam')))) {\n        baseDamage = Math.floor(baseDamage / 2);\n        desc.weather = field.weather;\n    }\n    if (move.hasType.apply(move, __spreadArray([], __read(attacker.types), false))) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n    }\n    if (gen.num === 1) {\n        baseDamage = Math.floor(baseDamage * type1Effectiveness);\n        baseDamage = Math.floor(baseDamage * type2Effectiveness);\n    }\n    else {\n        baseDamage = Math.floor(baseDamage * typeEffectiveness);\n    }\n    if (move.named('Flail', 'Reversal')) {\n        result.damage = baseDamage;\n        return result;\n    }\n    result.damage = [];\n    for (var i = 217; i <= 255; i++) {\n        if (gen.num === 2) {\n            result.damage[i - 217] = Math.max(1, Math.floor((baseDamage * i) / 255));\n        }\n        else {\n            if (baseDamage === 1) {\n                result.damage[i - 217] = 1;\n            }\n            else {\n                result.damage[i - 217] = Math.floor((baseDamage * i) / 255);\n            }\n        }\n    }\n    return result;\n}\nexports.calculateRBYGSC = calculateRBYGSC;\n//# sourceMappingURL=gen12.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen12.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen3.js":
/*!*************************************!*\
  !*** ./calc/dist/mechanics/gen3.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexports.__esModule = true;\nexports.calculateADV = void 0;\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\nfunction calculateADV(gen, attacker, defender, move, field) {\n    (0, util_1.checkAirLock)(attacker, field);\n    (0, util_1.checkAirLock)(defender, field);\n    (0, util_1.checkForecast)(attacker, field.weather);\n    (0, util_1.checkForecast)(defender, field.weather);\n    (0, util_1.checkIntimidate)(gen, attacker, defender);\n    (0, util_1.checkIntimidate)(gen, defender, attacker);\n    attacker.stats.spe = (0, util_1.getFinalSpeed)(gen, attacker, field, field.attackerSide);\n    defender.stats.spe = (0, util_1.getFinalSpeed)(gen, defender, field, field.defenderSide);\n    var desc = {\n        attackerName: attacker.name,\n        moveName: move.name,\n        defenderName: defender.name\n    };\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\n    if (move.category === 'Status' && !move.named('Nature Power')) {\n        return result;\n    }\n    if (field.defenderSide.isProtected) {\n        desc.isProtected = true;\n        return result;\n    }\n    if (move.named('Weather Ball')) {\n        move.type =\n            field.hasWeather('Sun') ? 'Fire'\n                : field.hasWeather('Rain') ? 'Water'\n                    : field.hasWeather('Sand') ? 'Rock'\n                        : field.hasWeather('Hail') ? 'Ice'\n                            : 'Normal';\n        move.category = move.type === 'Rock' ? 'Physical' : 'Special';\n        desc.weather = field.weather;\n        desc.moveType = move.type;\n        desc.moveBP = move.bp;\n    }\n    var type1Effectiveness = (0, util_1.getMoveEffectiveness)(gen, move, defender.types[0], field.defenderSide.isForesight);\n    var type2Effectiveness = defender.types[1]\n        ? (0, util_1.getMoveEffectiveness)(gen, move, defender.types[1], field.defenderSide.isForesight)\n        : 1;\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\n    if (typeEffectiveness === 0) {\n        return result;\n    }\n    if ((defender.hasAbility('Flash Fire') && move.hasType('Fire')) ||\n        (defender.hasAbility('Levitate') && move.hasType('Ground')) ||\n        (defender.hasAbility('Volt Absorb') && move.hasType('Electric')) ||\n        (defender.hasAbility('Water Absorb') && move.hasType('Water')) ||\n        (defender.hasAbility('Wonder Guard') && !move.hasType('???') && typeEffectiveness <= 1) ||\n        (defender.hasAbility('Soundproof') && move.flags.sound)) {\n        desc.defenderAbility = defender.ability;\n        return result;\n    }\n    desc.HPEVs = \"\".concat(defender.evs.hp, \" HP\");\n    var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\n    if (fixedDamage) {\n        result.damage = fixedDamage;\n        return result;\n    }\n    if (move.hits > 1) {\n        desc.hits = move.hits;\n    }\n    var bp = move.bp;\n    switch (move.name) {\n        case 'Flail':\n        case 'Reversal':\n            var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\n            bp = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\n            desc.moveBP = bp;\n            break;\n        case 'Eruption':\n        case 'Water Spout':\n            bp = Math.max(1, Math.floor((150 * attacker.curHP()) / attacker.maxHP()));\n            desc.moveBP = bp;\n            break;\n        case 'Low Kick':\n            var w = defender.weightkg;\n            bp = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\n            desc.moveBP = bp;\n            break;\n        case 'Facade':\n            if (attacker.hasStatus('par', 'psn', 'tox', 'brn')) {\n                bp = move.bp * 2;\n                desc.moveBP = bp;\n            }\n            break;\n        case 'Nature Power':\n            move.category = 'Physical';\n            bp = 60;\n            desc.moveName = 'Swift';\n            break;\n        default:\n            bp = move.bp;\n    }\n    if (bp === 0) {\n        return result;\n    }\n    var isPhysical = move.category === 'Physical';\n    var attackStat = isPhysical ? 'atk' : 'spa';\n    desc.attackEVs = (0, util_1.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\n    var defenseStat = isPhysical ? 'def' : 'spd';\n    desc.defenseEVs = (0, util_1.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\n    var at = attacker.rawStats[attackStat];\n    var df = defender.rawStats[defenseStat];\n    if (isPhysical && attacker.hasAbility('Huge Power', 'Pure Power')) {\n        at *= 2;\n        desc.attackerAbility = attacker.ability;\n    }\n    if (!attacker.hasItem('Sea Incense') && move.hasType((0, items_1.getItemBoostType)(attacker.item))) {\n        at = Math.floor(at * 1.1);\n        desc.attackerItem = attacker.item;\n    }\n    else if (attacker.hasItem('Sea Incense') && move.hasType('Water')) {\n        at = Math.floor(at * 1.05);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((isPhysical && attacker.hasItem('Choice Band')) ||\n        (!isPhysical && attacker.hasItem('Soul Dew') && attacker.named('Latios', 'Latias'))) {\n        at = Math.floor(at * 1.5);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((!isPhysical && attacker.hasItem('Deep Sea Tooth') && attacker.named('Clamperl')) ||\n        (!isPhysical && attacker.hasItem('Light Ball') && attacker.named('Pikachu')) ||\n        (isPhysical && attacker.hasItem('Thick Club') && attacker.named('Cubone', 'Marowak'))) {\n        at *= 2;\n        desc.attackerItem = attacker.item;\n    }\n    if (!isPhysical && defender.hasItem('Soul Dew') && defender.named('Latios', 'Latias')) {\n        df = Math.floor(df * 1.5);\n        desc.defenderItem = defender.item;\n    }\n    else if ((!isPhysical && defender.hasItem('Deep Sea Scale') && defender.named('Clamperl')) ||\n        (isPhysical && defender.hasItem('Metal Powder') && defender.named('Ditto'))) {\n        df *= 2;\n        desc.defenderItem = defender.item;\n    }\n    if (defender.hasAbility('Thick Fat') && (move.hasType('Fire', 'Ice'))) {\n        at = Math.floor(at / 2);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (isPhysical && defender.hasAbility('Marvel Scale') && defender.status) {\n        df = Math.floor(df * 1.5);\n        desc.defenderAbility = defender.ability;\n    }\n    if ((isPhysical &&\n        (attacker.hasAbility('Hustle') || (attacker.hasAbility('Guts') && attacker.status))) ||\n        (!isPhysical && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))) {\n        at = Math.floor(at * 1.5);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.curHP() <= attacker.maxHP() / 3 &&\n        ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\n            (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\n            (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\n            (attacker.hasAbility('Swarm') && move.hasType('Bug')))) {\n        bp = Math.floor(bp * 1.5);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (move.named('Explosion', 'Self-Destruct')) {\n        df = Math.floor(df / 2);\n    }\n    var isCritical = move.isCrit && !defender.hasAbility('Battle Armor', 'Shell Armor');\n    var attackBoost = attacker.boosts[attackStat];\n    var defenseBoost = defender.boosts[defenseStat];\n    if (attackBoost > 0 || (!isCritical && attackBoost < 0)) {\n        at = (0, util_1.getModifiedStat)(at, attackBoost);\n        desc.attackBoost = attackBoost;\n    }\n    if (defenseBoost < 0 || (!isCritical && defenseBoost > 0)) {\n        df = (0, util_1.getModifiedStat)(df, defenseBoost);\n        desc.defenseBoost = defenseBoost;\n    }\n    var lv = attacker.level;\n    var baseDamage = Math.floor(Math.floor((Math.floor((2 * lv) / 5 + 2) * at * bp) / df) / 50);\n    if (attacker.hasStatus('brn') && isPhysical && !attacker.hasAbility('Guts')) {\n        baseDamage = Math.floor(baseDamage / 2);\n        desc.isBurned = true;\n    }\n    if (!isCritical) {\n        var screenMultiplier = field.gameType !== 'Singles' ? 2 / 3 : 1 / 2;\n        if (isPhysical && field.defenderSide.isReflect) {\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\n            desc.isReflect = true;\n        }\n        else if (!isPhysical && field.defenderSide.isLightScreen) {\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\n            desc.isLightScreen = true;\n        }\n    }\n    if (move.named('Pursuit') && field.defenderSide.isSwitching === 'out') {\n        baseDamage = Math.floor(baseDamage * 2);\n        desc.isSwitching = 'out';\n    }\n    if (field.gameType !== 'Singles' && move.target === 'allAdjacentFoes') {\n        baseDamage = Math.floor(baseDamage / 2);\n    }\n    if ((field.hasWeather('Sun') && move.hasType('Fire')) ||\n        (field.hasWeather('Rain') && move.hasType('Water'))) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n        desc.weather = field.weather;\n    }\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\n        (field.hasWeather('Rain') && move.hasType('Fire')) ||\n        (move.named('Solar Beam') && field.hasWeather('Rain', 'Sand', 'Hail'))) {\n        baseDamage = Math.floor(baseDamage / 2);\n        desc.weather = field.weather;\n    }\n    if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n        desc.attackerAbility = 'Flash Fire';\n    }\n    baseDamage = (move.category === 'Physical' ? Math.max(1, baseDamage) : baseDamage) + 2;\n    if (isCritical) {\n        baseDamage *= 2;\n        desc.isCritical = true;\n    }\n    if (move.named('Weather Ball') && field.weather) {\n        baseDamage *= 2;\n        desc.moveBP = bp * 2;\n    }\n    if (field.attackerSide.isHelpingHand) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n        desc.isHelpingHand = true;\n    }\n    if (move.hasType.apply(move, __spreadArray([], __read(attacker.types), false))) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n    }\n    baseDamage = Math.floor(baseDamage * typeEffectiveness);\n    result.damage = [];\n    for (var i = 85; i <= 100; i++) {\n        result.damage[i - 85] = Math.max(1, Math.floor((baseDamage * i) / 100));\n    }\n    return result;\n}\nexports.calculateADV = calculateADV;\n//# sourceMappingURL=gen3.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen3.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen4.js":
/*!*************************************!*\
  !*** ./calc/dist/mechanics/gen4.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexports.__esModule = true;\nexports.calculateDPP = void 0;\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\nfunction calculateDPP(gen, attacker, defender, move, field) {\n    (0, util_1.checkAirLock)(attacker, field);\n    (0, util_1.checkAirLock)(defender, field);\n    (0, util_1.checkForecast)(attacker, field.weather);\n    (0, util_1.checkForecast)(defender, field.weather);\n    (0, util_1.checkItem)(attacker);\n    (0, util_1.checkItem)(defender);\n    (0, util_1.checkIntimidate)(gen, attacker, defender);\n    (0, util_1.checkIntimidate)(gen, defender, attacker);\n    (0, util_1.checkDownload)(attacker, defender);\n    (0, util_1.checkDownload)(defender, attacker);\n    attacker.stats.spe = (0, util_1.getFinalSpeed)(gen, attacker, field, field.attackerSide);\n    defender.stats.spe = (0, util_1.getFinalSpeed)(gen, defender, field, field.defenderSide);\n    var desc = {\n        attackerName: attacker.name,\n        moveName: move.name,\n        defenderName: defender.name\n    };\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\n    if (move.category === 'Status' && !move.named('Nature Power')) {\n        return result;\n    }\n    if (field.defenderSide.isProtected && !move.breaksProtect) {\n        desc.isProtected = true;\n        return result;\n    }\n    if (attacker.hasAbility('Mold Breaker')) {\n        defender.ability = '';\n        desc.attackerAbility = attacker.ability;\n    }\n    var isCritical = move.isCrit && !defender.hasAbility('Battle Armor', 'Shell Armor');\n    var basePower = move.bp;\n    if (move.named('Weather Ball')) {\n        if (field.hasWeather('Sun')) {\n            move.type = 'Fire';\n            basePower *= 2;\n        }\n        else if (field.hasWeather('Rain')) {\n            move.type = 'Water';\n            basePower *= 2;\n        }\n        else if (field.hasWeather('Sand')) {\n            move.type = 'Rock';\n            basePower *= 2;\n        }\n        else if (field.hasWeather('Hail')) {\n            move.type = 'Ice';\n            basePower *= 2;\n        }\n        else {\n            move.type = 'Normal';\n        }\n        desc.weather = field.weather;\n        desc.moveType = move.type;\n        desc.moveBP = basePower;\n    }\n    else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {\n        move.type = (0, items_1.getItemBoostType)(attacker.item);\n    }\n    else if (move.named('Natural Gift') && attacker.item && attacker.item.includes('Berry')) {\n        var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\n        move.type = gift.t;\n        move.bp = gift.p;\n        desc.attackerItem = attacker.item;\n        desc.moveBP = move.bp;\n        desc.moveType = move.type;\n    }\n    if (attacker.hasAbility('Normalize')) {\n        move.type = 'Normal';\n        desc.attackerAbility = attacker.ability;\n    }\n    var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\n    var type1Effectiveness = (0, util_1.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity);\n    var type2Effectiveness = defender.types[1]\n        ? (0, util_1.getMoveEffectiveness)(gen, move, defender.types[1], isGhostRevealed, field.isGravity)\n        : 1;\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\n    if (typeEffectiveness === 0 && move.hasType('Ground') && defender.hasItem('Iron Ball')) {\n        if (type1Effectiveness === 0) {\n            type1Effectiveness = 1;\n        }\n        else if (defender.types[1] && type2Effectiveness === 0) {\n            type2Effectiveness = 1;\n        }\n        typeEffectiveness = type1Effectiveness * type2Effectiveness;\n    }\n    if (typeEffectiveness === 0) {\n        return result;\n    }\n    var ignoresWonderGuard = move.hasType('???') || move.named('Fire Fang');\n    if ((!ignoresWonderGuard && defender.hasAbility('Wonder Guard') && typeEffectiveness <= 1) ||\n        (move.hasType('Fire') && defender.hasAbility('Flash Fire')) ||\n        (move.hasType('Water') && defender.hasAbility('Dry Skin', 'Water Absorb')) ||\n        (move.hasType('Electric') && defender.hasAbility('Motor Drive', 'Volt Absorb')) ||\n        (move.hasType('Ground') && !field.isGravity &&\n            !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||\n        (move.flags.sound && defender.hasAbility('Soundproof'))) {\n        desc.defenderAbility = defender.ability;\n        return result;\n    }\n    desc.HPEVs = \"\".concat(defender.evs.hp, \" HP\");\n    var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\n    if (fixedDamage) {\n        result.damage = fixedDamage;\n        return result;\n    }\n    if (move.hits > 1) {\n        desc.hits = move.hits;\n    }\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\n    switch (move.name) {\n        case 'Brine':\n            if (defender.curHP() <= defender.maxHP() / 2) {\n                basePower *= 2;\n                desc.moveBP = basePower;\n            }\n            break;\n        case 'Eruption':\n        case 'Water Spout':\n            basePower = Math.max(1, Math.floor((basePower * attacker.curHP()) / attacker.maxHP()));\n            desc.moveBP = basePower;\n            break;\n        case 'Facade':\n            if (attacker.hasStatus('par', 'psn', 'tox', 'brn')) {\n                basePower = move.bp * 2;\n                desc.moveBP = basePower;\n            }\n            break;\n        case 'Flail':\n        case 'Reversal':\n            var p = Math.floor((64 * attacker.curHP()) / attacker.maxHP());\n            basePower = p <= 1 ? 200 : p <= 5 ? 150 : p <= 12 ? 100 : p <= 21 ? 80 : p <= 42 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Fling':\n            basePower = (0, items_1.getFlingPower)(attacker.item);\n            desc.moveBP = basePower;\n            desc.attackerItem = attacker.item;\n            break;\n        case 'Grass Knot':\n        case 'Low Kick':\n            var w = defender.weightkg;\n            basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Gyro Ball':\n            basePower = Math.min(150, Math.floor((25 * defender.stats.spe) / attacker.stats.spe));\n            desc.moveBP = basePower;\n            break;\n        case 'Payback':\n            if (turnOrder !== 'first') {\n                basePower *= 2;\n                desc.moveBP = basePower;\n            }\n            break;\n        case 'Punishment':\n            basePower = Math.min(200, 60 + 20 * (0, util_1.countBoosts)(gen, defender.boosts));\n            desc.moveBP = basePower;\n            break;\n        case 'Wake-Up Slap':\n            if (defender.hasStatus('slp')) {\n                basePower *= 2;\n                desc.moveBP = basePower;\n            }\n            break;\n        case 'Nature Power':\n            move.category = 'Special';\n            move.secondaries = true;\n            basePower = 80;\n            desc.moveName = 'Tri Attack';\n            break;\n        case 'Crush Grip':\n        case 'Wring Out':\n            basePower = Math.floor((defender.curHP() * 120) / defender.maxHP()) + 1;\n            desc.moveBP = basePower;\n            break;\n        default:\n            basePower = move.bp;\n    }\n    if (basePower === 0) {\n        return result;\n    }\n    if (field.attackerSide.isHelpingHand) {\n        basePower = Math.floor(basePower * 1.5);\n        desc.isHelpingHand = true;\n    }\n    var isPhysical = move.category === 'Physical';\n    if ((attacker.hasItem('Muscle Band') && isPhysical) ||\n        (attacker.hasItem('Wise Glasses') && !isPhysical)) {\n        basePower = Math.floor(basePower * 1.1);\n        desc.attackerItem = attacker.item;\n    }\n    else if (move.hasType((0, items_1.getItemBoostType)(attacker.item)) ||\n        (attacker.hasItem('Adamant Orb') &&\n            attacker.named('Dialga') &&\n            move.hasType('Steel', 'Dragon')) ||\n        (attacker.hasItem('Lustrous Orb') &&\n            attacker.named('Palkia') &&\n            move.hasType('Water', 'Dragon')) ||\n        (attacker.hasItem('Griseous Orb') &&\n            attacker.named('Giratina-Origin') &&\n            move.hasType('Ghost', 'Dragon'))) {\n        basePower = Math.floor(basePower * 1.2);\n        desc.attackerItem = attacker.item;\n    }\n    if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||\n        (attacker.hasAbility('Iron Fist') && move.flags.punch)) {\n        basePower = Math.floor(basePower * 1.2);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if ((attacker.curHP() <= attacker.maxHP() / 3 &&\n        ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\n            (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\n            (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\n            (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||\n        (attacker.hasAbility('Technician') && basePower <= 60)) {\n        basePower = Math.floor(basePower * 1.5);\n        desc.attackerAbility = attacker.ability;\n    }\n    if ((defender.hasAbility('Heatproof') && move.hasType('Fire')) ||\n        (defender.hasAbility('Thick Fat') && (move.hasType('Fire', 'Ice')))) {\n        basePower = Math.floor(basePower * 0.5);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.hasAbility('Dry Skin') && move.hasType('Fire')) {\n        basePower = Math.floor(basePower * 1.25);\n        desc.defenderAbility = defender.ability;\n    }\n    var attackStat = isPhysical ? 'atk' : 'spa';\n    desc.attackEVs = (0, util_1.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\n    var attack;\n    var attackBoost = attacker.boosts[attackStat];\n    var rawAttack = attacker.rawStats[attackStat];\n    if (attackBoost === 0 || (isCritical && attackBoost < 0)) {\n        attack = rawAttack;\n    }\n    else if (defender.hasAbility('Unaware')) {\n        attack = rawAttack;\n        desc.defenderAbility = defender.ability;\n    }\n    else if (attacker.hasAbility('Simple')) {\n        attack = getSimpleModifiedStat(rawAttack, attackBoost);\n        desc.attackerAbility = attacker.ability;\n        desc.attackBoost = attackBoost;\n    }\n    else {\n        attack = (0, util_1.getModifiedStat)(rawAttack, attackBoost);\n        desc.attackBoost = attackBoost;\n    }\n    if (isPhysical && attacker.hasAbility('Pure Power', 'Huge Power')) {\n        attack *= 2;\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (field.hasWeather('Sun') &&\n        (attacker.hasAbility(isPhysical ? 'Flower Gift' : 'Solar Power'))) {\n        attack = Math.floor(attack * 1.5);\n        desc.attackerAbility = attacker.ability;\n        desc.weather = field.weather;\n    }\n    else if (field.attackerSide.isFlowerGift && field.hasWeather('Sun') && isPhysical) {\n        attack = Math.floor(attack * 1.5);\n        desc.weather = field.weather;\n        desc.isFlowerGiftAttacker = true;\n    }\n    else if ((isPhysical &&\n        (attacker.hasAbility('Hustle') || (attacker.hasAbility('Guts') && attacker.status)) ||\n        (!isPhysical && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus')))) {\n        attack = Math.floor(attack * 1.5);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (isPhysical && attacker.hasAbility('Slow Start') && attacker.abilityOn) {\n        attack = Math.floor(attack / 2);\n        desc.attackerAbility = attacker.ability;\n    }\n    if ((isPhysical ? attacker.hasItem('Choice Band') : attacker.hasItem('Choice Specs')) ||\n        (!isPhysical && attacker.hasItem('Soul Dew') && attacker.named('Latios', 'Latias'))) {\n        attack = Math.floor(attack * 1.5);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((attacker.hasItem('Light Ball') && attacker.named('Pikachu')) ||\n        (attacker.hasItem('Thick Club') && attacker.named('Cubone', 'Marowak') && isPhysical) ||\n        (attacker.hasItem('Deep Sea Tooth') && attacker.named('Clamperl') && !isPhysical)) {\n        attack *= 2;\n        desc.attackerItem = attacker.item;\n    }\n    var defenseStat = isPhysical ? 'def' : 'spd';\n    desc.defenseEVs = (0, util_1.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\n    var defense;\n    var defenseBoost = defender.boosts[defenseStat];\n    var rawDefense = defender.rawStats[defenseStat];\n    if (defenseBoost === 0 || (isCritical && defenseBoost > 0)) {\n        defense = rawDefense;\n    }\n    else if (attacker.hasAbility('Unaware')) {\n        defense = rawDefense;\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (defender.hasAbility('Simple')) {\n        defense = getSimpleModifiedStat(rawDefense, defenseBoost);\n        desc.defenderAbility = defender.ability;\n        desc.defenseBoost = defenseBoost;\n    }\n    else {\n        defense = (0, util_1.getModifiedStat)(rawDefense, defenseBoost);\n        desc.defenseBoost = defenseBoost;\n    }\n    if (defender.hasAbility('Marvel Scale') && defender.status && isPhysical) {\n        defense = Math.floor(defense * 1.5);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.hasAbility('Flower Gift') && field.hasWeather('Sun') && !isPhysical) {\n        defense = Math.floor(defense * 1.5);\n        desc.defenderAbility = defender.ability;\n        desc.weather = field.weather;\n    }\n    else if (field.defenderSide.isFlowerGift && field.hasWeather('Sun') && !isPhysical) {\n        defense = Math.floor(defense * 1.5);\n        desc.weather = field.weather;\n        desc.isFlowerGiftDefender = true;\n    }\n    if (defender.hasItem('Soul Dew') && defender.named('Latios', 'Latias') && !isPhysical) {\n        defense = Math.floor(defense * 1.5);\n        desc.defenderItem = defender.item;\n    }\n    else if ((defender.hasItem('Deep Sea Scale') && defender.named('Clamperl') && !isPhysical) ||\n        (defender.hasItem('Metal Powder') && defender.named('Ditto') && isPhysical)) {\n        defense *= 2;\n        desc.defenderItem = defender.item;\n    }\n    if (field.hasWeather('Sand') && defender.hasType('Rock') && !isPhysical) {\n        defense = Math.floor(defense * 1.5);\n        desc.weather = field.weather;\n    }\n    if (move.named('Explosion') || move.named('Self-Destruct')) {\n        defense = Math.floor(defense * 0.5);\n    }\n    if (defense < 1) {\n        defense = 1;\n    }\n    var baseDamage = Math.floor(Math.floor((Math.floor((2 * attacker.level) / 5 + 2) * basePower * attack) / 50) / defense);\n    if (attacker.hasStatus('brn') && isPhysical && !attacker.hasAbility('Guts')) {\n        baseDamage = Math.floor(baseDamage * 0.5);\n        desc.isBurned = true;\n    }\n    if (!isCritical) {\n        var screenMultiplier = field.gameType !== 'Singles' ? 2 / 3 : 1 / 2;\n        if (isPhysical && field.defenderSide.isReflect) {\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\n            desc.isReflect = true;\n        }\n        else if (!isPhysical && field.defenderSide.isLightScreen) {\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\n            desc.isLightScreen = true;\n        }\n    }\n    if (field.gameType !== 'Singles' &&\n        ['allAdjacent', 'allAdjacentFoes'].includes(move.target)) {\n        baseDamage = Math.floor((baseDamage * 3) / 4);\n    }\n    if ((field.hasWeather('Sun') && move.hasType('Fire')) ||\n        (field.hasWeather('Rain') && move.hasType('Water'))) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n        desc.weather = field.weather;\n    }\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\n        (field.hasWeather('Rain') && move.hasType('Fire')) ||\n        (move.named('Solar Beam') && field.hasWeather('Rain', 'Sand', 'Hail'))) {\n        baseDamage = Math.floor(baseDamage * 0.5);\n        desc.weather = field.weather;\n    }\n    if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\n        baseDamage = Math.floor(baseDamage * 1.5);\n        desc.attackerAbility = 'Flash Fire';\n    }\n    baseDamage += 2;\n    if (isCritical) {\n        if (attacker.hasAbility('Sniper')) {\n            baseDamage *= 3;\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            baseDamage *= 2;\n        }\n        desc.isCritical = isCritical;\n    }\n    if (attacker.hasItem('Life Orb')) {\n        baseDamage = Math.floor(baseDamage * 1.3);\n        desc.attackerItem = attacker.item;\n    }\n    if (move.named('Pursuit') && field.defenderSide.isSwitching === 'out') {\n        if (attacker.hasAbility('Technician')) {\n            baseDamage = Math.floor(baseDamage * 1);\n        }\n        else {\n            baseDamage = Math.floor(baseDamage * 2);\n            desc.isSwitching = 'out';\n        }\n    }\n    var stabMod = 1;\n    if (move.hasType.apply(move, __spreadArray([], __read(attacker.types), false))) {\n        if (attacker.hasAbility('Adaptability')) {\n            stabMod = 2;\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            stabMod = 1.5;\n        }\n    }\n    var filterMod = 1;\n    if (defender.hasAbility('Filter', 'Solid Rock') && typeEffectiveness > 1) {\n        filterMod = 0.75;\n        desc.defenderAbility = defender.ability;\n    }\n    var ebeltMod = 1;\n    if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1) {\n        ebeltMod = 1.2;\n        desc.attackerItem = attacker.item;\n    }\n    var tintedMod = 1;\n    if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {\n        tintedMod = 2;\n        desc.attackerAbility = attacker.ability;\n    }\n    var berryMod = 1;\n    if (move.hasType((0, items_1.getBerryResistType)(defender.item)) &&\n        (typeEffectiveness > 1 || move.hasType('Normal'))) {\n        berryMod = 0.5;\n        desc.defenderItem = defender.item;\n    }\n    var damage = [];\n    for (var i = 0; i < 16; i++) {\n        damage[i] = Math.floor((baseDamage * (85 + i)) / 100);\n        damage[i] = Math.floor(damage[i] * stabMod);\n        damage[i] = Math.floor(damage[i] * type1Effectiveness);\n        damage[i] = Math.floor(damage[i] * type2Effectiveness);\n        damage[i] = Math.floor(damage[i] * filterMod);\n        damage[i] = Math.floor(damage[i] * ebeltMod);\n        damage[i] = Math.floor(damage[i] * tintedMod);\n        damage[i] = Math.floor(damage[i] * berryMod);\n        damage[i] = Math.max(1, damage[i]);\n    }\n    result.damage = damage;\n    return result;\n}\nexports.calculateDPP = calculateDPP;\nfunction getSimpleModifiedStat(stat, mod) {\n    var simpleMod = Math.min(6, Math.max(-6, mod * 2));\n    return simpleMod > 0\n        ? Math.floor((stat * (2 + simpleMod)) / 2)\n        : simpleMod < 0 ? Math.floor((stat * 2) / (2 - simpleMod)) : stat;\n}\n//# sourceMappingURL=gen4.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen4.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen56.js":
/*!**************************************!*\
  !*** ./calc/dist/mechanics/gen56.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.calculateBWXY = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\nvar util_2 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\nfunction calculateBWXY(gen, attacker, defender, move, field) {\n    var _a;\n    (0, util_2.checkAirLock)(attacker, field);\n    (0, util_2.checkAirLock)(defender, field);\n    (0, util_2.checkForecast)(attacker, field.weather);\n    (0, util_2.checkForecast)(defender, field.weather);\n    (0, util_2.checkItem)(attacker, field.isMagicRoom);\n    (0, util_2.checkItem)(defender, field.isMagicRoom);\n    (0, util_2.checkWonderRoom)(attacker, field.isWonderRoom);\n    (0, util_2.checkWonderRoom)(defender, field.isWonderRoom);\n    (0, util_2.checkSeedBoost)(attacker, field);\n    (0, util_2.checkSeedBoost)(defender, field);\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'def', 'spd', 'spe');\n    (0, util_2.checkIntimidate)(gen, attacker, defender);\n    (0, util_2.checkIntimidate)(gen, defender, attacker);\n    (0, util_2.checkDownload)(attacker, defender, field.isWonderRoom);\n    (0, util_2.checkDownload)(defender, attacker, field.isWonderRoom);\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'atk', 'spa');\n    (0, util_2.checkInfiltrator)(attacker, field.defenderSide);\n    (0, util_2.checkInfiltrator)(defender, field.attackerSide);\n    var desc = {\n        attackerName: attacker.name,\n        moveName: move.name,\n        defenderName: defender.name,\n        isWonderRoom: field.isWonderRoom\n    };\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\n    if (move.category === 'Status' && !move.named('Nature Power')) {\n        return result;\n    }\n    if (field.defenderSide.isProtected && !move.breaksProtect) {\n        desc.isProtected = true;\n        return result;\n    }\n    if (attacker.hasAbility('Mold Breaker', 'Teravolt', 'Turboblaze')) {\n        defender.ability = '';\n        desc.attackerAbility = attacker.ability;\n    }\n    var isCritical = move.isCrit && !defender.hasAbility('Battle Armor', 'Shell Armor') && move.timesUsed === 1;\n    if (move.named('Weather Ball')) {\n        move.type =\n            field.hasWeather('Sun', 'Harsh Sunshine') ? 'Fire'\n                : field.hasWeather('Rain', 'Heavy Rain') ? 'Water'\n                    : field.hasWeather('Sand') ? 'Rock'\n                        : field.hasWeather('Hail') ? 'Ice'\n                            : 'Normal';\n        desc.weather = field.weather;\n        desc.moveType = move.type;\n    }\n    else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {\n        move.type = (0, items_1.getItemBoostType)(attacker.item);\n    }\n    else if (move.named('Techno Blast') && attacker.item && attacker.item.includes('Drive')) {\n        move.type = (0, items_1.getTechnoBlast)(attacker.item);\n    }\n    else if (move.named('Natural Gift') && attacker.item && attacker.item.includes('Berry')) {\n        var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\n        move.type = gift.t;\n        move.bp = gift.p;\n        desc.attackerItem = attacker.item;\n        desc.moveBP = move.bp;\n        desc.moveType = move.type;\n    }\n    else if (move.named('Nature Power')) {\n        if (gen.num === 5) {\n            move.type = 'Ground';\n        }\n        else {\n            move.type =\n                field.hasTerrain('Electric') ? 'Electric'\n                    : field.hasTerrain('Grassy') ? 'Grass'\n                        : field.hasTerrain('Misty') ? 'Fairy'\n                            : 'Normal';\n        }\n    }\n    var isAerilate = false;\n    var isPixilate = false;\n    var isRefrigerate = false;\n    var isNormalize = false;\n    var noTypeChange = move.named('Judgment', 'Nature Power', 'Techo Blast', 'Natural Gift', 'Weather Ball');\n    if (!move.isZ && !noTypeChange) {\n        var normal = move.hasType('Normal');\n        if ((isAerilate = attacker.hasAbility('Aerilate') && normal)) {\n            move.type = 'Flying';\n        }\n        else if ((isPixilate = attacker.hasAbility('Pixilate') && normal)) {\n            move.type = 'Fairy';\n        }\n        else if ((isRefrigerate = attacker.hasAbility('Refrigerate') && normal)) {\n            move.type = 'Ice';\n        }\n        else if ((isNormalize = attacker.hasAbility('Normalize'))) {\n            move.type = 'Normal';\n        }\n        if (isPixilate || isRefrigerate || isAerilate || isNormalize) {\n            desc.attackerAbility = attacker.ability;\n        }\n    }\n    if (attacker.hasAbility('Gale Wings') && move.hasType('Flying')) {\n        move.priority = 1;\n        desc.attackerAbility = attacker.ability;\n    }\n    var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\n    var type1Effectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity);\n    var type2Effectiveness = defender.types[1]\n        ? (0, util_2.getMoveEffectiveness)(gen, move, defender.types[1], isGhostRevealed, field.isGravity)\n        : 1;\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\n    var resistedKnockOffDamage = !defender.item ||\n        (defender.named('Giratina-Origin') && defender.hasItem('Griseous Orb')) ||\n        (defender.name.includes('Arceus') && defender.item.includes('Plate')) ||\n        (defender.name.includes('Genesect') && defender.item.includes('Drive')) ||\n        (defender.named('Groudon', 'Groudon-Primal') && defender.hasItem('Red Orb')) ||\n        (defender.named('Kyogre', 'Kyogre-Primal') && defender.hasItem('Blue Orb'));\n    if (!resistedKnockOffDamage && defender.item) {\n        var item = gen.items.get((0, util_1.toID)(defender.item));\n        resistedKnockOffDamage = !!(item.megaEvolves && defender.name.includes(item.megaEvolves));\n    }\n    if (typeEffectiveness === 0 && move.named('Thousand Arrows')) {\n        typeEffectiveness = 1;\n    }\n    else if (typeEffectiveness === 0 && move.hasType('Ground') &&\n        defender.hasItem('Iron Ball') && !defender.hasAbility('Klutz')) {\n        typeEffectiveness = 1;\n    }\n    else if (typeEffectiveness === 0 && defender.hasItem('Ring Target')) {\n        var effectiveness = gen.types.get((0, util_1.toID)(move.type)).effectiveness;\n        if (effectiveness[defender.types[0]] === 0) {\n            typeEffectiveness = type2Effectiveness;\n        }\n        else if (defender.types[1] && effectiveness[defender.types[1]] === 0) {\n            typeEffectiveness = type1Effectiveness;\n        }\n    }\n    if (typeEffectiveness === 0) {\n        return result;\n    }\n    if ((move.named('Sky Drop') &&\n        (defender.hasType('Flying') || defender.weightkg >= 200 || field.isGravity)) ||\n        (move.named('Synchronoise') && !defender.hasType(attacker.types[0]) &&\n            (!attacker.types[1] || !defender.hasType(attacker.types[1]))) ||\n        (move.named('Dream Eater') && !defender.hasStatus('slp'))) {\n        return result;\n    }\n    if ((field.hasWeather('Harsh Sunshine') && move.hasType('Water')) ||\n        (field.hasWeather('Heavy Rain') && move.hasType('Fire'))) {\n        desc.weather = field.weather;\n        return result;\n    }\n    if (field.hasWeather('Strong Winds') && defender.hasType('Flying') &&\n        gen.types.get((0, util_1.toID)(move.type)).effectiveness['Flying'] > 1) {\n        typeEffectiveness /= 2;\n        desc.weather = field.weather;\n    }\n    if ((defender.hasAbility('Wonder Guard') && typeEffectiveness <= 1) ||\n        (move.hasType('Grass') && defender.hasAbility('Sap Sipper')) ||\n        (move.hasType('Fire') && defender.hasAbility('Flash Fire')) ||\n        (move.hasType('Water') && defender.hasAbility('Dry Skin', 'Storm Drain', 'Water Absorb')) ||\n        (move.hasType('Electric') &&\n            defender.hasAbility('Lightning Rod', 'Motor Drive', 'Volt Absorb')) ||\n        (move.hasType('Ground') &&\n            !field.isGravity && !move.named('Thousand Arrows') &&\n            !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||\n        (move.flags.bullet && defender.hasAbility('Bulletproof')) ||\n        (move.flags.sound && defender.hasAbility('Soundproof'))) {\n        desc.defenderAbility = defender.ability;\n        return result;\n    }\n    if (move.hasType('Ground') && !move.named('Thousand Arrows') &&\n        !field.isGravity && defender.hasItem('Air Balloon')) {\n        desc.defenderItem = defender.item;\n        return result;\n    }\n    if (move.priority > 0 && field.hasTerrain('Psychic') && (0, util_2.isGrounded)(defender, field)) {\n        desc.terrain = field.terrain;\n        return result;\n    }\n    desc.HPEVs = \"\".concat(defender.evs.hp, \" HP\");\n    var fixedDamage = (0, util_2.handleFixedDamageMoves)(attacker, move, defender);\n    if (fixedDamage) {\n        if (attacker.hasAbility('Parental Bond')) {\n            result.damage = [fixedDamage, fixedDamage];\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            result.damage = fixedDamage;\n        }\n        return result;\n    }\n    if (move.named('Final Gambit')) {\n        result.damage = attacker.curHP();\n        return result;\n    }\n    if (move.hits > 1) {\n        desc.hits = move.hits;\n    }\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\n    var basePower;\n    switch (move.name) {\n        case 'Payback':\n            basePower = move.bp * (turnOrder === 'last' ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Pursuit':\n            var switching = field.defenderSide.isSwitching === 'out';\n            basePower = move.bp * (switching ? 2 : 1);\n            if (switching)\n                desc.isSwitching = 'out';\n            desc.moveBP = basePower;\n            break;\n        case 'Electro Ball':\n            if (defender.stats.spe === 0)\n                defender.stats.spe = 1;\n            var r = Math.floor(attacker.stats.spe / defender.stats.spe);\n            basePower = r >= 4 ? 150 : r >= 3 ? 120 : r >= 2 ? 80 : r >= 1 ? 60 : 40;\n            desc.moveBP = basePower;\n            break;\n        case 'Gyro Ball':\n            if (attacker.stats.spe === 0)\n                attacker.stats.spe = 1;\n            basePower = Math.min(150, Math.floor((25 * defender.stats.spe) / attacker.stats.spe) + 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Punishment':\n            basePower = Math.min(200, 60 + 20 * (0, util_2.countBoosts)(gen, defender.boosts));\n            desc.moveBP = basePower;\n            break;\n        case 'Low Kick':\n        case 'Grass Knot':\n            var w = defender.weightkg * (0, util_2.getWeightFactor)(defender);\n            basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Hex':\n            basePower = move.bp * (defender.status ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Heavy Slam':\n        case 'Heat Crash':\n            var wr = (attacker.weightkg * (0, util_2.getWeightFactor)(attacker)) /\n                (defender.weightkg * (0, util_2.getWeightFactor)(defender));\n            basePower = wr >= 5 ? 120 : wr >= 4 ? 100 : wr >= 3 ? 80 : wr >= 2 ? 60 : 40;\n            desc.moveBP = basePower;\n            break;\n        case 'Stored Power':\n        case 'Power Trip':\n            basePower = 20 + 20 * (0, util_2.countBoosts)(gen, attacker.boosts);\n            desc.moveBP = basePower;\n            break;\n        case 'Acrobatics':\n            basePower = move.bp * (attacker.hasItem('Flying Gem') || !attacker.item ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Assurance':\n            basePower = move.bp * (defender.hasAbility('Parental Bond (Child)') ? 2 : 1);\n            break;\n        case 'Wake-Up Slap':\n            basePower = move.bp * (defender.hasStatus('slp') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Smelling Salts':\n            basePower = move.bp * (defender.hasStatus('par') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Weather Ball':\n            basePower = move.bp * (field.weather && !field.hasWeather('Strong Winds') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Fling':\n            basePower = (0, items_1.getFlingPower)(attacker.item);\n            desc.moveBP = basePower;\n            desc.attackerItem = attacker.item;\n            break;\n        case 'Eruption':\n        case 'Water Spout':\n            basePower = Math.max(1, Math.floor((150 * attacker.curHP()) / attacker.maxHP()));\n            desc.moveBP = basePower;\n            break;\n        case 'Flail':\n        case 'Reversal':\n            var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\n            basePower = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Nature Power':\n            if (gen.num === 5) {\n                move.category = 'Physical';\n                move.target = 'allAdjacent';\n                basePower = 100;\n                desc.moveName = 'Earthquake';\n            }\n            else {\n                move.category = 'Special';\n                move.secondaries = true;\n                switch (field.terrain) {\n                    case 'Electric':\n                        basePower = 90;\n                        desc.moveName = 'Thunderbolt';\n                        break;\n                    case 'Grassy':\n                        basePower = 90;\n                        desc.moveName = 'Energy Ball';\n                        break;\n                    case 'Misty':\n                        basePower = 95;\n                        desc.moveName = 'Moonblast';\n                        break;\n                    default:\n                        basePower = 80;\n                        desc.moveName = 'Tri Attack';\n                }\n            }\n            break;\n        case 'Triple Kick':\n            basePower = move.hits === 2 ? 15 : move.hits === 3 ? 30 : 10;\n            desc.moveBP = basePower;\n            break;\n        case 'Crush Grip':\n        case 'Wring Out':\n            basePower = 100 * Math.floor((defender.curHP() * 4096) / defender.maxHP());\n            basePower = Math.floor(Math.floor((120 * basePower + 2048 - 1) / 4096) / 100) || 1;\n            desc.moveBP = basePower;\n            break;\n        default:\n            basePower = move.bp;\n    }\n    if (basePower === 0) {\n        return result;\n    }\n    var bpMods = [];\n    if ((attacker.hasAbility('Technician') && basePower <= 60) ||\n        (attacker.hasAbility('Flare Boost') &&\n            attacker.hasStatus('brn') && move.category === 'Special') ||\n        (attacker.hasAbility('Toxic Boost') &&\n            attacker.hasStatus('psn', 'tox') && move.category === 'Physical')) {\n        bpMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Analytic') && turnOrder !== 'first') {\n        bpMods.push(5325);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Sand Force') &&\n        field.hasWeather('Sand') &&\n        move.hasType('Rock', 'Ground', 'Steel')) {\n        bpMods.push(5325);\n        desc.attackerAbility = attacker.ability;\n        desc.weather = field.weather;\n    }\n    else if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||\n        (attacker.hasAbility('Iron Fist') && move.flags.punch)) {\n        bpMods.push(4915);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (defender.hasAbility('Heatproof') && move.hasType('Fire')) {\n        bpMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.hasAbility('Dry Skin') && move.hasType('Fire')) {\n        bpMods.push(5120);\n        desc.defenderAbility = defender.ability;\n    }\n    if (attacker.hasAbility('Sheer Force') && move.secondaries) {\n        bpMods.push(5325);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (attacker.hasAbility('Rivalry') && ![attacker.gender, defender.gender].includes('N')) {\n        if (attacker.gender === defender.gender) {\n            bpMods.push(5120);\n            desc.rivalry = 'buffed';\n        }\n        else {\n            bpMods.push(3072);\n            desc.rivalry = 'nerfed';\n        }\n        desc.attackerAbility = attacker.ability;\n    }\n    if (attacker.item && (0, items_1.getItemBoostType)(attacker.item) === move.type) {\n        bpMods.push(4915);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((attacker.hasItem('Muscle Band') && move.category === 'Physical') ||\n        (attacker.hasItem('Wise Glasses') && move.category === 'Special')) {\n        bpMods.push(4505);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((attacker.hasItem('Adamant Orb') &&\n        attacker.named('Dialga') &&\n        move.hasType('Steel', 'Dragon')) ||\n        (attacker.hasItem('Lustrous Orb') &&\n            attacker.named('Palkia') &&\n            move.hasType('Water', 'Dragon')) ||\n        (attacker.hasItem('Griseous Orb') &&\n            attacker.named('Giratina-Origin') &&\n            move.hasType('Ghost', 'Dragon'))) {\n        bpMods.push(4915);\n        desc.attackerItem = attacker.item;\n    }\n    else if (attacker.hasItem(\"\".concat(move.type, \" Gem\"))) {\n        bpMods.push(gen.num > 5 ? 5325 : 6144);\n        desc.attackerItem = attacker.item;\n    }\n    if ((move.named('Facade') && attacker.hasStatus('brn', 'par', 'psn', 'tox')) ||\n        (move.named('Brine') && defender.curHP() <= defender.maxHP() / 2) ||\n        (move.named('Venoshock') && defender.hasStatus('psn', 'tox'))) {\n        bpMods.push(8192);\n        desc.moveBP = basePower * 2;\n    }\n    else if (gen.num > 5 && move.named('Knock Off') && !resistedKnockOffDamage) {\n        bpMods.push(6144);\n        desc.moveBP = basePower * 1.5;\n    }\n    else if (move.named('Solar Beam') && field.hasWeather('Rain', 'Heavy Rain', 'Sand', 'Hail')) {\n        bpMods.push(2048);\n        desc.moveBP = basePower / 2;\n        desc.weather = field.weather;\n    }\n    if (field.attackerSide.isHelpingHand) {\n        bpMods.push(6144);\n        desc.isHelpingHand = true;\n    }\n    if (isAerilate || isPixilate || isRefrigerate || isNormalize) {\n        bpMods.push(5325);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if ((attacker.hasAbility('Mega Launcher') && move.flags.pulse) ||\n        (attacker.hasAbility('Strong Jaw') && move.flags.bite)) {\n        bpMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Tough Claws') && move.flags.contact) {\n        bpMods.push(5325);\n        desc.attackerAbility = attacker.ability;\n    }\n    var aura = \"\".concat(move.type, \" Aura\");\n    var isAttackerAura = attacker.hasAbility(aura);\n    var isDefenderAura = defender.hasAbility(aura);\n    var isUserAuraBreak = attacker.hasAbility('Aura Break') || defender.hasAbility('Aura Break');\n    var isFieldAuraBreak = field.isAuraBreak;\n    var isFieldFairyAura = field.isFairyAura && move.type === 'Fairy';\n    var isFieldDarkAura = field.isDarkAura && move.type === 'Dark';\n    var auraActive = isAttackerAura || isDefenderAura || isFieldFairyAura || isFieldDarkAura;\n    var auraBreak = isFieldAuraBreak || isUserAuraBreak;\n    if (auraActive) {\n        if (auraBreak) {\n            bpMods.push(3072);\n            desc.attackerAbility = attacker.ability;\n            desc.defenderAbility = defender.ability;\n        }\n        else {\n            bpMods.push(5448);\n            if (isAttackerAura)\n                desc.attackerAbility = attacker.ability;\n            if (isDefenderAura)\n                desc.defenderAbility = defender.ability;\n        }\n    }\n    if ((0, util_2.isGrounded)(attacker, field)) {\n        if ((field.hasTerrain('Electric') && move.hasType('Electric')) ||\n            (field.hasTerrain('Grassy') && move.hasType('Grass'))) {\n            bpMods.push(6144);\n            desc.terrain = field.terrain;\n        }\n    }\n    if ((0, util_2.isGrounded)(defender, field)) {\n        if ((field.hasTerrain('Misty') && move.hasType('Dragon')) ||\n            (field.hasTerrain('Grassy') && move.named('Bulldoze', 'Earthquake'))) {\n            bpMods.push(2048);\n            desc.terrain = field.terrain;\n        }\n    }\n    basePower = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((basePower * (0, util_2.chainMods)(bpMods, 41, 2097152)) / 4096)));\n    var attack;\n    var attackSource = move.named('Foul Play') ? defender : attacker;\n    var attackStat = move.category === 'Special' ? 'spa' : 'atk';\n    desc.attackEVs =\n        move.named('Foul Play')\n            ? (0, util_2.getEVDescriptionText)(gen, defender, attackStat, defender.nature)\n            : (0, util_2.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\n    if (attackSource.boosts[attackStat] === 0 ||\n        (isCritical && attackSource.boosts[attackStat] < 0)) {\n        attack = attackSource.rawStats[attackStat];\n    }\n    else if (defender.hasAbility('Unaware')) {\n        attack = attackSource.rawStats[attackStat];\n        desc.defenderAbility = defender.ability;\n    }\n    else {\n        attack = attackSource.stats[attackStat];\n        desc.attackBoost = attackSource.boosts[attackStat];\n    }\n    if (attacker.hasAbility('Hustle') && move.category === 'Physical') {\n        attack = (0, util_2.pokeRound)((attack * 3) / 2);\n        desc.attackerAbility = attacker.ability;\n    }\n    var atMods = [];\n    if (defender.hasAbility('Thick Fat') && move.hasType('Fire', 'Ice')) {\n        atMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    if ((attacker.hasAbility('Guts') && attacker.status && move.category === 'Physical') ||\n        (attacker.curHP() <= attacker.maxHP() / 3 &&\n            ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\n                (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\n                (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\n                (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||\n        (move.category === 'Special' && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))) {\n        atMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\n        atMods.push(6144);\n        desc.attackerAbility = 'Flash Fire';\n    }\n    else if ((attacker.hasAbility('Solar Power') &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        move.category === 'Special') ||\n        (attacker.named('Cherrim') &&\n            attacker.hasAbility('Flower Gift') &&\n            field.hasWeather('Sun', 'Harsh Sunshine') &&\n            move.category === 'Physical')) {\n        atMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n        desc.weather = field.weather;\n    }\n    else if (field.attackerSide.isFlowerGift &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        move.category === 'Physical') {\n        atMods.push(6144);\n        desc.weather = field.weather;\n        desc.isFlowerGiftAttacker = true;\n    }\n    else if ((attacker.hasAbility('Defeatist') && attacker.curHP() <= attacker.maxHP() / 2) ||\n        (attacker.hasAbility('Slow Start') && attacker.abilityOn && move.category === 'Physical')) {\n        atMods.push(2048);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Huge Power', 'Pure Power') && move.category === 'Physical') {\n        atMods.push(8192);\n        desc.attackerAbility = attacker.ability;\n    }\n    if ((attacker.hasItem('Thick Club') &&\n        attacker.named('Cubone', 'Marowak', 'Marowak-Alola') &&\n        move.category === 'Physical') ||\n        (attacker.hasItem('Deep Sea Tooth') &&\n            attacker.named('Clamperl') &&\n            move.category === 'Special') ||\n        (attacker.hasItem('Light Ball') && attacker.name.startsWith('Pikachu') && !move.isZ)) {\n        atMods.push(8192);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((attacker.hasItem('Soul Dew') &&\n        attacker.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega') &&\n        move.category === 'Special') ||\n        (attacker.hasItem('Choice Band') && move.category === 'Physical') ||\n        (attacker.hasItem('Choice Specs') && move.category === 'Special')) {\n        atMods.push(6144);\n        desc.attackerItem = attacker.item;\n    }\n    attack = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((attack * (0, util_2.chainMods)(atMods, 410, 131072)) / 4096)));\n    var defense;\n    var defenseStat = move.overrideDefensiveStat || move.category === 'Physical' ? 'def' : 'spd';\n    var hitsPhysical = defenseStat === 'def';\n    desc.defenseEVs = (0, util_2.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\n    if (defender.boosts[defenseStat] === 0 ||\n        (isCritical && defender.boosts[defenseStat] > 0) ||\n        move.ignoreDefensive) {\n        defense = defender.rawStats[defenseStat];\n    }\n    else if (attacker.hasAbility('Unaware')) {\n        defense = defender.rawStats[defenseStat];\n        desc.attackerAbility = attacker.ability;\n    }\n    else {\n        defense = defender.stats[defenseStat];\n        desc.defenseBoost = defender.boosts[defenseStat];\n    }\n    if (field.hasWeather('Sand') && defender.hasType('Rock') && !hitsPhysical) {\n        defense = (0, util_2.pokeRound)((defense * 3) / 2);\n        desc.weather = field.weather;\n    }\n    var dfMods = [];\n    if (defender.hasAbility('Marvel Scale') && defender.status && hitsPhysical) {\n        dfMods.push(6144);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.named('Cherrim') &&\n        defender.hasAbility('Flower Gift') &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        !hitsPhysical) {\n        dfMods.push(6144);\n        desc.defenderAbility = defender.ability;\n        desc.weather = field.weather;\n    }\n    else if (field.defenderSide.isFlowerGift &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        !hitsPhysical) {\n        dfMods.push(6144);\n        desc.weather = field.weather;\n        desc.isFlowerGiftDefender = true;\n    }\n    if (field.hasTerrain('Grassy') && defender.hasAbility('Grass Pelt') && hitsPhysical) {\n        dfMods.push(6144);\n        desc.defenderAbility = defender.ability;\n    }\n    if ((!hitsPhysical && defender.hasItem('Soul Dew') &&\n        defender.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega')) ||\n        (defender.hasItem('Eviolite') && ((_a = gen.species.get((0, util_1.toID)(defender.name))) === null || _a === void 0 ? void 0 : _a.nfe)) ||\n        (!hitsPhysical && defender.hasItem('Assault Vest'))) {\n        dfMods.push(6144);\n        desc.defenderItem = defender.item;\n    }\n    if ((defender.hasItem('Metal Powder') && defender.named('Ditto') && hitsPhysical) ||\n        (defender.hasItem('Deep Sea Scale') && defender.named('Clamperl') && !hitsPhysical)) {\n        dfMods.push(8192);\n        desc.defenderItem = defender.item;\n    }\n    if (defender.hasAbility('Fur Coat') && hitsPhysical) {\n        dfMods.push(8192);\n        desc.defenderAbility = defender.ability;\n    }\n    defense = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((defense * (0, util_2.chainMods)(dfMods, 410, 131072)) / 4096)));\n    var baseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, attack, defense);\n    var isSpread = field.gameType !== 'Singles' &&\n        ['allAdjacent', 'allAdjacentFoes'].includes(move.target);\n    if (isSpread) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 3072) / 4096);\n    }\n    if (attacker.hasAbility('Parental Bond (Child)')) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 2048) / 4096);\n    }\n    if ((field.hasWeather('Sun', 'Harsh Sunshine') && move.hasType('Fire')) ||\n        (field.hasWeather('Rain', 'Heavy Rain') && move.hasType('Water'))) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 6144) / 4096);\n        desc.weather = field.weather;\n    }\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\n        (field.hasWeather('Rain') && move.hasType('Fire'))) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 2048) / 4096);\n        desc.weather = field.weather;\n    }\n    if (isCritical) {\n        baseDamage = Math.floor((0, util_2.OF32)(baseDamage * (gen.num > 5 ? 1.5 : 2)));\n        desc.isCritical = isCritical;\n    }\n    var stabMod = 4096;\n    if (attacker.hasType(move.type)) {\n        if (attacker.hasAbility('Adaptability')) {\n            stabMod = 8192;\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            stabMod = 6144;\n        }\n    }\n    else if (attacker.hasAbility('Protean')) {\n        stabMod = 6144;\n        desc.attackerAbility = attacker.ability;\n    }\n    var applyBurn = attacker.hasStatus('brn') &&\n        move.category === 'Physical' &&\n        !attacker.hasAbility('Guts') &&\n        !(move.named('Facade') && gen.num === 6);\n    desc.isBurned = applyBurn;\n    var finalMods = [];\n    if (field.defenderSide.isReflect && move.category === 'Physical' && !isCritical) {\n        finalMods.push(field.gameType !== 'Singles' ? (gen.num > 5 ? 2732 : 2703) : 2048);\n        desc.isReflect = true;\n    }\n    else if (field.defenderSide.isLightScreen && move.category === 'Special' && !isCritical) {\n        finalMods.push(field.gameType !== 'Singles' ? (gen.num > 5 ? 2732 : 2703) : 2048);\n        desc.isLightScreen = true;\n    }\n    if (defender.hasAbility('Multiscale') && defender.curHP() === defender.maxHP() &&\n        !field.defenderSide.isSR && (!field.defenderSide.spikes || defender.hasType('Flying')) &&\n        !attacker.hasAbility('Parental Bond (Child)')) {\n        finalMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {\n        finalMods.push(8192);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (field.defenderSide.isFriendGuard) {\n        finalMods.push(3072);\n        desc.isFriendGuard = true;\n    }\n    if (attacker.hasAbility('Sniper') && isCritical) {\n        finalMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (defender.hasAbility('Solid Rock', 'Filter') && typeEffectiveness > 1) {\n        finalMods.push(3072);\n        desc.defenderAbility = defender.ability;\n    }\n    if (attacker.hasItem('Metronome') && move.timesUsedWithMetronome >= 1) {\n        var timesUsedWithMetronome = Math.floor(move.timesUsedWithMetronome);\n        if (timesUsedWithMetronome <= 4) {\n            finalMods.push(4096 + timesUsedWithMetronome * 819);\n        }\n        else {\n            finalMods.push(8192);\n        }\n        desc.attackerItem = attacker.item;\n    }\n    if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1 && !move.isZ) {\n        finalMods.push(4915);\n        desc.attackerItem = attacker.item;\n    }\n    else if (attacker.hasItem('Life Orb')) {\n        finalMods.push(5324);\n        desc.attackerItem = attacker.item;\n    }\n    if (move.hasType((0, items_1.getBerryResistType)(defender.item)) &&\n        (typeEffectiveness > 1 || move.hasType('Normal')) &&\n        !attacker.hasAbility('Unnerve')) {\n        finalMods.push(2048);\n        desc.defenderItem = defender.item;\n    }\n    if (field.defenderSide.isProtected && move.isZ && attacker.item && attacker.item.includes(' Z')) {\n        finalMods.push(1024);\n        desc.isProtected = true;\n    }\n    var finalMod = (0, util_2.chainMods)(finalMods, 41, 131072);\n    var childDamage;\n    if (attacker.hasAbility('Parental Bond') && move.hits === 1 && !isSpread) {\n        var child = attacker.clone();\n        child.ability = 'Parental Bond (Child)';\n        (0, util_2.checkMultihitBoost)(gen, child, defender, move, field, desc);\n        childDamage = calculateBWXY(gen, child, defender, move, field).damage;\n        desc.attackerAbility = attacker.ability;\n    }\n    var damage = [];\n    for (var i = 0; i < 16; i++) {\n        damage[i] =\n            (0, util_2.getFinalDamage)(baseDamage, i, typeEffectiveness, applyBurn, stabMod, finalMod);\n    }\n    if (move.dropsStats && (move.timesUsed || 0) > 1) {\n        var simpleMultiplier = attacker.hasAbility('Simple') ? 2 : 1;\n        desc.moveTurns = \"over \".concat(move.timesUsed, \" turns\");\n        var hasWhiteHerb = attacker.hasItem('White Herb');\n        var usedWhiteHerb = false;\n        var dropCount = attacker.boosts[attackStat];\n        var _loop_1 = function (times) {\n            var newAttack = (0, util_2.getModifiedStat)(attack, dropCount);\n            var damageMultiplier = 0;\n            damage = damage.map(function (affectedAmount) {\n                if (times) {\n                    var newBaseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, newAttack, defense);\n                    var newFinalDamage = (0, util_2.getFinalDamage)(newBaseDamage, damageMultiplier, typeEffectiveness, applyBurn, stabMod, finalMod);\n                    damageMultiplier++;\n                    return affectedAmount + newFinalDamage;\n                }\n                return affectedAmount;\n            });\n            if (attacker.hasAbility('Contrary')) {\n                dropCount = Math.min(6, dropCount + move.dropsStats);\n                desc.attackerAbility = attacker.ability;\n            }\n            else {\n                dropCount = Math.max(-6, dropCount - move.dropsStats * simpleMultiplier);\n                if (attacker.hasAbility('Simple')) {\n                    desc.attackerAbility = attacker.ability;\n                }\n            }\n            if (hasWhiteHerb && attacker.boosts[attackStat] < 0 && !usedWhiteHerb) {\n                dropCount += move.dropsStats * simpleMultiplier;\n                usedWhiteHerb = true;\n                desc.attackerItem = attacker.item;\n            }\n        };\n        for (var times = 0; times < move.timesUsed; times++) {\n            _loop_1(times);\n        }\n    }\n    desc.attackBoost =\n        move.named('Foul Play') ? defender.boosts[attackStat] : attacker.boosts[attackStat];\n    result.damage = childDamage ? [damage, childDamage] : damage;\n    return result;\n}\nexports.calculateBWXY = calculateBWXY;\n//# sourceMappingURL=gen56.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen56.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen789.js":
/*!***************************************!*\
  !*** ./calc/dist/mechanics/gen789.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.calculateFinalModsSMSSSV = exports.calculateDfModsSMSSSV = exports.calculateDefenseSMSSSV = exports.calculateAtModsSMSSSV = exports.calculateAttackSMSSSV = exports.calculateBPModsSMSSSV = exports.calculateBasePowerSMSSSV = exports.calculateSMSSSV = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\nvar util_2 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\nfunction calculateSMSSSV(gen, attacker, defender, move, field) {\n    (0, util_2.checkAirLock)(attacker, field);\n    (0, util_2.checkAirLock)(defender, field);\n    (0, util_2.checkForecast)(attacker, field.weather);\n    (0, util_2.checkForecast)(defender, field.weather);\n    (0, util_2.checkItem)(attacker, field.isMagicRoom);\n    (0, util_2.checkItem)(defender, field.isMagicRoom);\n    (0, util_2.checkWonderRoom)(attacker, field.isWonderRoom);\n    (0, util_2.checkWonderRoom)(defender, field.isWonderRoom);\n    (0, util_2.checkSeedBoost)(attacker, field);\n    (0, util_2.checkSeedBoost)(defender, field);\n    (0, util_2.checkDauntlessShield)(attacker, gen);\n    (0, util_2.checkDauntlessShield)(defender, gen);\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'def', 'spd', 'spe');\n    (0, util_2.checkIntimidate)(gen, attacker, defender);\n    (0, util_2.checkIntimidate)(gen, defender, attacker);\n    (0, util_2.checkDownload)(attacker, defender, field.isWonderRoom);\n    (0, util_2.checkDownload)(defender, attacker, field.isWonderRoom);\n    (0, util_2.checkIntrepidSword)(attacker, gen);\n    (0, util_2.checkIntrepidSword)(defender, gen);\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'atk', 'spa');\n    (0, util_2.checkInfiltrator)(attacker, field.defenderSide);\n    (0, util_2.checkInfiltrator)(defender, field.attackerSide);\n    var desc = {\n        attackerName: attacker.name,\n        attackerTera: attacker.teraType,\n        moveName: move.name,\n        defenderName: defender.name,\n        defenderTera: defender.teraType,\n        isDefenderDynamaxed: defender.isDynamaxed,\n        isWonderRoom: field.isWonderRoom\n    };\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\n    if (move.category === 'Status' && !move.named('Nature Power')) {\n        return result;\n    }\n    var breaksProtect = move.breaksProtect || move.isZ || attacker.isDynamaxed ||\n        (attacker.hasAbility('Unseen Fist') && move.flags.contact);\n    if (field.defenderSide.isProtected && !breaksProtect) {\n        desc.isProtected = true;\n        return result;\n    }\n    var defenderIgnoresAbility = defender.hasAbility('Full Metal Body', 'Neutralizing Gas', 'Prism Armor', 'Shadow Shield');\n    var attackerIgnoresAbility = attacker.hasAbility('Mold Breaker', 'Teravolt', 'Turboblaze');\n    var moveIgnoresAbility = move.named('G-Max Drum Solo', 'G-Max Fire Ball', 'G-Max Hydrosnipe', 'Light That Burns the Sky', 'Menacing Moonraze Maelstrom', 'Moongeist Beam', 'Photon Geyser', 'Searing Sunraze Smash', 'Sunsteel Strike');\n    if (!defenderIgnoresAbility && !defender.hasAbility('Poison Heal')) {\n        if (attackerIgnoresAbility) {\n            defender.ability = '';\n            desc.attackerAbility = attacker.ability;\n        }\n        if (moveIgnoresAbility) {\n            defender.ability = '';\n        }\n    }\n    var isCritical = !defender.hasAbility('Battle Armor', 'Shell Armor') &&\n        (move.isCrit || (attacker.hasAbility('Merciless') && defender.hasStatus('psn', 'tox'))) &&\n        move.timesUsed === 1;\n    var type = move.type;\n    if (move.named('Weather Ball')) {\n        var holdingUmbrella = attacker.hasItem('Utility Umbrella');\n        type =\n            field.hasWeather('Sun', 'Harsh Sunshine') && !holdingUmbrella ? 'Fire'\n                : field.hasWeather('Rain', 'Heavy Rain') && !holdingUmbrella ? 'Water'\n                    : field.hasWeather('Sand') ? 'Rock'\n                        : field.hasWeather('Hail', 'Snow') ? 'Ice'\n                            : 'Normal';\n        desc.weather = field.weather;\n        desc.moveType = type;\n    }\n    else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {\n        type = (0, items_1.getItemBoostType)(attacker.item);\n    }\n    else if (move.named('Techno Blast') && attacker.item && attacker.item.includes('Drive')) {\n        type = (0, items_1.getTechnoBlast)(attacker.item);\n    }\n    else if (move.named('Multi-Attack') && attacker.item && attacker.item.includes('Memory')) {\n        type = (0, items_1.getMultiAttack)(attacker.item);\n    }\n    else if (move.named('Natural Gift') && attacker.item && attacker.item.includes('Berry')) {\n        var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\n        type = gift.t;\n        desc.moveType = type;\n        desc.attackerItem = attacker.item;\n    }\n    else if (move.named('Nature Power') ||\n        (move.named('Terrain Pulse') && (0, util_2.isGrounded)(attacker, field))) {\n        type =\n            field.hasTerrain('Electric') ? 'Electric'\n                : field.hasTerrain('Grassy') ? 'Grass'\n                    : field.hasTerrain('Misty') ? 'Fairy'\n                        : field.hasTerrain('Psychic') ? 'Psychic'\n                            : 'Normal';\n        desc.terrain = field.terrain;\n        desc.moveType = type;\n    }\n    else if (move.named('Revelation Dance')) {\n        type = attacker.types[0];\n    }\n    else if (move.named('Aura Wheel')) {\n        if (attacker.named('Morpeko')) {\n            type = 'Electric';\n        }\n        else if (attacker.named('Morpeko-Hangry')) {\n            type = 'Dark';\n        }\n    }\n    else if (move.named('Raging Bull')) {\n        if (attacker.named('Tauros-Paldea')) {\n            type = 'Fighting';\n        }\n        else if (attacker.named('Tauros-Paldea-Fire')) {\n            type = 'Fire';\n        }\n        else if (attacker.named('Tauros-Paldea-Water')) {\n            type = 'Water';\n        }\n    }\n    var hasAteAbilityTypeChange = false;\n    var isAerilate = false;\n    var isPixilate = false;\n    var isRefrigerate = false;\n    var isGalvanize = false;\n    var isLiquidVoice = false;\n    var isNormalize = false;\n    var noTypeChange = move.named('Revelation Dance', 'Judgment', 'Nature Power', 'Techno Blast', 'Multi Attack', 'Natural Gift', 'Weather Ball', 'Terrain Pulse') || (move.named('Tera Blast') && attacker.teraType);\n    if (!move.isZ && !noTypeChange) {\n        var normal = move.hasType('Normal');\n        if ((isAerilate = attacker.hasAbility('Aerilate') && normal)) {\n            type = 'Flying';\n        }\n        else if ((isGalvanize = attacker.hasAbility('Galvanize') && normal)) {\n            type = 'Electric';\n        }\n        else if ((isLiquidVoice = attacker.hasAbility('Liquid Voice') && !!move.flags.sound)) {\n            type = 'Water';\n        }\n        else if ((isPixilate = attacker.hasAbility('Pixilate') && normal)) {\n            type = 'Fairy';\n        }\n        else if ((isRefrigerate = attacker.hasAbility('Refrigerate') && normal)) {\n            type = 'Ice';\n        }\n        else if ((isNormalize = attacker.hasAbility('Normalize'))) {\n            type = 'Normal';\n        }\n        if (isGalvanize || isPixilate || isRefrigerate || isAerilate || isNormalize) {\n            desc.attackerAbility = attacker.ability;\n            hasAteAbilityTypeChange = true;\n        }\n        else if (isLiquidVoice) {\n            desc.attackerAbility = attacker.ability;\n        }\n    }\n    if (move.named('Tera Blast') && attacker.teraType) {\n        type = attacker.teraType;\n    }\n    move.type = type;\n    if ((attacker.hasAbility('Triage') && move.drain) ||\n        (attacker.hasAbility('Gale Wings') &&\n            move.hasType('Flying') &&\n            attacker.curHP() === attacker.maxHP())) {\n        move.priority = 1;\n        desc.attackerAbility = attacker.ability;\n    }\n    var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\n    var isRingTarget = defender.hasItem('Ring Target') && !defender.hasAbility('Klutz');\n    var type1Effectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity, isRingTarget);\n    var type2Effectiveness = defender.types[1]\n        ? (0, util_2.getMoveEffectiveness)(gen, move, defender.types[1], isGhostRevealed, field.isGravity, isRingTarget)\n        : 1;\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\n    if (defender.teraType) {\n        typeEffectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.teraType, isGhostRevealed, field.isGravity, isRingTarget);\n    }\n    if (typeEffectiveness === 0 && move.hasType('Ground') &&\n        defender.hasItem('Iron Ball') && !defender.hasAbility('Klutz')) {\n        typeEffectiveness = 1;\n    }\n    if (typeEffectiveness === 0 && move.named('Thousand Arrows')) {\n        typeEffectiveness = 1;\n    }\n    if (typeEffectiveness === 0) {\n        return result;\n    }\n    if ((move.named('Sky Drop') &&\n        (defender.hasType('Flying') || defender.weightkg >= 200 || field.isGravity)) ||\n        (move.named('Synchronoise') && !defender.hasType(attacker.types[0]) &&\n            (!attacker.types[1] || !defender.hasType(attacker.types[1]))) ||\n        (move.named('Dream Eater') &&\n            (!(defender.hasStatus('slp') || defender.hasAbility('Comatose')))) ||\n        (move.named('Steel Roller') && !field.terrain) ||\n        (move.named('Poltergeist') && !defender.item)) {\n        return result;\n    }\n    if ((field.hasWeather('Harsh Sunshine') && move.hasType('Water')) ||\n        (field.hasWeather('Heavy Rain') && move.hasType('Fire'))) {\n        desc.weather = field.weather;\n        return result;\n    }\n    if (field.hasWeather('Strong Winds') && defender.hasType('Flying') &&\n        gen.types.get((0, util_1.toID)(move.type)).effectiveness['Flying'] > 1) {\n        typeEffectiveness /= 2;\n        desc.weather = field.weather;\n    }\n    if ((defender.hasAbility('Wonder Guard') && typeEffectiveness <= 1) ||\n        (move.hasType('Grass') && defender.hasAbility('Sap Sipper')) ||\n        (move.hasType('Fire') && defender.hasAbility('Flash Fire', 'Well-Baked Body')) ||\n        (move.hasType('Water') && defender.hasAbility('Dry Skin', 'Storm Drain', 'Water Absorb')) ||\n        (move.hasType('Electric') &&\n            defender.hasAbility('Lightning Rod', 'Motor Drive', 'Volt Absorb')) ||\n        (move.hasType('Ground') &&\n            !field.isGravity && !move.named('Thousand Arrows') &&\n            !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||\n        (move.flags.bullet && defender.hasAbility('Bulletproof')) ||\n        (move.flags.sound && !move.named('Clangorous Soul') && defender.hasAbility('Soundproof')) ||\n        (move.priority > 0 && defender.hasAbility('Queenly Majesty', 'Dazzling', 'Armor Tail')) ||\n        (move.hasType('Ground') && defender.hasAbility('Earth Eater')) ||\n        (move.flags.wind && defender.hasAbility('Wind Rider'))) {\n        desc.defenderAbility = defender.ability;\n        return result;\n    }\n    if (move.hasType('Ground') && !move.named('Thousand Arrows') &&\n        !field.isGravity && defender.hasItem('Air Balloon')) {\n        desc.defenderItem = defender.item;\n        return result;\n    }\n    if (move.priority > 0 && field.hasTerrain('Psychic') && (0, util_2.isGrounded)(defender, field)) {\n        desc.terrain = field.terrain;\n        return result;\n    }\n    var weightBasedMove = move.named('Heat Crash', 'Heavy Slam', 'Low Kick', 'Grass Knot');\n    if (defender.isDynamaxed && weightBasedMove) {\n        return result;\n    }\n    desc.HPEVs = \"\".concat(defender.ivs.hp, \" HP\");\n    var fixedDamage = (0, util_2.handleFixedDamageMoves)(attacker, move, defender);\n    if (fixedDamage) {\n        if (attacker.hasAbility('Parental Bond')) {\n            result.damage = [fixedDamage, fixedDamage];\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            result.damage = fixedDamage;\n        }\n        return result;\n    }\n    if (move.named('Final Gambit')) {\n        result.damage = attacker.curHP();\n        return result;\n    }\n    if (move.named('Guardian of Alola')) {\n        var zLostHP = Math.floor((defender.curHP() * 3) / 4);\n        if (field.defenderSide.isProtected && attacker.item && attacker.item.includes(' Z')) {\n            zLostHP = Math.ceil(zLostHP / 4 - 0.5);\n        }\n        result.damage = zLostHP;\n        return result;\n    }\n    if (move.named('Nature\\'s Madness')) {\n        var lostHP = field.defenderSide.isProtected ? 0 : Math.floor(defender.curHP() / 2);\n        result.damage = lostHP;\n        return result;\n    }\n    if (move.named('Spectral Thief')) {\n        var stat = void 0;\n        for (stat in defender.boosts) {\n            if (defender.boosts[stat]) {\n                attacker.boosts[stat] +=\n                    attacker.hasAbility('Contrary') ? -defender.boosts[stat] : defender.boosts[stat];\n                if (attacker.boosts[stat] > 6)\n                    attacker.boosts[stat] = 6;\n                if (attacker.boosts[stat] < -6)\n                    attacker.boosts[stat] = -6;\n                attacker.stats[stat] = (0, util_2.getModifiedStat)(attacker.rawStats[stat], attacker.boosts[stat]);\n            }\n        }\n    }\n    if (move.hits > 1) {\n        desc.hits = move.hits;\n    }\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\n    var basePower = calculateBasePowerSMSSSV(gen, attacker, defender, move, field, hasAteAbilityTypeChange, desc);\n    if (basePower === 0) {\n        return result;\n    }\n    var attack = calculateAttackSMSSSV(gen, attacker, defender, move, field, desc, isCritical);\n    var attackSource = move.named('Foul Play') ? defender : attacker;\n    if (move.named('Photon Geyser', 'Light That Burns The Sky') ||\n        (move.named('Tera Blast') && attackSource.teraType)) {\n        move.category = attackSource.stats.atk > attackSource.stats.spa ? 'Physical' : 'Special';\n    }\n    var attackStat = move.named('Shell Side Arm') &&\n        (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical'\n        ? 'atk'\n        : move.named('Body Press')\n            ? 'def'\n            : move.category === 'Special'\n                ? 'spa'\n                : 'atk';\n    var defense = calculateDefenseSMSSSV(gen, attacker, defender, move, field, desc, isCritical);\n    var hitsPhysical = move.overrideDefensiveStat === 'def' || move.category === 'Physical' ||\n        (move.named('Shell Side Arm') && (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical');\n    var defenseStat = hitsPhysical ? 'def' : 'spd';\n    var baseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, attack, defense);\n    var isSpread = field.gameType !== 'Singles' &&\n        ['allAdjacent', 'allAdjacentFoes'].includes(move.target);\n    if (isSpread) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 3072) / 4096);\n    }\n    if (attacker.hasAbility('Parental Bond (Child)')) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 1024) / 4096);\n    }\n    var noWeatherBoost = defender.hasItem('Utility Umbrella');\n    if (!noWeatherBoost &&\n        ((field.hasWeather('Sun', 'Harsh Sunshine') && move.hasType('Fire')) ||\n            (field.hasWeather('Rain', 'Heavy Rain') && move.hasType('Water')))) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 6144) / 4096);\n        desc.weather = field.weather;\n    }\n    else if (!noWeatherBoost &&\n        ((field.hasWeather('Sun') && move.hasType('Water')) ||\n            (field.hasWeather('Rain') && move.hasType('Fire')))) {\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 2048) / 4096);\n        desc.weather = field.weather;\n    }\n    if (hasTerrainSeed(defender) &&\n        field.hasTerrain(defender.item.substring(0, defender.item.indexOf(' '))) &&\n        items_1.SEED_BOOSTED_STAT[defender.item] === defenseStat) {\n        desc.defenderItem = defender.item;\n    }\n    if (isCritical) {\n        baseDamage = Math.floor((0, util_2.OF32)(baseDamage * 1.5));\n        desc.isCritical = isCritical;\n    }\n    var stabMod = 4096;\n    if (attacker.hasOriginalType(move.type)) {\n        stabMod += 2048;\n    }\n    else if (attacker.hasAbility('Protean', 'Libero') && !attacker.teraType) {\n        stabMod += 2048;\n        desc.attackerAbility = attacker.ability;\n    }\n    var teraType = attacker.teraType;\n    if (teraType === move.type) {\n        stabMod += 2048;\n        desc.attackerTera = teraType;\n    }\n    if (attacker.hasAbility('Adaptability') && attacker.hasType(move.type)) {\n        stabMod += teraType && attacker.hasOriginalType(teraType) ? 1024 : 2048;\n        desc.attackerAbility = attacker.ability;\n    }\n    var applyBurn = attacker.hasStatus('brn') &&\n        move.category === 'Physical' &&\n        !attacker.hasAbility('Guts') &&\n        !move.named('Facade');\n    desc.isBurned = applyBurn;\n    var finalMods = calculateFinalModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, typeEffectiveness);\n    var protect = false;\n    if (field.defenderSide.isProtected &&\n        (attacker.isDynamaxed || (move.isZ && attacker.item && attacker.item.includes(' Z')))) {\n        protect = true;\n        desc.isProtected = true;\n    }\n    var finalMod = (0, util_2.chainMods)(finalMods, 41, 131072);\n    var childDamage;\n    if (attacker.hasAbility('Parental Bond') && move.hits === 1 && !isSpread) {\n        var child = attacker.clone();\n        child.ability = 'Parental Bond (Child)';\n        (0, util_2.checkMultihitBoost)(gen, child, defender, move, field, desc);\n        childDamage = calculateSMSSSV(gen, child, defender, move, field).damage;\n        desc.attackerAbility = attacker.ability;\n    }\n    var damage = [];\n    for (var i = 0; i < 16; i++) {\n        damage[i] =\n            (0, util_2.getFinalDamage)(baseDamage, i, typeEffectiveness, applyBurn, stabMod, finalMod, protect);\n    }\n    if (move.dropsStats && move.timesUsed > 1) {\n        var simpleMultiplier = attacker.hasAbility('Simple') ? 2 : 1;\n        desc.moveTurns = \"over \".concat(move.timesUsed, \" turns\");\n        var hasWhiteHerb = attacker.hasItem('White Herb');\n        var usedWhiteHerb = false;\n        var dropCount = attacker.boosts[attackStat];\n        var _loop_1 = function (times) {\n            var newAttack = (0, util_2.getModifiedStat)(attack, dropCount);\n            var damageMultiplier = 0;\n            damage = damage.map(function (affectedAmount) {\n                if (times) {\n                    var newBaseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, newAttack, defense);\n                    var newFinalDamage = (0, util_2.getFinalDamage)(newBaseDamage, damageMultiplier, typeEffectiveness, applyBurn, stabMod, finalMod, protect);\n                    damageMultiplier++;\n                    return affectedAmount + newFinalDamage;\n                }\n                return affectedAmount;\n            });\n            if (attacker.hasAbility('Contrary')) {\n                dropCount = Math.min(6, dropCount + move.dropsStats);\n                desc.attackerAbility = attacker.ability;\n            }\n            else {\n                dropCount = Math.max(-6, dropCount - move.dropsStats * simpleMultiplier);\n                if (attacker.hasAbility('Simple')) {\n                    desc.attackerAbility = attacker.ability;\n                }\n            }\n            if (hasWhiteHerb && attacker.boosts[attackStat] < 0 && !usedWhiteHerb) {\n                dropCount += move.dropsStats * simpleMultiplier;\n                usedWhiteHerb = true;\n                desc.attackerItem = attacker.item;\n            }\n        };\n        for (var times = 0; times < move.timesUsed; times++) {\n            _loop_1(times);\n        }\n    }\n    desc.attackBoost =\n        move.named('Foul Play') ? defender.boosts[attackStat] : attacker.boosts[attackStat];\n    result.damage = childDamage ? [damage, childDamage] : damage;\n    return result;\n}\nexports.calculateSMSSSV = calculateSMSSSV;\nfunction calculateBasePowerSMSSSV(gen, attacker, defender, move, field, hasAteAbilityTypeChange, desc) {\n    var _a;\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\n    var basePower;\n    switch (move.name) {\n        case 'Payback':\n            basePower = move.bp * (turnOrder === 'last' ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Bolt Beak':\n        case 'Fishious Rend':\n            basePower = move.bp * (turnOrder !== 'last' ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Pursuit':\n            var switching = field.defenderSide.isSwitching === 'out';\n            basePower = move.bp * (switching ? 2 : 1);\n            if (switching)\n                desc.isSwitching = 'out';\n            desc.moveBP = basePower;\n            break;\n        case 'Electro Ball':\n            var r = Math.floor(attacker.stats.spe / defender.stats.spe);\n            basePower = r >= 4 ? 150 : r >= 3 ? 120 : r >= 2 ? 80 : r >= 1 ? 60 : 40;\n            if (defender.stats.spe === 0)\n                basePower = 40;\n            desc.moveBP = basePower;\n            break;\n        case 'Gyro Ball':\n            basePower = Math.min(150, Math.floor((25 * defender.stats.spe) / attacker.stats.spe) + 1);\n            if (attacker.stats.spe === 0)\n                basePower = 1;\n            desc.moveBP = basePower;\n            break;\n        case 'Punishment':\n            basePower = Math.min(200, 60 + 20 * (0, util_2.countBoosts)(gen, defender.boosts));\n            desc.moveBP = basePower;\n            break;\n        case 'Low Kick':\n        case 'Grass Knot':\n            var w = defender.weightkg * (0, util_2.getWeightFactor)(defender);\n            basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Hex':\n        case 'Infernal Parade':\n            basePower = move.bp * (defender.status || defender.hasAbility('Comatose') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Barb Barrage':\n            basePower = move.bp * (defender.hasStatus('psn', 'tox') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Heavy Slam':\n        case 'Heat Crash':\n            var wr = (attacker.weightkg * (0, util_2.getWeightFactor)(attacker)) /\n                (defender.weightkg * (0, util_2.getWeightFactor)(defender));\n            basePower = wr >= 5 ? 120 : wr >= 4 ? 100 : wr >= 3 ? 80 : wr >= 2 ? 60 : 40;\n            desc.moveBP = basePower;\n            break;\n        case 'Stored Power':\n        case 'Power Trip':\n            basePower = 20 + 20 * (0, util_2.countBoosts)(gen, attacker.boosts);\n            desc.moveBP = basePower;\n            break;\n        case 'Acrobatics':\n            basePower = move.bp * (attacker.hasItem('Flying Gem') || !attacker.item ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Assurance':\n            basePower = move.bp * (defender.hasAbility('Parental Bond (Child)') ? 2 : 1);\n            break;\n        case 'Wake-Up Slap':\n            basePower = move.bp * (defender.hasStatus('slp') || defender.hasAbility('Comatose') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Smelling Salts':\n            basePower = move.bp * (defender.hasStatus('par') ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Weather Ball':\n            basePower = move.bp * (field.weather && !field.hasWeather('Strong Winds') ? 2 : 1);\n            if (field.hasWeather('Sun', 'Harsh Sunshine', 'Rain', 'Heavy Rain') &&\n                attacker.hasItem('Utility Umbrella'))\n                basePower = move.bp;\n            desc.moveBP = basePower;\n            break;\n        case 'Terrain Pulse':\n            basePower = move.bp * ((0, util_2.isGrounded)(attacker, field) && field.terrain ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Rising Voltage':\n            basePower = move.bp * (((0, util_2.isGrounded)(defender, field) && field.hasTerrain('Electric')) ? 2 : 1);\n            desc.moveBP = basePower;\n            break;\n        case 'Fling':\n            basePower = (0, items_1.getFlingPower)(attacker.item);\n            desc.moveBP = basePower;\n            desc.attackerItem = attacker.item;\n            break;\n        case 'Dragon Energy':\n        case 'Eruption':\n        case 'Water Spout':\n            basePower = Math.max(1, Math.floor((150 * attacker.curHP()) / attacker.maxHP()));\n            desc.moveBP = basePower;\n            break;\n        case 'Flail':\n        case 'Reversal':\n            var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\n            basePower = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Natural Gift':\n            if ((_a = attacker.item) === null || _a === void 0 ? void 0 : _a.includes('Berry')) {\n                var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\n                basePower = gift.p;\n                desc.attackerItem = attacker.item;\n                desc.moveBP = move.bp;\n            }\n            else {\n                basePower = move.bp;\n            }\n            break;\n        case 'Nature Power':\n            move.category = 'Special';\n            move.secondaries = true;\n            switch (field.terrain) {\n                case 'Electric':\n                    basePower = 90;\n                    desc.moveName = 'Thunderbolt';\n                    break;\n                case 'Grassy':\n                    basePower = 90;\n                    desc.moveName = 'Energy Ball';\n                    break;\n                case 'Misty':\n                    basePower = 95;\n                    desc.moveName = 'Moonblast';\n                    break;\n                case 'Psychic':\n                    basePower = 90;\n                    desc.moveName = 'Psychic';\n                    break;\n                default:\n                    basePower = 80;\n                    desc.moveName = 'Tri Attack';\n            }\n            break;\n        case 'Water Shuriken':\n            basePower = attacker.named('Greninja-Ash') && attacker.hasAbility('Battle Bond') ? 20 : 15;\n            desc.moveBP = basePower;\n            break;\n        case 'Triple Axel':\n            basePower = move.hits === 2 ? 30 : move.hits === 3 ? 40 : 20;\n            desc.moveBP = basePower;\n            break;\n        case 'Triple Kick':\n            basePower = move.hits === 2 ? 15 : move.hits === 3 ? 30 : 10;\n            desc.moveBP = basePower;\n            break;\n        case 'Crush Grip':\n        case 'Wring Out':\n            basePower = 100 * Math.floor((defender.curHP() * 4096) / defender.maxHP());\n            basePower = Math.floor(Math.floor((120 * basePower + 2048 - 1) / 4096) / 100) || 1;\n            desc.moveBP = basePower;\n            break;\n        default:\n            basePower = move.bp;\n    }\n    if (basePower === 0) {\n        return 0;\n    }\n    if (move.named('Breakneck Blitz', 'Bloom Doom', 'Inferno Overdrive', 'Hydro Vortex', 'Gigavolt Havoc', 'Subzero Slammer', 'Supersonic Skystrike', 'Savage Spin-Out', 'Acid Downpour', 'Tectonic Rage', 'Continental Crush', 'All-Out Pummeling', 'Shattered Psyche', 'Never-Ending Nightmare', 'Devastating Drake', 'Black Hole Eclipse', 'Corkscrew Crash', 'Twinkle Tackle')) {\n        desc.moveBP = move.bp;\n    }\n    var bpMods = calculateBPModsSMSSSV(gen, attacker, defender, move, field, desc, basePower, hasAteAbilityTypeChange, turnOrder);\n    basePower = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((basePower * (0, util_2.chainMods)(bpMods, 41, 2097152)) / 4096)));\n    if (attacker.teraType && move.type === attacker.teraType &&\n        attacker.hasType(attacker.teraType) && move.hits === 1 &&\n        move.priority <= 0 && move.bp > 0 && !move.named('Dragon Energy', 'Eruption', 'Water Spout') &&\n        basePower < 60 && gen.num >= 9) {\n        basePower = 60;\n        desc.moveBP = 60;\n    }\n    return basePower;\n}\nexports.calculateBasePowerSMSSSV = calculateBasePowerSMSSSV;\nfunction calculateBPModsSMSSSV(gen, attacker, defender, move, field, desc, basePower, hasAteAbilityTypeChange, turnOrder) {\n    var bpMods = [];\n    var resistedKnockOffDamage = !defender.item ||\n        (defender.named('Dialga-Origin') && defender.hasItem('Adamant Crystal')) ||\n        (defender.named('Palkia-Origin') && defender.hasItem('Lustrous Globe')) ||\n        (defender.name.includes('Giratina-Origin') && defender.item.includes('Griseous')) ||\n        (defender.name.includes('Arceus') && defender.item.includes('Plate')) ||\n        (defender.name.includes('Genesect') && defender.item.includes('Drive')) ||\n        (defender.named('Groudon', 'Groudon-Primal') && defender.hasItem('Red Orb')) ||\n        (defender.named('Kyogre', 'Kyogre-Primal') && defender.hasItem('Blue Orb')) ||\n        (defender.name.includes('Silvally') && defender.item.includes('Memory')) ||\n        defender.item.includes(' Z') ||\n        (defender.named('Zacian') && defender.hasItem('Rusted Sword')) ||\n        (defender.named('Zamazenta') && defender.hasItem('Rusted Shield') ||\n            (defender.named('Venomicon-Epilogue') && defender.hasItem('Vile Vial')));\n    if (!resistedKnockOffDamage && defender.item) {\n        var item = gen.items.get((0, util_1.toID)(defender.item));\n        resistedKnockOffDamage = !!item.megaEvolves && defender.name.includes(item.megaEvolves);\n    }\n    if ((move.named('Facade') && attacker.hasStatus('brn', 'par', 'psn', 'tox')) ||\n        (move.named('Brine') && defender.curHP() <= defender.maxHP() / 2) ||\n        (move.named('Venoshock') && defender.hasStatus('psn', 'tox')) ||\n        (move.named('Lash Out') && ((0, util_2.countBoosts)(gen, attacker.boosts) < 0))) {\n        bpMods.push(8192);\n        desc.moveBP = basePower * 2;\n    }\n    else if (move.named('Expanding Force') && (0, util_2.isGrounded)(attacker, field) && field.hasTerrain('Psychic')) {\n        move.target = 'allAdjacentFoes';\n        bpMods.push(6144);\n        desc.moveBP = basePower * 1.5;\n    }\n    else if ((move.named('Knock Off') && !resistedKnockOffDamage) ||\n        (move.named('Misty Explosion') && (0, util_2.isGrounded)(attacker, field) && field.hasTerrain('Misty')) ||\n        (move.named('Grav Apple') && field.isGravity)) {\n        bpMods.push(6144);\n        desc.moveBP = basePower * 1.5;\n    }\n    else if (move.named('Solar Beam', 'Solar Blade') &&\n        field.hasWeather('Rain', 'Heavy Rain', 'Sand', 'Hail', 'Snow')) {\n        bpMods.push(2048);\n        desc.moveBP = basePower / 2;\n        desc.weather = field.weather;\n    }\n    else if (move.named('Collision Course', 'Electro Drift')) {\n        var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\n        var isRingTarget = defender.hasItem('Ring Target') && !defender.hasAbility('Klutz');\n        var type1Effectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity, isRingTarget);\n        var type2Effectiveness = defender.types[1] ? (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity, isRingTarget) : 1;\n        if (type1Effectiveness * type2Effectiveness >= 2) {\n            bpMods.push(5461);\n            desc.moveBP = basePower * (5461 / 4096);\n        }\n    }\n    if (field.attackerSide.isHelpingHand) {\n        bpMods.push(6144);\n        desc.isHelpingHand = true;\n    }\n    var terrainMultiplier = 6144;\n    if ((0, util_2.isGrounded)(attacker, field)) {\n        if ((field.hasTerrain('Electric') && move.hasType('Electric')) ||\n            (field.hasTerrain('Grassy') && move.hasType('Grass')) ||\n            (field.hasTerrain('Psychic') && move.hasType('Psychic'))) {\n            bpMods.push(terrainMultiplier);\n            desc.terrain = field.terrain;\n        }\n    }\n    if ((0, util_2.isGrounded)(defender, field)) {\n        if ((field.hasTerrain('Misty') && move.hasType('Dragon')) ||\n            (field.hasTerrain('Grassy') && move.named('Bulldoze', 'Earthquake'))) {\n            bpMods.push(2048);\n            desc.terrain = field.terrain;\n        }\n    }\n    if ((attacker.hasAbility('Technician') && basePower <= 60) ||\n        (attacker.hasAbility('Flare Boost') &&\n            attacker.hasStatus('brn') && move.category === 'Special') ||\n        (attacker.hasAbility('Toxic Boost') &&\n            attacker.hasStatus('psn', 'tox') && move.category === 'Physical') ||\n        (attacker.hasAbility('Mega Launcher') && move.flags.pulse) ||\n        (attacker.hasAbility('Strong Jaw') && move.flags.bite) ||\n        (attacker.hasAbility('Steely Spirit') && move.hasType('Steel')) ||\n        (attacker.hasAbility('Sharpness') && move.flags.slicing)) {\n        bpMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    var aura = \"\".concat(move.type, \" Aura\");\n    var isAttackerAura = attacker.hasAbility(aura);\n    var isDefenderAura = defender.hasAbility(aura);\n    var isUserAuraBreak = attacker.hasAbility('Aura Break') || defender.hasAbility('Aura Break');\n    var isFieldAuraBreak = field.isAuraBreak;\n    var isFieldFairyAura = field.isFairyAura && move.type === 'Fairy';\n    var isFieldDarkAura = field.isDarkAura && move.type === 'Dark';\n    var auraActive = isAttackerAura || isDefenderAura || isFieldFairyAura || isFieldDarkAura;\n    var auraBreak = isFieldAuraBreak || isUserAuraBreak;\n    if (auraActive) {\n        if (auraBreak) {\n            bpMods.push(3072);\n            desc.attackerAbility = attacker.ability;\n            desc.defenderAbility = defender.ability;\n        }\n        else {\n            bpMods.push(5448);\n            if (isAttackerAura)\n                desc.attackerAbility = attacker.ability;\n            if (isDefenderAura)\n                desc.defenderAbility = defender.ability;\n        }\n    }\n    if ((attacker.hasAbility('Sheer Force') &&\n        (move.secondaries || move.named('Jet Punch', 'Order Up')) && !move.isMax) ||\n        (attacker.hasAbility('Sand Force') &&\n            field.hasWeather('Sand') && move.hasType('Rock', 'Ground', 'Steel')) ||\n        (attacker.hasAbility('Analytic') &&\n            (turnOrder !== 'first' || field.defenderSide.isSwitching === 'out')) ||\n        (attacker.hasAbility('Tough Claws') && move.flags.contact) ||\n        (attacker.hasAbility('Punk Rock') && move.flags.sound)) {\n        bpMods.push(5325);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (field.attackerSide.isBattery && move.category === 'Special') {\n        bpMods.push(5325);\n        desc.isBattery = true;\n    }\n    if (field.attackerSide.isPowerSpot) {\n        bpMods.push(5325);\n        desc.isPowerSpot = true;\n    }\n    if (attacker.hasAbility('Rivalry') && ![attacker.gender, defender.gender].includes('N')) {\n        if (attacker.gender === defender.gender) {\n            bpMods.push(5120);\n            desc.rivalry = 'buffed';\n        }\n        else {\n            bpMods.push(3072);\n            desc.rivalry = 'nerfed';\n        }\n        desc.attackerAbility = attacker.ability;\n    }\n    if (!move.isMax && hasAteAbilityTypeChange) {\n        bpMods.push(4915);\n    }\n    if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||\n        (attacker.hasAbility('Iron Fist') && move.flags.punch)) {\n        bpMods.push(4915);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (attacker.hasItem('Punching Glove') && move.flags.punch) {\n        bpMods.push(4506);\n        desc.attackerItem = attacker.item;\n    }\n    if (defender.hasAbility('Heatproof') && move.hasType('Fire')) {\n        bpMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.hasAbility('Dry Skin') && move.hasType('Fire')) {\n        bpMods.push(5120);\n        desc.defenderAbility = defender.ability;\n    }\n    if (attacker.hasAbility('Supreme Overlord') && attacker.alliesFainted) {\n        var powMod = [4096, 4506, 4915, 5325, 5734, 6144];\n        bpMods.push(powMod[Math.min(5, attacker.alliesFainted)]);\n        desc.attackerAbility = attacker.ability;\n        desc.alliesFainted = attacker.alliesFainted;\n    }\n    if (attacker.hasItem(\"\".concat(move.type, \" Gem\"))) {\n        bpMods.push(6144);\n        desc.attackerItem = attacker.item;\n    }\n    else if (((attacker.hasItem('Adamant Crystal') && attacker.named('Dialga-Origin')) ||\n        (attacker.hasItem('Adamant Orb') && attacker.named('Dialga')) &&\n            move.hasType('Steel', 'Dragon')) ||\n        ((attacker.hasItem('Lustrous Orb') &&\n            attacker.named('Palkia')) ||\n            (attacker.hasItem('Lustrous Globe') && attacker.named('Palkia-Origin')) &&\n                move.hasType('Water', 'Dragon')) ||\n        ((attacker.hasItem('Griseous Orb') || attacker.hasItem('Griseous Core')) &&\n            (attacker.named('Giratina-Origin') || attacker.named('Giratina')) &&\n            move.hasType('Ghost', 'Dragon')) ||\n        (attacker.hasItem('Vile Vial') &&\n            attacker.named('Venomicon-Epilogue') &&\n            move.hasType('Poison', 'Flying')) ||\n        attacker.item && move.hasType((0, items_1.getItemBoostType)(attacker.item))) {\n        bpMods.push(4915);\n        desc.attackerItem = attacker.item;\n    }\n    else if ((attacker.hasItem('Muscle Band') && move.category === 'Physical') ||\n        (attacker.hasItem('Wise Glasses') && move.category === 'Special')) {\n        bpMods.push(4505);\n        desc.attackerItem = attacker.item;\n    }\n    return bpMods;\n}\nexports.calculateBPModsSMSSSV = calculateBPModsSMSSSV;\nfunction calculateAttackSMSSSV(gen, attacker, defender, move, field, desc, isCritical) {\n    if (isCritical === void 0) { isCritical = false; }\n    var attack;\n    var attackSource = move.named('Foul Play') ? defender : attacker;\n    if (move.named('Photon Geyser', 'Light That Burns The Sky') ||\n        (move.named('Tera Blast') && attackSource.teraType)) {\n        move.category = attackSource.stats.atk > attackSource.stats.spa ? 'Physical' : 'Special';\n    }\n    var attackStat = move.named('Shell Side Arm') &&\n        (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical'\n        ? 'atk'\n        : move.named('Body Press')\n            ? 'def'\n            : move.category === 'Special'\n                ? 'spa'\n                : 'atk';\n    desc.attackEVs =\n        move.named('Foul Play')\n            ? (0, util_2.getEVDescriptionText)(gen, defender, attackStat, defender.nature)\n            : (0, util_2.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\n    if (attackSource.boosts[attackStat] === 0 ||\n        (isCritical && attackSource.boosts[attackStat] < 0)) {\n        attack = attackSource.rawStats[attackStat];\n    }\n    else if (defender.hasAbility('Unaware')) {\n        attack = attackSource.rawStats[attackStat];\n        desc.defenderAbility = defender.ability;\n    }\n    else {\n        attack = attackSource.stats[attackStat];\n        desc.attackBoost = attackSource.boosts[attackStat];\n    }\n    if (attacker.hasAbility('Hustle') && move.category === 'Physical') {\n        attack = (0, util_2.pokeRound)((attack * 3) / 2);\n        desc.attackerAbility = attacker.ability;\n    }\n    var atMods = calculateAtModsSMSSSV(gen, attacker, defender, move, field, desc);\n    attack = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((attack * (0, util_2.chainMods)(atMods, 410, 131072)) / 4096)));\n    return attack;\n}\nexports.calculateAttackSMSSSV = calculateAttackSMSSSV;\nfunction calculateAtModsSMSSSV(gen, attacker, defender, move, field, desc) {\n    var atMods = [];\n    if ((attacker.hasAbility('Slow Start') && attacker.abilityOn &&\n        (move.category === 'Physical' || (move.category === 'Special' && move.isZ))) ||\n        (attacker.hasAbility('Defeatist') && attacker.curHP() <= attacker.maxHP() / 2)) {\n        atMods.push(2048);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if ((attacker.hasAbility('Solar Power') &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        move.category === 'Special') ||\n        (attacker.named('Cherrim') &&\n            attacker.hasAbility('Flower Gift') &&\n            field.hasWeather('Sun', 'Harsh Sunshine') &&\n            move.category === 'Physical') ||\n        (attacker.hasAbility('Gorilla Tactics') && move.category === 'Physical' &&\n            !attacker.isDynamaxed)) {\n        atMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n        desc.weather = field.weather;\n    }\n    else if (field.attackerSide.isFlowerGift &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        move.category === 'Physical') {\n        atMods.push(6144);\n        desc.weather = field.weather;\n        desc.isFlowerGiftAttacker = true;\n    }\n    else if ((attacker.hasAbility('Guts') && attacker.status && move.category === 'Physical') ||\n        (attacker.curHP() <= attacker.maxHP() / 3 &&\n            ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\n                (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\n                (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\n                (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||\n        (move.category === 'Special' && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))) {\n        atMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\n        atMods.push(6144);\n        desc.attackerAbility = 'Flash Fire';\n    }\n    else if ((attacker.hasAbility('Steelworker') && move.hasType('Steel')) ||\n        (attacker.hasAbility('Dragon\\'s Maw') && move.hasType('Dragon')) ||\n        (attacker.hasAbility('Transistor') && move.hasType('Electric')) ||\n        (attacker.hasAbility('Rocky Payload') && move.hasType('Rock'))) {\n        atMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Stakeout') && attacker.abilityOn) {\n        atMods.push(8192);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if ((attacker.hasAbility('Water Bubble') && move.hasType('Water')) ||\n        (attacker.hasAbility('Huge Power', 'Pure Power') && move.category === 'Physical')) {\n        atMods.push(8192);\n        desc.attackerAbility = attacker.ability;\n    }\n    if ((defender.hasAbility('Thick Fat') && move.hasType('Fire', 'Ice')) ||\n        (defender.hasAbility('Water Bubble') && move.hasType('Fire')) ||\n        (defender.hasAbility('Purifying Salt') && move.hasType('Ghost'))) {\n        atMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    var isTabletsOfRuinActive = defender.hasAbility('Tablets of Ruin') || field.isTabletsOfRuin;\n    var isVesselOfRuinActive = defender.hasAbility('Vessel of Ruin') || field.isVesselOfRuin;\n    if ((isTabletsOfRuinActive && move.category === 'Physical') ||\n        (isVesselOfRuinActive && move.category === 'Special')) {\n        if (defender.hasAbility('Tablets of Ruin') || defender.hasAbility('Vessel of Ruin')) {\n            desc.defenderAbility = defender.ability;\n        }\n        else {\n            desc[move.category === 'Special' ? 'isVesselOfRuin' : 'isTabletsOfRuin'] = true;\n        }\n        atMods.push(3072);\n    }\n    if ((attacker.hasAbility('Protosynthesis') &&\n        (field.hasWeather('Sun') || attacker.hasItem('Booster Energy'))) ||\n        (attacker.hasAbility('Quark Drive') &&\n            (field.hasTerrain('Electric') || attacker.hasItem('Booster Energy')))) {\n        if ((move.category === 'Physical' &&\n            (0, util_2.getMostProficientStat)(attacker) === 'atk') ||\n            (move.category === 'Special' && (0, util_2.getMostProficientStat)(attacker) === 'spa')) {\n            atMods.push(5325);\n            desc.attackerAbility = attacker.ability;\n        }\n    }\n    if ((attacker.hasAbility('Hadron Engine') && move.category === 'Special' &&\n        field.hasTerrain('Electric') && (0, util_2.isGrounded)(attacker, field)) ||\n        (attacker.hasAbility('Orichalcum Pulse') && move.category === 'Physical' &&\n            field.hasWeather('Sun', 'Harsh Sunshine') && !attacker.hasItem('Utility Umbrella'))) {\n        atMods.push(5461);\n        desc.attackerAbility = attacker.ability;\n    }\n    if ((attacker.hasItem('Thick Club') &&\n        attacker.named('Cubone', 'Marowak', 'Marowak-Alola', 'Marowak-Alola-Totem') &&\n        move.category === 'Physical') ||\n        (attacker.hasItem('Deep Sea Tooth') &&\n            attacker.named('Clamperl') &&\n            move.category === 'Special') ||\n        (attacker.hasItem('Light Ball') && attacker.name.includes('Pikachu') && !move.isZ)) {\n        atMods.push(8192);\n        desc.attackerItem = attacker.item;\n    }\n    else if (!move.isZ && !move.isMax &&\n        ((attacker.hasItem('Choice Band') && move.category === 'Physical') ||\n            (attacker.hasItem('Choice Specs') && move.category === 'Special') ||\n            attacker.hasItem(\"Soul Dew\") && move.category === 'Special' && attacker.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega'))) {\n        atMods.push(6144);\n        desc.attackerItem = attacker.item;\n    }\n    return atMods;\n}\nexports.calculateAtModsSMSSSV = calculateAtModsSMSSSV;\nfunction calculateDefenseSMSSSV(gen, attacker, defender, move, field, desc, isCritical) {\n    if (isCritical === void 0) { isCritical = false; }\n    var defense;\n    var hitsPhysical = move.overrideDefensiveStat === 'def' || move.category === 'Physical' ||\n        (move.named('Shell Side Arm') && (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical');\n    var defenseStat = hitsPhysical ? 'def' : 'spd';\n    desc.defenseEVs = (0, util_2.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\n    if (defender.boosts[defenseStat] === 0 ||\n        (isCritical && defender.boosts[defenseStat] > 0) ||\n        move.ignoreDefensive) {\n        defense = defender.rawStats[defenseStat];\n    }\n    else if (attacker.hasAbility('Unaware')) {\n        defense = defender.rawStats[defenseStat];\n        desc.attackerAbility = attacker.ability;\n    }\n    else {\n        defense = defender.stats[defenseStat];\n        desc.defenseBoost = defender.boosts[defenseStat];\n    }\n    if (field.hasWeather('Sand') && defender.hasType('Rock') && !hitsPhysical) {\n        defense = (0, util_2.pokeRound)((defense * 3) / 2);\n        desc.weather = field.weather;\n    }\n    if (field.hasWeather('Snow') && defender.hasType('Ice') && hitsPhysical) {\n        defense = (0, util_2.pokeRound)((defense * 3) / 2);\n        desc.weather = field.weather;\n    }\n    var dfMods = calculateDfModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, hitsPhysical);\n    return (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((defense * (0, util_2.chainMods)(dfMods, 410, 131072)) / 4096)));\n}\nexports.calculateDefenseSMSSSV = calculateDefenseSMSSSV;\nfunction calculateDfModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, hitsPhysical) {\n    var _a;\n    if (isCritical === void 0) { isCritical = false; }\n    if (hitsPhysical === void 0) { hitsPhysical = false; }\n    var dfMods = [];\n    if (defender.hasAbility('Marvel Scale') && defender.status && hitsPhysical) {\n        dfMods.push(6144);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.named('Cherrim') &&\n        defender.hasAbility('Flower Gift') &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        !hitsPhysical) {\n        dfMods.push(6144);\n        desc.defenderAbility = defender.ability;\n        desc.weather = field.weather;\n    }\n    else if (field.defenderSide.isFlowerGift &&\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\n        !hitsPhysical) {\n        dfMods.push(6144);\n        desc.weather = field.weather;\n        desc.isFlowerGiftDefender = true;\n    }\n    else if (defender.hasAbility('Grass Pelt') &&\n        field.hasTerrain('Grassy') &&\n        hitsPhysical) {\n        dfMods.push(6144);\n        desc.defenderAbility = defender.ability;\n    }\n    else if (defender.hasAbility('Fur Coat') && hitsPhysical) {\n        dfMods.push(8192);\n        desc.defenderAbility = defender.ability;\n    }\n    var isSwordOfRuinActive = attacker.hasAbility('Sword of Ruin') || field.isSwordOfRuin;\n    var isBeadsOfRuinActive = attacker.hasAbility('Beads of Ruin') || field.isBeadsOfRuin;\n    if ((isSwordOfRuinActive && hitsPhysical) ||\n        (isBeadsOfRuinActive && !hitsPhysical)) {\n        if (attacker.hasAbility('Sword of Ruin') || attacker.hasAbility('Beads of Ruin')) {\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            desc[hitsPhysical ? 'isSwordOfRuin' : 'isBeadsOfRuin'] = true;\n        }\n        dfMods.push(3072);\n    }\n    if (move.named('Explosion', 'Self-Destruct', 'Misty Explosion')) {\n        dfMods.push(2048);\n    }\n    if ((defender.hasAbility('Protosynthesis') &&\n        (field.hasWeather('Sun') || attacker.hasItem('Booster Energy'))) ||\n        (defender.hasAbility('Quark Drive') &&\n            (field.hasTerrain('Electric') || attacker.hasItem('Booster Energy')))) {\n        if ((hitsPhysical && (0, util_2.getMostProficientStat)(defender) === 'def') ||\n            (!hitsPhysical && (0, util_2.getMostProficientStat)(defender) === 'spd')) {\n            desc.defenderAbility = defender.ability;\n            dfMods.push(5324);\n        }\n    }\n    if ((defender.hasItem('Eviolite') && ((_a = gen.species.get((0, util_1.toID)(defender.name))) === null || _a === void 0 ? void 0 : _a.nfe)) ||\n        (!hitsPhysical && defender.hasItem('Assault Vest')) ||\n        (defender.hasItem(\"Soul Dew\") && move.category === 'Special' && defender.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega'))) {\n        dfMods.push(6144);\n        desc.defenderItem = defender.item;\n    }\n    else if ((defender.hasItem('Metal Powder') && defender.named('Ditto') && hitsPhysical) ||\n        (defender.hasItem('Deep Sea Scale') && defender.named('Clamperl') && !hitsPhysical)) {\n        dfMods.push(8192);\n        desc.defenderItem = defender.item;\n    }\n    return dfMods;\n}\nexports.calculateDfModsSMSSSV = calculateDfModsSMSSSV;\nfunction calculateFinalModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, typeEffectiveness) {\n    if (isCritical === void 0) { isCritical = false; }\n    var finalMods = [];\n    if (field.defenderSide.isReflect && move.category === 'Physical' &&\n        !isCritical && !field.defenderSide.isAuroraVeil) {\n        finalMods.push(field.gameType !== 'Singles' ? 2732 : 2048);\n        desc.isReflect = true;\n    }\n    else if (field.defenderSide.isLightScreen && move.category === 'Special' &&\n        !isCritical && !field.defenderSide.isAuroraVeil) {\n        finalMods.push(field.gameType !== 'Singles' ? 2732 : 2048);\n        desc.isLightScreen = true;\n    }\n    if (field.defenderSide.isAuroraVeil && !isCritical) {\n        finalMods.push(field.gameType !== 'Singles' ? 2732 : 2048);\n        desc.isAuroraVeil = true;\n    }\n    if (attacker.hasAbility('Neuroforce') && typeEffectiveness > 1) {\n        finalMods.push(5120);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Sniper') && isCritical) {\n        finalMods.push(6144);\n        desc.attackerAbility = attacker.ability;\n    }\n    else if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {\n        finalMods.push(8192);\n        desc.attackerAbility = attacker.ability;\n    }\n    if (defender.isDynamaxed && move.named('Dynamax Cannon', 'Behemoth Blade', 'Behemoth Bash')) {\n        finalMods.push(8192);\n    }\n    if (defender.hasAbility('Multiscale', 'Shadow Shield') &&\n        defender.curHP() === defender.maxHP() &&\n        !field.defenderSide.isSR && (!field.defenderSide.spikes || defender.hasType('Flying')) &&\n        !attacker.hasAbility('Parental Bond (Child)')) {\n        finalMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    if (defender.hasAbility('Fluffy') && move.flags.contact && !attacker.hasAbility('Long Reach')) {\n        finalMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    else if ((defender.hasAbility('Punk Rock') && move.flags.sound) ||\n        (defender.hasAbility('Ice Scales') && move.category === 'Special')) {\n        finalMods.push(2048);\n        desc.defenderAbility = defender.ability;\n    }\n    if (defender.hasAbility('Solid Rock', 'Filter', 'Prism Armor') && typeEffectiveness > 1) {\n        finalMods.push(3072);\n        desc.defenderAbility = defender.ability;\n    }\n    if (field.defenderSide.isFriendGuard) {\n        finalMods.push(3072);\n        desc.isFriendGuard = true;\n    }\n    if (defender.hasAbility('Fluffy') && move.hasType('Fire')) {\n        finalMods.push(8192);\n        desc.defenderAbility = defender.ability;\n    }\n    if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1 && !move.isZ) {\n        finalMods.push(4915);\n        desc.attackerItem = attacker.item;\n    }\n    else if (attacker.hasItem('Life Orb')) {\n        finalMods.push(5324);\n        desc.attackerItem = attacker.item;\n    }\n    else if (attacker.hasItem('Metronome') && move.timesUsedWithMetronome >= 1) {\n        var timesUsedWithMetronome = Math.floor(move.timesUsedWithMetronome);\n        if (timesUsedWithMetronome <= 4) {\n            finalMods.push(4096 + timesUsedWithMetronome * 819);\n        }\n        else {\n            finalMods.push(8192);\n        }\n        desc.attackerItem = attacker.item;\n    }\n    if (move.hasType((0, items_1.getBerryResistType)(defender.item)) &&\n        (typeEffectiveness > 1 || move.hasType('Normal')) &&\n        !attacker.hasAbility('Unnerve', 'As One (Glastrier)', 'As One (Spectrier)')) {\n        if (defender.hasAbility('Ripen')) {\n            finalMods.push(1024);\n        }\n        else {\n            finalMods.push(2048);\n        }\n        desc.defenderItem = defender.item;\n    }\n    return finalMods;\n}\nexports.calculateFinalModsSMSSSV = calculateFinalModsSMSSSV;\nfunction hasTerrainSeed(pokemon) {\n    return pokemon.hasItem('Electric Seed', 'Misty Seed', 'Grassy Seed', 'Psychic Seed');\n}\n//# sourceMappingURL=gen789.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen789.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/util.js":
/*!*************************************!*\
  !*** ./calc/dist/mechanics/util.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexports.__esModule = true;\nexports.OF32 = exports.OF16 = exports.pokeRound = exports.handleFixedDamageMoves = exports.getEVDescriptionText = exports.countBoosts = exports.getWeightFactor = exports.getShellSideArmCategory = exports.getFinalDamage = exports.getMostProficientStat = exports.getBaseDamage = exports.chainMods = exports.checkMultihitBoost = exports.checkSeedBoost = exports.checkInfiltrator = exports.checkDauntlessShield = exports.checkIntrepidSword = exports.checkDownload = exports.checkIntimidate = exports.checkWonderRoom = exports.checkItem = exports.checkForecast = exports.checkAirLock = exports.getMoveEffectiveness = exports.getFinalSpeed = exports.computeFinalStats = exports.getModifiedStat = exports.isGrounded = void 0;\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\nvar stats_1 = __webpack_require__(/*! ../stats */ \"./calc/dist/stats.js\");\nvar EV_ITEMS = [\n    'Macho Brace',\n    'Power Anklet',\n    'Power Band',\n    'Power Belt',\n    'Power Bracer',\n    'Power Lens',\n    'Power Weight',\n];\nfunction isGrounded(pokemon, field) {\n    return (field.isGravity || pokemon.hasItem('Iron Ball') ||\n        (!pokemon.hasType('Flying') &&\n            !pokemon.hasAbility('Levitate') &&\n            !pokemon.hasItem('Air Balloon')));\n}\nexports.isGrounded = isGrounded;\nfunction getModifiedStat(stat, mod, gen) {\n    if (gen && gen.num < 3) {\n        if (mod >= 0) {\n            var pastGenBoostTable = [1, 1.5, 2, 2.5, 3, 3.5, 4];\n            stat = Math.floor(stat * pastGenBoostTable[mod]);\n        }\n        else {\n            var numerators = [100, 66, 50, 40, 33, 28, 25];\n            stat = Math.floor((stat * numerators[-mod]) / 100);\n        }\n        return Math.min(999, Math.max(1, stat));\n    }\n    var numerator = 0;\n    var denominator = 1;\n    var modernGenBoostTable = [\n        [2, 8],\n        [2, 7],\n        [2, 6],\n        [2, 5],\n        [2, 4],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [4, 2],\n        [5, 2],\n        [6, 2],\n        [7, 2],\n        [8, 2],\n    ];\n    stat = OF16(stat * modernGenBoostTable[6 + mod][numerator]);\n    stat = Math.floor(stat / modernGenBoostTable[6 + mod][denominator]);\n    return stat;\n}\nexports.getModifiedStat = getModifiedStat;\nfunction computeFinalStats(gen, attacker, defender, field) {\n    var e_1, _a, e_2, _b;\n    var stats = [];\n    for (var _i = 4; _i < arguments.length; _i++) {\n        stats[_i - 4] = arguments[_i];\n    }\n    var sides = [[attacker, field.attackerSide], [defender, field.defenderSide]];\n    try {\n        for (var sides_1 = __values(sides), sides_1_1 = sides_1.next(); !sides_1_1.done; sides_1_1 = sides_1.next()) {\n            var _c = __read(sides_1_1.value, 2), pokemon = _c[0], side = _c[1];\n            try {\n                for (var stats_2 = (e_2 = void 0, __values(stats)), stats_2_1 = stats_2.next(); !stats_2_1.done; stats_2_1 = stats_2.next()) {\n                    var stat = stats_2_1.value;\n                    if (stat === 'spe') {\n                        pokemon.stats.spe = getFinalSpeed(gen, pokemon, field, side);\n                    }\n                    else {\n                        pokemon.stats[stat] = getModifiedStat(pokemon.rawStats[stat], pokemon.boosts[stat], gen);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (stats_2_1 && !stats_2_1.done && (_b = stats_2[\"return\"])) _b.call(stats_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (sides_1_1 && !sides_1_1.done && (_a = sides_1[\"return\"])) _a.call(sides_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n}\nexports.computeFinalStats = computeFinalStats;\nfunction getFinalSpeed(gen, pokemon, field, side) {\n    var weather = field.weather || '';\n    var terrain = field.terrain;\n    var speed = getModifiedStat(pokemon.rawStats.spe, pokemon.boosts.spe, gen);\n    var speedMods = [];\n    if (side.isTailwind)\n        speedMods.push(8192);\n    if ((pokemon.hasAbility('Unburden') && pokemon.abilityOn) ||\n        (pokemon.hasAbility('Chlorophyll') && weather.includes('Sun')) ||\n        (pokemon.hasAbility('Sand Rush') && weather === 'Sand') ||\n        (pokemon.hasAbility('Swift Swim') && weather.includes('Rain')) ||\n        (pokemon.hasAbility('Slush Rush') && ['Hail', 'Snow'].includes(weather)) ||\n        (pokemon.hasAbility('Surge Surfer') && terrain === 'Electric')) {\n        speedMods.push(8192);\n    }\n    else if (pokemon.hasAbility('Quick Feet') && pokemon.status) {\n        speedMods.push(6144);\n    }\n    else if (pokemon.hasAbility('Slow Start') && pokemon.abilityOn) {\n        speedMods.push(2048);\n    }\n    else if (getMostProficientStat(pokemon, gen) === 'spe' &&\n        ((pokemon.hasAbility('Protosynthesis') &&\n            (weather.includes('Sun') || pokemon.hasItem('Booster Energy'))) ||\n            (pokemon.hasAbility('Quark Drive') &&\n                (terrain === 'Electric' || pokemon.hasItem('Booster Energy'))))) {\n        speedMods.push(6144);\n    }\n    if (pokemon.hasItem('Choice Scarf')) {\n        speedMods.push(6144);\n    }\n    else if (pokemon.hasItem.apply(pokemon, __spreadArray(['Iron Ball'], __read(EV_ITEMS), false))) {\n        speedMods.push(2048);\n    }\n    else if (pokemon.hasItem('Quick Powder') && pokemon.named('Ditto')) {\n        speedMods.push(8192);\n    }\n    speed = OF32(pokeRound((speed * chainMods(speedMods, 410, 131172)) / 4096));\n    if (pokemon.hasStatus('par') && !pokemon.hasAbility('Quick Feet')) {\n        speed = Math.floor(OF32(speed * (gen.num < 7 ? 25 : 25)) / 100);\n    }\n    var maxSpeed = gen.num <= 2 ? 999 : 10000;\n    speed = Math.min(maxSpeed, speed);\n    speed = Math.max(0, speed);\n    if (field.isTrickRoom)\n        speed = Math.max(0, maxSpeed - speed);\n    return speed;\n}\nexports.getFinalSpeed = getFinalSpeed;\nfunction getMoveEffectiveness(gen, move, type, isGhostRevealed, isGravity, isRingTarget) {\n    if ((isRingTarget || isGhostRevealed) && type === 'Ghost' && move.hasType('Normal', 'Fighting')) {\n        return 1;\n    }\n    else if ((isRingTarget || isGravity) && type === 'Flying' && move.hasType('Ground')) {\n        return 1;\n    }\n    else if (move.named('Freeze-Dry') && type === 'Water') {\n        return 2;\n    }\n    else if (move.named('Flying Press')) {\n        return (gen.types.get('fighting').effectiveness[type] *\n            gen.types.get('flying').effectiveness[type]);\n    }\n    else {\n        return gen.types.get((0, util_1.toID)(move.type)).effectiveness[type];\n    }\n}\nexports.getMoveEffectiveness = getMoveEffectiveness;\nfunction checkAirLock(pokemon, field) {\n    if (pokemon.hasAbility('Air Lock', 'Cloud Nine')) {\n        field.weather = undefined;\n    }\n}\nexports.checkAirLock = checkAirLock;\nfunction checkForecast(pokemon, weather) {\n    if (pokemon.hasAbility('Forecast') && pokemon.named('Castform')) {\n        switch (weather) {\n            case 'Sun':\n            case 'Harsh Sunshine':\n                pokemon.types = ['Fire'];\n                break;\n            case 'Rain':\n            case 'Heavy Rain':\n                pokemon.types = ['Water'];\n                break;\n            case 'Hail':\n            case 'Snow':\n                pokemon.types = ['Ice'];\n                break;\n            default:\n                pokemon.types = ['Normal'];\n        }\n    }\n}\nexports.checkForecast = checkForecast;\nfunction checkItem(pokemon, magicRoomActive) {\n    if (pokemon.hasAbility('Klutz') && !EV_ITEMS.includes(pokemon.item) ||\n        magicRoomActive) {\n        pokemon.item = '';\n    }\n}\nexports.checkItem = checkItem;\nfunction checkWonderRoom(pokemon, wonderRoomActive) {\n    var _a;\n    if (wonderRoomActive) {\n        _a = __read([pokemon.rawStats.spd, pokemon.rawStats.def], 2), pokemon.rawStats.def = _a[0], pokemon.rawStats.spd = _a[1];\n    }\n}\nexports.checkWonderRoom = checkWonderRoom;\nfunction checkIntimidate(gen, source, target) {\n    var blocked = target.hasAbility('Clear Body', 'White Smoke', 'Hyper Cutter', 'Full Metal Body') ||\n        (gen.num >= 8 && target.hasAbility('Inner Focus', 'Own Tempo', 'Oblivious', 'Scrappy')) ||\n        target.hasItem('Clear Amulet');\n    if (source.hasAbility('Intimidate') && source.abilityOn && !blocked) {\n        if (target.hasAbility('Contrary', 'Defiant', 'Guard Dog')) {\n            target.boosts.atk = Math.min(6, target.boosts.atk + 1);\n        }\n        else if (target.hasAbility('Simple')) {\n            target.boosts.atk = Math.max(-6, target.boosts.atk - 2);\n        }\n        else {\n            target.boosts.atk = Math.max(-6, target.boosts.atk - 1);\n        }\n        if (target.hasAbility('Competitive')) {\n            target.boosts.spa = Math.min(6, target.boosts.spa + 2);\n        }\n    }\n}\nexports.checkIntimidate = checkIntimidate;\nfunction checkDownload(source, target, wonderRoomActive) {\n    var _a;\n    if (source.hasAbility('Download')) {\n        var def = target.stats.def;\n        var spd = target.stats.spd;\n        if (wonderRoomActive)\n            _a = __read([spd, def], 2), def = _a[0], spd = _a[1];\n        if (spd <= def) {\n            source.boosts.spa = Math.min(6, source.boosts.spa + 1);\n        }\n        else {\n            source.boosts.atk = Math.min(6, source.boosts.atk + 1);\n        }\n    }\n}\nexports.checkDownload = checkDownload;\nfunction checkIntrepidSword(source, gen) {\n    if (source.hasAbility('Intrepid Sword') && gen.num < 9) {\n        source.boosts.atk = Math.min(6, source.boosts.atk + 1);\n    }\n}\nexports.checkIntrepidSword = checkIntrepidSword;\nfunction checkDauntlessShield(source, gen) {\n    if (source.hasAbility('Dauntless Shield') && gen.num < 9) {\n        source.boosts.def = Math.min(6, source.boosts.def + 1);\n    }\n}\nexports.checkDauntlessShield = checkDauntlessShield;\nfunction checkInfiltrator(pokemon, affectedSide) {\n    if (pokemon.hasAbility('Infiltrator')) {\n        affectedSide.isReflect = false;\n        affectedSide.isLightScreen = false;\n        affectedSide.isAuroraVeil = false;\n    }\n}\nexports.checkInfiltrator = checkInfiltrator;\nfunction checkSeedBoost(pokemon, field) {\n    if (!pokemon.item)\n        return;\n    if (field.terrain && pokemon.item.includes('Seed')) {\n        var terrainSeed = pokemon.item.substring(0, pokemon.item.indexOf(' '));\n        if (field.hasTerrain(terrainSeed)) {\n            if (terrainSeed === 'Grassy' || terrainSeed === 'Electric') {\n                pokemon.boosts.def = pokemon.hasAbility('Contrary')\n                    ? Math.max(-6, pokemon.boosts.def - 1)\n                    : Math.min(6, pokemon.boosts.def + 1);\n            }\n            else {\n                pokemon.boosts.spd = pokemon.hasAbility('Contrary')\n                    ? Math.max(-6, pokemon.boosts.spd - 1)\n                    : Math.min(6, pokemon.boosts.spd + 1);\n            }\n        }\n    }\n}\nexports.checkSeedBoost = checkSeedBoost;\nfunction checkMultihitBoost(gen, attacker, defender, move, field, desc, usedWhiteHerb) {\n    if (usedWhiteHerb === void 0) { usedWhiteHerb = false; }\n    if (move.named('Gyro Ball', 'Electro Ball') && defender.hasAbility('Gooey', 'Tangling Hair')) {\n        if (attacker.hasItem('White Herb') && !usedWhiteHerb) {\n            desc.attackerItem = attacker.item;\n            usedWhiteHerb = true;\n        }\n        else {\n            attacker.boosts.spe = Math.max(attacker.boosts.spe - 1, -6);\n            attacker.stats.spe = getFinalSpeed(gen, attacker, field, field.attackerSide);\n            desc.defenderAbility = defender.ability;\n        }\n    }\n    else if (move.named('Power-Up Punch')) {\n        attacker.boosts.atk = Math.min(attacker.boosts.atk + 1, 6);\n        attacker.stats.atk = getModifiedStat(attacker.rawStats.atk, attacker.boosts.atk, gen);\n    }\n    if (defender.hasAbility('Stamina')) {\n        if (attacker.hasAbility('Unaware')) {\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            defender.boosts.def = Math.min(defender.boosts.def + 1, 6);\n            defender.stats.def = getModifiedStat(defender.rawStats.def, defender.boosts.def, gen);\n            desc.defenderAbility = defender.ability;\n        }\n    }\n    else if (defender.hasAbility('Weak Armor')) {\n        if (attacker.hasAbility('Unaware')) {\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            if (defender.hasItem('White Herb') && !usedWhiteHerb) {\n                desc.defenderItem = defender.item;\n                usedWhiteHerb = true;\n            }\n            else {\n                defender.boosts.def = Math.max(defender.boosts.def - 1, -6);\n                defender.stats.def = getModifiedStat(defender.rawStats.def, defender.boosts.def, gen);\n            }\n        }\n        defender.boosts.spe = Math.min(defender.boosts.spe + 2, 6);\n        defender.stats.spe = getFinalSpeed(gen, defender, field, field.defenderSide);\n        desc.defenderAbility = defender.ability;\n    }\n    var simple = attacker.hasAbility('Simple') ? 2 : 1;\n    if (move.dropsStats) {\n        if (attacker.hasAbility('Unaware')) {\n            desc.attackerAbility = attacker.ability;\n        }\n        else {\n            var stat = move.category === 'Special' ? 'spa' : 'atk';\n            var boosts = attacker.boosts[stat];\n            if (attacker.hasAbility('Contrary')) {\n                boosts = Math.min(6, boosts + move.dropsStats);\n                desc.attackerAbility = attacker.ability;\n            }\n            else {\n                boosts = Math.max(-6, boosts - move.dropsStats * simple);\n                if (simple > 1)\n                    desc.attackerAbility = attacker.ability;\n            }\n            if (attacker.hasItem('White Herb') && attacker.boosts[stat] < 0 && !usedWhiteHerb) {\n                boosts += move.dropsStats * simple;\n                desc.attackerItem = attacker.item;\n                usedWhiteHerb = true;\n            }\n            attacker.boosts[stat] = boosts;\n            attacker.stats[stat] = getModifiedStat(attacker.rawStats[stat], defender.boosts[stat], gen);\n        }\n    }\n    return usedWhiteHerb;\n}\nexports.checkMultihitBoost = checkMultihitBoost;\nfunction chainMods(mods, lowerBound, upperBound) {\n    var e_3, _a;\n    var M = 4096;\n    try {\n        for (var mods_1 = __values(mods), mods_1_1 = mods_1.next(); !mods_1_1.done; mods_1_1 = mods_1.next()) {\n            var mod = mods_1_1.value;\n            if (mod !== 4096) {\n                M = (M * mod + 2048) >> 12;\n            }\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (mods_1_1 && !mods_1_1.done && (_a = mods_1[\"return\"])) _a.call(mods_1);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n    return Math.max(Math.min(M, upperBound), lowerBound);\n}\nexports.chainMods = chainMods;\nfunction getBaseDamage(level, basePower, attack, defense) {\n    return Math.floor(OF32(Math.floor(OF32(OF32(Math.floor((2 * level) / 5 + 2) * basePower) * attack) / defense) / 50 + 2));\n}\nexports.getBaseDamage = getBaseDamage;\nfunction getMostProficientStat(pokemon, gen) {\n    var e_4, _a;\n    var bestStat = 'atk';\n    try {\n        for (var _b = __values(['def', 'spa', 'spd', 'spe']), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var stat = _c.value;\n            if (getModifiedStat(pokemon.rawStats[stat], pokemon.boosts[stat], gen) >\n                getModifiedStat(pokemon.rawStats[bestStat], pokemon.boosts[bestStat], gen)) {\n                bestStat = stat;\n            }\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n    return bestStat;\n}\nexports.getMostProficientStat = getMostProficientStat;\nfunction getFinalDamage(baseAmount, i, effectiveness, isBurned, stabMod, finalMod, protect) {\n    var damageAmount = Math.floor(OF32(baseAmount * (85 + i)) / 100);\n    if (stabMod !== 4096)\n        damageAmount = OF32(damageAmount * stabMod) / 4096;\n    damageAmount = Math.floor(OF32(pokeRound(damageAmount) * effectiveness));\n    if (isBurned)\n        damageAmount = Math.floor(damageAmount / 2);\n    if (protect)\n        damageAmount = pokeRound(OF32(damageAmount * 1024) / 4096);\n    return OF16(pokeRound(Math.max(1, OF32(damageAmount * finalMod) / 4096)));\n}\nexports.getFinalDamage = getFinalDamage;\nfunction getShellSideArmCategory(source, target) {\n    var physicalDamage = source.stats.atk / target.stats.def;\n    var specialDamage = source.stats.spa / target.stats.spd;\n    return physicalDamage > specialDamage ? 'Physical' : 'Special';\n}\nexports.getShellSideArmCategory = getShellSideArmCategory;\nfunction getWeightFactor(pokemon) {\n    return pokemon.hasAbility('Heavy Metal') ? 2\n        : (pokemon.hasAbility('Light Metal') || pokemon.hasItem('Float Stone')) ? 0.5 : 1;\n}\nexports.getWeightFactor = getWeightFactor;\nfunction countBoosts(gen, boosts) {\n    var e_5, _a;\n    var sum = 0;\n    var STATS = gen.num === 1\n        ? ['atk', 'def', 'spa', 'spe']\n        : ['atk', 'def', 'spa', 'spd', 'spe'];\n    try {\n        for (var STATS_1 = __values(STATS), STATS_1_1 = STATS_1.next(); !STATS_1_1.done; STATS_1_1 = STATS_1.next()) {\n            var stat = STATS_1_1.value;\n            var boost = boosts[stat];\n            if (boost && boost > 0)\n                sum += boost;\n        }\n    }\n    catch (e_5_1) { e_5 = { error: e_5_1 }; }\n    finally {\n        try {\n            if (STATS_1_1 && !STATS_1_1.done && (_a = STATS_1[\"return\"])) _a.call(STATS_1);\n        }\n        finally { if (e_5) throw e_5.error; }\n    }\n    return sum;\n}\nexports.countBoosts = countBoosts;\nfunction getEVDescriptionText(gen, pokemon, stat, natureName) {\n    var nature = gen.natures.get((0, util_1.toID)(natureName));\n    return (pokemon.ivs[stat] +\n        (nature.plus === nature.minus ? ''\n            : nature.plus === stat ? '+'\n                : nature.minus === stat ? '-'\n                    : '') + ' ' +\n        stats_1.Stats.displayStat(stat));\n}\nexports.getEVDescriptionText = getEVDescriptionText;\nfunction handleFixedDamageMoves(attacker, move, defender) {\n    if (move.named('Seismic Toss', 'Night Shade')) {\n        return attacker.level;\n    }\n    else if (move.named('Dragon Rage')) {\n        return 40;\n    }\n    else if (move.named('Sonic Boom')) {\n        return 20;\n    }\n    else if (move.named('Super Fang')) {\n        return Math.floor(defender.originalCurHP / 2) > 0 ? Math.floor(defender.originalCurHP / 2) : 1;\n    }\n    return 0;\n}\nexports.handleFixedDamageMoves = handleFixedDamageMoves;\nfunction pokeRound(num) {\n    return num % 1 > 0.5 ? Math.ceil(num) : Math.floor(num);\n}\nexports.pokeRound = pokeRound;\nfunction OF16(n) {\n    return n > 65535 ? n % 65536 : n;\n}\nexports.OF16 = OF16;\nfunction OF32(n) {\n    return n > 4294967295 ? n % 4294967296 : n;\n}\nexports.OF32 = OF32;\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/util.js?\n}");

/***/ }),

/***/ "./calc/dist/move.js":
/*!***************************!*\
  !*** ./calc/dist/move.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.getMaxMoveName = exports.getZMoveName = exports.Move = void 0;\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\nvar SPECIAL = ['Fire', 'Water', 'Grass', 'Electric', 'Ice', 'Psychic', 'Dark', 'Dragon'];\nvar Move = (function () {\n    function Move(gen, name, options) {\n        if (options === void 0) { options = {}; }\n        var _a, _b;\n        name = options.name || name;\n        this.originalName = name;\n        var data = (0, util_1.extend)(true, { name: name }, gen.moves.get((0, util_1.toID)(name)), options.overrides);\n        this.hits = 1;\n        if (options.useMax && data.maxMove) {\n            var maxMoveName_1 = getMaxMoveName(data.type, options.species, !!(data.category === 'Status'), options.ability);\n            var maxMove_1 = gen.moves.get((0, util_1.toID)(maxMoveName_1));\n            var maxPower = function () {\n                if (['G-Max Drum Solo', 'G-Max Fire Ball', 'G-Max Hydrosnipe'].includes(maxMoveName_1)) {\n                    return 160;\n                }\n                if (maxMove_1.basePower === 10 || maxMoveName_1 === 'Max Flare') {\n                    return data.maxMove.basePower;\n                }\n                return maxMove_1.basePower;\n            };\n            data = (0, util_1.extend)(true, {}, maxMove_1, {\n                name: maxMoveName_1,\n                basePower: maxPower(),\n                category: data.category\n            });\n        }\n        if (options.useZ && ((_a = data.zMove) === null || _a === void 0 ? void 0 : _a.basePower)) {\n            var zMoveName = getZMoveName(data.name, data.type, options.item);\n            var zMove = gen.moves.get((0, util_1.toID)(zMoveName));\n            data = (0, util_1.extend)(true, {}, zMove, {\n                name: zMoveName,\n                basePower: zMove.basePower === 1 ? data.zMove.basePower : zMove.basePower,\n                category: data.category\n            });\n        }\n        else {\n            if (data.multihit) {\n                if (typeof data.multihit === 'number') {\n                    this.hits = data.multihit;\n                }\n                else if (options.hits) {\n                    this.hits = options.hits;\n                }\n                else {\n                    this.hits = (options.ability === 'Skill Link')\n                        ? data.multihit[1]\n                        : data.multihit[0] + 1;\n                }\n            }\n            this.timesUsedWithMetronome = options.timesUsedWithMetronome;\n        }\n        this.gen = gen;\n        this.name = data.name;\n        this.ability = options.ability;\n        this.item = options.item;\n        this.useZ = options.useZ;\n        this.useMax = options.useMax;\n        this.overrides = options.overrides;\n        this.species = options.species;\n        this.bp = data.basePower;\n        var typelessDamage = (gen.num >= 2 && data.id === 'struggle') ||\n            (gen.num <= 4 && ['futuresight', 'doomdesire'].includes(data.id));\n        this.type = typelessDamage ? '???' : data.type;\n        this.category = data.category ||\n            (gen.num < 4 ? (SPECIAL.includes(data.type) ? 'Special' : 'Physical') : 'Status');\n        var stat = this.category === 'Special' ? 'spa' : 'atk';\n        if (((_b = data.self) === null || _b === void 0 ? void 0 : _b.boosts) && data.self.boosts[stat] && data.self.boosts[stat] < 0) {\n            this.dropsStats = Math.abs(data.self.boosts[stat]);\n        }\n        this.timesUsed = (this.dropsStats && options.timesUsed) || 1;\n        this.secondaries = data.secondaries;\n        this.target = data.target || 'any';\n        this.recoil = data.recoil;\n        this.hasCrashDamage = !!data.hasCrashDamage;\n        this.mindBlownRecoil = !!data.mindBlownRecoil;\n        this.struggleRecoil = !!data.struggleRecoil;\n        this.isCrit = !!options.isCrit || !!data.willCrit ||\n            gen.num === 1 && ['crabhammer', 'razorleaf', 'slash', 'karate chop'].includes(data.id);\n        this.drain = data.drain;\n        this.flags = data.flags;\n        this.priority = data.priority || 0;\n        this.ignoreDefensive = !!data.ignoreDefensive;\n        this.overrideOffensiveStat = data.overrideOffensiveStat;\n        this.overrideDefensiveStat = data.overrideDefensiveStat;\n        this.overrideOffensivePokemon = data.overrideOffensivePokemon;\n        this.overrideDefensivePokemon = data.overrideDefensivePokemon;\n        this.breaksProtect = !!data.breaksProtect;\n        this.isZ = !!data.isZ;\n        this.isMax = !!data.isMax;\n        if (!this.bp) {\n            if (['return', 'frustration', 'pikapapow', 'veeveevolley'].includes(data.id)) {\n                this.bp = 102;\n            }\n        }\n    }\n    Move.prototype.named = function () {\n        var names = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            names[_i] = arguments[_i];\n        }\n        return names.includes(this.name);\n    };\n    Move.prototype.hasType = function () {\n        var types = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            types[_i] = arguments[_i];\n        }\n        return types.includes(this.type);\n    };\n    Move.prototype.clone = function () {\n        return new Move(this.gen, this.originalName, {\n            ability: this.ability,\n            item: this.item,\n            species: this.species,\n            useZ: this.useZ,\n            useMax: this.useMax,\n            isCrit: this.isCrit,\n            hits: this.hits,\n            timesUsed: this.timesUsed,\n            timesUsedWithMetronome: this.timesUsedWithMetronome,\n            overrides: this.overrides\n        });\n    };\n    return Move;\n}());\nexports.Move = Move;\nfunction getZMoveName(moveName, moveType, item) {\n    item = item || '';\n    if (moveName.includes('Hidden Power'))\n        return 'Breakneck Blitz';\n    if (moveName === 'Clanging Scales' && item === 'Kommonium Z')\n        return 'Clangorous Soulblaze';\n    if (moveName === 'Darkest Lariat' && item === 'Incinium Z')\n        return 'Malicious Moonsault';\n    if (moveName === 'Giga Impact' && item === 'Snorlium Z')\n        return 'Pulverizing Pancake';\n    if (moveName === 'Moongeist Beam' && item === 'Lunalium Z')\n        return 'Menacing Moonraze Maelstrom';\n    if (moveName === 'Photon Geyser' && item === 'Ultranecrozium Z') {\n        return 'Light That Burns the Sky';\n    }\n    if (moveName === 'Play Rough' && item === 'Mimikium Z')\n        return 'Let\\'s Snuggle Forever';\n    if (moveName === 'Psychic' && item === 'Mewnium Z')\n        return 'Genesis Supernova';\n    if (moveName === 'Sparkling Aria' && item === 'Primarium Z')\n        return 'Oceanic Operetta';\n    if (moveName === 'Spectral Thief' && item === 'Marshadium Z') {\n        return 'Soul-Stealing 7-Star Strike';\n    }\n    if (moveName === 'Spirit Shackle' && item === 'Decidium Z')\n        return 'Sinister Arrow Raid';\n    if (moveName === 'Stone Edge' && item === 'Lycanium Z')\n        return 'Splintered Stormshards';\n    if (moveName === 'Sunsteel Strike' && item === 'Solganium Z')\n        return 'Searing Sunraze Smash';\n    if (moveName === 'Volt Tackle' && item === 'Pikanium Z')\n        return 'Catastropika';\n    if (moveName === 'Nature\\'s Madness' && item === 'Tapunium Z')\n        return 'Guardian of Alola';\n    if (moveName === 'Thunderbolt') {\n        if (item === 'Aloraichium Z')\n            return 'Stoked Sparksurfer';\n        if (item === 'Pikashunium Z')\n            return '10,000,000 Volt Thunderbolt';\n    }\n    return ZMOVES_TYPING[moveType];\n}\nexports.getZMoveName = getZMoveName;\nvar ZMOVES_TYPING = {\n    Bug: 'Savage Spin-Out',\n    Dark: 'Black Hole Eclipse',\n    Dragon: 'Devastating Drake',\n    Electric: 'Gigavolt Havoc',\n    Fairy: 'Twinkle Tackle',\n    Fighting: 'All-Out Pummeling',\n    Fire: 'Inferno Overdrive',\n    Flying: 'Supersonic Skystrike',\n    Ghost: 'Never-Ending Nightmare',\n    Grass: 'Bloom Doom',\n    Ground: 'Tectonic Rage',\n    Ice: 'Subzero Slammer',\n    Normal: 'Breakneck Blitz',\n    Poison: 'Acid Downpour',\n    Psychic: 'Shattered Psyche',\n    Rock: 'Continental Crush',\n    Steel: 'Corkscrew Crash',\n    Water: 'Hydro Vortex'\n};\nfunction getMaxMoveName(moveType, pokemonSpecies, isStatus, pokemonAbility) {\n    if (isStatus)\n        return 'Max Guard';\n    if (pokemonAbility === 'Normalize')\n        return 'Max Strike';\n    if (moveType === 'Fire') {\n        if (pokemonSpecies === 'Charizard-Gmax')\n            return 'G-Max Wildfire';\n        if (pokemonSpecies === 'Centiskorch-Gmax')\n            return 'G-Max Centiferno';\n        if (pokemonSpecies === 'Cinderace-Gmax')\n            return 'G-Max Fire Ball';\n    }\n    if (moveType === 'Normal') {\n        if (pokemonSpecies === 'Eevee-Gmax')\n            return 'G-Max Cuddle';\n        if (pokemonSpecies === 'Meowth-Gmax')\n            return 'G-Max Gold Rush';\n        if (pokemonSpecies === 'Snorlax-Gmax')\n            return 'G-Max Replenish';\n        if (pokemonAbility === 'Pixilate')\n            return 'Max Starfall';\n        if (pokemonAbility === 'Aerilate')\n            return 'Max Airstream';\n        if (pokemonAbility === 'Refrigerate')\n            return 'Max Hailstorm';\n        if (pokemonAbility === 'Galvanize')\n            return 'Max Lightning';\n    }\n    if (moveType === 'Fairy') {\n        if (pokemonSpecies === 'Alcremie-Gmax')\n            return 'G-Max Finale';\n        if (pokemonSpecies === 'Hatterene-Gmax')\n            return 'G-Max Smite';\n    }\n    if (moveType === 'Steel') {\n        if (pokemonSpecies === 'Copperajah-Gmax')\n            return 'G-Max Steelsurge';\n        if (pokemonSpecies === 'Melmetal-Gmax')\n            return 'G-Max Meltdown';\n    }\n    if (moveType === 'Electric') {\n        if (pokemonSpecies === 'Pikachu-Gmax')\n            return 'G-Max Volt Crash';\n        if ((pokemonSpecies === null || pokemonSpecies === void 0 ? void 0 : pokemonSpecies.startsWith('Toxtricity')) &&\n            (pokemonSpecies === null || pokemonSpecies === void 0 ? void 0 : pokemonSpecies.endsWith('Gmax')))\n            return 'G-Max Stun Shock';\n    }\n    if (moveType === 'Grass') {\n        if (pokemonSpecies === 'Appletun-Gmax')\n            return 'G-Max Sweetness';\n        if (pokemonSpecies === 'Flapple-Gmax')\n            return 'G-Max Tartness';\n        if (pokemonSpecies === 'Rillaboom-Gmax')\n            return 'G-Max Drum Solo';\n        if (pokemonSpecies === 'Venusaur-Gmax')\n            return 'G-Max Vine Lash';\n    }\n    if (moveType === 'Water') {\n        if (pokemonSpecies === 'Blastoise-Gmax')\n            return 'G-Max Cannonade';\n        if (pokemonSpecies === 'Drednaw-Gmax')\n            return 'G-Max Stonesurge';\n        if (pokemonSpecies === 'Inteleon-Gmax')\n            return 'G-Max Hydrosnipe';\n        if (pokemonSpecies === 'Kingler-Gmax')\n            return 'G-Max Foam Burst';\n        if (pokemonSpecies === 'Urshifu-Rapid-Strike-Gmax')\n            return 'G-Max Rapid Flow';\n    }\n    if (moveType === 'Dark') {\n        if (pokemonSpecies === 'Grimmsnarl-Gmax')\n            return 'G-Max Snooze';\n        if (pokemonSpecies === 'Urshifu-Gmax')\n            return 'G-Max One Blow';\n    }\n    if (moveType === 'Poison' && pokemonSpecies === 'Garbodor-Gmax')\n        return 'G-Max Malodor';\n    if (moveType === 'Fighting' && pokemonSpecies === 'Machamp-Gmax')\n        return 'G-Max Chi Strike';\n    if (moveType === 'Ghost' && pokemonSpecies === 'Gengar-Gmax')\n        return 'G-Max Terror';\n    if (moveType === 'Ice' && pokemonSpecies === 'Lapras-Gmax')\n        return 'G-Max Resonance';\n    if (moveType === 'Flying' && pokemonSpecies === 'Corviknight-Gmax')\n        return 'G-Max Wind Rage';\n    if (moveType === 'Dragon' && pokemonSpecies === 'Duraludon-Gmax')\n        return 'G-Max Depletion';\n    if (moveType === 'Psychic' && pokemonSpecies === 'Orbeetle-Gmax')\n        return 'G-Max Gravitas';\n    if (moveType === 'Rock' && pokemonSpecies === 'Coalossal-Gmax')\n        return 'G-Max Volcalith';\n    if (moveType === 'Ground' && pokemonSpecies === 'Sandaconda-Gmax')\n        return 'G-Max Sandblast';\n    if (moveType === 'Dark' && pokemonSpecies === 'Grimmsnarl-Gmax')\n        return 'G-Max Snooze';\n    return 'Max ' + MAXMOVES_TYPING[moveType];\n}\nexports.getMaxMoveName = getMaxMoveName;\nvar MAXMOVES_TYPING = {\n    Bug: 'Flutterby',\n    Dark: 'Darkness',\n    Dragon: 'Wyrmwind',\n    Electric: 'Lightning',\n    Fairy: 'Starfall',\n    Fighting: 'Knuckle',\n    Fire: 'Flare',\n    Flying: 'Airstream',\n    Ghost: 'Phantasm',\n    Grass: 'Overgrowth',\n    Ground: 'Quake',\n    Ice: 'Hailstorm',\n    Normal: 'Strike',\n    Poison: 'Ooze',\n    Psychic: 'Mindstorm',\n    Rock: 'Rockfall',\n    Steel: 'Steelspike',\n    Water: 'Geyser'\n};\n//# sourceMappingURL=move.js.map\n\n//# sourceURL=webpack:///./calc/dist/move.js?\n}");

/***/ }),

/***/ "./calc/dist/pokemon.js":
/*!******************************!*\
  !*** ./calc/dist/pokemon.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nexports.__esModule = true;\nexports.Pokemon = void 0;\nvar stats_1 = __webpack_require__(/*! ./stats */ \"./calc/dist/stats.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\nvar STATS = ['hp', 'atk', 'def', 'spa', 'spd', 'spe'];\nvar SPC = new Set(['spc']);\nvar Pokemon = (function () {\n    function Pokemon(gen, name, options) {\n        var e_1, _a;\n        if (options === void 0) { options = {}; }\n        var _b;\n        this.species = (0, util_1.extend)(true, {}, gen.species.get((0, util_1.toID)(name)), options.overrides);\n        this.gen = gen;\n        this.name = options.name || name;\n        this.id = options.id || \"\".concat(this.name, \":Math.random()\");\n        this.types = options.types ? options.types : this.species.types;\n        this.weightkg = this.species.weightkg;\n        this.level = options.level || 100;\n        this.gender = options.gender || this.species.gender || 'M';\n        this.ability = options.ability || ((_b = this.species.abilities) === null || _b === void 0 ? void 0 : _b[0]) || undefined;\n        this.abilityOn = !!options.abilityOn;\n        this.isDynamaxed = !!options.isDynamaxed;\n        this.isSaltCure = !!options.isSaltCure;\n        this.alliesFainted = options.alliesFainted;\n        this.teraType = options.teraType;\n        this.item = options.item;\n        this.nature = options.nature || 'Serious';\n        this.ivs = Pokemon.withDefault(gen, options.ivs, 31);\n        this.evs = Pokemon.withDefault(gen, options.evs, gen.num >= 3 ? 0 : 252);\n        this.boosts = Pokemon.withDefault(gen, options.boosts, 0, false);\n        if (this.weightkg === 0 && !this.isDynamaxed && this.species.baseSpecies) {\n            this.weightkg = gen.species.get((0, util_1.toID)(this.species.baseSpecies)).weightkg;\n        }\n        if (gen.num < 3) {\n            this.ivs.hp = stats_1.Stats.DVToIV(stats_1.Stats.getHPDV({\n                atk: this.ivs.atk,\n                def: this.ivs.def,\n                spe: this.ivs.spe,\n                spc: this.ivs.spa\n            }));\n        }\n        this.rawStats = {};\n        this.stats = {};\n        try {\n            for (var STATS_1 = __values(STATS), STATS_1_1 = STATS_1.next(); !STATS_1_1.done; STATS_1_1 = STATS_1.next()) {\n                var stat = STATS_1_1.value;\n                var val = this.calcStat(gen, stat);\n                this.rawStats[stat] = val;\n                this.stats[stat] = val;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (STATS_1_1 && !STATS_1_1.done && (_a = STATS_1[\"return\"])) _a.call(STATS_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var curHP = options.curHP !== undefined ? options.curHP :\n            options.originalCurHP !== undefined ? options.originalCurHP : undefined;\n        this.originalCurHP = curHP !== undefined && curHP <= this.rawStats.hp ? curHP : this.rawStats.hp;\n        this.status = options.status || '';\n        this.toxicCounter = options.toxicCounter || 0;\n        this.moves = options.moves || [];\n    }\n    Pokemon.prototype.maxHP = function (original) {\n        if (original === void 0) { original = false; }\n        return !original && this.isDynamaxed && this.species.baseStats.hp !== 1\n            ? this.rawStats.hp * 2\n            : this.rawStats.hp;\n    };\n    Pokemon.prototype.curHP = function (original) {\n        if (original === void 0) { original = false; }\n        return !original && this.isDynamaxed && this.species.baseStats.hp !== 1\n            ? this.originalCurHP * 2\n            : this.originalCurHP;\n    };\n    Pokemon.prototype.hasAbility = function () {\n        var abilities = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            abilities[_i] = arguments[_i];\n        }\n        return !!(this.ability && abilities.includes(this.ability));\n    };\n    Pokemon.prototype.hasItem = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        return !!(this.item && items.includes(this.item));\n    };\n    Pokemon.prototype.hasStatus = function () {\n        var statuses = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            statuses[_i] = arguments[_i];\n        }\n        return !!(this.status && statuses.includes(this.status));\n    };\n    Pokemon.prototype.hasType = function () {\n        var e_2, _a;\n        var types = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            types[_i] = arguments[_i];\n        }\n        try {\n            for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {\n                var type = types_1_1.value;\n                if (this.teraType ? this.teraType === type : this.types.includes(type))\n                    return true;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (types_1_1 && !types_1_1.done && (_a = types_1[\"return\"])) _a.call(types_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return false;\n    };\n    Pokemon.prototype.hasOriginalType = function () {\n        var e_3, _a;\n        var types = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            types[_i] = arguments[_i];\n        }\n        try {\n            for (var types_2 = __values(types), types_2_1 = types_2.next(); !types_2_1.done; types_2_1 = types_2.next()) {\n                var type = types_2_1.value;\n                if (this.types.includes(type))\n                    return true;\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (types_2_1 && !types_2_1.done && (_a = types_2[\"return\"])) _a.call(types_2);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return false;\n    };\n    Pokemon.prototype.named = function () {\n        var names = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            names[_i] = arguments[_i];\n        }\n        return names.includes(this.name);\n    };\n    Pokemon.prototype.equals = function (other) {\n        return this.id === other.id;\n    };\n    Pokemon.prototype.clone = function (options) {\n        return new Pokemon(this.gen, this.name, __assign({ id: this.id, level: this.level, ability: this.ability, abilityOn: this.abilityOn, isDynamaxed: this.isDynamaxed, isSaltCure: this.isSaltCure, alliesFainted: this.alliesFainted, item: this.item, gender: this.gender, nature: this.nature, ivs: (0, util_1.extend)(true, {}, this.ivs), evs: (0, util_1.extend)(true, {}, this.evs), boosts: (0, util_1.extend)(true, {}, this.boosts), originalCurHP: this.originalCurHP, status: this.status, teraType: this.teraType, toxicCounter: this.toxicCounter, types: this.types, moves: this.moves.slice(), overrides: this.species }, options));\n    };\n    Pokemon.prototype.calcStat = function (gen, stat) {\n        return stats_1.Stats.calcStat(gen, stat, this.species.baseStats[stat], this.ivs[stat], this.evs[stat], this.level, this.nature);\n    };\n    Pokemon.getForme = function (gen, speciesName, item, moveName) {\n        var species = gen.species.get((0, util_1.toID)(speciesName));\n        if (!(species === null || species === void 0 ? void 0 : species.otherFormes)) {\n            return speciesName;\n        }\n        var i = 0;\n        if ((item &&\n            ((item.includes('ite') && !item.includes('ite Y')) ||\n                (speciesName === 'Groudon' && item === 'Red Orb') ||\n                (speciesName === 'Kyogre' && item === 'Blue Orb'))) ||\n            (moveName && speciesName === 'Meloetta' && moveName === 'Relic Song') ||\n            (speciesName === 'Rayquaza' && moveName === 'Dragon Ascent')) {\n            i = 1;\n        }\n        else if (item === null || item === void 0 ? void 0 : item.includes('ite Y')) {\n            i = 2;\n        }\n        return i ? species.otherFormes[i - 1] : species.name;\n    };\n    Pokemon.withDefault = function (gen, current, val, match) {\n        if (match === void 0) { match = true; }\n        var cur = {};\n        if (current) {\n            (0, util_1.assignWithout)(cur, current, SPC);\n            if (current.spc) {\n                cur.spa = current.spc;\n                cur.spd = current.spc;\n            }\n            if (match && gen.num <= 2 && current.spa !== current.spd) {\n                throw new Error('Special Attack and Special Defense must match before Gen 3');\n            }\n        }\n        return __assign({ hp: val, atk: val, def: val, spa: val, spd: val, spe: val }, cur);\n    };\n    return Pokemon;\n}());\nexports.Pokemon = Pokemon;\n//# sourceMappingURL=pokemon.js.map\n\n//# sourceURL=webpack:///./calc/dist/pokemon.js?\n}");

/***/ }),

/***/ "./calc/dist/result.js":
/*!*****************************!*\
  !*** ./calc/dist/result.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexports.__esModule = true;\nexports.damageRange = exports.Result = void 0;\nvar desc_1 = __webpack_require__(/*! ./desc */ \"./calc/dist/desc.js\");\nvar Result = (function () {\n    function Result(gen, attacker, defender, move, field, damage, rawDesc) {\n        this.gen = gen;\n        this.attacker = attacker;\n        this.defender = defender;\n        this.move = move;\n        this.field = field;\n        this.damage = damage;\n        this.rawDesc = rawDesc;\n    }\n    Result.prototype.desc = function () {\n        return this.fullDesc();\n    };\n    Result.prototype.range = function () {\n        var range = damageRange(this.damage);\n        if (typeof range[0] === 'number')\n            return range;\n        var d = range;\n        return [d[0][0] + d[0][1], d[1][0] + d[1][1]];\n    };\n    Result.prototype.fullDesc = function (notation, err) {\n        if (notation === void 0) { notation = '%'; }\n        if (err === void 0) { err = true; }\n        return (0, desc_1.display)(this.gen, this.attacker, this.defender, this.move, this.field, this.damage, this.rawDesc, notation, err);\n    };\n    Result.prototype.moveDesc = function (notation) {\n        if (notation === void 0) { notation = '%'; }\n        return (0, desc_1.displayMove)(this.gen, this.attacker, this.defender, this.move, this.damage, notation);\n    };\n    Result.prototype.recovery = function (notation) {\n        if (notation === void 0) { notation = '%'; }\n        return (0, desc_1.getRecovery)(this.gen, this.attacker, this.defender, this.move, this.damage, notation);\n    };\n    Result.prototype.recoil = function (notation) {\n        if (notation === void 0) { notation = '%'; }\n        return (0, desc_1.getRecoil)(this.gen, this.attacker, this.defender, this.move, this.damage, notation);\n    };\n    Result.prototype.kochance = function (err) {\n        if (err === void 0) { err = true; }\n        return (0, desc_1.getKOChance)(this.gen, this.attacker, this.defender, this.move, this.field, this.damage, err);\n    };\n    return Result;\n}());\nexports.Result = Result;\nfunction damageRange(damage) {\n    if (typeof damage === 'number')\n        return [damage, damage];\n    if (damage.length > 2) {\n        var d_1 = damage;\n        if (d_1[0] > d_1[d_1.length - 1])\n            return [Math.min.apply(Math, __spreadArray([], __read(d_1), false)), Math.max.apply(Math, __spreadArray([], __read(d_1), false))];\n        return [d_1[0], d_1[d_1.length - 1]];\n    }\n    if (typeof damage[0] === 'number' && typeof damage[1] === 'number') {\n        return [[damage[0], damage[1]], [damage[0], damage[1]]];\n    }\n    var d = damage;\n    if (d[0][0] > d[0][d[0].length - 1])\n        d[0] = d[0].slice().sort();\n    if (d[1][0] > d[1][d[1].length - 1])\n        d[1] = d[1].slice().sort();\n    return [[d[0][0], d[1][0]], [d[0][d[0].length - 1], d[1][d[1].length - 1]]];\n}\nexports.damageRange = damageRange;\n//# sourceMappingURL=result.js.map\n\n//# sourceURL=webpack:///./calc/dist/result.js?\n}");

/***/ }),

/***/ "./calc/dist/stats.js":
/*!****************************!*\
  !*** ./calc/dist/stats.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nexports.__esModule = true;\nexports.Stats = exports.STATS = void 0;\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\nvar RBY = ['hp', 'atk', 'def', 'spc', 'spe'];\nvar GSC = ['hp', 'atk', 'def', 'spa', 'spd', 'spe'];\nvar ADV = GSC;\nvar DPP = GSC;\nvar BW = GSC;\nvar XY = GSC;\nvar SM = GSC;\nvar SS = GSC;\nvar SV = GSC;\nexports.STATS = [[], RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\nvar HP_TYPES = [\n    'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost', 'Steel',\n    'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon', 'Dark',\n];\nvar HP = {\n    Bug: { ivs: { atk: 30, def: 30, spd: 30 }, dvs: { atk: 13, def: 13 } },\n    Dark: { ivs: {}, dvs: {} },\n    Dragon: { ivs: { atk: 30 }, dvs: { def: 14 } },\n    Electric: { ivs: { spa: 30 }, dvs: { atk: 14 } },\n    Fighting: { ivs: { def: 30, spa: 30, spd: 30, spe: 30 }, dvs: { atk: 12, def: 12 } },\n    Fire: { ivs: { atk: 30, spa: 30, spe: 30 }, dvs: { atk: 14, def: 12 } },\n    Flying: { ivs: { hp: 30, atk: 30, def: 30, spa: 30, spd: 30 }, dvs: { atk: 12, def: 13 } },\n    Ghost: { ivs: { def: 30, spd: 30 }, dvs: { atk: 13, def: 14 } },\n    Grass: { ivs: { atk: 30, spa: 30 }, dvs: { atk: 14, def: 14 } },\n    Ground: { ivs: { spa: 30, spd: 30 }, dvs: { atk: 12 } },\n    Ice: { ivs: { atk: 30, def: 30 }, dvs: { def: 13 } },\n    Poison: { ivs: { def: 30, spa: 30, spd: 30 }, dvs: { atk: 12, def: 14 } },\n    Psychic: { ivs: { atk: 30, spe: 30 }, dvs: { def: 12 } },\n    Rock: { ivs: { def: 30, spd: 30, spe: 30 }, dvs: { atk: 13, def: 12 } },\n    Steel: { ivs: { spd: 30 }, dvs: { atk: 13 } },\n    Water: { ivs: { atk: 30, def: 30, spa: 30 }, dvs: { atk: 14, def: 13 } }\n};\nexports.Stats = new ((function () {\n    function class_1() {\n    }\n    class_1.prototype.displayStat = function (stat) {\n        switch (stat) {\n            case 'hp':\n                return 'HP';\n            case 'atk':\n                return 'Atk';\n            case 'def':\n                return 'Def';\n            case 'spa':\n                return 'SpA';\n            case 'spd':\n                return 'SpD';\n            case 'spe':\n                return 'Spe';\n            case 'spc':\n                return 'Spc';\n            default:\n                throw new Error(\"unknown stat \".concat(stat));\n        }\n    };\n    class_1.prototype.shortForm = function (stat) {\n        switch (stat) {\n            case 'hp':\n                return 'hp';\n            case 'atk':\n                return 'at';\n            case 'def':\n                return 'df';\n            case 'spa':\n                return 'sa';\n            case 'spd':\n                return 'sd';\n            case 'spe':\n                return 'sp';\n            case 'spc':\n                return 'sl';\n        }\n    };\n    class_1.prototype.getHPDV = function (ivs) {\n        return ((this.IVToDV(ivs.atk) % 2) * 8 +\n            (this.IVToDV(ivs.def) % 2) * 4 +\n            (this.IVToDV(ivs.spe) % 2) * 2 +\n            (this.IVToDV(ivs.spc) % 2));\n    };\n    class_1.prototype.IVToDV = function (iv) {\n        return Math.floor(iv / 2);\n    };\n    class_1.prototype.DVToIV = function (dv) {\n        return dv * 2;\n    };\n    class_1.prototype.DVsToIVs = function (dvs) {\n        var ivs = {};\n        var dv;\n        for (dv in dvs) {\n            ivs[dv] = exports.Stats.DVToIV(dvs[dv]);\n        }\n        return ivs;\n    };\n    class_1.prototype.calcStat = function (gen, stat, base, iv, ev, level, nature) {\n        if (gen.num < 1 || gen.num > 9)\n            throw new Error(\"Invalid generation \".concat(gen.num));\n        if (gen.num < 3)\n            return this.calcStatRBY(stat, base, iv, level);\n        return this.calcStatADV(gen.natures, stat, base, iv, ev, level, nature);\n    };\n    class_1.prototype.calcStatADV = function (natures, stat, base, iv, ev, level, nature) {\n        if (stat === 'hp') {\n            return base === 1\n                ? base\n                : Math.floor(((base * 2 + iv + Math.floor(ev / 4)) * level) / 100) + level + 10;\n        }\n        else {\n            var mods = [undefined, undefined];\n            if (nature) {\n                var nat = natures.get((0, util_1.toID)(nature));\n                mods = [nat === null || nat === void 0 ? void 0 : nat.plus, nat === null || nat === void 0 ? void 0 : nat.minus];\n            }\n            var n = mods[0] === stat && mods[1] === stat\n                ? 1\n                : mods[0] === stat\n                    ? 1.1\n                    : mods[1] === stat\n                        ? 0.9\n                        : 1;\n            return Math.floor((Math.floor(((base * 2 + iv + Math.floor(ev / 4)) * level) / 100) + 5) * n);\n        }\n    };\n    class_1.prototype.calcStatRBY = function (stat, base, iv, level) {\n        return this.calcStatRBYFromDV(stat, base, this.IVToDV(iv), level);\n    };\n    class_1.prototype.calcStatRBYFromDV = function (stat, base, dv, level) {\n        if (stat === 'hp') {\n            return Math.floor((((base + dv) * 2 + 63) * level) / 100) + level + 10;\n        }\n        else {\n            return Math.floor((((base + dv) * 2 + 63) * level) / 100) + 5;\n        }\n    };\n    class_1.prototype.getHiddenPowerIVs = function (gen, hpType) {\n        var hp = HP[hpType];\n        if (!hp)\n            return undefined;\n        return gen.num === 2 ? exports.Stats.DVsToIVs(hp.dvs) : hp.ivs;\n    };\n    class_1.prototype.getHiddenPower = function (gen, ivs) {\n        var tr = function (num, bits) {\n            if (bits === void 0) { bits = 0; }\n            if (bits)\n                return (num >>> 0) % (Math.pow(2, bits));\n            return num >>> 0;\n        };\n        var stats = { hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31 };\n        if (gen.num <= 2) {\n            var atkDV = tr(ivs.atk / 2);\n            var defDV = tr(ivs.def / 2);\n            var speDV = tr(ivs.spe / 2);\n            var spcDV = tr(ivs.spa / 2);\n            return {\n                type: HP_TYPES[4 * (atkDV % 4) + (defDV % 4)],\n                power: tr((5 * ((spcDV >> 3) +\n                    (2 * (speDV >> 3)) +\n                    (4 * (defDV >> 3)) +\n                    (8 * (atkDV >> 3))) +\n                    (spcDV % 4)) / 2 + 31)\n            };\n        }\n        else {\n            var hpTypeX = 0;\n            var hpPowerX = 0;\n            var i = 1;\n            for (var s in stats) {\n                hpTypeX += i * (ivs[s] % 2);\n                hpPowerX += i * (tr(ivs[s] / 2) % 2);\n                i *= 2;\n            }\n            return {\n                type: HP_TYPES[tr(hpTypeX * 15 / 63)],\n                power: (gen.num && gen.num < 6) ? tr(hpPowerX * 40 / 63) + 30 : 60\n            };\n        }\n    };\n    return class_1;\n}()))();\n//# sourceMappingURL=stats.js.map\n\n//# sourceURL=webpack:///./calc/dist/stats.js?\n}");

/***/ }),

/***/ "./calc/dist/util.js":
/*!***************************!*\
  !*** ./calc/dist/util.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\nexports.__esModule = true;\nexports.extend = exports.assignWithout = exports.error = exports.toID = void 0;\nfunction toID(text) {\n    return ('' + text).toLowerCase().replace(/[^a-z0-9]+/g, '');\n}\nexports.toID = toID;\nfunction error(err, msg) {\n    if (err) {\n        throw new Error(msg);\n    }\n    else {\n        console.log(msg);\n    }\n}\nexports.error = error;\nfunction assignWithout(a, b, exclude) {\n    for (var key in b) {\n        if (Object.prototype.hasOwnProperty.call(b, key) && !exclude.has(key)) {\n            a[key] = b[key];\n        }\n    }\n}\nexports.assignWithout = assignWithout;\nvar class2Type = {\n    '[object Boolean]': 'boolean',\n    '[object Number]': 'number',\n    '[object String]': 'string',\n    '[object Function]': 'function',\n    '[object Array]': 'array',\n    '[object Date]': 'date',\n    '[object RegExp]': 'regexp',\n    '[object Object]': 'object',\n    '[object Error]': 'error'\n};\nvar coreToString = class2Type.toString;\nvar coreHasOwn = class2Type.hasOwnProperty;\nfunction isFunction(obj) {\n    return getType(obj) === 'function';\n}\nfunction isWindow(obj) {\n    return obj != null && obj === obj.window;\n}\nfunction getType(obj) {\n    if (obj == null) {\n        return String(obj);\n    }\n    return typeof obj === 'object' || typeof obj === 'function'\n        ? class2Type[coreToString.call(obj)] || 'object'\n        : typeof obj;\n}\nfunction isPlainObject(obj) {\n    if (getType(obj) !== 'object' || obj.nodeType || isWindow(obj)) {\n        return false;\n    }\n    try {\n        if (obj.constructor && !coreHasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nfunction extend() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var options, name, src, copy, copyIsArray, clone;\n    var target = args[0] || {};\n    var i = 1;\n    var deep = false;\n    var length = args.length;\n    if (typeof target === 'boolean') {\n        deep = target;\n        target = args[1] || {};\n        i = 2;\n    }\n    if (typeof target !== 'object' && !isFunction(target)) {\n        target = {};\n    }\n    if (length === i) {\n        target = this;\n        --i;\n    }\n    for (; i < length; i++) {\n        if ((options = args[i]) != null) {\n            for (name in options) {\n                src = target[name];\n                copy = options[name];\n                if (target === copy) {\n                    continue;\n                }\n                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        clone = src && Array.isArray(src) ? src : [];\n                    }\n                    else {\n                        clone = src && isPlainObject(src) ? src : {};\n                    }\n                    target[name] = extend(deep, clone, copy);\n                }\n                else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n    return target;\n}\nexports.extend = extend;\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack:///./calc/dist/util.js?\n}");

/***/ }),

/***/ "./src/extensions/main.ts":
/*!********************************!*\
  !*** ./src/extensions/main.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst windowExtensions = __importStar(__webpack_require__(/*! ./window */ \"./src/extensions/window.ts\"));\nwindow.extensions = windowExtensions;\n\n\n//# sourceURL=webpack:///./src/extensions/main.ts?\n}");

/***/ }),

/***/ "./src/extensions/simulator/moveScore.ts":
/*!***********************************************!*\
  !*** ./src/extensions/simulator/moveScore.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScoreModifier = exports.MoveScore = void 0;\nclass MoveScore {\n    constructor(move) {\n        this.move = move;\n        this.potentialScores = [];\n    }\n    get finalScore() {\n        if (this.fixedScore) {\n            return this.fixedScore.modifier;\n        }\n        return this.potentialScores.reduce((soFar, current) => {\n            if (current.percentChance >= 0.5) {\n                soFar += current.modifier;\n            }\n            return soFar;\n        }, 0);\n    }\n    addScore(modifier, percentChance = 1) {\n        this.potentialScores.push(new ScoreModifier(modifier, percentChance));\n    }\n    addAlternativeScores(modifier1, modifier1Chance, modifier2) {\n        this.addScore(modifier1Chance >= 0.5 ? modifier1 : modifier2);\n    }\n    never(percentChance) {\n        this.setScore(-999, percentChance);\n    }\n    setScore(newScore, percentChance = 1) {\n        this.fixedScore = { modifier: newScore, percentChance };\n    }\n    setAlternativeScores(modifier1, modifier1Chance, modifier2) {\n        this.setScore(modifier1Chance >= 0.5 ? modifier1 : modifier2);\n    }\n}\nexports.MoveScore = MoveScore;\nclass ScoreModifier {\n    constructor(modifier, percentChance) {\n        this.modifier = modifier;\n        this.percentChance = percentChance;\n    }\n}\nexports.ScoreModifier = ScoreModifier;\n\n\n//# sourceURL=webpack:///./src/extensions/simulator/moveScore.ts?\n}");

/***/ }),

/***/ "./src/extensions/simulator/moveScoring.contracts.ts":
/*!***********************************************************!*\
  !*** ./src/extensions/simulator/moveScoring.contracts.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BattleFieldState = void 0;\nclass BattleFieldState {\n    constructor(playerSide, cpuSide, playerField, cpuField) {\n        this.playerSide = playerSide;\n        this.cpuSide = cpuSide;\n        this.playerField = playerField;\n        this.cpuField = cpuField;\n    }\n    clone() {\n        return new BattleFieldState(Object.assign(Object.assign({}, this.playerSide), { pokemon: this.playerSide.pokemon.clone() }), Object.assign(Object.assign({}, this.cpuSide), { pokemon: this.cpuSide.pokemon.clone() }), this.playerField.clone(), this.cpuField.clone());\n    }\n}\nexports.BattleFieldState = BattleFieldState;\n\n\n//# sourceURL=webpack:///./src/extensions/simulator/moveScoring.contracts.ts?\n}");

/***/ }),

/***/ "./src/extensions/simulator/moveScoring.ts":
/*!*************************************************!*\
  !*** ./src/extensions/simulator/moveScoring.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.scoreCPUMoves = scoreCPUMoves;\nexports.damagingAttackSpAttackReductionWithGuarnateedEffect = damagingAttackSpAttackReductionWithGuarnateedEffect;\nexports.damagingMinus2SpDefReductionWithGuaranteedEffect = damagingMinus2SpDefReductionWithGuaranteedEffect;\nexports.hasSpecialMoves = hasSpecialMoves;\nexports.hasPhysicalMoves = hasPhysicalMoves;\nexports.damagingTrappingMoves = damagingTrappingMoves;\nexports.damagingSpeedReductionMoves = damagingSpeedReductionMoves;\nexports.damagingPriorityMoves = damagingPriorityMoves;\nexports.allDamagingMoves = allDamagingMoves;\nexports.specificMoves = specificMoves;\nexports.generalSetup = generalSetup;\nexports.offensiveSetup = offensiveSetup;\nexports.defensiveSetup = defensiveSetup;\nexports.recovery = recovery;\nexports.isSuperEffective = isSuperEffective;\nexports.hasHighCritChance = hasHighCritChance;\nexports.findHighestDamageMove = findHighestDamageMove;\nexports.getDamageRanges = getDamageRanges;\nexports.savedFromKO = savedFromKO;\nexports.hasLifeSavingItem = hasLifeSavingItem;\nexports.hasLifeSavingAbility = hasLifeSavingAbility;\nexports.canUseDamagingMoves = canUseDamagingMoves;\nexports.createMove = createMove;\nconst calc_1 = __webpack_require__(/*! @smogon/calc */ \"./calc/dist/index.js\");\nconst moveScore_1 = __webpack_require__(/*! ./moveScore */ \"./src/extensions/simulator/moveScore.ts\");\nconst notImplementedError_1 = __webpack_require__(/*! ./notImplementedError */ \"./src/extensions/simulator/notImplementedError.ts\");\nfunction scoreCPUMoves(cpuResults, playerMove, field, lastTurnOutcome) {\n    let highestDamageResult = cpuResults[0];\n    let damageResults = getDamageRanges(cpuResults);\n    let maxDamageMove = findHighestDamageMove(damageResults);\n    let cpuChosenMove = maxDamageMove;\n    const aiMon = maxDamageMove.attacker;\n    const playerMon = maxDamageMove.defender;\n    const aiIsFaster = aiMon.stats.spe >= playerMon.stats.spe;\n    let movesToConsider = damageResults.map(r => {\n        const kos = r.lowestRollDamage >= r.defender.curHP();\n        const aiActionLastTurn = lastTurnOutcome === null || lastTurnOutcome === void 0 ? void 0 : lastTurnOutcome.actions.find(a => a.attacker.equals(aiMon));\n        return {\n            result: r,\n            lowestRollHpPercentage: r.lowestRollHpPercentage,\n            hightestRollHpPercentage: r.highestRollHpPercentage,\n            kos: kos,\n            isDamagingMove: r.move.category !== 'Status',\n            isHighestDamagingMove: maxDamageMove === r,\n            aiIsFaster,\n            aiIsSlower: !aiIsFaster,\n            playerMon,\n            aiMon,\n            playerMove,\n            playerWillKOAI: playerMove.highestRollDamage >= aiMon.curHP() && !savedFromKO(aiMon),\n            playerWill2HKOAI: playerMove.highestRollDamage * 2 >= aiMon.curHP(),\n            aiMonFirstTurnOut: !lastTurnOutcome || !lastTurnOutcome.endOfTurnState.cpuSide.pokemon.equals(aiMon),\n            lastTurnCPUMove: aiActionLastTurn ? aiActionLastTurn.move : undefined,\n            field\n        };\n    });\n    let moveScores = [];\n    for (let potentialMove of movesToConsider) {\n        let moveScore = new moveScore_1.MoveScore(potentialMove.result);\n        if (potentialMove.isDamagingMove) {\n            allDamagingMoves(moveScore, potentialMove);\n            damagingPriorityMoves(moveScore, potentialMove);\n            damagingTrappingMoves(moveScore);\n            damagingSpeedReductionMoves(moveScore, potentialMove);\n            damagingAttackSpAttackReductionWithGuarnateedEffect(moveScore, potentialMove);\n            damagingMinus2SpDefReductionWithGuaranteedEffect(moveScore);\n        }\n        specificMoves(moveScore, potentialMove);\n        generalSetup(moveScore, potentialMove);\n        offensiveSetup(moveScore, potentialMove);\n        defensiveSetup(moveScore, potentialMove);\n        moveScores.push(moveScore);\n    }\n    return moveScores;\n}\nfunction damagingAttackSpAttackReductionWithGuarnateedEffect(moveScore, considerations) {\n    if (!considerations.isHighestDamagingMove)\n        return;\n    const attackDroppingMoves = ['Trop Kick'];\n    const specialAttackDroppingMoves = ['Skitter Smack'];\n    const defenderIsAffected = !moveScore.move.defender.hasAbility('Contrary', 'Clear Body', 'White Smoke');\n    if (attackDroppingMoves.includes(moveScore.move.move.name)) {\n        moveScore.addScore(defenderIsAffected && hasPhysicalMoves(considerations.playerMon) ? 6 : 5);\n    }\n    else if (specialAttackDroppingMoves.includes(moveScore.move.move.name)) {\n        moveScore.addScore(defenderIsAffected && hasSpecialMoves(considerations.playerMon) ? 6 : 5);\n    }\n}\nfunction damagingMinus2SpDefReductionWithGuaranteedEffect(moveScore) {\n    if (moveScore.move.move.named('Acid Spray'))\n        moveScore.addScore(6);\n}\nfunction hasSpecialMoves(pokemon) {\n    return !!pokemon.moves.find(m => createMove(pokemon, m).category === 'Special');\n}\nfunction hasPhysicalMoves(pokemon) {\n    return !!pokemon.moves.find(m => createMove(pokemon, m).category === 'Physical');\n}\nfunction damagingTrappingMoves(moveScore) {\n    if (['Whirlpool', 'Fire Spin', 'Sand Tomb', 'Magma Storm', 'Infestation', 'Jaw Lock'].includes(moveScore.move.move.name)) {\n        moveScore.addAlternativeScores(6, 0.8, 8);\n    }\n}\nfunction damagingSpeedReductionMoves(moveScore, considerations) {\n    if (considerations.isHighestDamagingMove)\n        return;\n    const defenderIsAffected = !moveScore.move.defender.hasAbility('Contrary', 'Clear Body', 'White Smoke');\n    if (['Icy Wind', 'Rock Tomb', 'Mud Shot', 'Low Sweep'].includes(moveScore.move.move.name)) {\n        moveScore.addScore(defenderIsAffected && considerations.aiIsSlower ? 6 : 5);\n    }\n}\nfunction damagingPriorityMoves(moveScore, considerations) {\n    if (considerations.result.move.priority > 0 && considerations.aiIsSlower && considerations.kos) {\n        moveScore.addScore(11);\n    }\n}\nfunction allDamagingMoves(moveScore, considerations) {\n    if (considerations.result.move.category === 'Status')\n        return;\n    if (considerations.isHighestDamagingMove || considerations.kos) {\n        moveScore.addAlternativeScores(6, 0.8, 8);\n    }\n    if (considerations.kos) {\n        if (considerations.aiIsFaster || (considerations.aiIsSlower && considerations.result.move.priority > 0)) {\n            moveScore.addScore(6);\n        }\n        if (!considerations.aiIsFaster) {\n            moveScore.addScore(3);\n        }\n        if (considerations.aiMon.hasAbility('Moxie', 'Beast Boost', 'Chilling Neigh', 'Grim Neigh')) {\n            moveScore.addScore(1);\n        }\n    }\n}\nfunction specificMoves(moveScore, consideration) {\n    var _a, _b;\n    const moveName = moveScore.move.move.name;\n    switch (moveName) {\n        case 'Future Sight':\n            moveScore.addScore(consideration.aiIsFaster && consideration.playerWillKOAI ?\n                8 : 6);\n            break;\n        case 'Relic Song':\n            if (moveScore.move.attacker.named('Meloetta')) {\n                moveScore.addScore(10);\n            }\n            else {\n                moveScore.setScore(-20);\n            }\n            break;\n        case 'Sucker Punch':\n            if ((_a = consideration.lastTurnCPUMove) === null || _a === void 0 ? void 0 : _a.named('Sucker Punch')) {\n                moveScore.addScore(-2, 0.5);\n            }\n            break;\n        case 'Pursuit':\n            if (consideration.kos) {\n                moveScore.addScore(10);\n            }\n            else {\n                const playerHPPercentage = consideration.playerMon.curHP() / consideration.playerMon.maxHP();\n                if (playerHPPercentage < 0.2)\n                    moveScore.addScore(10);\n                if (playerHPPercentage < 0.4)\n                    moveScore.addScore(8, 0.5);\n                if (consideration.aiIsFaster)\n                    moveScore.addScore(3);\n            }\n            break;\n        case 'Fell Stinger':\n            if (consideration.aiMon.boosts.atk < 6 && consideration.kos) {\n                if (consideration.aiIsFaster) {\n                    moveScore.setAlternativeScores(21, 0.8, 23);\n                }\n                else {\n                    moveScore.addAlternativeScores(15, 0.8, 17);\n                }\n            }\n            break;\n        case 'Rollout':\n            moveScore.setScore(7);\n            break;\n        case 'Stealth Rock':\n            if (consideration.field.defenderSide.isSR)\n                break;\n            if (consideration.aiMonFirstTurnOut) {\n                moveScore.addAlternativeScores(8, 0.25, 9);\n            }\n            else {\n                moveScore.addAlternativeScores(6, 0.25, 7);\n            }\n            break;\n        case 'Spikes':\n        case 'Toxic Spikes':\n            if (consideration.aiMonFirstTurnOut) {\n                moveScore.addAlternativeScores(8, 0.25, 9);\n            }\n            else {\n                moveScore.addAlternativeScores(6, 0.25, 7);\n            }\n            if (consideration.field.defenderSide.spikes)\n                moveScore.addScore(-1);\n            break;\n        case 'Sticky Web':\n            if (consideration.aiMonFirstTurnOut) {\n                moveScore.addAlternativeScores(9, 0.25, 12);\n            }\n            else {\n                moveScore.addAlternativeScores(6, 0.25, 9);\n            }\n            break;\n        case 'Protect':\n        case \"King's Shield\":\n            moveScore.addScore(6);\n            if (consideration.aiMon.hasStatus('psn', 'brn'))\n                moveScore.addScore(-2);\n            if (consideration.playerMon.hasStatus('psn', 'brn'))\n                moveScore.addScore(1);\n            if (consideration.aiMonFirstTurnOut)\n                moveScore.addScore(-1);\n            if ((consideration.aiMon.hasStatus('psn') && consideration.aiMon.curHP() <= Math.floor(consideration.aiMon.maxHP() / 8)) ||\n                (consideration.aiMon.hasStatus('brn') && consideration.aiMon.curHP() <= Math.floor(consideration.aiMon.maxHP() / 16)))\n                moveScore.never();\n            if ((_b = consideration.lastTurnCPUMove) === null || _b === void 0 ? void 0 : _b.named('Protect', `King's Shield`))\n                moveScore.never(0.5);\n            break;\n        case 'Imprison':\n            if (consideration.playerMon.moves.some(playerMove => consideration.aiMon.moves.includes(playerMove))) {\n                moveScore.addScore(9);\n            }\n            else {\n                moveScore.setScore(-20);\n            }\n            break;\n        case 'Baton Pass':\n            (0, notImplementedError_1.notImplemented)();\n        case 'Tailwind':\n            moveScore.addScore(consideration.aiIsSlower ? 9 : 5);\n            break;\n        case 'Trick Room':\n            moveScore.addScore(consideration.aiIsSlower ? 10 : 5);\n            if (consideration.field.isTrickRoom)\n                moveScore.setScore(-20);\n            break;\n        case 'Fake Out':\n            if (consideration.aiMonFirstTurnOut && !consideration.playerMon.hasAbility('Inner Focus'))\n                moveScore.addScore(9);\n            break;\n        case 'Helping Hand':\n        case 'Follow Me':\n            (0, notImplementedError_1.notImplemented)();\n        case 'Final Gambit':\n            if (consideration.aiIsFaster && consideration.aiMon.curHP() > consideration.playerMon.curHP())\n                moveScore.addScore(8);\n            else if (consideration.aiIsFaster && consideration.playerWillKOAI)\n                moveScore.addScore(7);\n            else\n                moveScore.addScore(6);\n            break;\n        case 'Electric Terrain':\n        case 'Grassy Terrain':\n        case 'Misty Terrain':\n        case 'Psychic Terrain':\n            if (consideration.field.terrain === moveName) {\n                moveScore.never();\n            }\n            else {\n                moveScore.addScore(consideration.aiMon.hasItem('Terrain Extender') ? 9 : 8);\n            }\n            break;\n        case 'Light Screen':\n        case 'Reflect':\n            if (moveName === 'Light Screen' && consideration.field.attackerSide.isLightScreen ||\n                moveName === 'Reflect' && consideration.field.attackerSide.isReflect) {\n                moveScore.never();\n                break;\n            }\n            moveScore.addScore(6);\n            if (moveName === 'Light Screen' && hasSpecialMoves(consideration.playerMon) ||\n                moveName === 'Reflect' && hasPhysicalMoves(consideration.playerMon)) {\n                if (consideration.aiMon.hasItem('Light Clay'))\n                    moveScore.addScore(1);\n                moveScore.addScore(1, 0.5);\n            }\n            break;\n    }\n}\nfunction generalSetup(moveScore, consideration) {\n    if (![\n        'Power-up Punch',\n        'Swords Dance',\n        'Howl',\n        'Stuff Cheeks',\n        'Barrier',\n        'Acid Armor',\n        'Iron Defense',\n        'Cotton Guard',\n        'Charge Beam',\n        'Tail Glow',\n        'Nasty Plot',\n        'Cosmic Power',\n        'Bulk Up',\n        'Calm Mind',\n        'Dragon Dance',\n        'Coil',\n        'Hone Claws',\n        'Quiver Dance',\n        'Shift Gear',\n        'Shell Smash',\n        'Growth',\n        'Work Up',\n        'Curse',\n        'Coil',\n        'No Retreat'\n    ].includes(moveScore.move.move.name))\n        return;\n    if (consideration.playerWillKOAI ||\n        consideration.playerMon.hasAbility('Unaware') && !['Power-up Punch', 'Swords Dance', 'Howl'].includes(moveScore.move.move.name))\n        return moveScore.addScore(-20);\n}\nfunction offensiveSetup(moveScore, consideration) {\n    if (![\n        'Dragon Dance',\n        'Shift Gear',\n        'Swords Dance',\n        'Howl',\n        'Sharpen',\n        'Meditate',\n        'Hone Claws'\n    ].includes(moveScore.move.move.name))\n        return;\n    moveScore.addScore(6);\n    if (consideration.playerMon.hasStatus('frz', 'slp'))\n        moveScore.addScore(3);\n    if (consideration.aiIsSlower && consideration.playerWill2HKOAI)\n        moveScore.addScore(-5);\n}\nfunction defensiveSetup(moveScore, consideration) {\n    if (![\n        'Acid Armor',\n        'Barrier',\n        'Cotton Guard',\n        'Harden',\n        'Iron Defense',\n        'Stockpile',\n        'Cosmic Power'\n    ].includes(moveScore.move.move.name))\n        return;\n    moveScore.addScore(6);\n    if (consideration.aiIsSlower && consideration.playerWill2HKOAI)\n        moveScore.addScore(-5);\n    if (consideration.playerMon.hasStatus('frz', 'slp'))\n        moveScore.addScore(2, 0.95);\n    if (['Stockpile',\n        'Cosmic Power'].includes(moveScore.move.move.name) &&\n        consideration.aiMon.boosts.def < 2 || consideration.aiMon.boosts.spd < 2)\n        moveScore.addScore(2);\n}\nfunction recovery(moveScore, consideration) {\n    (0, notImplementedError_1.notImplemented)();\n}\nfunction isSuperEffective(move, defendingPokemon) {\n    (0, notImplementedError_1.notImplemented)();\n}\nfunction hasHighCritChance(move) {\n    (0, notImplementedError_1.notImplemented)();\n}\nfunction specialExecptionNotHighestDamagingMove() {\n    (0, notImplementedError_1.notImplemented)();\n}\nfunction findHighestDamageMove(moveResults) {\n    let maxDamageMove = moveResults[0];\n    for (let result of moveResults) {\n        if (result.highestRollHpPercentage > maxDamageMove.highestRollHpPercentage)\n            maxDamageMove = result;\n    }\n    return maxDamageMove;\n}\nfunction getDamageRanges(attackerResults, expectedHits) {\n    var attacker = attackerResults[0].attacker;\n    var defender = attackerResults[0].defender;\n    var highestRoll, lowestRoll, damage = 0;\n    var p1KO = 0, p2KO = 0;\n    var p1HD = 0, p2HD = 0;\n    return attackerResults.map((result, i) => {\n        let resultDamage = result.damage;\n        let lowestHitDamage = resultDamage[0] ? resultDamage[0] : result.damage;\n        let highestHitDamage = result.damage[15] ? resultDamage[15] : result.damage;\n        let getDamagePct = (hitDamage) => hitDamage * (createMove(attacker, attacker.moves[i]).hits / defender.stats.hp * 100);\n        return {\n            attacker,\n            defender,\n            move: result.move,\n            lowestRollDamage: lowestHitDamage,\n            lowestRollHpPercentage: getDamagePct(lowestHitDamage),\n            highestRollDamage: highestHitDamage,\n            highestRollHpPercentage: getDamagePct(highestHitDamage),\n        };\n    });\n}\nfunction savedFromKO(pokemon) {\n    return hasLifeSavingAbility(pokemon) || hasLifeSavingItem(pokemon);\n}\nfunction hasLifeSavingItem(pokemon) {\n    return pokemon.hasItem('Focus Sash') && pokemon.curHP() === pokemon.maxHP();\n}\nfunction hasLifeSavingAbility(pokemon) {\n    return pokemon.hasAbility('Sturdy') && pokemon.curHP() === pokemon.maxHP();\n}\nfunction canUseDamagingMoves(pokemon) {\n    return pokemon.moves.map(m => createMove(pokemon, m)).some(m => m.category !== 'Status');\n}\nfunction createMove(pokemon, moveName) {\n    if (moveName && typeof moveName !== \"string\")\n        moveName = moveName.name;\n    return new calc_1.Move(pokemon.gen, moveName, { ability: pokemon.ability, item: pokemon.item, species: pokemon.species.name });\n}\n\n\n//# sourceURL=webpack:///./src/extensions/simulator/moveScoring.ts?\n}");

/***/ }),

/***/ "./src/extensions/simulator/notImplementedError.ts":
/*!*********************************************************!*\
  !*** ./src/extensions/simulator/notImplementedError.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NotImplementedError = void 0;\nexports.notImplemented = notImplemented;\nclass NotImplementedError extends Error {\n    constructor(message) {\n        super(message || 'Not implemented');\n    }\n}\nexports.NotImplementedError = NotImplementedError;\nfunction notImplemented(message) {\n    throw new NotImplementedError(message);\n}\n\n\n//# sourceURL=webpack:///./src/extensions/simulator/notImplementedError.ts?\n}");

/***/ }),

/***/ "./src/extensions/simulator/simulator.ts":
/*!***********************************************!*\
  !*** ./src/extensions/simulator/simulator.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BattleSimulator = void 0;\nconst calc_1 = __webpack_require__(/*! @smogon/calc */ \"./calc/dist/index.js\");\nconst moveScoring_contracts_1 = __webpack_require__(/*! ./moveScoring.contracts */ \"./src/extensions/simulator/moveScoring.contracts.ts\");\nconst moveScoring_1 = __webpack_require__(/*! ./moveScoring */ \"./src/extensions/simulator/moveScoring.ts\");\nconst playerRng = { getDamageRoll: (r) => r.lowestRollDamage };\nconst cpuRng = { getDamageRoll: (r) => r.highestRollDamage };\nclass BattleSimulator {\n    constructor(gen, playerPokemon, cpuPokemon, playerField, cpuField) {\n        this.gen = gen;\n        this.turns = [];\n        this.originalState = new moveScoring_contracts_1.BattleFieldState({ pokemon: playerPokemon.clone(), firstTurnOut: true }, { pokemon: cpuPokemon.clone(), firstTurnOut: true }, playerField.clone(), cpuField.clone());\n    }\n    get lastTurn() {\n        return this.turns[this.turns.length - 1];\n    }\n    getResult(options) {\n        const resolvedOptions = Object.assign({ maxTurns: 50 }, options);\n        this.currentTurnState = this.originalState.clone();\n        do {\n            let turnOutcome = this.simulateTurn(resolvedOptions.playerSwitchingIn);\n            this.turns.push(turnOutcome);\n            this.currentTurnState = turnOutcome.endOfTurnState.clone();\n            resolvedOptions.playerSwitchingIn = false;\n        } while (this.turns.length < resolvedOptions.maxTurns && this.currentTurnState.playerSide.pokemon.curHP() > 0 && this.currentTurnState.cpuSide.pokemon.curHP() > 0 &&\n            ((0, moveScoring_1.canUseDamagingMoves)(this.currentTurnState.cpuSide.pokemon) || (0, moveScoring_1.canUseDamagingMoves)(this.currentTurnState.playerSide.pokemon)));\n        let outcome = this.lastTurn;\n        let battleState = outcome.endOfTurnState;\n        let firstMover = outcome.actions[0].attacker;\n        return {\n            turnOutcomes: this.turns,\n            winner: outcome.endOfTurnState.cpuSide.pokemon.curHP() > outcome.endOfTurnState.playerSide.pokemon.curHP() ||\n                (firstMover === battleState.cpuSide.pokemon && battleState.cpuSide.pokemon.curHP() == 0 && battleState.playerSide.pokemon.curHP() == 0) ? battleState.cpuSide.pokemon : battleState.playerSide.pokemon\n        };\n    }\n    simulateTurn(playerSwitchingIn) {\n        applyStartOfTurnEffects(this.currentTurnState);\n        let playerDamageResults = calculateAllMoves(this.gen, this.currentTurnState.playerSide.pokemon, this.currentTurnState.cpuSide.pokemon, this.currentTurnState.playerField);\n        let cpuDamageResults = calculateAllMoves(this.gen, this.currentTurnState.cpuSide.pokemon, this.currentTurnState.playerSide.pokemon, this.currentTurnState.cpuField);\n        let cpuAssumedPlayerMove = (0, moveScoring_1.findHighestDamageMove)((0, moveScoring_1.getDamageRanges)(playerDamageResults));\n        let cpuMove = this.calculateCpuMove(cpuDamageResults, cpuAssumedPlayerMove).move;\n        let naivePlayerMoveBasedOnStartingTurnState = this.calculatePlayerMove(playerDamageResults);\n        let firstMove = BattleSimulator.resolveTurnOrder(naivePlayerMoveBasedOnStartingTurnState, cpuMove);\n        let actions = [];\n        let playerPokemon = this.currentTurnState.playerSide;\n        let cpuPokemon = this.currentTurnState.cpuSide;\n        const moveCPU = () => {\n            if (cpuPokemon.pokemon.curHP() > 0) {\n                actions.push(cpuMove);\n                let moveResult = applymove(this.gen, cpuPokemon.pokemon, playerPokemon.pokemon, cpuMove, cpuRng);\n                cpuPokemon.pokemon = moveResult.attacker;\n                playerPokemon.pokemon = moveResult.defender;\n            }\n        };\n        const movePlayer = (move) => {\n            if (playerPokemon.pokemon.curHP() > 0) {\n                actions.push(move);\n                let moveResult = applymove(this.gen, playerPokemon.pokemon, cpuPokemon.pokemon, move, playerRng);\n                playerPokemon.pokemon = moveResult.attacker;\n                cpuPokemon.pokemon = moveResult.defender;\n            }\n        };\n        if (playerSwitchingIn) {\n            moveCPU();\n        }\n        else if (firstMove === naivePlayerMoveBasedOnStartingTurnState) {\n            movePlayer(naivePlayerMoveBasedOnStartingTurnState);\n            moveCPU();\n        }\n        else {\n            moveCPU();\n            playerDamageResults = calculateAllMoves(this.gen, playerPokemon.pokemon, cpuPokemon.pokemon, this.currentTurnState.playerField);\n            const bestPlayerMove = this.calculatePlayerMove(playerDamageResults);\n            let playerMove = bestPlayerMove.move.priority <= naivePlayerMoveBasedOnStartingTurnState.move.priority ? bestPlayerMove : naivePlayerMoveBasedOnStartingTurnState;\n            movePlayer(playerMove);\n        }\n        applyEndOfTurnEffects(playerPokemon.pokemon);\n        applyEndOfTurnEffects(cpuPokemon.pokemon);\n        return {\n            actions,\n            turnNumber: this.turns.length,\n            endOfTurnState: new moveScoring_contracts_1.BattleFieldState({ pokemon: playerPokemon.pokemon.clone() }, { pokemon: cpuPokemon.pokemon.clone() }, this.currentTurnState.playerField.clone(), this.currentTurnState.cpuField.clone())\n        };\n    }\n    calculateCpuMove(cpuResults, playerMove) {\n        let moveScores = (0, moveScoring_1.scoreCPUMoves)(cpuResults, playerMove, this.currentTurnState.cpuField, this.lastTurn);\n        let highestScoringMoves = [];\n        for (let score of moveScores) {\n            let soFar = highestScoringMoves[highestScoringMoves.length - 1];\n            if (!soFar) {\n                highestScoringMoves.push(score);\n                continue;\n            }\n            if (score.finalScore > soFar.finalScore) {\n                highestScoringMoves = [score];\n            }\n            else if (score.finalScore === soFar.finalScore) {\n                highestScoringMoves.push(score);\n            }\n        }\n        return highestScoringMoves[0];\n    }\n    calculatePlayerMove(playerResults) {\n        let damageResults = (0, moveScoring_1.getDamageRanges)(playerResults);\n        let movesToConsider = damageResults\n            .map(r => {\n            const kos = r.lowestRollDamage >= r.defender.curHP() && (!(0, moveScoring_1.savedFromKO)(r.defender) || r.move.hits > 1);\n            return {\n                aiMon: r.defender,\n                playerMon: r.attacker,\n                result: r,\n                lowestRollHpPercentage: r.lowestRollHpPercentage,\n                hightestRollHpPercentage: r.highestRollHpPercentage,\n                kos: kos,\n                kosThroughRequiredLifesaver: kos && (0, moveScoring_1.savedFromKO)(r.defender)\n            };\n        })\n            .filter(m => !BattleSimulator.moveKillsAttacker(m.result) && BattleSimulator.canUseMove(this.currentTurnState.playerSide, m));\n        let playerChosenMove;\n        for (let potentialMove of movesToConsider) {\n            if (!playerChosenMove) {\n                playerChosenMove = potentialMove;\n                continue;\n            }\n            const moreDamage = potentialMove.lowestRollHpPercentage > playerChosenMove.lowestRollHpPercentage;\n            const kosWithHigherPriority = potentialMove.kos && playerChosenMove.kos && potentialMove.result.move.priority > playerChosenMove.result.move.priority;\n            if ((potentialMove.kos && !playerChosenMove.kos) || kosWithHigherPriority) {\n                playerChosenMove = potentialMove;\n                continue;\n            }\n            if (!playerChosenMove.kos && moreDamage)\n                playerChosenMove = potentialMove;\n        }\n        return playerChosenMove.result;\n    }\n    static canUseMove(pokemonSide, consideration) {\n        if (!pokemonSide.firstTurnOut && ['First Impression', 'Fake Out'].includes(consideration.result.move.name))\n            return false;\n        return true;\n    }\n    static moveKillsAttacker(moveResult) {\n        return !!(moveResult.move.recoil && moveResult.attacker.curHP() <= moveResult.move.recoil[0]);\n    }\n    static resolveTurnOrder(playerMove, cpuMove) {\n        const playerPriority = playerMove.move.priority, cpuPriority = cpuMove.move.priority, playerSpeed = playerMove.attacker.stats.spe, cpuSpeed = cpuMove.attacker.stats.spe;\n        if (playerPriority == cpuPriority)\n            return playerSpeed > cpuSpeed ? playerMove : cpuMove;\n        if (playerPriority > cpuPriority)\n            return playerMove;\n        return cpuMove;\n    }\n}\nexports.BattleSimulator = BattleSimulator;\nfunction applyEndOfTurnEffects(pokemon) {\n    if (!pokemon.curHP())\n        return;\n    switch (pokemon.ability) {\n        case 'Speed Boost':\n            pokemon.boosts.spe++;\n            break;\n    }\n}\nfunction applyStartOfTurnEffects(battleField) {\n    let playerMons = [battleField.playerSide];\n    let cpuMons = [battleField.cpuSide];\n    for (let playerMon of playerMons) {\n        for (let cpuMon of cpuMons) {\n            applyAbilityToOpponent(playerMon, cpuMon);\n            applyAbilityToOpponent(cpuMon, playerMon);\n        }\n    }\n}\nfunction applyAbilityToOpponent(attacker, opponent) {\n    if (attacker.pokemon.hasAbility('Intimidate') &&\n        attacker.firstTurnOut &&\n        attacker.pokemon.abilityOn &&\n        !opponent.pokemon.hasAbility('Clear Body')) {\n        attacker.pokemon.abilityOn = false;\n        applyBoost(opponent.pokemon.boosts, 'atk', -1);\n    }\n}\nfunction applymove(gen, attacker, defender, moveResult, rng) {\n    let boosts = getBoosts(attacker, defender, moveResult.move);\n    const attackerLostItem = consumesAttackerItem(attacker, moveResult.move);\n    const defenderLostItem = consumesDefenderItem(defender, moveResult.move);\n    attacker = attacker.clone({\n        boosts: boosts.attacker,\n        item: !attackerLostItem ? attacker.item : undefined,\n        abilityOn: attacker.abilityOn || (attackerLostItem && attacker.hasAbility('Unburden'))\n    });\n    if (attacker.hasAbility('Libero') || attacker.hasAbility('Protean'))\n        attacker.types = [moveResult.move.type];\n    defender = defender.clone({\n        curHP: Math.max(0, defender.curHP() - rng.getDamageRoll(moveResult), (0, moveScoring_1.hasLifeSavingItem)(defender) && defenderLostItem && moveResult.move.hits < 2 ? 1 : 0),\n        item: !defenderLostItem ? defender.item : undefined,\n        boosts: boosts.defender,\n        abilityOn: defender.abilityOn || (defenderLostItem && defender.hasAbility('Unburden'))\n    });\n    return { attacker, defender };\n}\nfunction applyBoost(stats, kind, modifier) {\n    stats[kind] = Math.min(Math.max(-6, stats[kind] + modifier), 6);\n}\nfunction getBoosts(attacker, defender, move) {\n    let attackerBoosts = Object.assign({}, attacker.boosts);\n    let defenderBoosts = Object.assign({}, defender.boosts);\n    const modifyStat = (stats, kind, modifier) => {\n        if (defender.hasAbility('Clear Body'))\n            return;\n        applyBoost(stats, kind, modifier);\n    };\n    switch (move.name) {\n        case 'Bulldoze':\n        case 'Icy Wind':\n        case 'Mud Shot':\n        case 'Rock Tomb':\n            modifyStat(defenderBoosts, 'spe', -1);\n            break;\n        case 'Close Combat':\n            modifyStat(attackerBoosts, 'def', -1);\n            modifyStat(attackerBoosts, 'spd', -1);\n            break;\n        case 'Flame Charge':\n        case 'Rapid Spin':\n            modifyStat(attackerBoosts, 'spd', 1);\n            break;\n        case 'Superpower':\n            modifyStat(attackerBoosts, 'atk', -1);\n            modifyStat(attackerBoosts, 'def', -1);\n            break;\n        case 'Dragon Dance':\n            modifyStat(attackerBoosts, 'atk', 1);\n            modifyStat(attackerBoosts, 'spe', 1);\n            break;\n        case 'Swords Dance':\n            modifyStat(attackerBoosts, 'atk', 2);\n            break;\n    }\n    const checkWhiteHerb = (pokemon, boosts) => {\n        if (!pokemon.hasItem('White Herb'))\n            return;\n        for (let [name, value] of Object.entries(boosts)) {\n            if (value < 0) {\n                boosts[name] = 0;\n                pokemon.item = undefined;\n            }\n        }\n    };\n    checkWhiteHerb(attacker, attackerBoosts);\n    checkWhiteHerb(defender, defenderBoosts);\n    return {\n        attacker: attackerBoosts,\n        defender: defenderBoosts\n    };\n}\nfunction consumesAttackerItem(attacker, move) {\n    if (!attacker.item)\n        return false;\n    if (attacker.item.endsWith(' Gem')) {\n        let gemType = attacker.item.substring(0, attacker.item.length - ' Gem'.length);\n        return move.type === gemType;\n    }\n    return move.name === 'Fling';\n}\nfunction consumesDefenderItem(defender, move) {\n    if (!defender.item)\n        return false;\n    switch (defender.item) {\n        case 'Focus Sash':\n        case 'Red Card':\n            return move.category !== 'Status';\n    }\n    if (move.name === 'Knock Off' && !defender.hasAbility('Sticky Hold') && !(defender.item in calc_1.MEGA_STONES))\n        return true;\n    return false;\n}\nfunction calculateAllMoves(gen, attacker, defender, attackerField) {\n    var results = [];\n    for (var i = 0; i < 4; i++) {\n        results[i] = (0, calc_1.calculate)(gen, attacker, defender, (0, moveScoring_1.createMove)(attacker, attacker.moves[i]), attackerField);\n    }\n    return results;\n}\n\n\n//# sourceURL=webpack:///./src/extensions/simulator/simulator.ts?\n}");

/***/ }),

/***/ "./src/extensions/simulator/utils.ts":
/*!*******************************************!*\
  !*** ./src/extensions/simulator/utils.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.curHPPercentage = curHPPercentage;\nfunction curHPPercentage(pokemon) {\n    return pokemon.curHP() / pokemon.maxHP();\n}\n\n\n//# sourceURL=webpack:///./src/extensions/simulator/utils.ts?\n}");

/***/ }),

/***/ "./src/extensions/ux/update-color-codes.ts":
/*!*************************************************!*\
  !*** ./src/extensions/ux/update-color-codes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatchupResultCode = void 0;\nexports.updateColorCodes = updateColorCodes;\nconst calc_1 = __webpack_require__(/*! @smogon/calc */ \"./calc/dist/index.js\");\nconst simulator_1 = __webpack_require__(/*! ../simulator/simulator */ \"./src/extensions/simulator/simulator.ts\");\nconst utils_1 = __webpack_require__(/*! ../simulator/utils */ \"./src/extensions/simulator/utils.ts\");\nfunction updateColorCodes() {\n    var speCheck = document.getElementById(\"cc-spe-border\").checked;\n    var ohkoCheck = document.getElementById(\"cc-ohko-color\").checked;\n    if (!speCheck && !ohkoCheck) {\n        return;\n    }\n    var pMons = document.getElementsByClassName(\"trainer-pok left-side\");\n    var p1info = $(\"#p1\");\n    var p2info = $(\"#p2\");\n    var p1 = createPokemon(p1info);\n    var p2 = createPokemon(p2info);\n    let playerPokemon = [];\n    for (let i = 0; i < pMons.length; i++) {\n        playerPokemon.push(createPokemon(pMons[i].getAttribute(\"data-id\")));\n    }\n    let pokemonResults = getCalculationColors(playerPokemon, p2);\n    for (let i = 0; i < pMons.length; i++) {\n        let set = pMons[i].getAttribute(\"data-id\");\n        let pokemonResult = pokemonResults[i];\n        if (speCheck && ohkoCheck) {\n            pMons[i].className = `trainer-pok left-side mon-speed-${pokemonResult.speed} mon-dmg-${pokemonResult.code}`;\n        }\n        else if (speCheck) {\n            pMons[i].className = `trainer-pok left-side mon-speed-${pokemonResult.speed}`;\n        }\n        else if (ohkoCheck) {\n            pMons[i].className = `trainer-pok left-side mon-dmg-${pokemonResult.code}`;\n        }\n        pMons[i].classList.toggle('best', !!pokemonResult.best);\n    }\n}\nvar MatchupResultCode;\n(function (MatchupResultCode) {\n    MatchupResultCode[\"SwitchAndGetOneHitKO\"] = \"switch-ohko\";\n    MatchupResultCode[\"OneVOne\"] = \"1v1\";\n    MatchupResultCode[\"OneVOne_Pivot\"] = \"1v1-pivot\";\n    MatchupResultCode[\"GetsOneHitKO\"] = \"ohkos\";\n    MatchupResultCode[\"GetsOneHitKOd\"] = \"ohkod\";\n    MatchupResultCode[\"MaybeGetsOneHitKO\"] = \"maybe-ohkos\";\n    MatchupResultCode[\"MaybeGetsOneHitKOd\"] = \"maybe-ohkod\";\n    MatchupResultCode[\"MutualOneHitKOs\"] = \"mutual-ohko\";\n    MatchupResultCode[\"MutualMaybeOneHitKOs\"] = \"mutual-maybe-ohko\";\n    MatchupResultCode[\"GetsOneHitKO_MaybeGetsOneHitKOd\"] = \"ohkos-maybe-ohkod\";\n    MatchupResultCode[\"MaybeGetsOneHitKO_GetsOneHitKOd\"] = \"maybe-ohko-ohkod\";\n    MatchupResultCode[\"SafeOneVOne\"] = \"safe-1v1\";\n    MatchupResultCode[\"SwitchAndFastKO\"] = \"switch-ohko-fast\";\n})(MatchupResultCode || (exports.MatchupResultCode = MatchupResultCode = {}));\nfunction getCalculationColors(playerPokemon, cpuPokemon) {\n    var p1field = createField();\n    var p2field = p1field.clone().swap();\n    const result = [];\n    const diff = [];\n    for (let playerMon of playerPokemon) {\n        let legacy = getLegacyCalculationResult(playerMon, cpuPokemon, p1field, p2field);\n        let simulated = getSimulatedCalculationResult(playerMon, cpuPokemon, p1field, p2field);\n        result.push(simulated);\n        if (legacy.code !== simulated.code)\n            diff.push({ name: playerMon.name, legacy: legacy.code, simulated: simulated.code });\n    }\n    let bestMon = result\n        .filter(r => r.type === 'simulator')\n        .sort((a, b) => (0, utils_1.curHPPercentage)(a.finalState.playerSide.pokemon) - (0, utils_1.curHPPercentage)(b.finalState.playerSide.pokemon))\n        .at(0);\n    if (bestMon)\n        bestMon.best = true;\n    if (diff.length)\n        console.warn('Simulator and legacy impl diverge:', diff);\n    return result;\n}\nfunction getSimulatedCalculationResult(p1, p2, p1Field, p2Field) {\n    var p1speed = p1.stats.spe;\n    var p2speed = p2.stats.spe;\n    var fastest = p1speed > p2speed ? \"F\" : p1speed < p2speed ? \"S\" : p1speed === p2speed ? \"T\" : \"T\";\n    const simulator = new simulator_1.BattleSimulator(gen, p1, p2, p1Field, p2Field);\n    const result = simulator.getResult({ playerSwitchingIn: true });\n    let code;\n    if (result.winner.equals(p1)) {\n        const turnsOut = result.turnOutcomes.slice(1);\n        if (turnsOut.length == 1) {\n            if (turnsOut[0].actions[0].attacker.equals(result.winner))\n                code = MatchupResultCode.SwitchAndFastKO;\n            else\n                code = MatchupResultCode.SwitchAndGetOneHitKO;\n        }\n        else {\n            code = MatchupResultCode.SafeOneVOne;\n        }\n        return { type: 'simulator', speed: fastest, code, finalState: result.turnOutcomes.at(-1).endOfTurnState };\n    }\n    return getLegacyCalculationResult(p1, p2, p1Field, p2Field);\n}\nfunction getLegacyCalculationResult(p1, p2, p1Field, p2Field) {\n    let damageResults = calculateAllMoves(gen, p1, p1Field, p2, p2Field);\n    p1 = damageResults[0][0].attacker;\n    p2 = damageResults[1][0].attacker;\n    p1.maxDamages = [];\n    p2.maxDamages = [];\n    var p1speed = p1.stats.spe;\n    var p2speed = p2.stats.spe;\n    var fastest = p1speed > p2speed ? \"F\" : p1speed < p2speed ? \"S\" : p1speed === p2speed ? \"T\" : \"T\";\n    var result, highestRoll, lowestRoll, damage = 0;\n    var p1KO, p2KO;\n    var p1HD = 0, p2HD = 0;\n    var p1LD = 0, p2LD = 0;\n    const p1DamageRanges = getDamageRanges(damageResults[0]);\n    const p2DamageRanges = getDamageRanges(damageResults[1]);\n    p1HD = Math.max(...p1DamageRanges.map(r => r.highestRoll));\n    p2HD = Math.max(...p2DamageRanges.map(r => r.highestRoll));\n    p1LD = Math.max(...p1DamageRanges.map(r => r.lowestRoll));\n    p2LD = Math.max(...p2DamageRanges.map(r => r.lowestRoll));\n    if (p1LD >= 100) {\n        p1KO = MatchupResultCode.GetsOneHitKO;\n    }\n    else if (p1HD >= 100 && p1KO != MatchupResultCode.GetsOneHitKO) {\n        p1KO = MatchupResultCode.MaybeGetsOneHitKO;\n    }\n    if (p2LD >= 100) {\n        p2KO = MatchupResultCode.GetsOneHitKOd;\n    }\n    else if (p2HD >= 100 && p2KO != MatchupResultCode.GetsOneHitKO) {\n        p2KO = MatchupResultCode.MaybeGetsOneHitKOd;\n    }\n    let p1DiesInHits = Math.max(1, Math.ceil(100 / p2HD));\n    let p2DiesInHits = Math.max(1, Math.ceil(100 / p1LD));\n    if (p1DiesInHits - 1 > p2DiesInHits ||\n        (p1DiesInHits - 1 === p2DiesInHits && fastest === \"F\")) {\n        if (p2DiesInHits === 1) {\n        }\n        return { type: 'legacy', speed: fastest, code: p2DiesInHits === 1 ? MatchupResultCode.SwitchAndGetOneHitKO : MatchupResultCode.OneVOne };\n    }\n    let highestRollOfLeastPowerfulMove = Math.min(...p2DamageRanges.filter(d => d.move.category !== \"Status\" && !(d.move.bp === 0 && d.highestRoll === 0)).map(d => d.highestRoll));\n    let p1HealthAfterPivot = 100 - highestRollOfLeastPowerfulMove;\n    let p1DiesInHitsAfterPivot = Math.floor(Math.max(1, p1HealthAfterPivot / p2HD));\n    if (p1DiesInHitsAfterPivot > p2DiesInHits ||\n        (p1DiesInHitsAfterPivot === p2DiesInHits && fastest === \"F\")) {\n        return { type: 'legacy', speed: fastest, code: MatchupResultCode.OneVOne_Pivot };\n    }\n    if (Math.round(p2HD * 3) < 100) {\n        if (p1HD > p2HD) {\n            if (p1HD > 100) {\n                return { type: 'legacy', speed: fastest, code: \"WMO\" };\n            }\n            return { type: 'legacy', speed: fastest, code: \"W\" };\n        }\n    }\n    let code = p1KO || p2KO;\n    if (p1KO && p2KO) {\n        if (p1KO == MatchupResultCode.GetsOneHitKO)\n            code = p2KO == MatchupResultCode.GetsOneHitKO ? MatchupResultCode.MutualOneHitKOs : MatchupResultCode.GetsOneHitKO_MaybeGetsOneHitKOd;\n        else if (p1KO == MatchupResultCode.MaybeGetsOneHitKO)\n            code = p2KO == MatchupResultCode.GetsOneHitKO ? MatchupResultCode.MaybeGetsOneHitKO_GetsOneHitKOd : MatchupResultCode.MutualMaybeOneHitKOs;\n    }\n    return { type: 'legacy', speed: fastest, code: code };\n}\nfunction calculateAllMoves(gen, p1, p1field, p2, p2field, double) {\n    double = double ? 2 : 0;\n    checkStatBoost(p1, p2);\n    var results = [[], [], [], []];\n    for (var i = 0; i < 4; i++) {\n        results[0 + double][i] = (0, calc_1.calculate)(gen, p1, p2, p1.moves[i], p1field);\n        results[1 + double][i] = (0, calc_1.calculate)(gen, p2, p1, p2.moves[i], p2field);\n    }\n    return results;\n}\n\n\n//# sourceURL=webpack:///./src/extensions/ux/update-color-codes.ts?\n}");

/***/ }),

/***/ "./src/extensions/window.ts":
/*!**********************************!*\
  !*** ./src/extensions/window.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sayHello = sayHello;\n__exportStar(__webpack_require__(/*! ./ux/update-color-codes */ \"./src/extensions/ux/update-color-codes.ts\"), exports);\nfunction sayHello() {\n    console.log('hello');\n}\n\n\n//# sourceURL=webpack:///./src/extensions/window.ts?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/extensions/main.ts");
/******/ 	
/******/ })()
;