/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./calc/dist/adaptable.js":
/*!********************************!*\
  !*** ./calc/dist/adaptable.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nexports.__esModule = true;\r\nexports.Stats = exports.Result = exports.Side = exports.Field = exports.Move = exports.Pokemon = exports.calculate = void 0;\r\nvar calc_1 = __webpack_require__(/*! ./calc */ \"./calc/dist/calc.js\");\r\n__createBinding(exports, calc_1, \"calculate\");\r\nvar pokemon_1 = __webpack_require__(/*! ./pokemon */ \"./calc/dist/pokemon.js\");\r\n__createBinding(exports, pokemon_1, \"Pokemon\");\r\nvar move_1 = __webpack_require__(/*! ./move */ \"./calc/dist/move.js\");\r\n__createBinding(exports, move_1, \"Move\");\r\nvar field_1 = __webpack_require__(/*! ./field */ \"./calc/dist/field.js\");\r\n__createBinding(exports, field_1, \"Field\");\r\n__createBinding(exports, field_1, \"Side\");\r\nvar result_1 = __webpack_require__(/*! ./result */ \"./calc/dist/result.js\");\r\n__createBinding(exports, result_1, \"Result\");\r\nvar stats_1 = __webpack_require__(/*! ./stats */ \"./calc/dist/stats.js\");\r\n__createBinding(exports, stats_1, \"Stats\");\r\n//# sourceMappingURL=adaptable.js.map\n\n//# sourceURL=webpack:///./calc/dist/adaptable.js?\n}");

/***/ }),

/***/ "./calc/dist/calc.js":
/*!***************************!*\
  !*** ./calc/dist/calc.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.calculate = void 0;\r\nvar field_1 = __webpack_require__(/*! ./field */ \"./calc/dist/field.js\");\r\nvar gen12_1 = __webpack_require__(/*! ./mechanics/gen12 */ \"./calc/dist/mechanics/gen12.js\");\r\nvar gen3_1 = __webpack_require__(/*! ./mechanics/gen3 */ \"./calc/dist/mechanics/gen3.js\");\r\nvar gen4_1 = __webpack_require__(/*! ./mechanics/gen4 */ \"./calc/dist/mechanics/gen4.js\");\r\nvar gen56_1 = __webpack_require__(/*! ./mechanics/gen56 */ \"./calc/dist/mechanics/gen56.js\");\r\nvar gen789_1 = __webpack_require__(/*! ./mechanics/gen789 */ \"./calc/dist/mechanics/gen789.js\");\r\nvar MECHANICS = [\r\n    function () { },\r\n    gen12_1.calculateRBYGSC,\r\n    gen12_1.calculateRBYGSC,\r\n    gen3_1.calculateADV,\r\n    gen4_1.calculateDPP,\r\n    gen56_1.calculateBWXY,\r\n    gen56_1.calculateBWXY,\r\n    gen789_1.calculateSMSSSV,\r\n    gen789_1.calculateSMSSSV,\r\n    gen789_1.calculateSMSSSV,\r\n];\r\nfunction calculate(gen, attacker, defender, move, field) {\r\n    return MECHANICS[gen.num](gen, attacker.clone(), defender.clone(), move.clone(), field ? field.clone() : new field_1.Field());\r\n}\r\nexports.calculate = calculate;\r\n//# sourceMappingURL=calc.js.map\n\n//# sourceURL=webpack:///./calc/dist/calc.js?\n}");

/***/ }),

/***/ "./calc/dist/data/abilities.js":
/*!*************************************!*\
  !*** ./calc/dist/data/abilities.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar e_1, _a, e_2, _b;\r\nexports.__esModule = true;\r\nexports.Abilities = exports.ABILITIES = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar RBY = [];\r\nvar GSC = [];\r\nvar ADV = [\r\n    'Air Lock',\r\n    'Arena Trap',\r\n    'Battle Armor',\r\n    'Blaze',\r\n    'Chlorophyll',\r\n    'Clear Body',\r\n    'Cloud Nine',\r\n    'Color Change',\r\n    'Compound Eyes',\r\n    'Cute Charm',\r\n    'Drizzle',\r\n    'Damp',\r\n    'Drought',\r\n    'Early Bird',\r\n    'Effect Spore',\r\n    'Flame Body',\r\n    'Flash Fire',\r\n    'Forecast',\r\n    'Guts',\r\n    'Huge Power',\r\n    'Hustle',\r\n    'Hyper Cutter',\r\n    'Illuminate',\r\n    'Immunity',\r\n    'Inner Focus',\r\n    'Insomnia',\r\n    'Intimidate',\r\n    'Keen Eye',\r\n    'Levitate',\r\n    'Lightning Rod',\r\n    'Limber',\r\n    'Liquid Ooze',\r\n    'Magma Armor',\r\n    'Magnet Pull',\r\n    'Marvel Scale',\r\n    'Minus',\r\n    'Natural Cure',\r\n    'Oblivious',\r\n    'Overgrow',\r\n    'Own Tempo',\r\n    'Pickup',\r\n    'Plus',\r\n    'Poison Point',\r\n    'Pressure',\r\n    'Pure Power',\r\n    'Rain Dish',\r\n    'Rock Head',\r\n    'Rough Skin',\r\n    'Run Away',\r\n    'Sand Stream',\r\n    'Sand Veil',\r\n    'Serene Grace',\r\n    'Shadow Tag',\r\n    'Shed Skin',\r\n    'Shell Armor',\r\n    'Shield Dust',\r\n    'Soundproof',\r\n    'Speed Boost',\r\n    'Static',\r\n    'Stench',\r\n    'Sticky Hold',\r\n    'Sturdy',\r\n    'Suction Cups',\r\n    'Swarm',\r\n    'Swift Swim',\r\n    'Synchronize',\r\n    'Thick Fat',\r\n    'Torrent',\r\n    'Trace',\r\n    'Truant',\r\n    'Vital Spirit',\r\n    'Volt Absorb',\r\n    'Water Absorb',\r\n    'Water Veil',\r\n    'White Smoke',\r\n    'Wonder Guard',\r\n];\r\nvar DPP = ADV.concat([\r\n    'Adaptability',\r\n    'Aftermath',\r\n    'Anger Point',\r\n    'Anticipation',\r\n    'Bad Dreams',\r\n    'Download',\r\n    'Dry Skin',\r\n    'Filter',\r\n    'Flower Gift',\r\n    'Forewarn',\r\n    'Frisk',\r\n    'Gluttony',\r\n    'Heatproof',\r\n    'Honey Gather',\r\n    'Hydration',\r\n    'Ice Body',\r\n    'Iron Fist',\r\n    'Klutz',\r\n    'Leaf Guard',\r\n    'Magic Guard',\r\n    'Mold Breaker',\r\n    'Motor Drive',\r\n    'Mountaineer',\r\n    'Multitype',\r\n    'No Guard',\r\n    'Normalize',\r\n    'Persistent',\r\n    'Poison Heal',\r\n    'Quick Feet',\r\n    'Rebound',\r\n    'Reckless',\r\n    'Rivalry',\r\n    'Scrappy',\r\n    'Simple',\r\n    'Skill Link',\r\n    'Slow Start',\r\n    'Sniper',\r\n    'Snow Cloak',\r\n    'Snow Warning',\r\n    'Solar Power',\r\n    'Solid Rock',\r\n    'Stall',\r\n    'Steadfast',\r\n    'Storm Drain',\r\n    'Super Luck',\r\n    'Tangled Feet',\r\n    'Technician',\r\n    'Tinted Lens',\r\n    'Unaware',\r\n    'Unburden',\r\n]);\r\nvar BW = DPP.concat([\r\n    'Analytic',\r\n    'Big Pecks',\r\n    'Contrary',\r\n    'Cursed Body',\r\n    'Defeatist',\r\n    'Defiant',\r\n    'Flare Boost',\r\n    'Friend Guard',\r\n    'Harvest',\r\n    'Healer',\r\n    'Heavy Metal',\r\n    'Illusion',\r\n    'Imposter',\r\n    'Infiltrator',\r\n    'Iron Barbs',\r\n    'Light Metal',\r\n    'Justified',\r\n    'Magic Bounce',\r\n    'Moody',\r\n    'Moxie',\r\n    'Multiscale',\r\n    'Mummy',\r\n    'Overcoat',\r\n    'Pickpocket',\r\n    'Poison Touch',\r\n    'Prankster',\r\n    'Rattled',\r\n    'Regenerator',\r\n    'Sand Force',\r\n    'Sand Rush',\r\n    'Sap Sipper',\r\n    'Sheer Force',\r\n    'Telepathy',\r\n    'Teravolt',\r\n    'Toxic Boost',\r\n    'Turboblaze',\r\n    'Unnerve',\r\n    'Victory Star',\r\n    'Weak Armor',\r\n    'Wonder Skin',\r\n    'Zen Mode',\r\n]);\r\nvar XY = BW.concat([\r\n    'Aerilate',\r\n    'Aura Break',\r\n    'Aroma Veil',\r\n    'Bulletproof',\r\n    'Cheek Pouch',\r\n    'Competitive',\r\n    'Dark Aura',\r\n    'Delta Stream',\r\n    'Desolate Land',\r\n    'Fairy Aura',\r\n    'Flower Veil',\r\n    'Fur Coat',\r\n    'Gale Wings',\r\n    'Gooey',\r\n    'Grass Pelt',\r\n    'Magician',\r\n    'Mega Launcher',\r\n    'Parental Bond',\r\n    'Pixilate',\r\n    'Primordial Sea',\r\n    'Protean',\r\n    'Refrigerate',\r\n    'Stance Change',\r\n    'Strong Jaw',\r\n    'Sweet Veil',\r\n    'Symbiosis',\r\n    'Tough Claws',\r\n]);\r\nvar SM = XY.concat([\r\n    'Battery',\r\n    'Battle Bond',\r\n    'Beast Boost',\r\n    'Berserk',\r\n    'Comatose',\r\n    'Corrosion',\r\n    'Dancer',\r\n    'Dazzling',\r\n    'Disguise',\r\n    'Electric Surge',\r\n    'Emergency Exit',\r\n    'Fluffy',\r\n    'Full Metal Body',\r\n    'Galvanize',\r\n    'Grassy Surge',\r\n    'Innards Out',\r\n    'Liquid Voice',\r\n    'Long Reach',\r\n    'Merciless',\r\n    'Misty Surge',\r\n    'Neuroforce',\r\n    'Power Construct',\r\n    'Power of Alchemy',\r\n    'Prism Armor',\r\n    'Psychic Surge',\r\n    'Queenly Majesty',\r\n    'RKS System',\r\n    'Receiver',\r\n    'Schooling',\r\n    'Shadow Shield',\r\n    'Shields Down',\r\n    'Slush Rush',\r\n    'Stamina',\r\n    'Stakeout',\r\n    'Steelworker',\r\n    'Soul-Heart',\r\n    'Surge Surfer',\r\n    'Tangling Hair',\r\n    'Triage',\r\n    'Water Bubble',\r\n    'Water Compaction',\r\n    'Wimp Out',\r\n]);\r\nvar SS = SM.concat([\r\n    'As One (Glastrier)',\r\n    'As One (Spectrier)',\r\n    'Ball Fetch',\r\n    'Chilling Neigh',\r\n    'Cotton Down',\r\n    'Curious Medicine',\r\n    'Dauntless Shield',\r\n    'Dragon\\'s Maw',\r\n    'Gorilla Tactics',\r\n    'Grim Neigh',\r\n    'Gulp Missile',\r\n    'Hunger Switch',\r\n    'Ice Face',\r\n    'Ice Scales',\r\n    'Intrepid Sword',\r\n    'Libero',\r\n    'Mimicry',\r\n    'Mirror Armor',\r\n    'Neutralizing Gas',\r\n    'Pastel Veil',\r\n    'Perish Body',\r\n    'Power Spot',\r\n    'Propeller Tail',\r\n    'Punk Rock',\r\n    'Quick Draw',\r\n    'Ripen',\r\n    'Sand Spit',\r\n    'Screen Cleaner',\r\n    'Stalwart',\r\n    'Steam Engine',\r\n    'Steely Spirit',\r\n    'Transistor',\r\n    'Unseen Fist',\r\n    'Wandering Spirit',\r\n]);\r\nvar SV = SS.concat([\r\n    'Anger Shell',\r\n    'Armor Tail',\r\n    'Beads of Ruin',\r\n    'Commander',\r\n    'Costar',\r\n    'Cud Chew',\r\n    'Earth Eater',\r\n    'Electromorphosis',\r\n    'Good as Gold',\r\n    'Guard Dog',\r\n    'Hadron Engine',\r\n    'Lingering Aroma',\r\n    'Mycelium Might',\r\n    'Opportunist',\r\n    'Orichalcum Pulse',\r\n    'Protosynthesis',\r\n    'Purifying Salt',\r\n    'Quark Drive',\r\n    'Rocky Payload',\r\n    'Seed Sower',\r\n    'Sharpness',\r\n    'Supreme Overlord',\r\n    'Sword of Ruin',\r\n    'Tablets of Ruin',\r\n    'Thermal Exchange',\r\n    'Toxic Debris',\r\n    'Vessel of Ruin',\r\n    'Well-Baked Body',\r\n    'Wind Power',\r\n    'Wind Rider',\r\n    'Zero to Hero',\r\n]);\r\nexports.ABILITIES = [[], RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\r\nvar Abilities = (function () {\r\n    function Abilities(gen) {\r\n        this.gen = gen;\r\n    }\r\n    Abilities.prototype.get = function (id) {\r\n        return ABILITIES_BY_ID[this.gen][id];\r\n    };\r\n    Abilities.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _c, _i, id;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _a = ABILITIES_BY_ID[this.gen];\r\n                    _b = [];\r\n                    for (_c in _a)\r\n                        _b.push(_c);\r\n                    _i = 0;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!(_i < _b.length)) return [3, 4];\r\n                    _c = _b[_i];\r\n                    if (!(_c in _a)) return [3, 3];\r\n                    id = _c;\r\n                    return [4, this.get(id)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3, 1];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    };\r\n    return Abilities;\r\n}());\r\nexports.Abilities = Abilities;\r\nvar Ability = (function () {\r\n    function Ability(name) {\r\n        this.kind = 'Ability';\r\n        this.id = (0, util_1.toID)(name);\r\n        this.name = name;\r\n    }\r\n    return Ability;\r\n}());\r\nvar ABILITIES_BY_ID = [];\r\ntry {\r\n    for (var ABILITIES_1 = __values(exports.ABILITIES), ABILITIES_1_1 = ABILITIES_1.next(); !ABILITIES_1_1.done; ABILITIES_1_1 = ABILITIES_1.next()) {\r\n        var abilities = ABILITIES_1_1.value;\r\n        var map = {};\r\n        try {\r\n            for (var abilities_1 = (e_2 = void 0, __values(abilities)), abilities_1_1 = abilities_1.next(); !abilities_1_1.done; abilities_1_1 = abilities_1.next()) {\r\n                var ability = abilities_1_1.value;\r\n                var a = new Ability(ability);\r\n                map[a.id] = a;\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (abilities_1_1 && !abilities_1_1.done && (_b = abilities_1[\"return\"])) _b.call(abilities_1);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        ABILITIES_BY_ID.push(map);\r\n    }\r\n}\r\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\r\nfinally {\r\n    try {\r\n        if (ABILITIES_1_1 && !ABILITIES_1_1.done && (_a = ABILITIES_1[\"return\"])) _a.call(ABILITIES_1);\r\n    }\r\n    finally { if (e_1) throw e_1.error; }\r\n}\r\n//# sourceMappingURL=abilities.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/abilities.js?\n}");

/***/ }),

/***/ "./calc/dist/data/index.js":
/*!*********************************!*\
  !*** ./calc/dist/data/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.Generations = void 0;\r\nvar abilities_1 = __webpack_require__(/*! ./abilities */ \"./calc/dist/data/abilities.js\");\r\nvar items_1 = __webpack_require__(/*! ./items */ \"./calc/dist/data/items.js\");\r\nvar moves_1 = __webpack_require__(/*! ./moves */ \"./calc/dist/data/moves.js\");\r\nvar species_1 = __webpack_require__(/*! ./species */ \"./calc/dist/data/species.js\");\r\nvar types_1 = __webpack_require__(/*! ./types */ \"./calc/dist/data/types.js\");\r\nvar natures_1 = __webpack_require__(/*! ./natures */ \"./calc/dist/data/natures.js\");\r\nexports.Generations = new ((function () {\r\n    function class_1() {\r\n    }\r\n    class_1.prototype.get = function (gen) {\r\n        return new Generation(gen);\r\n    };\r\n    return class_1;\r\n}()))();\r\nvar Generation = (function () {\r\n    function Generation(num) {\r\n        this.num = num;\r\n        this.abilities = new abilities_1.Abilities(num);\r\n        this.items = new items_1.Items(num);\r\n        this.moves = new moves_1.Moves(num);\r\n        this.species = new species_1.Species(num);\r\n        this.types = new types_1.Types(num);\r\n        this.natures = new natures_1.Natures();\r\n    }\r\n    return Generation;\r\n}());\r\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/index.js?\n}");

/***/ }),

/***/ "./calc/dist/data/interface.js":
/*!*************************************!*\
  !*** ./calc/dist/data/interface.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\r\nexports.__esModule = true;\r\n//# sourceMappingURL=interface.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/interface.js?\n}");

/***/ }),

/***/ "./calc/dist/data/items.js":
/*!*********************************!*\
  !*** ./calc/dist/data/items.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar e_1, _a, e_2, _b;\r\nexports.__esModule = true;\r\nexports.Items = exports.ITEMS = exports.MEGA_STONES = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar RBY = [];\r\nvar GSC = [\r\n    'Berry Juice',\r\n    'Berry',\r\n    'Berserk Gene',\r\n    'Bitter Berry',\r\n    'Black Belt',\r\n    'Black Glasses',\r\n    'Bright Powder',\r\n    'Burnt Berry',\r\n    'Charcoal',\r\n    'Dragon Fang',\r\n    'Dragon Scale',\r\n    'Fast Ball',\r\n    'Fire Stone',\r\n    'Focus Band',\r\n    'Friend Ball',\r\n    'Gold Berry',\r\n    'Great Ball',\r\n    'Hard Stone',\r\n    'Heavy Ball',\r\n    'Ice Berry',\r\n    'King\\'s Rock',\r\n    'Leaf Stone',\r\n    'Leftovers',\r\n    'Level Ball',\r\n    'Light Ball',\r\n    'Love Ball',\r\n    'Lucky Punch',\r\n    'Lure Ball',\r\n    'Magnet',\r\n    'Mail',\r\n    'Master Ball',\r\n    'Metal Coat',\r\n    'Metal Powder',\r\n    'Mint Berry',\r\n    'Miracle Berry',\r\n    'Miracle Seed',\r\n    'Moon Ball',\r\n    'Moon Stone',\r\n    'Mystery Berry',\r\n    'Mystic Water',\r\n    'Never-Melt Ice',\r\n    'Pink Bow',\r\n    'Poison Barb',\r\n    'Poke Ball',\r\n    'Polkadot Bow',\r\n    'PRZ Cure Berry',\r\n    'PSN Cure Berry',\r\n    'Quick Claw',\r\n    'Safari Ball',\r\n    'Scope Lens',\r\n    'Sharp Beak',\r\n    'Silver Powder',\r\n    'Soft Sand',\r\n    'Spell Tag',\r\n    'Sport Ball',\r\n    'Stick',\r\n    'Sun Stone',\r\n    'Thick Club',\r\n    'Thunder Stone',\r\n    'Twisted Spoon',\r\n    'Ultra Ball',\r\n    'Up-Grade',\r\n    'Water Stone',\r\n];\r\nvar GSC_ONLY = [\r\n    'Berry',\r\n    'Berserk Gene',\r\n    'Bitter Berry',\r\n    'Burnt Berry',\r\n    'Ice Berry',\r\n    'Mint Berry',\r\n    'Miracle Berry',\r\n    'Mystery Berry',\r\n    'PRZ Cure Berry',\r\n    'Gold Berry',\r\n    'Pink Bow',\r\n    'Polkadot Bow',\r\n    'PSN Cure Berry',\r\n    'Enigma Berry',\r\n];\r\nvar ADV = GSC.filter(function (i) { return !GSC_ONLY.includes(i); }).concat([\r\n    'Aguav Berry',\r\n    'Apicot Berry',\r\n    'Aspear Berry',\r\n    'Belue Berry',\r\n    'Bluk Berry',\r\n    'Cheri Berry',\r\n    'Chesto Berry',\r\n    'Choice Band',\r\n    'Claw Fossil',\r\n    'Cornn Berry',\r\n    'Deep Sea Scale',\r\n    'Deep Sea Tooth',\r\n    'Dive Ball',\r\n    'Dome Fossil',\r\n    'Durin Berry',\r\n    'Enigma Berry',\r\n    'Figy Berry',\r\n    'Ganlon Berry',\r\n    'Grepa Berry',\r\n    'Helix Fossil',\r\n    'Hondew Berry',\r\n    'Iapapa Berry',\r\n    'Kelpsy Berry',\r\n    'Lansat Berry',\r\n    'Lax Incense',\r\n    'Leppa Berry',\r\n    'Liechi Berry',\r\n    'Lum Berry',\r\n    'Luxury Ball',\r\n    'Macho Brace',\r\n    'Mago Berry',\r\n    'Magost Berry',\r\n    'Mental Herb',\r\n    'Nanab Berry',\r\n    'Nest Ball',\r\n    'Net Ball',\r\n    'Nomel Berry',\r\n    'Old Amber',\r\n    'Oran Berry',\r\n    'Pamtre Berry',\r\n    'Pecha Berry',\r\n    'Persim Berry',\r\n    'Petaya Berry',\r\n    'Pinap Berry',\r\n    'Pomeg Berry',\r\n    'Premier Ball',\r\n    'Qualot Berry',\r\n    'Rabuta Berry',\r\n    'Rawst Berry',\r\n    'Razz Berry',\r\n    'Repeat Ball',\r\n    'Root Fossil',\r\n    'Salac Berry',\r\n    'Sea Incense',\r\n    'Shell Bell',\r\n    'Silk Scarf',\r\n    'Sitrus Berry',\r\n    'Soul Dew',\r\n    'Spelon Berry',\r\n    'Starf Berry',\r\n    'Tamato Berry',\r\n    'Timer Ball',\r\n    'Watmel Berry',\r\n    'Wepear Berry',\r\n    'White Herb',\r\n    'Wiki Berry',\r\n]);\r\nvar DPP = ADV.concat([\r\n    'Adamant Orb',\r\n    'Armor Fossil',\r\n    'Babiri Berry',\r\n    'Big Root',\r\n    'Black Sludge',\r\n    'Charti Berry',\r\n    'Cherish Ball',\r\n    'Chilan Berry',\r\n    'Choice Scarf',\r\n    'Choice Specs',\r\n    'Chople Berry',\r\n    'Coba Berry',\r\n    'Colbur Berry',\r\n    'Custap Berry',\r\n    'Damp Rock',\r\n    'Dawn Stone',\r\n    'Destiny Knot',\r\n    'Draco Plate',\r\n    'Dread Plate',\r\n    'Dubious Disc',\r\n    'Dusk Ball',\r\n    'Dusk Stone',\r\n    'Earth Plate',\r\n    'Electirizer',\r\n    'Expert Belt',\r\n    'Fist Plate',\r\n    'Flame Orb',\r\n    'Flame Plate',\r\n    'Focus Sash',\r\n    'Full Incense',\r\n    'Grip Claw',\r\n    'Griseous Orb',\r\n    'Haban Berry',\r\n    'Heal Ball',\r\n    'Heat Rock',\r\n    'Icicle Plate',\r\n    'Icy Rock',\r\n    'Insect Plate',\r\n    'Iron Ball',\r\n    'Iron Plate',\r\n    'Jaboca Berry',\r\n    'Kasib Berry',\r\n    'Kebia Berry',\r\n    'Lagging Tail',\r\n    'Life Orb',\r\n    'Light Clay',\r\n    'Lustrous Orb',\r\n    'Magmarizer',\r\n    'Meadow Plate',\r\n    'Metronome',\r\n    'Micle Berry',\r\n    'Mind Plate',\r\n    'Muscle Band',\r\n    'Occa Berry',\r\n    'Odd Incense',\r\n    'Oval Stone',\r\n    'Park Ball',\r\n    'Passho Berry',\r\n    'Payapa Berry',\r\n    'Power Anklet',\r\n    'Power Band',\r\n    'Power Belt',\r\n    'Power Bracer',\r\n    'Power Herb',\r\n    'Power Lens',\r\n    'Power Weight',\r\n    'Protector',\r\n    'Quick Ball',\r\n    'Quick Powder',\r\n    'Rare Bone',\r\n    'Razor Claw',\r\n    'Razor Fang',\r\n    'Reaper Cloth',\r\n    'Rindo Berry',\r\n    'Rock Incense',\r\n    'Rose Incense',\r\n    'Rowap Berry',\r\n    'Shed Shell',\r\n    'Shiny Stone',\r\n    'Shuca Berry',\r\n    'Skull Fossil',\r\n    'Sky Plate',\r\n    'Smooth Rock',\r\n    'Splash Plate',\r\n    'Spooky Plate',\r\n    'Sticky Barb',\r\n    'Stone Plate',\r\n    'Tanga Berry',\r\n    'Toxic Orb',\r\n    'Toxic Plate',\r\n    'Wacan Berry',\r\n    'Wave Incense',\r\n    'Wide Lens',\r\n    'Wise Glasses',\r\n    'Yache Berry',\r\n    'Zap Plate',\r\n    'Zoom Lens',\r\n]);\r\nvar BW = DPP.concat([\r\n    'Absorb Bulb',\r\n    'Air Balloon',\r\n    'Binding Band',\r\n    'Bug Gem',\r\n    'Burn Drive',\r\n    'Cell Battery',\r\n    'Chill Drive',\r\n    'Cover Fossil',\r\n    'Dark Gem',\r\n    'Douse Drive',\r\n    'Dragon Gem',\r\n    'Dream Ball',\r\n    'Eject Button',\r\n    'Electric Gem',\r\n    'Eviolite',\r\n    'Fighting Gem',\r\n    'Fire Gem',\r\n    'Float Stone',\r\n    'Flying Gem',\r\n    'Ghost Gem',\r\n    'Grass Gem',\r\n    'Ground Gem',\r\n    'Ice Gem',\r\n    'Normal Gem',\r\n    'Plume Fossil',\r\n    'Poison Gem',\r\n    'Prism Scale',\r\n    'Psychic Gem',\r\n    'Red Card',\r\n    'Ring Target',\r\n    'Rock Gem',\r\n    'Rocky Helmet',\r\n    'Shock Drive',\r\n    'Steel Gem',\r\n    'Water Gem',\r\n]);\r\nexports.MEGA_STONES = {\r\n    Absolite: 'Absol',\r\n    Abomasite: 'Abomasnow',\r\n    Aerodactylite: 'Aerodactyl',\r\n    Aggronite: 'Aggron',\r\n    Alakazite: 'Alakazam',\r\n    Altarianite: 'Altaria',\r\n    Ampharosite: 'Ampharos',\r\n    Audinite: 'Audino',\r\n    Banettite: 'Banette',\r\n    Beedrillite: 'Beedrill',\r\n    Blastoisinite: 'Blastoise',\r\n    Blazikenite: 'Blaziken',\r\n    Cameruptite: 'Camerupt',\r\n    'Charizardite X': 'Charizard',\r\n    'Charizardite Y': 'Charizard',\r\n    Crucibellite: 'Crucibelle',\r\n    Diancite: 'Diancie',\r\n    Galladite: 'Gallade',\r\n    Garchompite: 'Garchomp',\r\n    Gardevoirite: 'Gardevoir',\r\n    Gengarite: 'Gengar',\r\n    Glalitite: 'Glalie',\r\n    Gyaradosite: 'Gyarados',\r\n    Heracronite: 'Heracross',\r\n    Houndoominite: 'Houndoom',\r\n    Kangaskhanite: 'Kangaskhan',\r\n    Latiasite: 'Latias',\r\n    Latiosite: 'Latios',\r\n    Lopunnite: 'Lopunny',\r\n    Lucarionite: 'Lucario',\r\n    Manectite: 'Manectric',\r\n    Mawilite: 'Mawile',\r\n    Medichamite: 'Medicham',\r\n    Metagrossite: 'Metagross',\r\n    'Mewtwonite X': 'Mewtwo',\r\n    'Mewtwonite Y': 'Mewtwo',\r\n    Pidgeotite: 'Pidgeot',\r\n    Pinsirite: 'Pinsir',\r\n    Sablenite: 'Sableye',\r\n    Salamencite: 'Salamence',\r\n    Sceptilite: 'Sceptile',\r\n    Scizorite: 'Scizor',\r\n    Sharpedonite: 'Sharpedo',\r\n    Slowbronite: 'Slowbro',\r\n    Steelixite: 'Steelix',\r\n    Swampertite: 'Swampert',\r\n    Tyranitarite: 'Tyranitar',\r\n    Venusaurite: 'Venusaur'\r\n};\r\nvar XY = BW.concat(__spreadArray(__spreadArray([], __read(Object.keys(exports.MEGA_STONES)), false), [\r\n    'Assault Vest',\r\n    'Blue Orb',\r\n    'Fairy Gem',\r\n    'Jaw Fossil',\r\n    'Kee Berry',\r\n    'Luminous Moss',\r\n    'Maranga Berry',\r\n    'Pixie Plate',\r\n    'Red Orb',\r\n    'Roseli Berry',\r\n    'Sachet',\r\n    'Safety Goggles',\r\n    'Sail Fossil',\r\n    'Snowball',\r\n    'Weakness Policy',\r\n    'Whipped Dream',\r\n], false).sort());\r\nvar SM = XY.filter(function (i) { return i !== 'Old Amber'; }).concat([\r\n    'Adrenaline Orb',\r\n    'Aloraichium Z',\r\n    'Beast Ball',\r\n    'Bottle Cap',\r\n    'Bug Memory',\r\n    'Buginium Z',\r\n    'Dark Memory',\r\n    'Darkinium Z',\r\n    'Decidium Z',\r\n    'Dragon Memory',\r\n    'Dragonium Z',\r\n    'Eevium Z',\r\n    'Electric Memory',\r\n    'Electric Seed',\r\n    'Electrium Z',\r\n    'Fairium Z',\r\n    'Fairy Memory',\r\n    'Fighting Memory',\r\n    'Fightinium Z',\r\n    'Fire Memory',\r\n    'Firium Z',\r\n    'Flying Memory',\r\n    'Flyinium Z',\r\n    'Ghost Memory',\r\n    'Ghostium Z',\r\n    'Gold Bottle Cap',\r\n    'Grass Memory',\r\n    'Grassium Z',\r\n    'Grassy Seed',\r\n    'Ground Memory',\r\n    'Groundium Z',\r\n    'Ice Memory',\r\n    'Ice Stone',\r\n    'Icium Z',\r\n    'Incinium Z',\r\n    'Kommonium Z',\r\n    'Lunalium Z',\r\n    'Lycanium Z',\r\n    'Marshadium Z',\r\n    'Mewnium Z',\r\n    'Mimikium Z',\r\n    'Misty Seed',\r\n    'Normalium Z',\r\n    'Pikanium Z',\r\n    'Pikashunium Z',\r\n    'Poison Memory',\r\n    'Poisonium Z',\r\n    'Primarium Z',\r\n    'Protective Pads',\r\n    'Psychic Memory',\r\n    'Psychic Seed',\r\n    'Psychium Z',\r\n    'Rock Memory',\r\n    'Rockium Z',\r\n    'Snorlium Z',\r\n    'Solganium Z',\r\n    'Steel Memory',\r\n    'Steelium Z',\r\n    'Tapunium Z',\r\n    'Terrain Extender',\r\n    'Ultranecrozium Z',\r\n    'Water Memory',\r\n    'Waterium Z',\r\n]);\r\nvar SS = SM.concat([\r\n    'Berry Sweet',\r\n    'Blunder Policy',\r\n    'Chipped Pot',\r\n    'Clover Sweet',\r\n    'Cracked Pot',\r\n    'Eject Pack',\r\n    'Flower Sweet',\r\n    'Fossilized Bird',\r\n    'Fossilized Dino',\r\n    'Fossilized Drake',\r\n    'Fossilized Fish',\r\n    'Galarica Cuff',\r\n    'Galarica Wreath',\r\n    'Heavy-Duty Boots',\r\n    'Leek',\r\n    'Love Sweet',\r\n    'Ribbon Sweet',\r\n    'Room Service',\r\n    'Rusted Shield',\r\n    'Rusted Sword',\r\n    'Star Sweet',\r\n    'Strawberry Sweet',\r\n    'Sweet Apple',\r\n    'Tart Apple',\r\n    'Throat Spray',\r\n]);\r\nfor (var i = 0; i < 100; i++) {\r\n    SS.push(\"TR\".concat(i < 10 ? \"0\".concat(i) : i));\r\n}\r\nSS.push('Utility Umbrella', 'Vile Vial');\r\nSS.push.apply(SS, __spreadArray(__spreadArray([], __read(GSC_ONLY), false), ['Old Amber'], false));\r\nvar SV = SS.concat([\r\n    'Adamant Crystal',\r\n    'Auspicious Armor',\r\n    'Ability Shield',\r\n    'Booster Energy',\r\n    'Clear Amulet',\r\n    'Covert Cloak',\r\n    'Loaded Dice',\r\n    'Malicious Armor',\r\n    'Mirror Herb',\r\n    'Punching Glove',\r\n    'Lustrous Globe',\r\n    'Griseous Core',\r\n    'Strange Ball',\r\n]);\r\nvar BERRIES = {\r\n    'Aguav Berry': { t: 'Dragon', p: 80 },\r\n    'Apicot Berry': { t: 'Ground', p: 100 },\r\n    'Aspear Berry': { t: 'Ice', p: 80 },\r\n    'Babiri Berry': { t: 'Steel', p: 80 },\r\n    'Belue Berry': { t: 'Electric', p: 100 },\r\n    Berry: { t: 'Poison', p: 80 },\r\n    'Bitter Berry': { t: 'Ground', p: 80 },\r\n    'Bluk Berry': { t: 'Fire', p: 90 },\r\n    'Burnt Berry': { t: 'Ice', p: 80 },\r\n    'Charti Berry': { t: 'Rock', p: 80 },\r\n    'Cheri Berry': { t: 'Fire', p: 80 },\r\n    'Chesto Berry': { t: 'Water', p: 80 },\r\n    'Chilan Berry': { t: 'Normal', p: 80 },\r\n    'Chople Berry': { t: 'Fighting', p: 80 },\r\n    'Coba Berry': { t: 'Flying', p: 80 },\r\n    'Colbur Berry': { t: 'Dark', p: 80 },\r\n    'Cornn Berry': { t: 'Bug', p: 90 },\r\n    'Custap Berry': { t: 'Ghost', p: 100 },\r\n    'Durin Berry': { t: 'Water', p: 100 },\r\n    'Enigma Berry': { t: 'Bug', p: 100 },\r\n    'Figy Berry': { t: 'Bug', p: 80 },\r\n    'Ganlon Berry': { t: 'Ice', p: 100 },\r\n    'Gold Berry': { t: 'Psychic', p: 80 },\r\n    'Grepa Berry': { t: 'Flying', p: 90 },\r\n    'Haban Berry': { t: 'Dragon', p: 80 },\r\n    'Hondew Berry': { t: 'Ground', p: 90 },\r\n    'Iapapa Berry': { t: 'Dark', p: 80 },\r\n    'Ice Berry': { t: 'Grass', p: 80 },\r\n    'Jaboca Berry': { t: 'Dragon', p: 100 },\r\n    'Kasib Berry': { t: 'Ghost', p: 80 },\r\n    'Kebia Berry': { t: 'Poison', p: 80 },\r\n    'Kee Berry': { t: 'Fairy', p: 100 },\r\n    'Kelpsy Berry': { t: 'Fighting', p: 90 },\r\n    'Lansat Berry': { t: 'Flying', p: 100 },\r\n    'Leppa Berry': { t: 'Fighting', p: 80 },\r\n    'Liechi Berry': { t: 'Grass', p: 100 },\r\n    'Lum Berry': { t: 'Flying', p: 80 },\r\n    'Mago Berry': { t: 'Ghost', p: 80 },\r\n    'Magost Berry': { t: 'Rock', p: 90 },\r\n    'Maranga Berry': { t: 'Dark', p: 100 },\r\n    'Micle Berry': { t: 'Rock', p: 100 },\r\n    'Mint Berry': { t: 'Water', p: 80 },\r\n    'Miracle Berry': { t: 'Flying', p: 80 },\r\n    'Mystery Berry': { t: 'Fighting', p: 80 },\r\n    'Nanab Berry': { t: 'Water', p: 90 },\r\n    'Nomel Berry': { t: 'Dragon', p: 90 },\r\n    'Occa Berry': { t: 'Fire', p: 80 },\r\n    'Oran Berry': { t: 'Poison', p: 80 },\r\n    'Pamtre Berry': { t: 'Steel', p: 90 },\r\n    'Passho Berry': { t: 'Water', p: 80 },\r\n    'Payapa Berry': { t: 'Psychic', p: 80 },\r\n    'Pecha Berry': { t: 'Electric', p: 80 },\r\n    'Persim Berry': { t: 'Ground', p: 80 },\r\n    'Petaya Berry': { t: 'Poison', p: 100 },\r\n    'Pinap Berry': { t: 'Grass', p: 90 },\r\n    'Pomeg Berry': { t: 'Ice', p: 90 },\r\n    'PRZ Cure Berry': { t: 'Fire', p: 80 },\r\n    'PSN Cure Berry': { t: 'Electric', p: 80 },\r\n    'Qualot Berry': { t: 'Poison', p: 90 },\r\n    'Rabuta Berry': { t: 'Ghost', p: 90 },\r\n    'Rawst Berry': { t: 'Grass', p: 80 },\r\n    'Razz Berry': { t: 'Steel', p: 80 },\r\n    'Rindo Berry': { t: 'Grass', p: 80 },\r\n    'Roseli Berry': { t: 'Fairy', p: 80 },\r\n    'Rowap Berry': { t: 'Dark', p: 100 },\r\n    'Salac Berry': { t: 'Fighting', p: 100 },\r\n    'Shuca Berry': { t: 'Ground', p: 80 },\r\n    'Sitrus Berry': { t: 'Psychic', p: 80 },\r\n    'Spelon Berry': { t: 'Dark', p: 90 },\r\n    'Starf Berry': { t: 'Psychic', p: 100 },\r\n    'Tamato Berry': { t: 'Psychic', p: 90 },\r\n    'Tanga Berry': { t: 'Bug', p: 80 },\r\n    'Wacan Berry': { t: 'Electric', p: 80 },\r\n    'Watmel Berry': { t: 'Fire', p: 100 },\r\n    'Wepear Berry': { t: 'Electric', p: 90 },\r\n    'Wiki Berry': { t: 'Rock', p: 80 },\r\n    'Yache Berry': { t: 'Ice', p: 80 }\r\n};\r\nexports.ITEMS = [[], RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\r\nvar Items = (function () {\r\n    function Items(gen) {\r\n        this.gen = gen;\r\n    }\r\n    Items.prototype.get = function (id) {\r\n        return ITEMS_BY_ID[this.gen][id];\r\n    };\r\n    Items.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _c, _i, id;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _a = ITEMS_BY_ID[this.gen];\r\n                    _b = [];\r\n                    for (_c in _a)\r\n                        _b.push(_c);\r\n                    _i = 0;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!(_i < _b.length)) return [3, 4];\r\n                    _c = _b[_i];\r\n                    if (!(_c in _a)) return [3, 3];\r\n                    id = _c;\r\n                    return [4, this.get(id)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3, 1];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    };\r\n    return Items;\r\n}());\r\nexports.Items = Items;\r\nvar Item = (function () {\r\n    function Item(name, gen) {\r\n        this.kind = 'Item';\r\n        this.id = (0, util_1.toID)(name);\r\n        this.name = name;\r\n        this.megaEvolves = exports.MEGA_STONES[name];\r\n        var berry = BERRIES[name];\r\n        if (berry) {\r\n            this.isBerry = true;\r\n            this.naturalGift = {\r\n                basePower: gen < 6 ? berry.p - 20 : berry.p,\r\n                type: berry.t\r\n            };\r\n        }\r\n    }\r\n    return Item;\r\n}());\r\nvar ITEMS_BY_ID = [];\r\nvar gen = 0;\r\ntry {\r\n    for (var ITEMS_1 = __values(exports.ITEMS), ITEMS_1_1 = ITEMS_1.next(); !ITEMS_1_1.done; ITEMS_1_1 = ITEMS_1.next()) {\r\n        var items = ITEMS_1_1.value;\r\n        var map = {};\r\n        try {\r\n            for (var items_1 = (e_2 = void 0, __values(items)), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\r\n                var item = items_1_1.value;\r\n                var i = new Item(item, gen);\r\n                map[i.id] = i;\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (items_1_1 && !items_1_1.done && (_b = items_1[\"return\"])) _b.call(items_1);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        ITEMS_BY_ID.push(map);\r\n        gen++;\r\n    }\r\n}\r\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\r\nfinally {\r\n    try {\r\n        if (ITEMS_1_1 && !ITEMS_1_1.done && (_a = ITEMS_1[\"return\"])) _a.call(ITEMS_1);\r\n    }\r\n    finally { if (e_1) throw e_1.error; }\r\n}\r\n//# sourceMappingURL=items.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/items.js?\n}");

/***/ }),

/***/ "./calc/dist/data/moves.js":
/*!*********************************!*\
  !*** ./calc/dist/data/moves.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar e_1, _a, e_2, _b;\r\nexports.__esModule = true;\r\nexports.Moves = exports.MOVES = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar RBY = {\r\n    '(No Move)': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Absorb: { bp: 40, type: 'Grass', drain: [1, 2] },\r\n    Acid: { bp: 40, type: 'Poison' },\r\n    Amnesia: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Aurora Beam': { bp: 65, type: 'Ice' },\r\n    Barrage: { bp: 15, type: 'Normal', multihit: [2, 5] },\r\n    Bide: { bp: 0, type: '???' },\r\n    Bind: { bp: 15, type: 'Normal' },\r\n    Bite: { bp: 60, type: 'Normal' },\r\n    Blizzard: { bp: 120, type: 'Ice' },\r\n    Bonemerang: { bp: 50, type: 'Ground', multihit: 2 },\r\n    Bubble: { bp: 20, type: 'Water' },\r\n    'Bubble Beam': { bp: 65, type: 'Water' },\r\n    Clamp: { bp: 35, type: 'Water' },\r\n    'Comet Punch': { bp: 18, type: 'Normal', multihit: [2, 5] },\r\n    Constrict: { bp: 10, type: 'Normal' },\r\n    Conversion: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Counter: { bp: 1, type: 'Fighting' },\r\n    Crabhammer: { bp: 90, type: 'Water' },\r\n    'Defense Curl': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Dig: { bp: 100, type: 'Ground' },\r\n    Disable: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Dizzy Punch': { bp: 70, type: 'Normal' },\r\n    'Double-Edge': { bp: 100, type: 'Normal', recoil: [25, 100] },\r\n    'Double Kick': { bp: 30, type: 'Fighting', multihit: 2 },\r\n    'Double Slap': { bp: 15, type: 'Normal', multihit: [2, 5] },\r\n    'Dragon Rage': { bp: 1, type: 'Dragon' },\r\n    'Dream Eater': { bp: 100, type: 'Psychic', drain: [1, 2] },\r\n    Earthquake: { bp: 100, type: 'Ground' },\r\n    Explosion: { bp: 170, type: 'Normal' },\r\n    'Fire Blast': { bp: 120, type: 'Fire' },\r\n    'Fire Spin': { bp: 15, type: 'Fire' },\r\n    Fissure: { bp: 0, type: 'Ground' },\r\n    Fly: { bp: 70, type: 'Flying' },\r\n    'Focus Energy': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Fury Attack': { bp: 15, type: 'Normal', multihit: [2, 5] },\r\n    'Fury Swipes': { bp: 18, type: 'Normal', multihit: [2, 5] },\r\n    Glare: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Growth: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Guillotine: { bp: 0, type: 'Normal' },\r\n    Gust: { bp: 40, type: 'Normal' },\r\n    Haze: { bp: 0, category: 'Status', type: 'Ice' },\r\n    'High Jump Kick': { bp: 85, type: 'Fighting', hasCrashDamage: true },\r\n    'Horn Drill': { bp: 0, type: 'Normal' },\r\n    'Hyper Beam': { bp: 150, type: 'Normal' },\r\n    'Jump Kick': { bp: 70, type: 'Fighting', hasCrashDamage: true },\r\n    'Karate Chop': { bp: 50, type: 'Normal' },\r\n    'Leech Seed': { bp: 0, category: 'Status', type: 'Grass' },\r\n    'Light Screen': { bp: 0, category: 'Status', type: 'Psychic' },\r\n    Metronome: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Mimic: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Minimize: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Mirror Move': { bp: 0, category: 'Status', type: 'Flying' },\r\n    Mist: { bp: 0, category: 'Status', type: 'Ice' },\r\n    'Night Shade': { bp: 1, type: 'Ghost' },\r\n    'Petal Dance': { bp: 70, type: 'Grass' },\r\n    'Pin Missile': { bp: 14, type: 'Bug', multihit: [2, 5] },\r\n    'Poison Sting': { bp: 15, type: 'Poison' },\r\n    Psychic: { bp: 90, type: 'Psychic' },\r\n    Psywave: { bp: 1, type: 'Psychic' },\r\n    Rage: { bp: 20, type: 'Normal' },\r\n    'Razor Leaf': { bp: 55, type: 'Grass' },\r\n    'Razor Wind': { bp: 80, type: 'Normal' },\r\n    Recover: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Reflect: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    Rest: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    Roar: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Rock Slide': { bp: 75, type: 'Rock' },\r\n    'Rock Throw': { bp: 50, type: 'Rock' },\r\n    'Sand Attack': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Seismic Toss': { bp: 1, type: 'Fighting' },\r\n    'Self-Destruct': { bp: 130, type: 'Normal' },\r\n    'Skull Bash': { bp: 100, type: 'Normal' },\r\n    Slash: { bp: 70, type: 'Normal' },\r\n    Sludge: { bp: 65, type: 'Poison' },\r\n    'Soft-Boiled': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Solar Beam': { bp: 120, type: 'Grass' },\r\n    'Sonic Boom': { bp: 1, type: 'Normal' },\r\n    'Spike Cannon': { bp: 20, type: 'Normal', multihit: [2, 5] },\r\n    Stomp: { bp: 65, type: 'Normal' },\r\n    Struggle: { bp: 50, type: 'Normal', recoil: [1, 2] },\r\n    'Stun Spore': { bp: 0, category: 'Status', type: 'Grass' },\r\n    Submission: { bp: 80, type: 'Fighting', recoil: [1, 4] },\r\n    Substitute: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Super Fang': { bp: 1, type: 'Dark' },\r\n    Swift: { bp: 60, type: 'Normal' },\r\n    'Take Down': { bp: 90, type: 'Normal', recoil: [1, 4] },\r\n    Thrash: { bp: 90, type: 'Normal' },\r\n    Thunder: { bp: 120, type: 'Electric' },\r\n    'Thunder Wave': { bp: 0, category: 'Status', type: 'Electric' },\r\n    Transform: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Tri Attack': { bp: 80, type: 'Normal' },\r\n    Twineedle: { bp: 25, type: 'Bug', multihit: 2 },\r\n    Whirlwind: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Wing Attack': { bp: 35, type: 'Flying' },\r\n    Wrap: { bp: 15, type: 'Normal' },\r\n    Growl: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Leer: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Low Kick': { bp: 50, type: 'Fighting' },\r\n    'Poison Gas': { bp: 0, category: 'Status', type: 'Poison' },\r\n    'Poison Powder': { bp: 0, category: 'Status', type: 'Poison' },\r\n    'Sky Attack': { bp: 140, type: 'Flying' },\r\n    'String Shot': { bp: 0, category: 'Status', type: 'Bug' },\r\n    Surf: { bp: 95, type: 'Water' },\r\n    'Tail Whip': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Toxic: { bp: 0, category: 'Status', type: 'Poison' },\r\n    Flash: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Hypnosis: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Leech Life': { bp: 20, type: 'Bug', drain: [1, 2] },\r\n    'Mega Drain': { bp: 60, type: 'Grass', drain: [1, 2] },\r\n    'Vine Whip': { bp: 35, type: 'Grass' },\r\n    Waterfall: { bp: 80, type: 'Water' },\r\n    Tackle: { bp: 35, type: 'Normal' },\r\n    'Acid Armor': { bp: 0, category: 'Status', type: 'Poison' },\r\n    Barrier: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Body Slam': { bp: 85, type: 'Normal' },\r\n    Flamethrower: { bp: 95, type: 'Fire' },\r\n    'Hydro Pump': { bp: 120, type: 'Water' },\r\n    'Ice Beam': { bp: 95, type: 'Ice' },\r\n    Lick: { bp: 20, type: 'Ghost' },\r\n    Screech: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Sing: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Sleep Powder': { bp: 0, category: 'Status', type: 'Grass' },\r\n    Smog: { bp: 20, type: 'Poison' },\r\n    Spore: { bp: 0, category: 'Status', type: 'Grass' },\r\n    Supersonic: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Swords Dance': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Thunderbolt: { bp: 95, type: 'Electric' },\r\n    'Bone Club': { bp: 65, type: 'Ground' },\r\n    'Egg Bomb': { bp: 100, type: 'Normal' },\r\n    'Hyper Fang': { bp: 80, type: 'Normal' },\r\n    Kinesis: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Lovely Kiss': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Meditate: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Rolling Kick': { bp: 60, type: 'Fighting' },\r\n    Sharpen: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Teleport: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    Agility: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Confuse Ray': { bp: 0, category: 'Status', type: 'Ghost' },\r\n    Confusion: { bp: 50, type: 'Psychic' },\r\n    Cut: { bp: 50, type: 'Normal' },\r\n    'Double Team': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Drill Peck': { bp: 80, type: 'Flying' },\r\n    Ember: { bp: 40, type: 'Fire' },\r\n    'Fire Punch': { bp: 75, type: 'Fire' },\r\n    Harden: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Headbutt: { bp: 70, type: 'Normal' },\r\n    'Horn Attack': { bp: 65, type: 'Normal' },\r\n    'Ice Punch': { bp: 75, type: 'Ice' },\r\n    'Mega Kick': { bp: 120, type: 'Normal' },\r\n    'Mega Punch': { bp: 80, type: 'Normal' },\r\n    'Paleo Wave': { bp: 85, type: 'Rock' },\r\n    'Pay Day': { bp: 40, type: 'Normal' },\r\n    Peck: { bp: 35, type: 'Flying' },\r\n    Pound: { bp: 40, type: 'Normal' },\r\n    Psybeam: { bp: 65, type: 'Psychic' },\r\n    'Quick Attack': { bp: 40, type: 'Normal', priority: 1 },\r\n    Scratch: { bp: 40, type: 'Normal' },\r\n    'Shadow Strike': { bp: 80, type: 'Ghost' },\r\n    Slam: { bp: 80, type: 'Normal' },\r\n    Smokescreen: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Splash: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Strength: { bp: 80, type: 'Normal' },\r\n    'Thunder Punch': { bp: 75, type: 'Electric' },\r\n    'Thunder Shock': { bp: 40, type: 'Electric' },\r\n    'Vise Grip': { bp: 55, type: 'Normal' },\r\n    'Water Gun': { bp: 40, type: 'Water' },\r\n    Withdraw: { bp: 0, category: 'Status', type: 'Water' }\r\n};\r\nvar GSC_PATCH = {\r\n    Bide: { type: 'Normal' },\r\n    Counter: { bp: 0 },\r\n    Dig: { bp: 60 },\r\n    'Double-Edge': { bp: 120 },\r\n    Explosion: { bp: 250 },\r\n    Gust: { type: 'Flying' },\r\n    'Karate Chop': { type: 'Fighting' },\r\n    Psywave: { bp: 0 },\r\n    'Self-Destruct': { bp: 200 },\r\n    Struggle: { recoil: [1, 4] },\r\n    'Dragon Rage': { bp: 0 },\r\n    Bite: { type: 'Dark' },\r\n    'Night Shade': { bp: 0 },\r\n    'Sand Attack': { type: 'Ground' },\r\n    'Seismic Toss': { bp: 0 },\r\n    'Sonic Boom': { bp: 0 },\r\n    'Super Fang': { bp: 0 },\r\n    'Wing Attack': { bp: 60 },\r\n    Aeroblast: { bp: 100, type: 'Flying' },\r\n    Attract: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Beat Up': { bp: 10, type: 'Dark' },\r\n    'Belly Drum': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Conversion 2': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Cross Chop': { bp: 100, type: 'Fighting' },\r\n    Curse: { bp: 0, category: 'Status', type: '???' },\r\n    'Destiny Bond': { bp: 0, category: 'Status', type: 'Ghost' },\r\n    Detect: { bp: 0, category: 'Status', type: 'Fighting', priority: 2 },\r\n    Encore: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Endure: { bp: 0, category: 'Status', type: 'Normal', priority: 2 },\r\n    Flail: { bp: 0, type: 'Normal' },\r\n    Foresight: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Future Sight': { bp: 80, type: 'Psychic' },\r\n    'Heal Bell': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Icy Wind': { bp: 55, type: 'Ice' },\r\n    'Lock-On': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Mind Reader': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Mirror Coat': { bp: 0, type: 'Psychic' },\r\n    Moonlight: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Morning Sun': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Nightmare: { bp: 0, category: 'Status', type: 'Ghost' },\r\n    Outrage: { bp: 90, type: 'Dragon' },\r\n    'Powder Snow': { bp: 40, type: 'Ice' },\r\n    Present: { bp: 0, type: 'Normal' },\r\n    Protect: { bp: 0, category: 'Status', type: 'Normal', priority: 2 },\r\n    'Psych Up': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Pursuit: { bp: 40, type: 'Dark' },\r\n    'Rain Dance': { bp: 0, category: 'Status', type: 'Water' },\r\n    Reversal: { bp: 0, type: 'Fighting' },\r\n    Safeguard: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Sandstorm: { bp: 0, category: 'Status', type: 'Rock' },\r\n    Sketch: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Sleep Talk': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Spikes: { bp: 0, category: 'Status', type: 'Ground' },\r\n    Spite: { bp: 0, category: 'Status', type: 'Ghost' },\r\n    'Sunny Day': { bp: 0, category: 'Status', type: 'Fire' },\r\n    Swagger: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Sweet Scent': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Synthesis: { bp: 0, category: 'Status', type: 'Grass' },\r\n    Thief: { bp: 40, type: 'Dark' },\r\n    'Triple Kick': { bp: 10, type: 'Fighting', multihit: [1, 3] },\r\n    Twister: { bp: 40, type: 'Dragon' },\r\n    'Ancient Power': { bp: 60, type: 'Rock' },\r\n    'Bone Rush': { bp: 25, type: 'Ground', multihit: [2, 5] },\r\n    Crunch: { bp: 80, type: 'Dark' },\r\n    'Feint Attack': { bp: 60, type: 'Dark' },\r\n    'Giga Drain': { bp: 60, type: 'Grass', drain: [1, 2] },\r\n    'Hidden Power': { bp: 0, type: 'Normal' },\r\n    'Mean Look': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Rapid Spin': { bp: 20, type: 'Normal' },\r\n    'Rock Smash': { bp: 20, type: 'Fighting' },\r\n    'Spider Web': { bp: 0, category: 'Status', type: 'Bug' },\r\n    Whirlpool: { bp: 15, type: 'Water' },\r\n    'Zap Cannon': { bp: 100, type: 'Electric' },\r\n    'Cotton Spore': { bp: 0, category: 'Status', type: 'Grass' },\r\n    'Extreme Speed': { bp: 80, type: 'Normal', priority: 1 },\r\n    'Fury Cutter': { bp: 10, type: 'Bug' },\r\n    Magnitude: { bp: 0, type: 'Ground' },\r\n    'Milk Drink': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Scary Face': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Charm: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Hidden Power Bug': { bp: 70, type: 'Bug' },\r\n    'Hidden Power Dark': { bp: 70, type: 'Dark' },\r\n    'Hidden Power Dragon': { bp: 70, type: 'Dragon' },\r\n    'Hidden Power Electric': { bp: 70, type: 'Electric' },\r\n    'Hidden Power Fighting': { bp: 70, type: 'Fighting' },\r\n    'Hidden Power Fire': { bp: 70, type: 'Fire' },\r\n    'Hidden Power Flying': { bp: 70, type: 'Flying' },\r\n    'Hidden Power Ghost': { bp: 70, type: 'Ghost' },\r\n    'Hidden Power Grass': { bp: 70, type: 'Grass' },\r\n    'Hidden Power Ground': { bp: 70, type: 'Ground' },\r\n    'Hidden Power Ice': { bp: 70, type: 'Ice' },\r\n    'Hidden Power Poison': { bp: 70, type: 'Poison' },\r\n    'Hidden Power Psychic': { bp: 70, type: 'Psychic' },\r\n    'Hidden Power Rock': { bp: 70, type: 'Rock' },\r\n    'Hidden Power Steel': { bp: 70, type: 'Steel' },\r\n    'Hidden Power Water': { bp: 70, type: 'Water' },\r\n    'Perish Song': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Snore: { bp: 40, type: 'Normal' },\r\n    'Sweet Kiss': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Rollout: { bp: 30, type: 'Rock' },\r\n    Frustration: { bp: 0, type: 'Normal' },\r\n    Return: { bp: 0, type: 'Normal' },\r\n    'Sacred Fire': { bp: 100, type: 'Fire' },\r\n    'Baton Pass': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Dragon Breath': { bp: 60, type: 'Dragon' },\r\n    'Dynamic Punch': { bp: 100, type: 'Fighting' },\r\n    'False Swipe': { bp: 40, type: 'Normal' },\r\n    'Flame Wheel': { bp: 60, type: 'Fire' },\r\n    'Iron Tail': { bp: 100, type: 'Steel' },\r\n    'Mach Punch': { bp: 40, type: 'Fighting', priority: 1 },\r\n    Megahorn: { bp: 120, type: 'Bug' },\r\n    'Metal Claw': { bp: 50, type: 'Steel' },\r\n    'Mud-Slap': { bp: 20, type: 'Ground' },\r\n    Octazooka: { bp: 80, type: 'Water' },\r\n    'Pain Split': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Shadow Ball': { bp: 80, type: 'Ghost' },\r\n    'Sludge Bomb': { bp: 90, type: 'Poison' },\r\n    Spark: { bp: 65, type: 'Electric' },\r\n    'Steel Wing': { bp: 70, type: 'Steel' },\r\n    'Vital Throw': { bp: 70, type: 'Fighting' }\r\n};\r\nvar GSC = (0, util_1.extend)(true, {}, RBY, GSC_PATCH);\r\nvar ADV_PATCH = {\r\n    Acid: { target: 'allAdjacentFoes' },\r\n    'Ancient Power': { makesContact: true },\r\n    Bide: { makesContact: true },\r\n    Bind: { makesContact: true },\r\n    Blizzard: { target: 'allAdjacentFoes' },\r\n    Clamp: { makesContact: true },\r\n    'Comet Punch': { makesContact: true },\r\n    Counter: { makesContact: true },\r\n    Crunch: { makesContact: true },\r\n    Detect: { priority: 3 },\r\n    Endure: { priority: 4 },\r\n    Protect: { priority: 3 },\r\n    Dig: { makesContact: true },\r\n    'Double Kick': { makesContact: true },\r\n    'Double Slap': { makesContact: true },\r\n    Explosion: { target: 'allAdjacent' },\r\n    Flail: { makesContact: true },\r\n    Fly: { makesContact: true },\r\n    'Fury Attack': { makesContact: true },\r\n    'Fury Swipes': { makesContact: true },\r\n    'High Jump Kick': { makesContact: true },\r\n    'Jump Kick': { makesContact: true },\r\n    'Leech Life': { makesContact: true },\r\n    Outrage: { makesContact: true },\r\n    'Petal Dance': { makesContact: true },\r\n    Pursuit: { makesContact: true },\r\n    Rage: { makesContact: true },\r\n    'Rapid Spin': { makesContact: true },\r\n    'Razor Wind': { target: 'allAdjacentFoes' },\r\n    Reversal: { makesContact: true },\r\n    'Rock Smash': { makesContact: true },\r\n    'Self-Destruct': { target: 'allAdjacent' },\r\n    'Skull Bash': { makesContact: true },\r\n    Stomp: { makesContact: true },\r\n    Struggle: { makesContact: true },\r\n    Surf: { target: 'allAdjacentFoes' },\r\n    Thief: { makesContact: true },\r\n    Thrash: { makesContact: true },\r\n    'Triple Kick': { makesContact: true, multihit: 3 },\r\n    'Vine Whip': { makesContact: true },\r\n    Waterfall: { makesContact: true },\r\n    Wrap: { makesContact: true },\r\n    Crabhammer: { makesContact: true },\r\n    'Double-Edge': { recoil: [1, 3], makesContact: true },\r\n    Earthquake: { target: 'allAdjacent' },\r\n    'Extreme Speed': { makesContact: true },\r\n    'Fury Cutter': { makesContact: true },\r\n    'Heal Bell': { isSound: true },\r\n    Magnitude: { target: 'allAdjacent' },\r\n    Roar: { isSound: true },\r\n    Submission: { makesContact: true },\r\n    Tackle: { makesContact: true },\r\n    'Take Down': { makesContact: true },\r\n    Twister: { target: 'allAdjacentFoes' },\r\n    'Body Slam': { makesContact: true },\r\n    Bubble: { target: 'allAdjacentFoes' },\r\n    Growl: { isSound: true, target: 'allAdjacentFoes' },\r\n    Lick: { makesContact: true },\r\n    'Perish Song': { isSound: true },\r\n    Screech: { isSound: true },\r\n    Sing: { isSound: true },\r\n    Snore: { isSound: true },\r\n    'String Shot': { target: 'allAdjacentFoes' },\r\n    Supersonic: { isSound: true },\r\n    'Sweet Scent': { target: 'allAdjacentFoes' },\r\n    Rollout: { makesContact: true },\r\n    Constrict: { makesContact: true },\r\n    'Dizzy Punch': { makesContact: true },\r\n    Frustration: { makesContact: true },\r\n    'Hyper Fang': { makesContact: true },\r\n    'Karate Chop': { makesContact: true },\r\n    'Low Kick': { bp: 0, makesContact: true },\r\n    Return: { makesContact: true },\r\n    'Rolling Kick': { makesContact: true },\r\n    Bite: { makesContact: true },\r\n    'Cross Chop': { makesContact: true },\r\n    Cut: { makesContact: true },\r\n    'Drill Peck': { makesContact: true },\r\n    'Dynamic Punch': { makesContact: true },\r\n    'False Swipe': { makesContact: true },\r\n    'Fire Punch': { makesContact: true },\r\n    'Flame Wheel': { makesContact: true },\r\n    Guillotine: { makesContact: true },\r\n    Headbutt: { makesContact: true },\r\n    'Horn Attack': { makesContact: true },\r\n    'Horn Drill': { makesContact: true },\r\n    'Ice Punch': { makesContact: true },\r\n    'Icy Wind': { target: 'allAdjacentFoes' },\r\n    'Iron Tail': { makesContact: true },\r\n    Leer: { target: 'allAdjacentFoes' },\r\n    'Mach Punch': { makesContact: true },\r\n    Megahorn: { makesContact: true },\r\n    'Mega Kick': { makesContact: true },\r\n    'Mega Punch': { makesContact: true },\r\n    'Metal Claw': { makesContact: true },\r\n    Peck: { makesContact: true },\r\n    Pound: { makesContact: true },\r\n    'Powder Snow': { target: 'allAdjacentFoes' },\r\n    'Quick Attack': { makesContact: true },\r\n    'Razor Leaf': { target: 'allAdjacentFoes' },\r\n    'Rock Slide': { target: 'allAdjacentFoes' },\r\n    Scratch: { makesContact: true },\r\n    'Seismic Toss': { makesContact: true },\r\n    'Shadow Strike': { makesContact: true },\r\n    Slam: { makesContact: true },\r\n    Slash: { makesContact: true },\r\n    Spark: { makesContact: true },\r\n    'Steel Wing': { makesContact: true },\r\n    Strength: { makesContact: true },\r\n    'Super Fang': { makesContact: true },\r\n    Swift: { target: 'allAdjacentFoes' },\r\n    'Tail Whip': { target: 'allAdjacentFoes' },\r\n    'Thunder Punch': { makesContact: true },\r\n    'Vise Grip': { makesContact: true },\r\n    'Vital Throw': { makesContact: true },\r\n    'Wing Attack': { makesContact: true },\r\n    'Arm Thrust': {\r\n        bp: 15,\r\n        type: 'Fighting',\r\n        multihit: [2, 5],\r\n        makesContact: true\r\n    },\r\n    Assist: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Astonish: { bp: 40, type: 'Ghost', makesContact: true },\r\n    Block: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Bounce: { bp: 85, type: 'Flying', makesContact: true },\r\n    'Bullet Seed': { bp: 10, type: 'Grass', multihit: [2, 5] },\r\n    Camouflage: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Charge: { bp: 0, category: 'Status', type: 'Electric' },\r\n    Covet: { bp: 40, type: 'Fairy' },\r\n    Dive: { bp: 60, type: 'Water', makesContact: true },\r\n    'Doom Desire': { bp: 120, type: 'Steel' },\r\n    Extrasensory: { bp: 80, type: 'Psychic' },\r\n    'Fake Out': { bp: 40, type: 'Normal', priority: 1 },\r\n    'Follow Me': { bp: 0, category: 'Status', type: 'Normal', priority: 3 },\r\n    Hail: { bp: 0, category: 'Status', type: 'Ice' },\r\n    'Icicle Spear': { bp: 10, type: 'Ice', multihit: [2, 5] },\r\n    Ingrain: { bp: 0, category: 'Status', type: 'Grass' },\r\n    'Knock Off': { bp: 20, type: 'Dark', makesContact: true },\r\n    'Leaf Blade': { bp: 70, type: 'Grass', makesContact: true },\r\n    'Magic Coat': { bp: 0, category: 'Status', type: 'Psychic', priority: 4 },\r\n    Memento: { bp: 0, category: 'Status', type: 'Dark' },\r\n    'Nature Power': { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Needle Arm': { bp: 60, type: 'Grass', makesContact: true },\r\n    'Odor Sleuth': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Overheat: { bp: 140, type: 'Fire', self: { boosts: { spa: -2 } }, makesContact: true },\r\n    Revenge: { bp: 60, type: 'Fighting', makesContact: true },\r\n    'Rock Blast': { bp: 25, type: 'Rock', multihit: [2, 5] },\r\n    'Role Play': { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Sand Tomb': { bp: 15, type: 'Ground' },\r\n    'Skill Swap': { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Smelling Salts': { bp: 60, type: 'Normal', makesContact: true },\r\n    'Spit Up': { bp: 0, type: 'Normal' },\r\n    Stockpile: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Swallow: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Taunt: { bp: 0, category: 'Status', type: 'Dark' },\r\n    'Teeter Dance': { bp: 0, category: 'Status', type: 'Normal', target: 'allAdjacent' },\r\n    Tickle: { bp: 0, category: 'Status', type: 'Normal' },\r\n    Trick: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    Uproar: { bp: 50, type: 'Normal', isSound: true },\r\n    'Volt Tackle': { bp: 120, type: 'Electric', recoil: [1, 3], makesContact: true },\r\n    'Weather Ball': { bp: 50, type: 'Normal' },\r\n    Aromatherapy: { bp: 0, category: 'Status', type: 'Grass' },\r\n    'Brick Break': { bp: 75, type: 'Fighting', makesContact: true },\r\n    Endeavor: { bp: 0, type: 'Normal', makesContact: true },\r\n    'Focus Punch': { bp: 150, type: 'Fighting', makesContact: true },\r\n    Imprison: { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Mud Sport': { bp: 0, category: 'Status', type: 'Ground' },\r\n    Recycle: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Secret Power': { bp: 70, type: 'Normal' },\r\n    'Sky Uppercut': { bp: 85, type: 'Fighting', makesContact: true },\r\n    'Slack Off': { bp: 0, category: 'Status', type: 'Normal' },\r\n    Snatch: { bp: 0, category: 'Status', type: 'Dark', priority: 4 },\r\n    'Tail Glow': { bp: 0, category: 'Status', type: 'Bug' },\r\n    Torment: { bp: 0, category: 'Status', type: 'Dark' },\r\n    'Water Sport': { bp: 0, category: 'Status', type: 'Water' },\r\n    Wish: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Air Cutter': { bp: 55, type: 'Flying', target: 'allAdjacentFoes' },\r\n    Facade: { bp: 70, type: 'Normal', makesContact: true },\r\n    'Grass Whistle': { bp: 0, category: 'Status', type: 'Grass', isSound: true },\r\n    'Heat Wave': { bp: 100, type: 'Fire', target: 'allAdjacentFoes' },\r\n    'Hyper Voice': { bp: 90, type: 'Normal', isSound: true, target: 'allAdjacentFoes' },\r\n    'Metal Sound': { bp: 0, category: 'Status', type: 'Steel', isSound: true },\r\n    'Meteor Mash': { bp: 100, type: 'Steel', makesContact: true },\r\n    'Muddy Water': { bp: 95, type: 'Water', target: 'allAdjacentFoes' },\r\n    'Poison Fang': { bp: 50, type: 'Poison', makesContact: true },\r\n    'Rock Tomb': { bp: 50, type: 'Rock' },\r\n    'Will-O-Wisp': { bp: 0, category: 'Status', type: 'Fire' },\r\n    'Ice Ball': { bp: 30, type: 'Ice', makesContact: true },\r\n    'Sheer Cold': { bp: 0, type: 'Ice' },\r\n    Howl: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Luster Purge': { bp: 70, type: 'Psychic' },\r\n    'Mist Ball': { bp: 70, type: 'Psychic' },\r\n    'Psycho Boost': { bp: 140, type: 'Psychic', self: { boosts: { spa: -2 } } },\r\n    Refresh: { bp: 0, category: 'Status', type: 'Normal' },\r\n    'Signal Beam': { bp: 75, type: 'Bug' },\r\n    'Silver Wind': { bp: 60, type: 'Bug' },\r\n    'Aerial Ace': { bp: 60, type: 'Flying', makesContact: true },\r\n    'Blast Burn': { bp: 150, type: 'Fire' },\r\n    'Blaze Kick': { bp: 85, type: 'Fire', makesContact: true },\r\n    'Bulk Up': { bp: 0, category: 'Status', type: 'Fighting' },\r\n    'Calm Mind': { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Cosmic Power': { bp: 0, category: 'Status', type: 'Psychic' },\r\n    'Crush Claw': { bp: 75, type: 'Normal', makesContact: true },\r\n    'Dragon Claw': { bp: 80, type: 'Dragon', makesContact: true },\r\n    'Dragon Dance': { bp: 0, category: 'Status', type: 'Dragon' },\r\n    Eruption: { bp: 150, type: 'Fire', target: 'allAdjacentFoes' },\r\n    'Fake Tears': { bp: 0, category: 'Status', type: 'Dark' },\r\n    'Feather Dance': { bp: 0, category: 'Status', type: 'Flying' },\r\n    Flatter: { bp: 0, category: 'Status', type: 'Dark' },\r\n    'Frenzy Plant': { bp: 150, type: 'Grass' },\r\n    Grudge: { bp: 0, category: 'Status', type: 'Ghost' },\r\n    'Helping Hand': { bp: 0, category: 'Status', type: 'Normal', priority: 5 },\r\n    'Hydro Cannon': { bp: 150, type: 'Water' },\r\n    'Iron Defense': { bp: 0, category: 'Status', type: 'Steel' },\r\n    'Magical Leaf': { bp: 60, type: 'Grass' },\r\n    'Mud Shot': { bp: 55, type: 'Ground' },\r\n    'Poison Tail': { bp: 50, type: 'Poison', makesContact: true },\r\n    'Shadow Punch': { bp: 60, type: 'Ghost', makesContact: true },\r\n    'Shock Wave': { bp: 60, type: 'Electric' },\r\n    Superpower: { bp: 120, type: 'Fighting', self: { boosts: { atk: -1, def: -1 } }, makesContact: true },\r\n    'Water Pulse': { bp: 60, type: 'Water' },\r\n    'Water Spout': { bp: 150, type: 'Water', target: 'allAdjacentFoes' },\r\n    Yawn: { bp: 0, category: 'Status', type: 'Normal' }\r\n};\r\nvar ADV = (0, util_1.extend)(true, {}, GSC, ADV_PATCH);\r\nvar DPP_PATCH = {\r\n    Absorb: { category: 'Special' },\r\n    'Arm Thrust': { category: 'Physical' },\r\n    Barrage: { category: 'Physical' },\r\n    'Beat Up': { category: 'Physical' },\r\n    Bide: { priority: 1, category: 'Physical' },\r\n    Bind: { category: 'Physical' },\r\n    'Bone Rush': { category: 'Physical' },\r\n    Bonemerang: { category: 'Physical' },\r\n    Bounce: { category: 'Physical' },\r\n    'Brick Break': { category: 'Physical' },\r\n    'Bullet Seed': { category: 'Physical' },\r\n    Clamp: { category: 'Physical' },\r\n    'Comet Punch': { isPunch: true, category: 'Physical' },\r\n    Counter: { category: 'Physical' },\r\n    Covet: { makesContact: true, category: 'Physical' },\r\n    Crabhammer: { category: 'Physical' },\r\n    Dig: { bp: 80, category: 'Physical' },\r\n    Dive: { bp: 80, category: 'Physical' },\r\n    'Doom Desire': { category: 'Special' },\r\n    'Double-Edge': { category: 'Physical' },\r\n    'Double Kick': { category: 'Physical' },\r\n    'Double Slap': { category: 'Physical' },\r\n    'Dream Eater': { category: 'Special' },\r\n    Earthquake: { category: 'Physical' },\r\n    Endeavor: { category: 'Physical' },\r\n    Explosion: { category: 'Physical' },\r\n    'Extreme Speed': { category: 'Physical' },\r\n    'Fake Out': { makesContact: true, category: 'Physical' },\r\n    'Fire Spin': { category: 'Special' },\r\n    Flail: { category: 'Physical' },\r\n    Fly: { bp: 90, category: 'Physical' },\r\n    'Focus Punch': { isPunch: true, category: 'Physical' },\r\n    'Fury Attack': { category: 'Physical' },\r\n    'Fury Cutter': { category: 'Physical' },\r\n    'Fury Swipes': { category: 'Physical' },\r\n    'Future Sight': { category: 'Special' },\r\n    'Giga Drain': { category: 'Special' },\r\n    Gust: { category: 'Special' },\r\n    'High Jump Kick': { bp: 100, category: 'Physical' },\r\n    'Icicle Spear': { category: 'Physical' },\r\n    'Jump Kick': { bp: 85, category: 'Physical' },\r\n    'Knock Off': { category: 'Physical' },\r\n    'Leech Life': { category: 'Physical' },\r\n    Magnitude: { category: 'Physical' },\r\n    'Mega Drain': { category: 'Special' },\r\n    'Mirror Coat': { category: 'Special' },\r\n    Outrage: { bp: 120, category: 'Physical' },\r\n    'Petal Dance': { bp: 90, category: 'Special' },\r\n    'Pin Missile': { category: 'Physical' },\r\n    Psywave: { category: 'Special' },\r\n    Pursuit: { category: 'Physical' },\r\n    'Rapid Spin': { category: 'Physical' },\r\n    'Razor Wind': { category: 'Special' },\r\n    Revenge: { category: 'Physical' },\r\n    Reversal: { category: 'Physical' },\r\n    'Rock Blast': { category: 'Physical' },\r\n    'Sand Tomb': { category: 'Physical' },\r\n    'Secret Power': { category: 'Physical' },\r\n    'Self-Destruct': { category: 'Physical' },\r\n    'Sky Uppercut': { isPunch: true, category: 'Physical' },\r\n    'Smelling Salts': { category: 'Physical' },\r\n    'Solar Beam': { category: 'Special' },\r\n    'Spike Cannon': { category: 'Physical' },\r\n    'Spit Up': { category: 'Special' },\r\n    Stomp: { category: 'Physical' },\r\n    Struggle: { category: 'Physical', struggleRecoil: true },\r\n    Submission: { category: 'Physical' },\r\n    Surf: { target: 'allAdjacent', category: 'Special' },\r\n    Tackle: { category: 'Physical' },\r\n    'Take Down': { category: 'Physical' },\r\n    Thief: { category: 'Physical' },\r\n    Thrash: { category: 'Physical' },\r\n    Thunder: { category: 'Special' },\r\n    'Triple Kick': { category: 'Physical' },\r\n    Twineedle: { category: 'Physical' },\r\n    Twister: { category: 'Special' },\r\n    Uproar: { category: 'Special' },\r\n    'Volt Tackle': { category: 'Physical' },\r\n    Whirlpool: { category: 'Special' },\r\n    Wrap: { category: 'Physical' },\r\n    'Air Cutter': { category: 'Special' },\r\n    Blizzard: { category: 'Special' },\r\n    'Body Slam': { category: 'Physical' },\r\n    Bubble: { category: 'Special' },\r\n    Extrasensory: { category: 'Special' },\r\n    Facade: { category: 'Physical' },\r\n    'Fire Blast': { category: 'Special' },\r\n    Flamethrower: { category: 'Special' },\r\n    'Heat Wave': { category: 'Special' },\r\n    'Hidden Power': { category: 'Special' },\r\n    'Hidden Power Bug': { category: 'Special' },\r\n    'Hidden Power Dark': { category: 'Special' },\r\n    'Hidden Power Dragon': { category: 'Special' },\r\n    'Hidden Power Electric': { category: 'Special' },\r\n    'Hidden Power Fighting': { category: 'Special' },\r\n    'Hidden Power Fire': { category: 'Special' },\r\n    'Hidden Power Flying': { category: 'Special' },\r\n    'Hidden Power Ghost': { category: 'Special' },\r\n    'Hidden Power Grass': { category: 'Special' },\r\n    'Hidden Power Ground': { category: 'Special' },\r\n    'Hidden Power Ice': { category: 'Special' },\r\n    'Hidden Power Poison': { category: 'Special' },\r\n    'Hidden Power Psychic': { category: 'Special' },\r\n    'Hidden Power Rock': { category: 'Special' },\r\n    'Hidden Power Steel': { category: 'Special' },\r\n    'Hidden Power Water': { category: 'Special' },\r\n    'Hydro Pump': { category: 'Special' },\r\n    'Hyper Voice': { category: 'Special' },\r\n    'Ice Beam': { category: 'Special' },\r\n    Lick: { category: 'Physical' },\r\n    'Meteor Mash': { isPunch: true, category: 'Physical' },\r\n    'Muddy Water': { category: 'Special' },\r\n    Overheat: { category: 'Special', makesContact: false },\r\n    'Poison Fang': { isBite: true, category: 'Physical' },\r\n    'Rock Tomb': { category: 'Physical' },\r\n    'Skull Bash': { category: 'Physical' },\r\n    Smog: { category: 'Special' },\r\n    Snore: { category: 'Special' },\r\n    Thunderbolt: { category: 'Special' },\r\n    'Vine Whip': { category: 'Physical' },\r\n    'Weather Ball': { category: 'Special' },\r\n    'Ice Ball': { category: 'Physical' },\r\n    Rollout: { category: 'Physical' },\r\n    'Sheer Cold': { category: 'Special' },\r\n    Aeroblast: { category: 'Special' },\r\n    'Bone Club': { category: 'Physical' },\r\n    Constrict: { category: 'Physical' },\r\n    'Dizzy Punch': { isPunch: true, category: 'Physical' },\r\n    'Dragon Rage': { category: 'Special' },\r\n    'Egg Bomb': { category: 'Physical' },\r\n    'Feint Attack': { makesContact: true, category: 'Physical' },\r\n    Frustration: { category: 'Physical' },\r\n    'Hyper Fang': { isBite: true, category: 'Physical' },\r\n    'Karate Chop': { category: 'Physical' },\r\n    'Low Kick': { category: 'Physical' },\r\n    'Luster Purge': { category: 'Special' },\r\n    'Mist Ball': { category: 'Special' },\r\n    'Needle Arm': { category: 'Physical' },\r\n    'Psycho Boost': { category: 'Special' },\r\n    Rage: { category: 'Physical' },\r\n    Return: { category: 'Physical' },\r\n    'Rolling Kick': { category: 'Physical' },\r\n    'Sacred Fire': { category: 'Physical' },\r\n    'Signal Beam': { category: 'Special' },\r\n    'Silver Wind': { category: 'Special' },\r\n    'Sonic Boom': { category: 'Special' },\r\n    Acid: { category: 'Special' },\r\n    'Aerial Ace': { category: 'Physical' },\r\n    'Ancient Power': { category: 'Special', makesContact: false },\r\n    Astonish: { category: 'Physical' },\r\n    'Aurora Beam': { category: 'Special' },\r\n    Bite: { isBite: true, category: 'Physical' },\r\n    'Blast Burn': { category: 'Special' },\r\n    'Blaze Kick': { category: 'Physical' },\r\n    'Bubble Beam': { category: 'Special' },\r\n    Confusion: { category: 'Special' },\r\n    'Cross Chop': { category: 'Physical' },\r\n    Crunch: { isBite: true, category: 'Physical' },\r\n    'Crush Claw': { category: 'Physical' },\r\n    Cut: { category: 'Physical' },\r\n    'Dragon Breath': { category: 'Special' },\r\n    'Dragon Claw': { category: 'Physical' },\r\n    'Drill Peck': { category: 'Physical' },\r\n    'Dynamic Punch': { isPunch: true, category: 'Physical' },\r\n    Ember: { category: 'Special' },\r\n    Eruption: { category: 'Special' },\r\n    'False Swipe': { category: 'Physical' },\r\n    'Fire Punch': { isPunch: true, category: 'Physical' },\r\n    Fissure: { category: 'Physical' },\r\n    'Flame Wheel': { category: 'Physical' },\r\n    'Frenzy Plant': { category: 'Special' },\r\n    Guillotine: { category: 'Physical' },\r\n    Headbutt: { category: 'Physical' },\r\n    'Horn Attack': { category: 'Physical' },\r\n    'Horn Drill': { category: 'Physical' },\r\n    'Hydro Cannon': { category: 'Special' },\r\n    'Hyper Beam': { category: 'Special' },\r\n    'Ice Punch': { isPunch: true, category: 'Physical' },\r\n    'Icy Wind': { category: 'Special' },\r\n    'Iron Tail': { category: 'Physical' },\r\n    'Leaf Blade': { bp: 90, category: 'Physical' },\r\n    'Mach Punch': { isPunch: true, category: 'Physical' },\r\n    'Magical Leaf': { category: 'Special' },\r\n    Megahorn: { category: 'Physical' },\r\n    'Mega Kick': { category: 'Physical' },\r\n    'Mega Punch': { isPunch: true, category: 'Physical' },\r\n    'Metal Claw': { category: 'Physical' },\r\n    'Mud Shot': { category: 'Special' },\r\n    'Mud-Slap': { category: 'Special' },\r\n    'Night Shade': { category: 'Special' },\r\n    Octazooka: { category: 'Special' },\r\n    'Paleo Wave': { category: 'Special' },\r\n    'Pay Day': { category: 'Physical' },\r\n    Peck: { category: 'Physical' },\r\n    'Poison Sting': { category: 'Physical' },\r\n    'Poison Tail': { category: 'Physical' },\r\n    Pound: { category: 'Physical' },\r\n    'Powder Snow': { category: 'Special' },\r\n    Present: { category: 'Physical' },\r\n    Psybeam: { category: 'Special' },\r\n    Psychic: { category: 'Special' },\r\n    'Quick Attack': { category: 'Physical' },\r\n    'Razor Leaf': { category: 'Physical' },\r\n    'Rock Slide': { category: 'Physical' },\r\n    'Rock Smash': { bp: 40, category: 'Physical' },\r\n    'Rock Throw': { category: 'Physical' },\r\n    Scratch: { category: 'Physical' },\r\n    'Seismic Toss': { category: 'Physical' },\r\n    'Shadow Ball': { category: 'Special' },\r\n    'Shadow Punch': { isPunch: true, category: 'Physical' },\r\n    'Shadow Strike': { category: 'Physical' },\r\n    'Shock Wave': { category: 'Special' },\r\n    'Sky Attack': { category: 'Physical' },\r\n    Slam: { category: 'Physical' },\r\n    Slash: { category: 'Physical' },\r\n    Sludge: { category: 'Special' },\r\n    'Sludge Bomb': { category: 'Special' },\r\n    Spark: { category: 'Physical' },\r\n    'Steel Wing': { category: 'Physical' },\r\n    Strength: { category: 'Physical' },\r\n    'Super Fang': { category: 'Physical' },\r\n    Superpower: { category: 'Physical' },\r\n    Swift: { category: 'Special' },\r\n    'Thunder Punch': { isPunch: true, category: 'Physical' },\r\n    'Thunder Shock': { category: 'Special' },\r\n    'Tri Attack': { category: 'Special' },\r\n    'Vise Grip': { category: 'Physical' },\r\n    'Vital Throw': { category: 'Physical' },\r\n    Waterfall: { category: 'Physical' },\r\n    'Water Gun': { category: 'Special' },\r\n    'Water Pulse': { category: 'Special' },\r\n    'Water Spout': { category: 'Special' },\r\n    'Wing Attack': { category: 'Physical' },\r\n    'Zap Cannon': { bp: 120, category: 'Special' },\r\n    Acupressure: { bp: 0, type: 'Normal' },\r\n    'Aqua Ring': { bp: 0, type: 'Water' },\r\n    Assurance: {\r\n        bp: 50,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Avalanche: {\r\n        bp: 60,\r\n        type: 'Ice',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Brave Bird': {\r\n        bp: 120,\r\n        type: 'Flying',\r\n        recoil: [1, 3],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Bug Bite': {\r\n        bp: 60,\r\n        type: 'Bug',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Chatter: { bp: 60, type: 'Flying', isSound: true, category: 'Special' },\r\n    Copycat: { bp: 0, type: 'Normal' },\r\n    'Crush Grip': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Defog: { bp: 0, type: 'Flying' },\r\n    'Double Hit': {\r\n        bp: 35,\r\n        type: 'Normal',\r\n        multihit: 2,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Drain Punch': {\r\n        bp: 60,\r\n        type: 'Fighting',\r\n        drain: [1, 2],\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical'\r\n    },\r\n    Embargo: { bp: 0, type: 'Dark' },\r\n    Feint: {\r\n        bp: 50,\r\n        type: 'Normal',\r\n        priority: 2,\r\n        breaksProtect: true,\r\n        category: 'Physical'\r\n    },\r\n    'Fire Fang': {\r\n        bp: 65,\r\n        type: 'Fire',\r\n        makesContact: true,\r\n        isBite: true,\r\n        category: 'Physical'\r\n    },\r\n    'Flare Blitz': {\r\n        bp: 120,\r\n        type: 'Fire',\r\n        recoil: [1, 3],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Fling: { bp: 0, type: 'Dark', category: 'Physical' },\r\n    Gravity: { bp: 0, type: 'Psychic' },\r\n    'Head Smash': {\r\n        bp: 150,\r\n        type: 'Rock',\r\n        recoil: [1, 2],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Heal Block': { bp: 0, type: 'Psychic', target: 'allAdjacentFoes' },\r\n    'Healing Wish': { bp: 0, type: 'Psychic' },\r\n    'Heal Order': { bp: 0, type: 'Bug' },\r\n    'Last Resort': {\r\n        bp: 130,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Lucky Chant': { bp: 0, type: 'Normal' },\r\n    'Lunar Dance': { bp: 0, type: 'Psychic' },\r\n    'Magma Storm': { bp: 120, type: 'Fire', category: 'Special' },\r\n    'Magnet Rise': { bp: 0, type: 'Electric' },\r\n    'Me First': { bp: 0, type: 'Normal' },\r\n    'Metal Burst': { bp: 0, type: 'Steel', category: 'Physical' },\r\n    'Miracle Eye': { bp: 0, type: 'Psychic' },\r\n    'Natural Gift': { bp: 0, type: 'Normal', category: 'Physical' },\r\n    Payback: {\r\n        bp: 50,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Pluck: {\r\n        bp: 60,\r\n        type: 'Flying',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Power Trick': { bp: 0, type: 'Psychic' },\r\n    Roost: { bp: 0, type: 'Flying' },\r\n    'Stealth Rock': { bp: 0, type: 'Rock' },\r\n    'Sucker Punch': {\r\n        bp: 80,\r\n        type: 'Dark',\r\n        priority: 1,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Switcheroo: { bp: 0, type: 'Dark' },\r\n    Tailwind: { bp: 0, type: 'Flying' },\r\n    'Toxic Spikes': { bp: 0, type: 'Poison' },\r\n    'Trick Room': { bp: 0, type: 'Psychic' },\r\n    'U-turn': {\r\n        bp: 70,\r\n        type: 'Bug',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Wake-Up Slap': {\r\n        bp: 60,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Wood Hammer': {\r\n        bp: 120,\r\n        type: 'Grass',\r\n        recoil: [1, 3],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Worry Seed': { bp: 0, type: 'Grass' },\r\n    'Wring Out': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Special'\r\n    },\r\n    'Air Slash': { bp: 75, type: 'Flying', category: 'Special' },\r\n    'Aura Sphere': { bp: 90, type: 'Fighting', category: 'Special' },\r\n    'Bug Buzz': { bp: 90, type: 'Bug', isSound: true, category: 'Special' },\r\n    'Draco Meteor': { bp: 140, type: 'Dragon', self: { boosts: { spa: -2 } }, category: 'Special' },\r\n    'Dragon Pulse': { bp: 90, type: 'Dragon', category: 'Special' },\r\n    'Dragon Rush': {\r\n        bp: 100,\r\n        type: 'Dragon',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Energy Ball': { bp: 80, type: 'Grass', category: 'Special' },\r\n    'Gunk Shot': { bp: 120, type: 'Poison', category: 'Physical' },\r\n    'Gyro Ball': {\r\n        bp: 0,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Leaf Storm': { bp: 140, type: 'Grass', self: { boosts: { spa: -2 } }, category: 'Special' },\r\n    'Power Gem': { bp: 70, type: 'Rock', category: 'Special' },\r\n    'Psycho Shift': { bp: 0, type: 'Psychic' },\r\n    'Shadow Force': {\r\n        bp: 120,\r\n        type: 'Ghost',\r\n        breaksProtect: true,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Dark Void': { bp: 0, type: 'Dark', target: 'allAdjacentFoes' },\r\n    'Gastro Acid': { bp: 0, type: 'Poison' },\r\n    Captivate: { bp: 0, type: 'Normal', target: 'allAdjacentFoes' },\r\n    'Grass Knot': {\r\n        bp: 0,\r\n        type: 'Grass',\r\n        makesContact: true,\r\n        category: 'Special'\r\n    },\r\n    'Heart Swap': { bp: 0, type: 'Psychic' },\r\n    Judgment: { bp: 100, type: 'Normal', category: 'Special' },\r\n    'Magnet Bomb': { bp: 60, type: 'Steel', category: 'Physical' },\r\n    'Mirror Shot': { bp: 65, type: 'Steel', category: 'Special' },\r\n    'Mud Bomb': { bp: 65, type: 'Ground', category: 'Special' },\r\n    'Ominous Wind': { bp: 60, type: 'Ghost', category: 'Special' },\r\n    Punishment: {\r\n        bp: 0,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Roar of Time': { bp: 150, type: 'Dragon', category: 'Special' },\r\n    'Rock Climb': {\r\n        bp: 90,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Seed Flare': { bp: 120, type: 'Grass', category: 'Special' },\r\n    'Spacial Rend': { bp: 100, type: 'Dragon', category: 'Special' },\r\n    'Trump Card': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Special'\r\n    },\r\n    'Aqua Jet': {\r\n        bp: 40,\r\n        type: 'Water',\r\n        priority: 1,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Aqua Tail': {\r\n        bp: 90,\r\n        type: 'Water',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Attack Order': { bp: 90, type: 'Bug', category: 'Physical' },\r\n    Brine: { bp: 65, type: 'Water', category: 'Special' },\r\n    'Bullet Punch': {\r\n        bp: 40,\r\n        type: 'Steel',\r\n        priority: 1,\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical'\r\n    },\r\n    'Charge Beam': { bp: 40, type: 'Electric', category: 'Special' },\r\n    'Close Combat': {\r\n        bp: 120,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Cross Poison': {\r\n        bp: 70,\r\n        type: 'Poison',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Dark Pulse': { bp: 80, type: 'Dark', category: 'Special' },\r\n    'Defend Order': { bp: 0, type: 'Bug' },\r\n    Discharge: {\r\n        bp: 80,\r\n        type: 'Electric',\r\n        target: 'allAdjacent',\r\n        category: 'Special'\r\n    },\r\n    'Earth Power': { bp: 90, type: 'Ground', category: 'Special' },\r\n    'Flash Cannon': { bp: 80, type: 'Steel', category: 'Special' },\r\n    'Focus Blast': { bp: 120, type: 'Fighting', category: 'Special' },\r\n    'Force Palm': {\r\n        bp: 60,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Giga Impact': {\r\n        bp: 150,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Guard Swap': { bp: 0, type: 'Psychic' },\r\n    'Hammer Arm': {\r\n        bp: 100,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical'\r\n    },\r\n    'Ice Fang': {\r\n        bp: 65,\r\n        type: 'Ice',\r\n        makesContact: true,\r\n        isBite: true,\r\n        category: 'Physical'\r\n    },\r\n    'Ice Shard': { bp: 40, type: 'Ice', priority: 1, category: 'Physical' },\r\n    'Iron Head': {\r\n        bp: 80,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Lava Plume': {\r\n        bp: 80,\r\n        type: 'Fire',\r\n        target: 'allAdjacent',\r\n        category: 'Special'\r\n    },\r\n    'Nasty Plot': { bp: 0, type: 'Dark' },\r\n    'Night Slash': {\r\n        bp: 70,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Poison Jab': {\r\n        bp: 80,\r\n        type: 'Poison',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Power Swap': { bp: 0, type: 'Psychic' },\r\n    'Power Whip': {\r\n        bp: 120,\r\n        type: 'Grass',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Psycho Cut': { bp: 70, type: 'Psychic', category: 'Physical' },\r\n    'Rock Polish': { bp: 0, type: 'Rock' },\r\n    'Rock Wrecker': { bp: 150, type: 'Rock', category: 'Physical' },\r\n    'Seed Bomb': { bp: 80, type: 'Grass', category: 'Physical' },\r\n    'Shadow Claw': {\r\n        bp: 70,\r\n        type: 'Ghost',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Shadow Sneak': {\r\n        bp: 40,\r\n        type: 'Ghost',\r\n        priority: 1,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Stone Edge': { bp: 100, type: 'Rock', category: 'Physical' },\r\n    'Thunder Fang': {\r\n        bp: 65,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        isBite: true,\r\n        category: 'Physical'\r\n    },\r\n    'Vacuum Wave': {\r\n        bp: 40,\r\n        type: 'Fighting',\r\n        priority: 1,\r\n        category: 'Special'\r\n    },\r\n    'X-Scissor': {\r\n        bp: 80,\r\n        type: 'Bug',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Zen Headbutt': {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    }\r\n};\r\nvar DPP = (0, util_1.extend)(true, {}, ADV, DPP_PATCH);\r\nvar BW_PATCH = {\r\n    'Air Slash': { secondaries: true },\r\n    Blizzard: { secondaries: true },\r\n    'Body Slam': { secondaries: true },\r\n    Bounce: { secondaries: true },\r\n    Bubble: { secondaries: true },\r\n    'Brave Bird': { recoil: [33, 100] },\r\n    'Bug Buzz': { secondaries: true },\r\n    Chatter: { secondaries: true },\r\n    Covet: { bp: 60 },\r\n    'Dragon Rush': { secondaries: true },\r\n    'Drain Punch': { bp: 75 },\r\n    'Energy Ball': { secondaries: true },\r\n    Extrasensory: { secondaries: true },\r\n    Feint: { bp: 30 },\r\n    Detect: { priority: 4 },\r\n    'Double-Edge': { recoil: [33, 100] },\r\n    Protect: { priority: 4 },\r\n    'Fire Blast': { secondaries: true },\r\n    'Fire Spin': { bp: 35 },\r\n    Flamethrower: { secondaries: true },\r\n    'Fury Cutter': { bp: 20 },\r\n    'Future Sight': { bp: 100, type: 'Psychic' },\r\n    'Giga Drain': { bp: 75 },\r\n    'Gunk Shot': { secondaries: true },\r\n    'Heat Wave': { secondaries: true },\r\n    'Ice Beam': { secondaries: true },\r\n    Lick: { secondaries: true },\r\n    'Meteor Mash': { secondaries: true },\r\n    'Muddy Water': { secondaries: true },\r\n    Overheat: {},\r\n    'Poison Fang': { secondaries: true },\r\n    'Poison Gas': { target: 'allAdjacentFoes' },\r\n    'Rock Tomb': { secondaries: true },\r\n    'Sand Tomb': { bp: 35 },\r\n    'Secret Power': { secondaries: true },\r\n    Smog: { secondaries: true },\r\n    Snore: { secondaries: true },\r\n    Stomp: { secondaries: true },\r\n    Thunder: { secondaries: true },\r\n    Thunderbolt: { secondaries: true },\r\n    Uproar: { bp: 90 },\r\n    Whirlpool: { bp: 35 },\r\n    'Petal Dance': { bp: 120 },\r\n    Tackle: { bp: 50 },\r\n    Thrash: { bp: 120 },\r\n    'Bone Club': { secondaries: true },\r\n    Constrict: { secondaries: true },\r\n    'Dizzy Punch': { secondaries: true },\r\n    'Hyper Fang': { secondaries: true },\r\n    'Jump Kick': { bp: 100 },\r\n    'Luster Purge': { secondaries: true },\r\n    'Mirror Shot': { secondaries: true },\r\n    'Mist Ball': { secondaries: true },\r\n    'Mud Bomb': { secondaries: true },\r\n    'Needle Arm': { secondaries: true },\r\n    'Ominous Wind': { secondaries: true },\r\n    'Rock Climb': { secondaries: true },\r\n    'Rolling Kick': { secondaries: true },\r\n    'Sacred Fire': { secondaries: true },\r\n    'Seed Flare': { secondaries: true },\r\n    'Signal Beam': { secondaries: true },\r\n    'Silver Wind': { secondaries: true },\r\n    Twineedle: { secondaries: true },\r\n    Acid: { secondaries: true },\r\n    'Ancient Power': { secondaries: true },\r\n    Astonish: { secondaries: true },\r\n    'Aurora Beam': { secondaries: true },\r\n    'Beat Up': { bp: 0 },\r\n    Bite: { secondaries: true },\r\n    'Blaze Kick': { secondaries: true },\r\n    'Bubble Beam': { secondaries: true },\r\n    'Bullet Seed': { bp: 25 },\r\n    'Charge Beam': { secondaries: true },\r\n    Confusion: { secondaries: true },\r\n    'Cross Poison': { secondaries: true },\r\n    Crunch: { secondaries: true },\r\n    'Crush Claw': { secondaries: true },\r\n    Curse: { type: 'Ghost' },\r\n    'Dark Pulse': { secondaries: true },\r\n    Discharge: { secondaries: true },\r\n    'Doom Desire': { bp: 140 },\r\n    'Dragon Breath': { secondaries: true },\r\n    'Dynamic Punch': { secondaries: true },\r\n    'Earth Power': { secondaries: true },\r\n    'Extreme Speed': { priority: 2 },\r\n    Ember: { secondaries: true },\r\n    'Fake Out': { secondaries: true, priority: 3 },\r\n    'Fire Fang': { secondaries: true },\r\n    'Fire Punch': { secondaries: true },\r\n    'Flame Wheel': { secondaries: true },\r\n    'Flare Blitz': { secondaries: true, recoil: [33, 100] },\r\n    'Flash Cannon': { secondaries: true },\r\n    'Focus Blast': { secondaries: true },\r\n    'Force Palm': { secondaries: true },\r\n    Headbutt: { secondaries: true },\r\n    'High Jump Kick': { bp: 130 },\r\n    'Ice Fang': { secondaries: true },\r\n    'Ice Punch': { secondaries: true },\r\n    'Icicle Spear': { bp: 25 },\r\n    'Icy Wind': { secondaries: true },\r\n    'Iron Head': { secondaries: true },\r\n    'Iron Tail': { secondaries: true },\r\n    'Last Resort': { bp: 140 },\r\n    'Lava Plume': { secondaries: true },\r\n    'Metal Claw': { secondaries: true },\r\n    'Mud Shot': { secondaries: true },\r\n    'Mud-Slap': { secondaries: true },\r\n    Octazooka: { secondaries: true },\r\n    'Paleo Wave': { secondaries: true },\r\n    'Poison Jab': { secondaries: true },\r\n    'Poison Sting': { secondaries: true },\r\n    'Poison Tail': { secondaries: true },\r\n    'Powder Snow': { secondaries: true },\r\n    Psybeam: { secondaries: true },\r\n    Psychic: { secondaries: true },\r\n    'Rock Slide': { secondaries: true },\r\n    'Rock Smash': { secondaries: true },\r\n    'Shadow Ball': { secondaries: true },\r\n    'Shadow Strike': { secondaries: true },\r\n    'Sky Attack': { secondaries: true },\r\n    Sludge: { secondaries: true },\r\n    'Sludge Bomb': { secondaries: true },\r\n    Spark: { secondaries: true },\r\n    'Steel Wing': { secondaries: true },\r\n    'Thunder Fang': { secondaries: true },\r\n    'Thunder Punch': { secondaries: true },\r\n    'Thunder Shock': { secondaries: true },\r\n    'Tri Attack': { secondaries: true },\r\n    Twister: { secondaries: true },\r\n    'Volt Tackle': { secondaries: true, recoil: [33, 100] },\r\n    'Wood Hammer': { recoil: [33, 100] },\r\n    Waterfall: { secondaries: true },\r\n    'Water Pulse': { secondaries: true },\r\n    'Zap Cannon': { secondaries: true },\r\n    'Zen Headbutt': { secondaries: true },\r\n    Autotomize: { bp: 0, type: 'Steel' },\r\n    Bestow: { bp: 0, type: 'Normal' },\r\n    'Echoed Voice': { bp: 40, type: 'Normal', isSound: true, category: 'Special' },\r\n    'Electro Ball': { bp: 0, type: 'Electric', category: 'Special' },\r\n    Entrainment: { bp: 0, type: 'Normal' },\r\n    'Final Gambit': {\r\n        bp: 0,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Special'\r\n    },\r\n    'Fire Pledge': { bp: 50, type: 'Fire', category: 'Special' },\r\n    'Frost Breath': { bp: 40, type: 'Ice', willCrit: true, category: 'Special' },\r\n    'Grass Pledge': { bp: 50, type: 'Grass', category: 'Special' },\r\n    'Heal Pulse': { bp: 0, type: 'Psychic' },\r\n    'Heat Crash': {\r\n        bp: 0,\r\n        type: 'Fire',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Hex: { bp: 50, type: 'Ghost', category: 'Special' },\r\n    'Horn Leech': {\r\n        bp: 75,\r\n        type: 'Grass',\r\n        drain: [1, 2],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Hurricane: {\r\n        bp: 120,\r\n        type: 'Flying',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    Incinerate: { bp: 30, type: 'Fire', target: 'allAdjacentFoes', category: 'Special' },\r\n    'Low Sweep': {\r\n        bp: 60,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Magic Room': { bp: 0, type: 'Psychic' },\r\n    'Quick Guard': { bp: 0, type: 'Fighting', priority: 3 },\r\n    'Rage Powder': { bp: 0, type: 'Bug', priority: 3 },\r\n    'Relic Song': {\r\n        bp: 75,\r\n        type: 'Normal',\r\n        isSound: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    Round: { bp: 60, type: 'Normal', isSound: true, category: 'Special' },\r\n    'Sacred Sword': {\r\n        bp: 90,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        ignoreDefensive: true\r\n    },\r\n    Scald: {\r\n        bp: 80,\r\n        type: 'Water',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Simple Beam': { bp: 0, type: 'Normal' },\r\n    'Sky Drop': {\r\n        bp: 60,\r\n        type: 'Flying',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Snarl: {\r\n        bp: 55,\r\n        type: 'Dark',\r\n        isSound: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    Soak: { bp: 0, type: 'Water' },\r\n    Steamroller: {\r\n        bp: 65,\r\n        type: 'Bug',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Storm Throw': {\r\n        bp: 40,\r\n        type: 'Fighting',\r\n        willCrit: true,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Struggle Bug': {\r\n        bp: 30,\r\n        type: 'Bug',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    Synchronoise: {\r\n        bp: 70,\r\n        type: 'Psychic',\r\n        target: 'allAdjacent',\r\n        category: 'Special'\r\n    },\r\n    'Techno Blast': { bp: 85, type: 'Normal', category: 'Special' },\r\n    Telekinesis: { bp: 0, type: 'Psychic' },\r\n    'Water Pledge': { bp: 50, type: 'Water', category: 'Special' },\r\n    'Wide Guard': { bp: 0, type: 'Rock', priority: 3 },\r\n    'Wonder Room': { bp: 0, type: 'Psychic' },\r\n    'Ally Switch': { bp: 0, type: 'Psychic', priority: 1 },\r\n    'Flame Burst': { bp: 70, type: 'Fire', category: 'Special' },\r\n    'Heavy Slam': {\r\n        bp: 0,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Reflect Type': { bp: 0, type: 'Normal' },\r\n    'Volt Switch': { bp: 70, type: 'Electric', category: 'Special' },\r\n    'Chip Away': {\r\n        bp: 70,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        ignoreDefensive: true\r\n    },\r\n    'Fiery Dance': {\r\n        bp: 80,\r\n        type: 'Fire',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Head Charge': {\r\n        bp: 120,\r\n        type: 'Normal',\r\n        recoil: [1, 4],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Heart Stamp': {\r\n        bp: 60,\r\n        type: 'Psychic',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    Quash: { bp: 0, type: 'Dark' },\r\n    'Searing Shot': {\r\n        bp: 100,\r\n        type: 'Fire',\r\n        target: 'allAdjacent',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Acid Spray': {\r\n        bp: 40,\r\n        type: 'Poison',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    Acrobatics: {\r\n        bp: 55,\r\n        type: 'Flying',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'After You': { bp: 0, type: 'Normal' },\r\n    'Blue Flare': {\r\n        bp: 130,\r\n        type: 'Fire',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Bolt Strike': {\r\n        bp: 130,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    Bulldoze: {\r\n        bp: 60,\r\n        type: 'Ground',\r\n        target: 'allAdjacent',\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Circle Throw': {\r\n        bp: 60,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Clear Smog': { bp: 50, type: 'Poison', category: 'Special' },\r\n    Coil: { bp: 0, type: 'Poison' },\r\n    'Cotton Guard': { bp: 0, type: 'Grass' },\r\n    'Dragon Tail': {\r\n        bp: 60,\r\n        type: 'Dragon',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Drill Run': {\r\n        bp: 80,\r\n        type: 'Ground',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Dual Chop': {\r\n        bp: 40,\r\n        type: 'Dragon',\r\n        multihit: 2,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Electroweb: {\r\n        bp: 55,\r\n        type: 'Electric',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Flame Charge': {\r\n        bp: 50,\r\n        type: 'Fire',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Foul Play': {\r\n        bp: 95,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        overrideOffensivePokemon: 'target'\r\n    },\r\n    'Freeze Shock': {\r\n        bp: 140,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Fusion Bolt': { bp: 100, type: 'Electric', category: 'Physical' },\r\n    'Fusion Flare': { bp: 100, type: 'Fire', category: 'Special' },\r\n    'Gear Grind': {\r\n        bp: 50,\r\n        type: 'Steel',\r\n        multihit: 2,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Glaciate: {\r\n        bp: 65,\r\n        type: 'Ice',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Guard Split': { bp: 0, type: 'Psychic' },\r\n    'Hone Claws': { bp: 0, type: 'Dark' },\r\n    'Ice Burn': {\r\n        bp: 140,\r\n        type: 'Ice',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Icicle Crash': {\r\n        bp: 85,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    Inferno: {\r\n        bp: 100,\r\n        type: 'Fire',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Leaf Tornado': {\r\n        bp: 65,\r\n        type: 'Grass',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Night Daze': {\r\n        bp: 85,\r\n        type: 'Dark',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Power Split': { bp: 0, type: 'Psychic' },\r\n    Psyshock: {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        overrideDefensiveStat: 'def'\r\n    },\r\n    Psystrike: {\r\n        bp: 100,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        overrideDefensiveStat: 'def'\r\n    },\r\n    'Quiver Dance': { bp: 0, type: 'Bug' },\r\n    'Razor Shell': {\r\n        bp: 75,\r\n        type: 'Water',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    Retaliate: {\r\n        bp: 70,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Secret Sword': {\r\n        bp: 85,\r\n        type: 'Fighting',\r\n        category: 'Special',\r\n        overrideDefensiveStat: 'def'\r\n    },\r\n    'Shell Smash': { bp: 0, type: 'Normal' },\r\n    'Shift Gear': { bp: 0, type: 'Steel' },\r\n    'Sludge Wave': {\r\n        bp: 95,\r\n        type: 'Poison',\r\n        target: 'allAdjacent',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Smack Down': { bp: 50, type: 'Rock', category: 'Physical' },\r\n    'Stored Power': { bp: 20, type: 'Psychic', category: 'Special' },\r\n    'Tail Slap': {\r\n        bp: 25,\r\n        type: 'Normal',\r\n        multihit: [2, 5],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'V-create': {\r\n        bp: 180,\r\n        type: 'Fire',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Venoshock: { bp: 65, type: 'Poison', category: 'Special' },\r\n    'Wild Charge': {\r\n        bp: 90,\r\n        type: 'Electric',\r\n        recoil: [1, 4],\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Work Up': { bp: 0, type: 'Normal' }\r\n};\r\nvar BW = (0, util_1.extend)(true, {}, DPP, BW_PATCH);\r\ndelete BW['Faint Attack'];\r\nvar XY_PATCH = {\r\n    'Ice Ball': { isBullet: true },\r\n    'Knock Off': { bp: 65 },\r\n    Thief: { bp: 60 },\r\n    Barrage: { isBullet: true },\r\n    Bubble: { bp: 40 },\r\n    Chatter: { bp: 65 },\r\n    'Egg Bomb': { isBullet: true },\r\n    'Follow Me': { priority: 2 },\r\n    Hurricane: { bp: 110 },\r\n    'Hidden Power': { bp: 60 },\r\n    'Hidden Power Bug': { bp: 60 },\r\n    'Hidden Power Dark': { bp: 60 },\r\n    'Hidden Power Dragon': { bp: 60 },\r\n    'Hidden Power Electric': { bp: 60 },\r\n    'Hidden Power Fighting': { bp: 60 },\r\n    'Hidden Power Fire': { bp: 60 },\r\n    'Hidden Power Flying': { bp: 60 },\r\n    'Hidden Power Ghost': { bp: 60 },\r\n    'Hidden Power Grass': { bp: 60 },\r\n    'Hidden Power Ground': { bp: 60 },\r\n    'Hidden Power Ice': { bp: 60 },\r\n    'Hidden Power Poison': { bp: 60 },\r\n    'Hidden Power Psychic': { bp: 60 },\r\n    'Hidden Power Rock': { bp: 60 },\r\n    'Hidden Power Steel': { bp: 60 },\r\n    'Hidden Power Water': { bp: 60 },\r\n    'Magma Storm': { bp: 100 },\r\n    'Magnet Bomb': { isBullet: true },\r\n    'Mist Ball': { isBullet: true },\r\n    Moonlight: { type: 'Fairy' },\r\n    'Mud Bomb': { isBullet: true },\r\n    'Searing Shot': { isBullet: true },\r\n    'Smelling Salts': { bp: 70 },\r\n    Synchronoise: { bp: 120 },\r\n    'Techno Blast': { bp: 120 },\r\n    Thunder: { bp: 110 },\r\n    'Wake-Up Slap': { bp: 70 },\r\n    'Acid Spray': { isBullet: true },\r\n    'Air Cutter': { bp: 60 },\r\n    'Ancient Power': {},\r\n    Assurance: { bp: 60 },\r\n    'Aura Sphere': { bp: 80, isBullet: true, isPulse: true },\r\n    Blizzard: { bp: 110 },\r\n    'Bullet Seed': { isBullet: true },\r\n    Charm: { type: 'Fairy' },\r\n    'Cotton Spore': { target: 'allAdjacentFoes' },\r\n    Crabhammer: { bp: 100 },\r\n    'Dark Pulse': { isPulse: true },\r\n    'Draco Meteor': { bp: 130 },\r\n    'Dragon Pulse': { bp: 85, isPulse: true },\r\n    'Electro Ball': { isBullet: true },\r\n    'Energy Ball': { bp: 90, isBullet: true },\r\n    'Final Gambit': { makesContact: false },\r\n    'Fire Blast': { bp: 110 },\r\n    'Fire Pledge': { bp: 80 },\r\n    Flamethrower: { bp: 90 },\r\n    'Focus Blast': { isBullet: true },\r\n    'Frost Breath': { bp: 60 },\r\n    'Fury Cutter': { bp: 40 },\r\n    'Future Sight': { bp: 120 },\r\n    'Grass Pledge': { bp: 80 },\r\n    'Gyro Ball': { isBullet: true },\r\n    'Heal Pulse': { isPulse: true },\r\n    'Heat Wave': { bp: 95 },\r\n    Hex: { bp: 65 },\r\n    'Hydro Pump': { bp: 110 },\r\n    'Ice Beam': { bp: 90 },\r\n    Incinerate: { bp: 60 },\r\n    'Leaf Storm': { bp: 130 },\r\n    Lick: { bp: 40 },\r\n    'Low Sweep': { bp: 65 },\r\n    'Meteor Mash': { bp: 90 },\r\n    'Muddy Water': { bp: 90 },\r\n    Octazooka: { isBullet: true },\r\n    Overheat: { bp: 130 },\r\n    'Pin Missile': { bp: 25 },\r\n    'Power Gem': { bp: 80 },\r\n    'Rage Powder': { priority: 2 },\r\n    'Rock Tomb': { bp: 60 },\r\n    'Rock Wrecker': { isBullet: true },\r\n    'Seed Bomb': { isBullet: true },\r\n    'Shadow Ball': { isBullet: true },\r\n    'Skull Bash': { bp: 130 },\r\n    'Sludge Bomb': { isBullet: true },\r\n    Smog: { bp: 30 },\r\n    Snore: { bp: 50 },\r\n    'Storm Throw': { bp: 60 },\r\n    'Struggle Bug': { bp: 50 },\r\n    Surf: { bp: 90 },\r\n    'Sweet Kiss': { type: 'Fairy' },\r\n    Thunderbolt: { bp: 90 },\r\n    'Vine Whip': { bp: 45 },\r\n    'Water Pledge': { bp: 80 },\r\n    'Water Pulse': { isPulse: true },\r\n    'Weather Ball': { isBullet: true },\r\n    'Zap Cannon': { isBullet: true },\r\n    'Diamond Storm': {\r\n        bp: 100,\r\n        type: 'Rock',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Fell Stinger': {\r\n        bp: 30,\r\n        type: 'Bug',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Flying Press': {\r\n        bp: 80,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Hyperspace Fury': {\r\n        bp: 100,\r\n        type: 'Dark',\r\n        breaksProtect: true,\r\n        category: 'Physical'\r\n    },\r\n    'Hyperspace Hole': {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        breaksProtect: true,\r\n        category: 'Special'\r\n    },\r\n    'King\\'s Shield': { bp: 0, type: 'Steel', priority: 4 },\r\n    'Misty Terrain': { bp: 0, type: 'Fairy' },\r\n    'Mystical Fire': {\r\n        bp: 65,\r\n        type: 'Fire',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Parabolic Charge': {\r\n        bp: 50,\r\n        type: 'Electric',\r\n        drain: [1, 2],\r\n        target: 'allAdjacent',\r\n        category: 'Special'\r\n    },\r\n    'Parting Shot': { bp: 0, type: 'Dark', isSound: true },\r\n    'Phantom Force': {\r\n        bp: 90,\r\n        type: 'Ghost',\r\n        breaksProtect: true,\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    Powder: { bp: 0, type: 'Bug', priority: 1 },\r\n    'Spiky Shield': { bp: 0, type: 'Grass', priority: 4 },\r\n    'Thousand Arrows': { bp: 90, type: 'Ground', target: 'allAdjacentFoes', category: 'Physical' },\r\n    'Thousand Waves': { bp: 90, type: 'Ground', target: 'allAdjacentFoes', category: 'Physical' },\r\n    'Water Shuriken': {\r\n        bp: 15,\r\n        type: 'Water',\r\n        multihit: [2, 5],\r\n        priority: 1,\r\n        category: 'Physical'\r\n    },\r\n    'Dragon Ascent': {\r\n        bp: 120,\r\n        type: 'Flying',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Electric Terrain': { bp: 0, type: 'Electric' },\r\n    Geomancy: { bp: 0, type: 'Fairy' },\r\n    'Grassy Terrain': { bp: 0, type: 'Grass' },\r\n    'Ion Deluge': { bp: 0, type: 'Electric', priority: 1 },\r\n    'Land\\'s Wrath': { bp: 90, type: 'Ground', target: 'allAdjacentFoes', category: 'Physical' },\r\n    'Light of Ruin': { bp: 140, type: 'Fairy', recoil: [1, 2], category: 'Special' },\r\n    'Oblivion Wing': {\r\n        bp: 80,\r\n        type: 'Flying',\r\n        drain: [3, 4],\r\n        category: 'Special'\r\n    },\r\n    'Origin Pulse': {\r\n        bp: 110,\r\n        type: 'Water',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        isPulse: true\r\n    },\r\n    'Precipice Blades': {\r\n        bp: 120,\r\n        type: 'Ground',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Physical'\r\n    },\r\n    Rototiller: { bp: 0, type: 'Ground' },\r\n    'Steam Eruption': {\r\n        bp: 110,\r\n        type: 'Water',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Aromatic Mist': { bp: 0, type: 'Fairy' },\r\n    'Baby-Doll Eyes': { bp: 0, type: 'Fairy', priority: 1 },\r\n    Belch: { bp: 120, type: 'Poison', category: 'Special' },\r\n    Boomburst: {\r\n        bp: 140,\r\n        type: 'Normal',\r\n        isSound: true,\r\n        target: 'allAdjacent',\r\n        category: 'Special'\r\n    },\r\n    Celebrate: { bp: 0, type: 'Normal' },\r\n    Confide: { bp: 0, type: 'Normal', isSound: true },\r\n    'Crafty Shield': { bp: 0, type: 'Fairy', priority: 3 },\r\n    'Dazzling Gleam': { bp: 80, type: 'Fairy', target: 'allAdjacentFoes', category: 'Special' },\r\n    'Disarming Voice': {\r\n        bp: 40,\r\n        type: 'Fairy',\r\n        isSound: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special'\r\n    },\r\n    'Draining Kiss': {\r\n        bp: 50,\r\n        type: 'Fairy',\r\n        drain: [3, 4],\r\n        makesContact: true,\r\n        category: 'Special'\r\n    },\r\n    'Eerie Impulse': { bp: 0, type: 'Electric' },\r\n    Electrify: { bp: 0, type: 'Electric' },\r\n    'Fairy Lock': { bp: 0, type: 'Fairy' },\r\n    'Fairy Wind': { bp: 40, type: 'Fairy', category: 'Special' },\r\n    'Flower Shield': { bp: 0, type: 'Fairy' },\r\n    'Forest\\'s Curse': { bp: 0, type: 'Grass' },\r\n    'Freeze-Dry': {\r\n        bp: 70,\r\n        type: 'Ice',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Happy Hour': { bp: 0, type: 'Normal' },\r\n    'Hold Back': {\r\n        bp: 40,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical'\r\n    },\r\n    'Hold Hands': { bp: 0, type: 'Normal' },\r\n    Infestation: { bp: 20, type: 'Bug', makesContact: true, category: 'Special' },\r\n    'Magnetic Flux': { bp: 0, type: 'Electric' },\r\n    'Mat Block': { bp: 0, type: 'Fighting' },\r\n    Moonblast: {\r\n        bp: 95,\r\n        type: 'Fairy',\r\n        category: 'Special',\r\n        secondaries: true\r\n    },\r\n    'Noble Roar': { bp: 0, type: 'Normal', isSound: true },\r\n    Nuzzle: {\r\n        bp: 20,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Petal Blizzard': {\r\n        bp: 90,\r\n        type: 'Grass',\r\n        target: 'allAdjacent',\r\n        category: 'Physical'\r\n    },\r\n    'Play Nice': { bp: 0, type: 'Normal' },\r\n    'Play Rough': {\r\n        bp: 90,\r\n        type: 'Fairy',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Power-Up Punch': {\r\n        bp: 40,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical',\r\n        secondaries: true\r\n    },\r\n    'Sticky Web': { bp: 0, type: 'Bug' },\r\n    'Topsy-Turvy': { bp: 0, type: 'Dark' },\r\n    'Trick-or-Treat': { bp: 0, type: 'Ghost' },\r\n    'Venom Drench': { bp: 0, type: 'Poison', target: 'allAdjacentFoes' }\r\n};\r\nvar XY = (0, util_1.extend)(true, {}, BW, XY_PATCH);\r\nvar SM_PATCH = {\r\n    'Ally Switch': { priority: 2 },\r\n    Aeroblast: { zp: 180 },\r\n    Barrage: { zp: 100 },\r\n    Bide: { zp: 100 },\r\n    'Bone Club': { zp: 120 },\r\n    Bonemerang: { zp: 100 },\r\n    Bubble: { zp: 100 },\r\n    Chatter: { zp: 120 },\r\n    'Chip Away': { zp: 140 },\r\n    Clamp: { zp: 100 },\r\n    'Comet Punch': { zp: 100 },\r\n    Constrict: { zp: 100 },\r\n    'Crush Grip': { zp: 190 },\r\n    'Diamond Storm': { zp: 180 },\r\n    'Dizzy Punch': { zp: 140 },\r\n    'Double Slap': { zp: 100 },\r\n    'Dragon Ascent': { zp: 190 },\r\n    'Dragon Rage': { zp: 100 },\r\n    'Egg Bomb': { zp: 180 },\r\n    'Feint Attack': { zp: 120 },\r\n    'Fiery Dance': { zp: 160 },\r\n    'Flame Burst': { zp: 140 },\r\n    Frustration: { zp: 160 },\r\n    'Grass Knot': { zp: 160 },\r\n    'Head Charge': { zp: 190 },\r\n    'Heart Stamp': { zp: 120 },\r\n    'Heat Crash': { zp: 160 },\r\n    'Heavy Slam': { zp: 160 },\r\n    Hurricane: { zp: 185 },\r\n    'Hidden Power': { zp: 120 },\r\n    'Hidden Power Bug': { zp: 120 },\r\n    'Hidden Power Dark': { zp: 120 },\r\n    'Hidden Power Dragon': { zp: 120 },\r\n    'Hidden Power Electric': { zp: 120 },\r\n    'Hidden Power Fighting': { zp: 120 },\r\n    'Hidden Power Fire': { zp: 120 },\r\n    'Hidden Power Flying': { zp: 120 },\r\n    'Hidden Power Ghost': { zp: 120 },\r\n    'Hidden Power Grass': { zp: 120 },\r\n    'Hidden Power Ground': { zp: 120 },\r\n    'Hidden Power Ice': { zp: 120 },\r\n    'Hidden Power Poison': { zp: 120 },\r\n    'Hidden Power Psychic': { zp: 120 },\r\n    'Hidden Power Rock': { zp: 120 },\r\n    'Hidden Power Steel': { zp: 120 },\r\n    'Hidden Power Water': { zp: 120 },\r\n    'Hyper Fang': { zp: 160 },\r\n    'Hyperspace Fury': { zp: 180 },\r\n    'Hyperspace Hole': { zp: 160 },\r\n    'Ice Ball': { zp: 100 },\r\n    Judgment: { zp: 180 },\r\n    'Jump Kick': { zp: 180 },\r\n    'Karate Chop': { zp: 100 },\r\n    'Knock Off': { zp: 120 },\r\n    'Land\\'s Wrath': { zp: 185 },\r\n    'Light of Ruin': { zp: 200 },\r\n    'Low Kick': { zp: 160 },\r\n    'Luster Purge': { zp: 140 },\r\n    'Magma Storm': { zp: 180 },\r\n    'Magnet Bomb': { zp: 120 },\r\n    Magnitude: { zp: 140 },\r\n    'Mirror Shot': { zp: 120 },\r\n    'Mist Ball': { zp: 140 },\r\n    'Mud Bomb': { zp: 120 },\r\n    'Natural Gift': { zp: 160 },\r\n    'Needle Arm': { zp: 120 },\r\n    'Oblivion Wing': { zp: 160 },\r\n    'Ominous Wind': { zp: 120 },\r\n    'Origin Pulse': { zp: 185 },\r\n    'Precipice Blades': { zp: 190 },\r\n    'Psycho Boost': { zp: 200 },\r\n    Psywave: { zp: 100 },\r\n    Punishment: { zp: 160 },\r\n    Pursuit: { zp: 100 },\r\n    Rage: { zp: 100 },\r\n    'Rapid Spin': { zp: 100 },\r\n    'Razor Wind': { zp: 160 },\r\n    'Relic Song': { zp: 140 },\r\n    Return: { zp: 160 },\r\n    'Roar of Time': { zp: 200 },\r\n    'Rock Climb': { zp: 175 },\r\n    'Rolling Kick': { zp: 120 },\r\n    'Sacred Fire': { zp: 180 },\r\n    'Searing Shot': { zp: 180 },\r\n    'Secret Power': { zp: 140 },\r\n    'Seed Flare': { zp: 190 },\r\n    'Shadow Force': { zp: 190 },\r\n    'Signal Beam': { zp: 140 },\r\n    'Silver Wind': { zp: 120 },\r\n    'Sky Drop': { zp: 120 },\r\n    'Sky Uppercut': { zp: 160 },\r\n    'Smelling Salts': { zp: 140 },\r\n    'Solar Beam': { zp: 190 },\r\n    'Sonic Boom': { zp: 100 },\r\n    'Spacial Rend': { zp: 180 },\r\n    'Spike Cannon': { zp: 120 },\r\n    'Steam Eruption': { zp: 185 },\r\n    Steamroller: { zp: 120 },\r\n    Synchronoise: { zp: 190 },\r\n    'Techno Blast': { zp: 190 },\r\n    'Thousand Arrows': { zp: 180 },\r\n    'Thousand Waves': { zp: 175 },\r\n    'Trump Card': { zp: 160 },\r\n    Thunder: { zp: 185 },\r\n    Twineedle: { zp: 100 },\r\n    'Wake-Up Slap': { zp: 140 },\r\n    'Wring Out': { zp: 190 },\r\n    Absorb: { zp: 100 },\r\n    Acid: { zp: 100 },\r\n    'Acid Spray': { zp: 100 },\r\n    Acrobatics: { zp: 100 },\r\n    'Aerial Ace': { zp: 120 },\r\n    'Air Cutter': { zp: 120 },\r\n    'Air Slash': { zp: 140 },\r\n    'Ancient Power': { zp: 120 },\r\n    'Aqua Jet': { zp: 100 },\r\n    'Aqua Tail': { zp: 175 },\r\n    'Arm Thrust': { zp: 100 },\r\n    Assurance: { zp: 120 },\r\n    Astonish: { zp: 100 },\r\n    'Attack Order': { zp: 175 },\r\n    'Aura Sphere': { zp: 160 },\r\n    'Aurora Beam': { zp: 120 },\r\n    Avalanche: { zp: 120 },\r\n    'Beat Up': { zp: 100 },\r\n    Belch: { zp: 190 },\r\n    Bind: { zp: 100 },\r\n    Bite: { zp: 120 },\r\n    'Blast Burn': { zp: 200 },\r\n    'Blaze Kick': { zp: 160 },\r\n    Blizzard: { zp: 185 },\r\n    'Blue Flare': { zp: 195 },\r\n    'Body Slam': { zp: 160 },\r\n    'Bolt Strike': { zp: 195 },\r\n    'Bone Rush': { zp: 140 },\r\n    Boomburst: { zp: 200 },\r\n    Bounce: { zp: 160 },\r\n    'Brave Bird': { zp: 190 },\r\n    'Brick Break': { zp: 140 },\r\n    Brine: { zp: 120 },\r\n    'Bubble Beam': { zp: 120 },\r\n    'Bug Bite': { zp: 120 },\r\n    'Bug Buzz': { zp: 175 },\r\n    Bulldoze: { zp: 120 },\r\n    'Bullet Punch': { zp: 100 },\r\n    'Bullet Seed': { zp: 140 },\r\n    'Charge Beam': { zp: 100 },\r\n    'Circle Throw': { zp: 120 },\r\n    'Clear Smog': { zp: 100 },\r\n    'Close Combat': { zp: 190 },\r\n    Confusion: { zp: 100 },\r\n    Counter: { zp: 100 },\r\n    Covet: { zp: 120 },\r\n    Crabhammer: { zp: 180 },\r\n    'Cross Chop': { zp: 180 },\r\n    'Cross Poison': { zp: 140 },\r\n    Crunch: { zp: 160 },\r\n    'Crush Claw': { zp: 140 },\r\n    Cut: { zp: 100 },\r\n    'Dark Pulse': { zp: 160 },\r\n    'Dazzling Gleam': { zp: 160 },\r\n    Dig: { zp: 160 },\r\n    'Disarming Voice': { zp: 100 },\r\n    Discharge: { zp: 160 },\r\n    Dive: { zp: 160 },\r\n    'Doom Desire': { zp: 200 },\r\n    'Double-Edge': { zp: 190 },\r\n    'Double Hit': { zp: 140 },\r\n    'Double Kick': { zp: 100 },\r\n    'Draco Meteor': { zp: 195 },\r\n    'Dragon Breath': { zp: 120 },\r\n    'Dragon Claw': { zp: 160 },\r\n    'Dragon Pulse': { zp: 160 },\r\n    'Dragon Rush': { zp: 180 },\r\n    'Dragon Tail': { zp: 120 },\r\n    'Draining Kiss': { zp: 100 },\r\n    'Drain Punch': { zp: 140 },\r\n    'Dream Eater': { zp: 180 },\r\n    'Drill Peck': { zp: 160 },\r\n    'Drill Run': { zp: 160 },\r\n    'Dual Chop': { zp: 100 },\r\n    'Dynamic Punch': { zp: 180 },\r\n    'Earth Power': { zp: 175 },\r\n    Earthquake: { zp: 180 },\r\n    'Echoed Voice': { zp: 100 },\r\n    'Electro Ball': { zp: 160 },\r\n    Electroweb: { zp: 100 },\r\n    Ember: { zp: 100 },\r\n    Endeavor: { zp: 160 },\r\n    'Energy Ball': { zp: 175 },\r\n    Eruption: { zp: 200 },\r\n    Explosion: { zp: 200 },\r\n    Extrasensory: { zp: 160 },\r\n    'Extreme Speed': { zp: 160 },\r\n    Facade: { zp: 140 },\r\n    'Fairy Wind': { zp: 100 },\r\n    'Fake Out': { zp: 100 },\r\n    'False Swipe': { zp: 100 },\r\n    Feint: { zp: 100 },\r\n    'Fell Stinger': { bp: 50, zp: 100 },\r\n    'Final Gambit': { zp: 180 },\r\n    'Fire Blast': { zp: 185 },\r\n    'Fire Fang': { zp: 120 },\r\n    'Fire Pledge': { zp: 160 },\r\n    'Fire Punch': { zp: 140 },\r\n    'Fire Spin': { zp: 100 },\r\n    Fissure: { zp: 180 },\r\n    Flail: { zp: 160 },\r\n    'Flame Charge': { zp: 100 },\r\n    'Flame Wheel': { zp: 120 },\r\n    Flamethrower: { zp: 175 },\r\n    'Flare Blitz': { zp: 190 },\r\n    'Flash Cannon': { zp: 160 },\r\n    Fling: { zp: 100 },\r\n    Fly: { zp: 175 },\r\n    'Flying Press': { bp: 100, zp: 170 },\r\n    'Focus Blast': { zp: 190 },\r\n    'Focus Punch': { zp: 200 },\r\n    'Force Palm': { zp: 120 },\r\n    'Foul Play': { zp: 175 },\r\n    'Freeze-Dry': { zp: 140 },\r\n    'Freeze Shock': { zp: 200 },\r\n    'Frenzy Plant': { zp: 200 },\r\n    'Frost Breath': { zp: 120 },\r\n    'Fury Attack': { zp: 100 },\r\n    'Fury Cutter': { zp: 100 },\r\n    'Fury Swipes': { zp: 100 },\r\n    'Fusion Bolt': { zp: 180 },\r\n    'Fusion Flare': { zp: 180 },\r\n    'Future Sight': { zp: 190 },\r\n    'Gear Grind': { zp: 180 },\r\n    'Giga Drain': { zp: 140 },\r\n    'Giga Impact': { zp: 200 },\r\n    Glaciate: { zp: 120 },\r\n    'Grass Pledge': { zp: 160 },\r\n    Guillotine: { zp: 180 },\r\n    'Gunk Shot': { zp: 190 },\r\n    Gust: { zp: 100 },\r\n    'Gyro Ball': { zp: 160 },\r\n    'Hammer Arm': { zp: 180 },\r\n    Headbutt: { zp: 140 },\r\n    'Head Smash': { zp: 200 },\r\n    'Heat Wave': { zp: 175 },\r\n    Hex: { zp: 160 },\r\n    'High Jump Kick': { zp: 195 },\r\n    'Hold Back': { zp: 100 },\r\n    'Horn Attack': { zp: 120 },\r\n    'Horn Drill': { zp: 180 },\r\n    'Horn Leech': { zp: 140 },\r\n    'Hydro Cannon': { zp: 200 },\r\n    'Hydro Pump': { zp: 185 },\r\n    'Hyper Beam': { zp: 200 },\r\n    'Hyper Voice': { zp: 175 },\r\n    'Ice Beam': { zp: 175 },\r\n    'Ice Burn': { zp: 200 },\r\n    'Ice Fang': { zp: 120 },\r\n    'Ice Punch': { zp: 140 },\r\n    'Ice Shard': { zp: 100 },\r\n    'Icicle Crash': { zp: 160 },\r\n    'Icicle Spear': { zp: 140 },\r\n    'Icy Wind': { zp: 100 },\r\n    Incinerate: { zp: 120 },\r\n    Inferno: { zp: 180 },\r\n    Infestation: { zp: 100 },\r\n    'Iron Head': { zp: 160 },\r\n    'Iron Tail': { zp: 180 },\r\n    'Last Resort': { zp: 200 },\r\n    'Lava Plume': { zp: 160 },\r\n    'Leaf Blade': { zp: 175 },\r\n    'Leaf Storm': { zp: 195 },\r\n    'Leaf Tornado': { zp: 120 },\r\n    'Leech Life': { bp: 80, zp: 160 },\r\n    Lick: { zp: 100 },\r\n    'Low Sweep': { zp: 120 },\r\n    'Mach Punch': { zp: 100 },\r\n    'Magical Leaf': { zp: 120 },\r\n    'Mega Drain': { zp: 120 },\r\n    Megahorn: { zp: 190 },\r\n    'Mega Kick': { zp: 190 },\r\n    'Mega Punch': { zp: 160 },\r\n    'Metal Burst': { zp: 100 },\r\n    'Metal Claw': { zp: 100 },\r\n    'Meteor Mash': { zp: 175 },\r\n    'Mirror Coat': { zp: 100 },\r\n    Moonblast: { zp: 175 },\r\n    'Mud Shot': { zp: 100 },\r\n    'Mud-Slap': { zp: 100 },\r\n    'Muddy Water': { zp: 175 },\r\n    'Mystical Fire': { bp: 75, zp: 140 },\r\n    'Night Daze': { zp: 160 },\r\n    'Night Shade': { zp: 100 },\r\n    'Night Slash': { zp: 140 },\r\n    Nuzzle: { zp: 100 },\r\n    Octazooka: { zp: 120 },\r\n    Outrage: { zp: 190 },\r\n    Overheat: { zp: 195 },\r\n    'Paleo Wave': { zp: 160 },\r\n    'Parabolic Charge': { bp: 65, zp: 120 },\r\n    Payback: { zp: 100 },\r\n    'Pay Day': { zp: 100 },\r\n    Peck: { zp: 100 },\r\n    'Petal Blizzard': { zp: 175 },\r\n    'Petal Dance': { zp: 190 },\r\n    'Phantom Force': { zp: 175 },\r\n    'Pin Missile': { zp: 140 },\r\n    'Play Rough': { zp: 175 },\r\n    Pluck: { zp: 120 },\r\n    'Poison Fang': { zp: 100 },\r\n    'Poison Jab': { zp: 160 },\r\n    'Poison Sting': { zp: 100 },\r\n    'Poison Tail': { zp: 100 },\r\n    Pound: { zp: 100 },\r\n    'Powder Snow': { zp: 100 },\r\n    'Power Gem': { zp: 160 },\r\n    'Power-Up Punch': { zp: 100 },\r\n    'Power Whip': { zp: 190 },\r\n    Present: { zp: 100 },\r\n    Psybeam: { zp: 120 },\r\n    Psychic: { zp: 175 },\r\n    'Psycho Cut': { zp: 140 },\r\n    Psyshock: { zp: 160 },\r\n    Psystrike: { zp: 180 },\r\n    'Quick Attack': { zp: 100 },\r\n    'Razor Leaf': { zp: 100 },\r\n    'Razor Shell': { zp: 140 },\r\n    Retaliate: { zp: 140 },\r\n    Revenge: { zp: 120 },\r\n    Reversal: { zp: 160 },\r\n    'Rock Blast': { isBullet: true, zp: 140 },\r\n    'Rock Slide': { zp: 140 },\r\n    'Rock Smash': { zp: 100 },\r\n    'Rock Throw': { zp: 100 },\r\n    'Rock Tomb': { zp: 120 },\r\n    'Rock Wrecker': { zp: 200 },\r\n    Rollout: { zp: 100 },\r\n    Round: { zp: 120 },\r\n    'Sacred Sword': { zp: 175 },\r\n    'Sand Tomb': { zp: 100 },\r\n    Scald: { zp: 160 },\r\n    Scratch: { zp: 100 },\r\n    'Secret Sword': { zp: 160 },\r\n    'Seed Bomb': { zp: 160 },\r\n    'Seismic Toss': { zp: 100 },\r\n    'Self-Destruct': { zp: 200 },\r\n    'Shadow Ball': { zp: 160 },\r\n    'Shadow Claw': { zp: 140 },\r\n    'Shadow Punch': { zp: 120 },\r\n    'Shadow Sneak': { zp: 100 },\r\n    'Shadow Strike': { zp: 160 },\r\n    'Sheer Cold': { zp: 180 },\r\n    'Shock Wave': { zp: 120 },\r\n    'Skull Bash': { zp: 195 },\r\n    'Sky Attack': { zp: 200 },\r\n    Slam: { zp: 160 },\r\n    Slash: { zp: 140 },\r\n    Sludge: { zp: 120 },\r\n    'Sludge Bomb': { zp: 175 },\r\n    'Sludge Wave': { zp: 175 },\r\n    'Smack Down': { zp: 100 },\r\n    Smog: { zp: 100 },\r\n    Snarl: { zp: 100 },\r\n    Snore: { zp: 100 },\r\n    Spark: { zp: 120 },\r\n    'Spit Up': { zp: 100 },\r\n    'Steel Wing': { zp: 140 },\r\n    Stomp: { zp: 120 },\r\n    'Stone Edge': { zp: 180 },\r\n    'Stored Power': { zp: 160 },\r\n    'Storm Throw': { zp: 120 },\r\n    Strength: { zp: 160 },\r\n    'Struggle Bug': { zp: 100 },\r\n    Submission: { zp: 160 },\r\n    'Sucker Punch': { bp: 70, zp: 140 },\r\n    'Super Fang': { zp: 100 },\r\n    Superpower: { zp: 190 },\r\n    Surf: { zp: 175 },\r\n    Swift: { zp: 120 },\r\n    Tackle: { bp: 40, zp: 100 },\r\n    'Tail Slap': { zp: 140 },\r\n    'Take Down': { zp: 175 },\r\n    Thief: { zp: 120 },\r\n    Thrash: { zp: 190 },\r\n    Thunderbolt: { zp: 175 },\r\n    'Thunder Fang': { zp: 120 },\r\n    'Thunder Punch': { zp: 140 },\r\n    'Thunder Shock': { zp: 100 },\r\n    'Tri Attack': { zp: 160 },\r\n    'Triple Kick': { zp: 120 },\r\n    Twister: { zp: 100 },\r\n    'U-turn': { zp: 140 },\r\n    Uproar: { zp: 175 },\r\n    'Vacuum Wave': { zp: 100 },\r\n    'V-create': { zp: 220 },\r\n    Venoshock: { zp: 120 },\r\n    'Vine Whip': { zp: 100 },\r\n    'Vise Grip': { zp: 100 },\r\n    'Vital Throw': { zp: 140 },\r\n    'Volt Switch': { zp: 140 },\r\n    'Volt Tackle': { zp: 190 },\r\n    Waterfall: { zp: 160 },\r\n    'Water Gun': { zp: 100 },\r\n    'Water Pledge': { zp: 160 },\r\n    'Water Pulse': { zp: 120 },\r\n    'Water Shuriken': { category: 'Special', zp: 100 },\r\n    'Water Spout': { zp: 200 },\r\n    'Weather Ball': { zp: 160 },\r\n    Whirlpool: { zp: 100 },\r\n    'Wild Charge': { zp: 175 },\r\n    'Wing Attack': { zp: 120 },\r\n    'Wood Hammer': { zp: 190 },\r\n    Wrap: { zp: 100 },\r\n    'X-Scissor': { zp: 160 },\r\n    'Zap Cannon': { zp: 190 },\r\n    'Zen Headbutt': { zp: 160 },\r\n    '10,000,000 Volt Thunderbolt': { bp: 195, type: 'Electric', category: 'Special', isZ: true },\r\n    'Acid Downpour': { bp: 1, type: 'Poison', category: 'Physical', isZ: true },\r\n    'All-Out Pummeling': { bp: 1, type: 'Fighting', category: 'Physical', isZ: true },\r\n    'Baddy Bad': { bp: 90, type: 'Dark', category: 'Special', zp: 175 },\r\n    'Baneful Bunker': { bp: 0, type: 'Poison', priority: 4 },\r\n    'Beak Blast': {\r\n        bp: 100,\r\n        type: 'Flying',\r\n        category: 'Physical',\r\n        isBullet: true,\r\n        zp: 180\r\n    },\r\n    'Black Hole Eclipse': { bp: 1, type: 'Dark', category: 'Physical', isZ: true },\r\n    'Bloom Doom': { bp: 1, type: 'Grass', category: 'Physical', isZ: true },\r\n    'Bouncy Bubble': {\r\n        bp: 90,\r\n        type: 'Water',\r\n        drain: [1, 2],\r\n        category: 'Special',\r\n        zp: 175\r\n    },\r\n    'Breakneck Blitz': { bp: 1, type: 'Normal', category: 'Physical', isZ: true },\r\n    'Buzzy Buzz': {\r\n        bp: 90,\r\n        type: 'Electric',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 175\r\n    },\r\n    Catastropika: {\r\n        bp: 210,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        isZ: true\r\n    },\r\n    'Clangorous Soulblaze': {\r\n        bp: 185,\r\n        type: 'Dragon',\r\n        isSound: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        isZ: true\r\n    },\r\n    'Continental Crush': { bp: 1, type: 'Rock', category: 'Physical', isZ: true },\r\n    'Core Enforcer': {\r\n        bp: 100,\r\n        type: 'Dragon',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        zp: 140\r\n    },\r\n    'Corkscrew Crash': { bp: 1, type: 'Steel', category: 'Physical', isZ: true },\r\n    'Devastating Drake': { bp: 1, type: 'Dragon', category: 'Physical', isZ: true },\r\n    'Double Iron Bash': {\r\n        bp: 60,\r\n        type: 'Steel',\r\n        multihit: 2,\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 180\r\n    },\r\n    'Dragon Hammer': {\r\n        bp: 90,\r\n        type: 'Dragon',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 175\r\n    },\r\n    'Extreme Evoboost': { bp: 0, type: 'Normal', isZ: true },\r\n    'Fleur Cannon': {\r\n        bp: 130,\r\n        type: 'Fairy',\r\n        self: { boosts: { spa: -2 } },\r\n        category: 'Special',\r\n        zp: 195\r\n    },\r\n    'Floral Healing': { bp: 0, type: 'Fairy' },\r\n    'Freezy Frost': { bp: 90, type: 'Ice', category: 'Special', zp: 175 },\r\n    'Genesis Supernova': {\r\n        bp: 185,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        isZ: true\r\n    },\r\n    'Gigavolt Havoc': { bp: 1, type: 'Electric', category: 'Physical', isZ: true },\r\n    'Glitzy Glow': { bp: 90, type: 'Psychic', category: 'Special', zp: 175 },\r\n    'Guardian of Alola': { bp: 0, type: 'Fairy', category: 'Special', isZ: true },\r\n    'Hydro Vortex': { bp: 1, type: 'Water', category: 'Physical', isZ: true },\r\n    'Ice Hammer': {\r\n        bp: 100,\r\n        type: 'Ice',\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical',\r\n        zp: 180\r\n    },\r\n    'Inferno Overdrive': { bp: 1, type: 'Fire', category: 'Physical', isZ: true },\r\n    Instruct: { bp: 0, type: 'Psychic' },\r\n    'Let\\'s Snuggle Forever': {\r\n        bp: 190,\r\n        type: 'Fairy',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        isZ: true\r\n    },\r\n    'Light That Burns the Sky': {\r\n        bp: 200,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        isZ: true\r\n    },\r\n    'Malicious Moonsault': {\r\n        bp: 180,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        isZ: true\r\n    },\r\n    'Menacing Moonraze Maelstrom': { bp: 200, type: 'Ghost', category: 'Special', isZ: true },\r\n    'Mind Blown': {\r\n        bp: 150,\r\n        type: 'Fire',\r\n        mindBlownRecoil: true,\r\n        target: 'allAdjacent',\r\n        category: 'Special',\r\n        zp: 200\r\n    },\r\n    'Multi-Attack': {\r\n        bp: 90,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 185\r\n    },\r\n    'Nature\\'s Madness': { bp: 0, type: 'Fairy', category: 'Special', zp: 100 },\r\n    'Never-Ending Nightmare': { bp: 1, type: 'Ghost', category: 'Physical', isZ: true },\r\n    'Oceanic Operetta': { bp: 195, type: 'Water', category: 'Special', isZ: true },\r\n    'Psychic Terrain': { bp: 0, type: 'Psychic' },\r\n    'Pulverizing Pancake': {\r\n        bp: 210,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        isZ: true\r\n    },\r\n    'Revelation Dance': { bp: 90, type: 'Normal', category: 'Special', zp: 175 },\r\n    'Sappy Seed': { bp: 90, type: 'Grass', category: 'Physical', zp: 175 },\r\n    'Savage Spin-Out': { bp: 1, type: 'Bug', category: 'Physical', isZ: true },\r\n    'Searing Sunraze Smash': {\r\n        bp: 200,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        isZ: true\r\n    },\r\n    'Shadow Bone': {\r\n        bp: 85,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    'Shattered Psyche': { bp: 1, type: 'Psychic', category: 'Physical', isZ: true },\r\n    'Shore Up': { bp: 0, type: 'Ground' },\r\n    'Sinister Arrow Raid': { bp: 180, type: 'Ghost', category: 'Physical', isZ: true },\r\n    'Sizzly Slide': {\r\n        bp: 90,\r\n        type: 'Fire',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 175\r\n    },\r\n    'Solar Blade': {\r\n        bp: 125,\r\n        type: 'Grass',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 190\r\n    },\r\n    'Soul-Stealing 7-Star Strike': {\r\n        bp: 195,\r\n        type: 'Ghost',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        isZ: true\r\n    },\r\n    'Sparkly Swirl': { bp: 90, type: 'Fairy', category: 'Special', zp: 175 },\r\n    'Splintered Stormshards': { bp: 190, type: 'Rock', category: 'Physical', isZ: true },\r\n    Spotlight: { bp: 0, type: 'Normal', priority: 3 },\r\n    'Stoked Sparksurfer': {\r\n        bp: 175,\r\n        type: 'Electric',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        isZ: true\r\n    },\r\n    'Subzero Slammer': { bp: 1, type: 'Ice', category: 'Physical', isZ: true },\r\n    'Supersonic Skystrike': { bp: 1, type: 'Flying', category: 'Physical', isZ: true },\r\n    'Tectonic Rage': { bp: 1, type: 'Ground', category: 'Physical', isZ: true },\r\n    'Throat Chop': {\r\n        bp: 80,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    'Toxic Thread': { bp: 0, type: 'Poison' },\r\n    'Twinkle Tackle': { bp: 1, type: 'Fairy', category: 'Physical', isZ: true },\r\n    'Zippy Zap': {\r\n        bp: 50,\r\n        type: 'Electric',\r\n        willCrit: true,\r\n        priority: 2,\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 100\r\n    },\r\n    Accelerock: {\r\n        bp: 40,\r\n        type: 'Rock',\r\n        priority: 1,\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 100\r\n    },\r\n    'Anchor Shot': {\r\n        bp: 80,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    'Aurora Veil': { bp: 0, type: 'Ice' },\r\n    'Brutal Swing': {\r\n        bp: 60,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        target: 'allAdjacent',\r\n        category: 'Physical',\r\n        zp: 120\r\n    },\r\n    'Burn Up': { bp: 130, type: 'Fire', category: 'Special', zp: 195 },\r\n    'Clanging Scales': {\r\n        bp: 110,\r\n        type: 'Dragon',\r\n        isSound: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        zp: 185\r\n    },\r\n    'Darkest Lariat': {\r\n        bp: 85,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        ignoreDefensive: true,\r\n        zp: 160\r\n    },\r\n    'Fire Lash': {\r\n        bp: 80,\r\n        type: 'Fire',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    'First Impression': {\r\n        bp: 90,\r\n        type: 'Bug',\r\n        priority: 2,\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 175\r\n    },\r\n    'Floaty Fall': {\r\n        bp: 90,\r\n        type: 'Flying',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 175\r\n    },\r\n    'Gear Up': { bp: 0, type: 'Steel' },\r\n    'High Horsepower': {\r\n        bp: 95,\r\n        type: 'Ground',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 175\r\n    },\r\n    'Laser Focus': { bp: 0, type: 'Normal' },\r\n    Leafage: { bp: 40, type: 'Grass', category: 'Physical', zp: 100 },\r\n    Liquidation: {\r\n        bp: 85,\r\n        type: 'Water',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    Lunge: {\r\n        bp: 80,\r\n        type: 'Bug',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    'Moongeist Beam': { bp: 100, type: 'Ghost', category: 'Special', zp: 180 },\r\n    'Photon Geyser': {\r\n        bp: 100,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        zp: 180\r\n    },\r\n    'Pika Papow': { bp: 0, type: 'Electric', category: 'Special', zp: 100 },\r\n    'Plasma Fists': {\r\n        bp: 100,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        isPunch: true,\r\n        category: 'Physical',\r\n        zp: 180\r\n    },\r\n    'Pollen Puff': {\r\n        bp: 90,\r\n        type: 'Bug',\r\n        category: 'Special',\r\n        isBullet: true,\r\n        zp: 175\r\n    },\r\n    'Power Trip': {\r\n        bp: 20,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 160\r\n    },\r\n    'Prismatic Laser': { bp: 160, type: 'Psychic', category: 'Special', zp: 200 },\r\n    'Psychic Fangs': {\r\n        bp: 85,\r\n        type: 'Psychic',\r\n        makesContact: true,\r\n        isBite: true,\r\n        category: 'Physical',\r\n        zp: 160\r\n    },\r\n    Purify: { bp: 0, type: 'Poison' },\r\n    'Shell Trap': {\r\n        bp: 150,\r\n        type: 'Fire',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        zp: 200\r\n    },\r\n    'Smart Strike': {\r\n        bp: 70,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 140\r\n    },\r\n    'Sparkling Aria': {\r\n        bp: 90,\r\n        type: 'Water',\r\n        isSound: true,\r\n        target: 'allAdjacent',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 175\r\n    },\r\n    'Spectral Thief': {\r\n        bp: 90,\r\n        type: 'Ghost',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 175\r\n    },\r\n    'Speed Swap': { bp: 0, type: 'Psychic' },\r\n    'Spirit Shackle': {\r\n        bp: 80,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    },\r\n    'Splishy Splash': {\r\n        bp: 90,\r\n        type: 'Water',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 175\r\n    },\r\n    'Stomping Tantrum': {\r\n        bp: 75,\r\n        type: 'Ground',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 140\r\n    },\r\n    'Strength Sap': { bp: 0, type: 'Grass' },\r\n    'Sunsteel Strike': {\r\n        bp: 100,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 180\r\n    },\r\n    'Tearful Look': { bp: 0, type: 'Normal' },\r\n    'Trop Kick': {\r\n        bp: 70,\r\n        type: 'Grass',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 140\r\n    },\r\n    'Veevee Volley': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 100\r\n    },\r\n    'Zing Zap': {\r\n        bp: 80,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160\r\n    }\r\n};\r\nvar SM = (0, util_1.extend)(true, {}, XY, SM_PATCH);\r\nvar SS_PATCH = {\r\n    'Apple Acid': {\r\n        bp: 80,\r\n        type: 'Grass',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Astral Barrage': {\r\n        bp: 120,\r\n        type: 'Ghost',\r\n        category: 'Special',\r\n        target: 'allAdjacentFoes',\r\n        zp: 190,\r\n        maxPower: 140\r\n    },\r\n    'Aura Wheel': {\r\n        bp: 110,\r\n        type: 'Electric',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 185,\r\n        maxPower: 140\r\n    },\r\n    'Behemoth Bash': {\r\n        bp: 100,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 130\r\n    },\r\n    'Behemoth Blade': {\r\n        bp: 100,\r\n        type: 'Steel',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 130\r\n    },\r\n    'Body Press': {\r\n        bp: 80,\r\n        type: 'Fighting',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        overrideOffensiveStat: 'def',\r\n        zp: 160,\r\n        maxPower: 90\r\n    },\r\n    'Bolt Beak': {\r\n        bp: 85,\r\n        type: 'Electric',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Branch Poke': {\r\n        bp: 40,\r\n        type: 'Grass',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 90\r\n    },\r\n    'Breaking Swipe': {\r\n        bp: 60,\r\n        type: 'Dragon',\r\n        makesContact: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 120,\r\n        maxPower: 110\r\n    },\r\n    'Burning Jealousy': {\r\n        bp: 70,\r\n        type: 'Fire',\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 140,\r\n        maxPower: 120\r\n    },\r\n    'Clangorous Soul': { bp: 0, type: 'Dragon', isSound: true },\r\n    'Coaching': {\r\n        bp: 0,\r\n        type: 'Fighting',\r\n        category: 'Status'\r\n    },\r\n    'Corrosive Gas': {\r\n        bp: 0,\r\n        type: 'Poison',\r\n        category: 'Status',\r\n        target: 'allAdjacent'\r\n    },\r\n    'Court Change': { bp: 0, type: 'Normal' },\r\n    Decorate: { bp: 0, type: 'Fairy' },\r\n    'Dragon Darts': {\r\n        bp: 50,\r\n        type: 'Dragon',\r\n        multihit: 2,\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 130\r\n    },\r\n    'Dragon Energy': {\r\n        bp: 150,\r\n        type: 'Dragon',\r\n        category: 'Special',\r\n        target: 'allAdjacentFoes',\r\n        zp: 200,\r\n        maxPower: 150\r\n    },\r\n    'Drum Beating': {\r\n        bp: 80,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Dual Wingbeat': {\r\n        bp: 40,\r\n        type: 'Flying',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        multihit: 2,\r\n        zp: 100,\r\n        maxPower: 130\r\n    },\r\n    'Dynamax Cannon': {\r\n        bp: 100,\r\n        type: 'Dragon',\r\n        category: 'Special',\r\n        zp: 180,\r\n        maxPower: 130\r\n    },\r\n    'Eerie Spell': {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        isSound: true,\r\n        secondaries: true,\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    Eternabeam: {\r\n        bp: 160,\r\n        type: 'Dragon',\r\n        category: 'Special',\r\n        zp: 200,\r\n        maxPower: 150\r\n    },\r\n    'Expanding Force': {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'False Surrender': {\r\n        bp: 80,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Fiery Wrath': {\r\n        bp: 90,\r\n        type: 'Dark',\r\n        category: 'Special',\r\n        target: 'allAdjacentFoes',\r\n        secondaries: true,\r\n        zp: 175,\r\n        maxPower: 130\r\n    },\r\n    'Fishious Rend': {\r\n        bp: 85,\r\n        type: 'Water',\r\n        makesContact: true,\r\n        isBite: true,\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Flip Turn': {\r\n        bp: 60,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        zp: 120,\r\n        maxPower: 110\r\n    },\r\n    'Freezing Glare': {\r\n        bp: 90,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 175,\r\n        maxPower: 130\r\n    },\r\n    'Glacial Lance': {\r\n        bp: 130,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        target: 'allAdjacentFoes',\r\n        zp: 195,\r\n        maxPower: 140\r\n    },\r\n    'G-Max Befuddle': {\r\n        bp: 10,\r\n        type: 'Bug',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Centiferno': {\r\n        bp: 10,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Cannonade': {\r\n        bp: 10,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Chi Strike': {\r\n        bp: 10,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Cuddle': {\r\n        bp: 10,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Depletion': {\r\n        bp: 10,\r\n        type: 'Dragon',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Drum Solo': {\r\n        bp: 160,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Fireball': {\r\n        bp: 160,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Finale': {\r\n        bp: 10,\r\n        type: 'Fairy',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Foam Burst': {\r\n        bp: 10,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Gold Rush': {\r\n        bp: 10,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Gravitas': {\r\n        bp: 10,\r\n        type: 'Psychic',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Hydrosnipe': {\r\n        bp: 160,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Malodor': {\r\n        bp: 10,\r\n        type: 'Poison',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Meltdown': {\r\n        bp: 10,\r\n        type: 'Steel',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max One Blow': {\r\n        bp: 10,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Rapid Flow': {\r\n        bp: 10,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Replenish': {\r\n        bp: 10,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Resonance': {\r\n        bp: 10,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Sandblast': {\r\n        bp: 10,\r\n        type: 'Ground',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Smite': {\r\n        bp: 10,\r\n        type: 'Fairy',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Snooze': {\r\n        bp: 10,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Steelsurge': {\r\n        bp: 10,\r\n        type: 'Steel',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Stonesurge': {\r\n        bp: 10,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Stun Shock': {\r\n        bp: 10,\r\n        type: 'Electric',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Sweetness': {\r\n        bp: 10,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Tartness': {\r\n        bp: 10,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Terror': {\r\n        bp: 10,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Vine Lash': {\r\n        bp: 10,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Volcalith': {\r\n        bp: 10,\r\n        type: 'Rock',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Volt Crash': {\r\n        bp: 10,\r\n        type: 'Electric',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Wildfire': {\r\n        bp: 10,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'G-Max Wind Rage': {\r\n        bp: 10,\r\n        type: 'Flying',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Grassy Glide': {\r\n        bp: 70,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        zp: 140,\r\n        maxPower: 120\r\n    },\r\n    'Grav Apple': {\r\n        bp: 80,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Jaw Lock': {\r\n        bp: 80,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        isBite: true,\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Jungle Healing': {\r\n        bp: 0,\r\n        type: 'Grass',\r\n        category: 'Status'\r\n    },\r\n    'Lash Out': {\r\n        bp: 75,\r\n        type: 'Dark',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 140,\r\n        maxPower: 130\r\n    },\r\n    'Life Dew': { bp: 0, type: 'Water' },\r\n    'Magic Powder': { bp: 0, type: 'Psychic' },\r\n    'Max Airstream': {\r\n        bp: 10,\r\n        type: 'Flying',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Darkness': {\r\n        bp: 10,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Flare': {\r\n        bp: 100,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Flutterby': {\r\n        bp: 10,\r\n        type: 'Bug',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Geyser': {\r\n        bp: 10,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Guard': { bp: 0, type: 'Normal', priority: 4, isMax: true },\r\n    'Max Hailstorm': {\r\n        bp: 10,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Knuckle': {\r\n        bp: 10,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Lightning': {\r\n        bp: 10,\r\n        type: 'Electric',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Mindstorm': {\r\n        bp: 10,\r\n        type: 'Psychic',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Ooze': {\r\n        bp: 10,\r\n        type: 'Poison',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Overgrowth': {\r\n        bp: 10,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Phantasm': {\r\n        bp: 10,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Quake': {\r\n        bp: 10,\r\n        type: 'Ground',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Rockfall': {\r\n        bp: 10,\r\n        type: 'Rock',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Starfall': {\r\n        bp: 10,\r\n        type: 'Fairy',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Steelspike': {\r\n        bp: 10,\r\n        type: 'Steel',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Strike': {\r\n        bp: 10,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Max Wyrmwind': {\r\n        bp: 10,\r\n        type: 'Dragon',\r\n        category: 'Physical',\r\n        isMax: true,\r\n        maxPower: 1\r\n    },\r\n    'Meteor Assault': {\r\n        bp: 150,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        zp: 200,\r\n        maxPower: 100\r\n    },\r\n    'Meteor Beam': {\r\n        bp: 120,\r\n        type: 'Rock',\r\n        category: 'Special',\r\n        zp: 190,\r\n        maxPower: 140\r\n    },\r\n    'Misty Explosion': {\r\n        bp: 100,\r\n        type: 'Fairy',\r\n        category: 'Special',\r\n        target: 'allAdjacent',\r\n        zp: 180,\r\n        maxPower: 130\r\n    },\r\n    'No Retreat': { bp: 0, type: 'Fighting' },\r\n    Obstruct: { bp: 0, type: 'Dark', priority: 4 },\r\n    Octolock: { bp: 0, type: 'Fighting' },\r\n    Overdrive: {\r\n        bp: 80,\r\n        type: 'Electric',\r\n        isSound: true,\r\n        target: 'allAdjacentFoes',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    Poltergeist: {\r\n        bp: 110,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        zp: 185,\r\n        maxPower: 140\r\n    },\r\n    'Pyro Ball': {\r\n        bp: 120,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        isBullet: true,\r\n        zp: 190,\r\n        maxPower: 140\r\n    },\r\n    'Rising Voltage': {\r\n        bp: 70,\r\n        type: 'Electric',\r\n        category: 'Special',\r\n        zp: 140,\r\n        maxPower: 140\r\n    },\r\n    'Scale Shot': {\r\n        bp: 25,\r\n        type: 'Dragon',\r\n        category: 'Physical',\r\n        multihit: [2, 5],\r\n        zp: 140,\r\n        maxPower: 130\r\n    },\r\n    'Shell Side Arm': {\r\n        bp: 90,\r\n        type: 'Poison',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 175,\r\n        maxPower: 90\r\n    },\r\n    'Snap Trap': {\r\n        bp: 35,\r\n        type: 'Grass',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 90\r\n    },\r\n    'Snipe Shot': {\r\n        bp: 80,\r\n        type: 'Water',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Scorching Sands': {\r\n        bp: 70,\r\n        type: 'Ground',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 140,\r\n        maxPower: 120\r\n    },\r\n    'Skitter Smack': {\r\n        bp: 70,\r\n        type: 'Bug',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        secondaries: true,\r\n        zp: 140,\r\n        maxPower: 120\r\n    },\r\n    'Spirit Break': {\r\n        bp: 75,\r\n        type: 'Fairy',\r\n        makesContact: true,\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        zp: 140,\r\n        maxPower: 130\r\n    },\r\n    'Steel Beam': {\r\n        bp: 140,\r\n        type: 'Steel',\r\n        mindBlownRecoil: true,\r\n        category: 'Special',\r\n        zp: 200,\r\n        maxPower: 140\r\n    },\r\n    'Steel Roller': {\r\n        bp: 130,\r\n        type: 'Steel',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        zp: 195,\r\n        maxPower: 140\r\n    },\r\n    'Strange Steam': {\r\n        bp: 90,\r\n        type: 'Fairy',\r\n        category: 'Special',\r\n        secondaries: true,\r\n        zp: 175,\r\n        maxPower: 130\r\n    },\r\n    'Surging Strikes': {\r\n        bp: 25,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        willCrit: true,\r\n        isPunch: true,\r\n        multihit: 3,\r\n        zp: 140,\r\n        maxPower: 130\r\n    },\r\n    'Terrain Pulse': {\r\n        bp: 50,\r\n        type: 'Normal',\r\n        category: 'Special',\r\n        isPulse: true,\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Triple Axel': {\r\n        bp: 20,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        multihit: 3,\r\n        zp: 120,\r\n        maxPower: 140\r\n    },\r\n    'Wicked Blow': {\r\n        bp: 80,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        makesContact: true,\r\n        willCrit: true,\r\n        isPunch: true,\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Stuff Cheeks': { bp: 0, type: 'Normal' },\r\n    'Tar Shot': { bp: 0, type: 'Rock' },\r\n    Teatime: { bp: 0, type: 'Normal' },\r\n    'Thunder Cage': {\r\n        bp: 80,\r\n        type: 'Electric',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Thunderous Kick': {\r\n        bp: 90,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        secondaries: true,\r\n        makesContact: true,\r\n        zp: 175,\r\n        maxPower: 90\r\n    },\r\n    '10,000,000 Volt Thunderbolt': { maxPower: 1 },\r\n    Absorb: { maxPower: 90 },\r\n    Accelerock: { maxPower: 90 },\r\n    Acid: { maxPower: 70 },\r\n    'Acid Downpour': { maxPower: 1 },\r\n    'Acid Spray': { maxPower: 70 },\r\n    Acrobatics: { maxPower: 110 },\r\n    'Aerial Ace': { maxPower: 110 },\r\n    Aeroblast: { maxPower: 130 },\r\n    'Air Cutter': { maxPower: 110 },\r\n    'Air Slash': { maxPower: 130 },\r\n    'All-Out Pummeling': { maxPower: 1 },\r\n    'Anchor Shot': { maxPower: 130 },\r\n    'Ancient Power': { maxPower: 110 },\r\n    'Aqua Jet': { maxPower: 90 },\r\n    'Aqua Tail': { maxPower: 130 },\r\n    'Arm Thrust': { maxPower: 70 },\r\n    Assurance: { maxPower: 110 },\r\n    Astonish: { maxPower: 90 },\r\n    'Attack Order': { maxPower: 130 },\r\n    'Aura Sphere': { maxPower: 90 },\r\n    'Aurora Beam': { maxPower: 120 },\r\n    Avalanche: { maxPower: 110 },\r\n    Barrage: { maxPower: 90 },\r\n    'Beak Blast': { maxPower: 130 },\r\n    'Beat Up': { maxPower: 100 },\r\n    Belch: { maxPower: 95 },\r\n    Bide: { maxPower: 100 },\r\n    Bind: { maxPower: 90 },\r\n    Bite: { maxPower: 110 },\r\n    'Black Hole Eclipse': { maxPower: 1 },\r\n    'Blast Burn': { maxPower: 150 },\r\n    'Blaze Kick': { maxPower: 130 },\r\n    Blizzard: { maxPower: 140 },\r\n    'Bloom Doom': { maxPower: 1 },\r\n    'Blue Flare': { maxPower: 140 },\r\n    'Body Slam': { maxPower: 130 },\r\n    'Bolt Strike': { maxPower: 140 },\r\n    'Bone Club': { maxPower: 120 },\r\n    Bonemerang: { maxPower: 130 },\r\n    'Bone Rush': { maxPower: 130 },\r\n    Boomburst: { maxPower: 140 },\r\n    Bounce: { maxPower: 130 },\r\n    'Brave Bird': { maxPower: 140 },\r\n    'Breakneck Blitz': { maxPower: 1 },\r\n    'Brick Break': { maxPower: 90 },\r\n    Brine: { maxPower: 120 },\r\n    'Brutal Swing': { maxPower: 110 },\r\n    Bubble: { maxPower: 90 },\r\n    'Bubble Beam': { maxPower: 120 },\r\n    'Bug Bite': { maxPower: 110 },\r\n    'Bug Buzz': { maxPower: 130 },\r\n    Bulldoze: { maxPower: 110 },\r\n    'Bullet Punch': { maxPower: 90 },\r\n    'Bullet Seed': { maxPower: 130 },\r\n    'Burn Up': { maxPower: 140 },\r\n    Catastropika: { maxPower: 1 },\r\n    'Charge Beam': { maxPower: 100 },\r\n    Chatter: { maxPower: 120 },\r\n    'Chip Away': { maxPower: 120 },\r\n    'Circle Throw': { maxPower: 80 },\r\n    Clamp: { maxPower: 90 },\r\n    'Clanging Scales': { maxPower: 140 },\r\n    'Clangorous Soulblaze': { maxPower: 1 },\r\n    'Clear Smog': { maxPower: 75 },\r\n    'Close Combat': { maxPower: 95 },\r\n    'Comet Punch': { maxPower: 100 },\r\n    Confusion: { maxPower: 100 },\r\n    Constrict: { maxPower: 90 },\r\n    'Continental Crush': { maxPower: 1 },\r\n    'Core Enforcer': { maxPower: 130 },\r\n    'Corkscrew Crash': { maxPower: 1 },\r\n    Counter: { maxPower: 75 },\r\n    Covet: { maxPower: 110 },\r\n    Crabhammer: { maxPower: 130 },\r\n    'Cross Chop': { maxPower: 90 },\r\n    'Cross Poison': { maxPower: 85 },\r\n    Crunch: { maxPower: 130 },\r\n    'Crush Claw': { maxPower: 130 },\r\n    'Crush Grip': { maxPower: 140 },\r\n    Cut: { maxPower: 100 },\r\n    'Darkest Lariat': { maxPower: 130 },\r\n    'Dark Pulse': { maxPower: 130 },\r\n    'Dazzling Gleam': { maxPower: 130 },\r\n    'Devastating Drake': { maxPower: 1 },\r\n    'Diamond Storm': { maxPower: 130 },\r\n    Dig: { maxPower: 130 },\r\n    'Disarming Voice': { maxPower: 90 },\r\n    Discharge: { maxPower: 130 },\r\n    Dive: { maxPower: 130 },\r\n    'Dizzy Punch': { maxPower: 120 },\r\n    'Doom Desire': { maxPower: 140 },\r\n    'Double-Edge': { maxPower: 140 },\r\n    'Double Hit': { maxPower: 120 },\r\n    'Double Iron Bash': { maxPower: 140 },\r\n    'Double Kick': { maxPower: 80 },\r\n    'Double Slap': { maxPower: 90 },\r\n    'Draco Meteor': { maxPower: 140 },\r\n    'Dragon Ascent': { maxPower: 140 },\r\n    'Dragon Breath': { maxPower: 110 },\r\n    'Dragon Claw': { maxPower: 130 },\r\n    'Dragon Hammer': { maxPower: 130 },\r\n    'Dragon Pulse': { maxPower: 130 },\r\n    'Dragon Rage': { maxPower: 100 },\r\n    'Dragon Rush': { maxPower: 130 },\r\n    'Dragon Tail': { maxPower: 110 },\r\n    'Draining Kiss': { maxPower: 100 },\r\n    'Drain Punch': { maxPower: 90 },\r\n    'Dream Eater': { maxPower: 130 },\r\n    'Drill Peck': { maxPower: 130 },\r\n    'Drill Run': { maxPower: 130 },\r\n    'Dual Chop': { maxPower: 130 },\r\n    'Dynamic Punch': { maxPower: 90 },\r\n    'Earth Power': { maxPower: 130 },\r\n    Earthquake: { maxPower: 130 },\r\n    'Echoed Voice': { maxPower: 90 },\r\n    'Egg Bomb': { maxPower: 130 },\r\n    'Electro Ball': { maxPower: 130 },\r\n    Electroweb: { maxPower: 110 },\r\n    Ember: { maxPower: 90 },\r\n    Endeavor: { maxPower: 130 },\r\n    'Energy Ball': { maxPower: 130 },\r\n    Eruption: { maxPower: 150 },\r\n    Explosion: { maxPower: 150 },\r\n    Extrasensory: { maxPower: 130 },\r\n    'Extreme Speed': { maxPower: 130 },\r\n    Facade: { maxPower: 120 },\r\n    'Fairy Wind': { maxPower: 90 },\r\n    'Fake Out': { maxPower: 90 },\r\n    'False Swipe': { maxPower: 90 },\r\n    Feint: { maxPower: 90 },\r\n    'Feint Attack': { maxPower: 110 },\r\n    'Fell Stinger': { maxPower: 100 },\r\n    'Fiery Dance': { maxPower: 130 },\r\n    'Final Gambit': { maxPower: 100 },\r\n    'Fire Blast': { maxPower: 140 },\r\n    'Fire Fang': { maxPower: 120 },\r\n    'Fire Lash': { maxPower: 130 },\r\n    'Fire Pledge': { maxPower: 130 },\r\n    'Fire Punch': { maxPower: 130 },\r\n    'Fire Spin': { maxPower: 90 },\r\n    'First Impression': { maxPower: 130 },\r\n    Fissure: { maxPower: 130 },\r\n    Flail: { maxPower: 130 },\r\n    'Flame Burst': { maxPower: 120 },\r\n    'Flame Charge': { maxPower: 100 },\r\n    'Flame Wheel': { maxPower: 110 },\r\n    Flamethrower: { maxPower: 130 },\r\n    'Flare Blitz': { maxPower: 140 },\r\n    'Flash Cannon': { maxPower: 130 },\r\n    'Fleur Cannon': { maxPower: 140 },\r\n    Fling: { maxPower: 100 },\r\n    Fly: { maxPower: 130 },\r\n    'Flying Press': { maxPower: 90 },\r\n    'Focus Blast': { maxPower: 95 },\r\n    'Focus Punch': { maxPower: 100 },\r\n    'Force Palm': { maxPower: 80 },\r\n    'Foul Play': { maxPower: 130 },\r\n    'Freeze-Dry': { maxPower: 120 },\r\n    'Freeze Shock': { maxPower: 140 },\r\n    'Frenzy Plant': { maxPower: 150 },\r\n    'Frost Breath': { maxPower: 110 },\r\n    Frustration: { maxPower: 130 },\r\n    'Fury Attack': { maxPower: 90 },\r\n    'Fury Cutter': { maxPower: 90 },\r\n    'Fury Swipes': { maxPower: 100 },\r\n    'Fusion Bolt': { maxPower: 130 },\r\n    'Fusion Flare': { maxPower: 130 },\r\n    'Future Sight': { maxPower: 140 },\r\n    'Gear Grind': { maxPower: 130 },\r\n    'Genesis Supernova': { maxPower: 1 },\r\n    'Giga Drain': { maxPower: 130 },\r\n    'Giga Impact': { maxPower: 150 },\r\n    'Gigavolt Havoc': { maxPower: 1 },\r\n    Glaciate: { maxPower: 120 },\r\n    'Grass Knot': { maxPower: 130 },\r\n    'Grass Pledge': { maxPower: 130 },\r\n    'Guardian of Alola': { maxPower: 1 },\r\n    Guillotine: { maxPower: 130 },\r\n    'Gunk Shot': { maxPower: 95 },\r\n    Gust: { maxPower: 90 },\r\n    'Gyro Ball': { maxPower: 130 },\r\n    'Hammer Arm': { maxPower: 90 },\r\n    Headbutt: { maxPower: 120 },\r\n    'Head Charge': { maxPower: 140 },\r\n    'Head Smash': { maxPower: 150 },\r\n    'Heart Stamp': { maxPower: 110 },\r\n    'Heat Crash': { maxPower: 130 },\r\n    'Heat Wave': { maxPower: 130 },\r\n    'Heavy Slam': { maxPower: 130 },\r\n    Hex: { maxPower: 120 },\r\n    'Hidden Power': { maxPower: 110 },\r\n    'Hidden Power Bug': { maxPower: 110 },\r\n    'Hidden Power Dark': { maxPower: 110 },\r\n    'Hidden Power Dragon': { maxPower: 110 },\r\n    'Hidden Power Electric': { maxPower: 110 },\r\n    'Hidden Power Fighting': { maxPower: 80 },\r\n    'Hidden Power Fire': { maxPower: 110 },\r\n    'Hidden Power Flying': { maxPower: 110 },\r\n    'Hidden Power Ghost': { maxPower: 110 },\r\n    'Hidden Power Grass': { maxPower: 110 },\r\n    'Hidden Power Ground': { maxPower: 110 },\r\n    'Hidden Power Ice': { maxPower: 110 },\r\n    'Hidden Power Poison': { maxPower: 80 },\r\n    'Hidden Power Psychic': { maxPower: 110 },\r\n    'Hidden Power Rock': { maxPower: 110 },\r\n    'Hidden Power Steel': { maxPower: 110 },\r\n    'Hidden Power Water': { maxPower: 110 },\r\n    'High Horsepower': { maxPower: 130 },\r\n    'High Jump Kick': { maxPower: 95 },\r\n    'Hold Back': { maxPower: 90 },\r\n    'Horn Attack': { maxPower: 120 },\r\n    'Horn Drill': { maxPower: 130 },\r\n    'Horn Leech': { maxPower: 130 },\r\n    Howl: { isSound: true },\r\n    Hurricane: { maxPower: 140 },\r\n    'Hydro Cannon': { maxPower: 150 },\r\n    'Hydro Pump': { maxPower: 140 },\r\n    'Hydro Vortex': { maxPower: 1 },\r\n    'Hyper Beam': { maxPower: 150 },\r\n    'Hyper Fang': { maxPower: 130 },\r\n    'Hyperspace Fury': { maxPower: 130 },\r\n    'Hyperspace Hole': { maxPower: 130 },\r\n    'Hyper Voice': { maxPower: 130 },\r\n    'Ice Ball': { maxPower: 90 },\r\n    'Ice Beam': { maxPower: 130 },\r\n    'Ice Burn': { maxPower: 140 },\r\n    'Ice Fang': { maxPower: 120 },\r\n    'Ice Hammer': { maxPower: 130 },\r\n    'Ice Punch': { maxPower: 130 },\r\n    'Ice Shard': { maxPower: 90 },\r\n    'Icicle Crash': { maxPower: 130 },\r\n    'Icicle Spear': { maxPower: 130 },\r\n    'Icy Wind': { maxPower: 110 },\r\n    Incinerate: { maxPower: 110 },\r\n    Inferno: { maxPower: 130 },\r\n    'Inferno Overdrive': { maxPower: 1 },\r\n    Infestation: { maxPower: 90 },\r\n    'Iron Head': { maxPower: 130 },\r\n    'Iron Tail': { maxPower: 130 },\r\n    Judgment: { maxPower: 130 },\r\n    'Jump Kick': { maxPower: 90 },\r\n    'Karate Chop': { maxPower: 75 },\r\n    'Knock Off': { maxPower: 120 },\r\n    'Land\\'s Wrath': { maxPower: 130 },\r\n    'Last Resort': { maxPower: 140 },\r\n    'Lava Plume': { maxPower: 130 },\r\n    Leafage: { maxPower: 90 },\r\n    'Leaf Blade': { maxPower: 130 },\r\n    'Leaf Storm': { maxPower: 140 },\r\n    'Leaf Tornado': { maxPower: 120 },\r\n    'Leech Life': { maxPower: 130 },\r\n    'Let\\'s Snuggle Forever': { maxPower: 1 },\r\n    Lick: { maxPower: 90 },\r\n    'Light of Ruin': { maxPower: 140 },\r\n    'Light That Burns the Sky': { maxPower: 1 },\r\n    Liquidation: { maxPower: 130 },\r\n    'Low Kick': { maxPower: 100 },\r\n    'Low Sweep': { maxPower: 85 },\r\n    Lunge: { maxPower: 130 },\r\n    'Luster Purge': { maxPower: 120 },\r\n    'Mach Punch': { maxPower: 70 },\r\n    'Magical Leaf': { maxPower: 110 },\r\n    'Magma Storm': { maxPower: 130 },\r\n    'Magnet Bomb': { maxPower: 110 },\r\n    Magnitude: { maxPower: 140 },\r\n    'Malicious Moonsault': { maxPower: 1 },\r\n    'Mega Drain': { maxPower: 90 },\r\n    Megahorn: { maxPower: 140 },\r\n    'Mega Kick': { maxPower: 140 },\r\n    'Mega Punch': { maxPower: 130 },\r\n    'Menacing Moonraze Maelstrom': { maxPower: 1 },\r\n    'Metal Burst': { maxPower: 100 },\r\n    'Metal Claw': { maxPower: 100 },\r\n    'Meteor Mash': { maxPower: 130 },\r\n    'Mind Blown': { maxPower: 150 },\r\n    'Mirror Coat': { maxPower: 100 },\r\n    'Mirror Shot': { maxPower: 120 },\r\n    'Mist Ball': { maxPower: 120 },\r\n    Moonblast: { maxPower: 130 },\r\n    'Moongeist Beam': { maxPower: 130 },\r\n    'Mud Bomb': { maxPower: 120 },\r\n    'Mud Shot': { maxPower: 110 },\r\n    'Mud-Slap': { maxPower: 90 },\r\n    'Muddy Water': { maxPower: 130 },\r\n    'Multi-Attack': { bp: 120, maxPower: 95 },\r\n    'Mystical Fire': { maxPower: 130 },\r\n    'Natural Gift': { maxPower: 130 },\r\n    'Nature\\'s Madness': { maxPower: 100 },\r\n    'Needle Arm': { maxPower: 110 },\r\n    'Never-Ending Nightmare': { maxPower: 1 },\r\n    'Night Daze': { maxPower: 130 },\r\n    'Night Shade': { maxPower: 100 },\r\n    'Night Slash': { maxPower: 120 },\r\n    Nuzzle: { maxPower: 90 },\r\n    'Oblivion Wing': { maxPower: 130 },\r\n    'Oceanic Operetta': { maxPower: 1 },\r\n    Octazooka: { maxPower: 120 },\r\n    'Ominous Wind': { maxPower: 110 },\r\n    'Origin Pulse': { maxPower: 140 },\r\n    Outrage: { maxPower: 140 },\r\n    Overheat: { maxPower: 140 },\r\n    'Paleo Wave': { maxPower: 130 },\r\n    'Parabolic Charge': { maxPower: 120 },\r\n    Payback: { maxPower: 100 },\r\n    'Pay Day': { maxPower: 90 },\r\n    Peck: { maxPower: 90 },\r\n    'Petal Blizzard': { maxPower: 130 },\r\n    'Petal Dance': { maxPower: 140 },\r\n    'Phantom Force': { maxPower: 130 },\r\n    'Photon Geyser': { maxPower: 130 },\r\n    'Pin Missile': { maxPower: 130 },\r\n    'Plasma Fists': { maxPower: 130 },\r\n    'Play Rough': { maxPower: 130 },\r\n    Pluck: { maxPower: 110 },\r\n    'Poison Fang': { maxPower: 75 },\r\n    'Poison Jab': { maxPower: 90 },\r\n    'Poison Sting': { maxPower: 70 },\r\n    'Poison Tail': { maxPower: 75 },\r\n    'Pollen Puff': { maxPower: 130 },\r\n    Pound: { maxPower: 90 },\r\n    'Powder Snow': { maxPower: 90 },\r\n    'Power Gem': { maxPower: 130 },\r\n    'Power Trip': { maxPower: 130 },\r\n    'Power-Up Punch': { maxPower: 70 },\r\n    'Power Whip': { maxPower: 140 },\r\n    'Precipice Blades': { maxPower: 140 },\r\n    Present: { maxPower: 100 },\r\n    'Prismatic Laser': { maxPower: 150 },\r\n    Psybeam: { maxPower: 120 },\r\n    Psychic: { maxPower: 130 },\r\n    'Psychic Fangs': { maxPower: 130 },\r\n    'Psycho Boost': { maxPower: 140 },\r\n    'Psycho Cut': { maxPower: 120 },\r\n    Psyshock: { maxPower: 130 },\r\n    Psystrike: { maxPower: 130 },\r\n    Psywave: { maxPower: 100 },\r\n    'Pulverizing Pancake': { maxPower: 1 },\r\n    Punishment: { maxPower: 130 },\r\n    Pursuit: { maxPower: 90 },\r\n    'Quick Attack': { maxPower: 90 },\r\n    Rage: { maxPower: 90 },\r\n    'Rapid Spin': { bp: 50, secondaries: true, maxPower: 100 },\r\n    'Razor Leaf': { maxPower: 110 },\r\n    'Razor Shell': { maxPower: 130 },\r\n    'Razor Wind': { maxPower: 130 },\r\n    'Relic Song': { maxPower: 130 },\r\n    Retaliate: { maxPower: 120 },\r\n    Return: { maxPower: 130 },\r\n    'Revelation Dance': { maxPower: 130 },\r\n    Revenge: { maxPower: 80 },\r\n    Reversal: { maxPower: 100 },\r\n    'Roar of Time': { maxPower: 150 },\r\n    'Rock Blast': { maxPower: 130 },\r\n    'Rock Climb': { maxPower: 130 },\r\n    'Rock Slide': { maxPower: 130 },\r\n    'Rock Smash': { maxPower: 70 },\r\n    'Rock Throw': { maxPower: 100 },\r\n    'Rock Tomb': { maxPower: 110 },\r\n    'Rock Wrecker': { maxPower: 150 },\r\n    'Rolling Kick': { maxPower: 80 },\r\n    Rollout: { maxPower: 90 },\r\n    Round: { maxPower: 110 },\r\n    'Sacred Fire': { maxPower: 130 },\r\n    'Sacred Sword': { maxPower: 90 },\r\n    'Sand Tomb': { maxPower: 90 },\r\n    'Savage Spin-Out': { maxPower: 1 },\r\n    Scald: { maxPower: 130 },\r\n    Scratch: { maxPower: 90 },\r\n    'Searing Shot': { maxPower: 130 },\r\n    'Searing Sunraze Smash': { maxPower: 1 },\r\n    'Secret Power': { maxPower: 120 },\r\n    'Secret Sword': { maxPower: 90 },\r\n    'Seed Bomb': { maxPower: 130 },\r\n    'Seed Flare': { maxPower: 140 },\r\n    'Seismic Toss': { maxPower: 75 },\r\n    'Self-Destruct': { maxPower: 150 },\r\n    'Shadow Ball': { maxPower: 130 },\r\n    'Shadow Bone': { maxPower: 130 },\r\n    'Shadow Claw': { maxPower: 120 },\r\n    'Shadow Force': { maxPower: 140 },\r\n    'Shadow Punch': { maxPower: 110 },\r\n    'Shadow Sneak': { maxPower: 90 },\r\n    'Shadow Strike': { maxPower: 130 },\r\n    'Shattered Psyche': { maxPower: 1 },\r\n    'Sheer Cold': { maxPower: 130 },\r\n    'Shell Trap': { maxPower: 150 },\r\n    'Shock Wave': { maxPower: 110 },\r\n    'Signal Beam': { maxPower: 130 },\r\n    'Silver Wind': { maxPower: 110 },\r\n    'Sinister Arrow Raid': { maxPower: 1 },\r\n    'Skull Bash': { maxPower: 140 },\r\n    'Sky Attack': { maxPower: 140 },\r\n    'Sky Drop': { maxPower: 110 },\r\n    'Sky Uppercut': { maxPower: 90 },\r\n    Slam: { maxPower: 130 },\r\n    Slash: { maxPower: 120 },\r\n    Sludge: { maxPower: 85 },\r\n    'Sludge Bomb': { maxPower: 90 },\r\n    'Sludge Wave': { maxPower: 90 },\r\n    'Smack Down': { maxPower: 100 },\r\n    'Smart Strike': { maxPower: 120 },\r\n    'Smelling Salts': { maxPower: 120 },\r\n    Smog: { maxPower: 70 },\r\n    Snarl: { maxPower: 110 },\r\n    Snore: { maxPower: 100 },\r\n    'Solar Beam': { maxPower: 140 },\r\n    'Solar Blade': { maxPower: 140 },\r\n    'Sonic Boom': { maxPower: 100 },\r\n    'Soul-Stealing 7-Star Strike': { maxPower: 1 },\r\n    'Spacial Rend': { maxPower: 130 },\r\n    Spark: { maxPower: 120 },\r\n    'Sparkling Aria': { maxPower: 130 },\r\n    'Spectral Thief': { maxPower: 130 },\r\n    'Spike Cannon': { maxPower: 120 },\r\n    'Spirit Shackle': { maxPower: 130 },\r\n    'Spit Up': { maxPower: 100 },\r\n    'Splintered Stormshards': { maxPower: 1 },\r\n    'Steam Eruption': { maxPower: 140 },\r\n    Steamroller: { maxPower: 120 },\r\n    'Steel Wing': { maxPower: 120 },\r\n    'Stoked Sparksurfer': { maxPower: 1 },\r\n    Stomp: { maxPower: 120 },\r\n    'Stomping Tantrum': { maxPower: 130 },\r\n    'Stone Edge': { maxPower: 130 },\r\n    'Stored Power': { maxPower: 130 },\r\n    'Storm Throw': { maxPower: 80 },\r\n    Strength: { maxPower: 130 },\r\n    'Struggle Bug': { maxPower: 100 },\r\n    Submission: { maxPower: 90 },\r\n    'Subzero Slammer': { maxPower: 1 },\r\n    'Sucker Punch': { maxPower: 120 },\r\n    'Sunsteel Strike': { maxPower: 130 },\r\n    'Super Fang': { maxPower: 100 },\r\n    Superpower: { maxPower: 95 },\r\n    'Supersonic Skystrike': { maxPower: 1 },\r\n    Surf: { maxPower: 130 },\r\n    Swift: { maxPower: 110 },\r\n    Synchronoise: { maxPower: 140 },\r\n    Tackle: { maxPower: 90 },\r\n    'Tail Slap': { maxPower: 130 },\r\n    'Take Down': { maxPower: 130 },\r\n    'Techno Blast': { maxPower: 140 },\r\n    'Tectonic Rage': { maxPower: 1 },\r\n    Thief: { maxPower: 110 },\r\n    'Thousand Arrows': { maxPower: 130 },\r\n    'Thousand Waves': { maxPower: 130 },\r\n    Thrash: { maxPower: 140 },\r\n    'Throat Chop': { maxPower: 130 },\r\n    Thunder: { maxPower: 140 },\r\n    Thunderbolt: { maxPower: 130 },\r\n    'Thunder Fang': { maxPower: 120 },\r\n    'Thunder Punch': { maxPower: 130 },\r\n    'Thunder Shock': { maxPower: 90 },\r\n    'Tri Attack': { maxPower: 130 },\r\n    'Triple Kick': { maxPower: 80 },\r\n    'Trop Kick': { maxPower: 120 },\r\n    'Trump Card': { maxPower: 130 },\r\n    Twineedle: { maxPower: 100 },\r\n    'Twinkle Tackle': { maxPower: 1 },\r\n    Twister: { maxPower: 90 },\r\n    'U-turn': { maxPower: 120 },\r\n    Uproar: { maxPower: 130 },\r\n    'Vacuum Wave': { maxPower: 70 },\r\n    'V-create': { maxPower: 150 },\r\n    Venoshock: { maxPower: 85 },\r\n    'Vine Whip': { maxPower: 100 },\r\n    'Vise Grip': { maxPower: 110 },\r\n    'Vital Throw': { maxPower: 85 },\r\n    'Volt Switch': { maxPower: 120 },\r\n    'Volt Tackle': { maxPower: 140 },\r\n    'Wake-Up Slap': { maxPower: 85 },\r\n    Waterfall: { maxPower: 130 },\r\n    'Water Gun': { maxPower: 90 },\r\n    'Water Pledge': { maxPower: 130 },\r\n    'Water Pulse': { maxPower: 110 },\r\n    'Water Shuriken': { maxPower: 90 },\r\n    'Water Spout': { maxPower: 150 },\r\n    'Weather Ball': { maxPower: 130 },\r\n    Whirlpool: { maxPower: 90 },\r\n    'Wild Charge': { maxPower: 130 },\r\n    'Wing Attack': { maxPower: 110 },\r\n    'Wood Hammer': { maxPower: 140 },\r\n    Wrap: { maxPower: 90 },\r\n    'Wring Out': { maxPower: 140 },\r\n    'X-Scissor': { maxPower: 130 },\r\n    'Zap Cannon': { maxPower: 140 },\r\n    'Zen Headbutt': { maxPower: 130 },\r\n    'Zing Zap': { maxPower: 130 }\r\n};\r\nvar SS = (0, util_1.extend)(true, {}, SM, SS_PATCH);\r\nvar LGPE_MOVES = [\r\n    'Baddy Bad',\r\n    'Bouncy Bubble',\r\n    'Buzzy Buzz',\r\n    'Freezy Frost',\r\n    'Glitzy Glow',\r\n    'Sappy Seed',\r\n    'Sizzly Slide',\r\n    'Sparkly Swirl',\r\n    'Zippy Zap',\r\n    'Floaty Fall',\r\n    'Pika Papow',\r\n    'Splishy Splash',\r\n    'Veevee Volley',\r\n];\r\ntry {\r\n    for (var LGPE_MOVES_1 = __values(LGPE_MOVES), LGPE_MOVES_1_1 = LGPE_MOVES_1.next(); !LGPE_MOVES_1_1.done; LGPE_MOVES_1_1 = LGPE_MOVES_1.next()) {\r\n        var m = LGPE_MOVES_1_1.value;\r\n        delete SS[m];\r\n    }\r\n}\r\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\r\nfinally {\r\n    try {\r\n        if (LGPE_MOVES_1_1 && !LGPE_MOVES_1_1.done && (_a = LGPE_MOVES_1[\"return\"])) _a.call(LGPE_MOVES_1);\r\n    }\r\n    finally { if (e_1) throw e_1.error; }\r\n}\r\nvar SV_PATCH = {\r\n    'Aerial Ace': { isSlicing: true },\r\n    'Air Cutter': { isSlicing: true, isWind: true },\r\n    'Air Slash': { isSlicing: true },\r\n    'Behemoth Blade': { isSlicing: true },\r\n    Blizzard: { isWind: true },\r\n    'Cross Poison': { isSlicing: true },\r\n    Cut: { isSlicing: true },\r\n    'Fairy Wind': { isWind: true },\r\n    'Fury Cutter': { isSlicing: true },\r\n    'Glacial Lance': { bp: 120, zp: 190 },\r\n    'Grassy Glide': { bp: 60, zp: 120, maxPower: 110 },\r\n    Gust: { isWind: true },\r\n    'Heat Wave': { isWind: true },\r\n    Hurricane: { isWind: true },\r\n    'Icy Wind': { isWind: true },\r\n    'Leaf Blade': { isSlicing: true },\r\n    'Night Slash': { isSlicing: true },\r\n    'Petal Blizzard': { isWind: true },\r\n    'Psycho Cut': { isSlicing: true },\r\n    'Razor Leaf': { isSlicing: true },\r\n    'Razor Shell': { isSlicing: true },\r\n    'Sacred Sword': { isSlicing: true },\r\n    Sandstorm: { isWind: true },\r\n    Slash: { isSlicing: true },\r\n    'Solar Blade': { isSlicing: true },\r\n    Tailwind: { isWind: true },\r\n    Twister: { isWind: true },\r\n    Whirlwind: { isWind: true },\r\n    'Wicked Blow': { bp: 75, zp: 140 },\r\n    'X-Scissor': { isSlicing: true },\r\n    'Aqua Cutter': {\r\n        bp: 70,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        zp: 140,\r\n        maxPower: 120,\r\n        isSlicing: true\r\n    },\r\n    'Aqua Step': {\r\n        bp: 80,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        secondaries: true,\r\n        makesContact: true\r\n    },\r\n    'Armor Cannon': {\r\n        bp: 120,\r\n        type: 'Fire',\r\n        category: 'Special',\r\n        zp: 190,\r\n        maxPower: 140\r\n    },\r\n    'Axe Kick': {\r\n        bp: 120,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        zp: 190,\r\n        maxPower: 95,\r\n        secondaries: true,\r\n        hasCrashDamage: true,\r\n        makesContact: true\r\n    },\r\n    'Barb Barrage': {\r\n        bp: 60,\r\n        type: 'Poison',\r\n        category: 'Physical',\r\n        zp: 120,\r\n        maxPower: 80,\r\n        secondaries: true\r\n    },\r\n    'Bitter Blade': {\r\n        bp: 90,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        zp: 175,\r\n        maxPower: 130,\r\n        makesContact: true,\r\n        isSlicing: true,\r\n        drain: [1, 2]\r\n    },\r\n    'Bitter Malice': {\r\n        bp: 75,\r\n        type: 'Ghost',\r\n        category: 'Special',\r\n        zp: 140,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Blazing Torque': {\r\n        bp: 80,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Bleakwind Storm': {\r\n        bp: 100,\r\n        type: 'Flying',\r\n        category: 'Special',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        secondaries: true,\r\n        isWind: true,\r\n        target: 'allAdjacentFoes'\r\n    },\r\n    'Ceaseless Edge': {\r\n        bp: 65,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        zp: 120,\r\n        maxPower: 120,\r\n        makesContact: true,\r\n        isSlicing: true,\r\n        secondaries: true\r\n    },\r\n    'Chilling Water': {\r\n        bp: 50,\r\n        type: 'Water',\r\n        category: 'Special',\r\n        zp: 100,\r\n        maxPower: 100,\r\n        secondaries: true\r\n    },\r\n    'Chilly Reception': {\r\n        bp: 0,\r\n        type: 'Ice',\r\n        category: 'Status'\r\n    },\r\n    'Chloroblast': {\r\n        bp: 150,\r\n        type: 'Grass',\r\n        mindBlownRecoil: true,\r\n        category: 'Special',\r\n        zp: 200,\r\n        maxPower: 150\r\n    },\r\n    'Collision Course': {\r\n        bp: 100,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 90,\r\n        makesContact: true\r\n    },\r\n    'Combat Torque': {\r\n        bp: 100,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 90,\r\n        secondaries: true\r\n    },\r\n    Comeuppance: {\r\n        bp: 0,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 100,\r\n        makesContact: true\r\n    },\r\n    Doodle: {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        category: 'Status'\r\n    },\r\n    'Double Shock': {\r\n        bp: 120,\r\n        type: 'Electric',\r\n        category: 'Physical',\r\n        zp: 190,\r\n        maxPower: 140,\r\n        makesContact: true\r\n    },\r\n    'Dire Claw': {\r\n        bp: 80,\r\n        type: 'Poison',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 90,\r\n        makesContact: true,\r\n        secondaries: true\r\n    },\r\n    'Electro Drift': {\r\n        bp: 100,\r\n        type: 'Electric',\r\n        category: 'Special',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        makesContact: true\r\n    },\r\n    'Esper Wing': {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Fillet Away': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        category: 'Status'\r\n    },\r\n    'Flower Trick': {\r\n        bp: 70,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        willCrit: true,\r\n        zp: 140,\r\n        maxPower: 120\r\n    },\r\n    'Gigaton Hammer': {\r\n        bp: 160,\r\n        type: 'Steel',\r\n        category: 'Physical',\r\n        zp: 200,\r\n        maxPower: 150\r\n    },\r\n    'Glaive Rush': {\r\n        bp: 120,\r\n        type: 'Dragon',\r\n        category: 'Physical',\r\n        zp: 190,\r\n        maxPower: 140,\r\n        makesContact: true\r\n    },\r\n    'Headlong Rush': {\r\n        bp: 120,\r\n        type: 'Ground',\r\n        category: 'Physical',\r\n        zp: 190,\r\n        maxPower: 140,\r\n        makesContact: true,\r\n        isPunch: true\r\n    },\r\n    'Hyper Drill': {\r\n        bp: 100,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        makesContact: true,\r\n        breaksProtect: true\r\n    },\r\n    'Ice Spinner': {\r\n        bp: 80,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        makesContact: true\r\n    },\r\n    'Infernal Parade': {\r\n        bp: 60,\r\n        type: 'Ghost',\r\n        category: 'Special',\r\n        zp: 120,\r\n        maxPower: 110,\r\n        secondaries: true\r\n    },\r\n    'Jet Punch': {\r\n        bp: 60,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        zp: 120,\r\n        maxPower: 110,\r\n        makesContact: true,\r\n        isPunch: true,\r\n        priority: 1\r\n    },\r\n    'Kowtow Cleave': {\r\n        bp: 85,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        makesContact: true,\r\n        isSlicing: true\r\n    },\r\n    'Last Respects': {\r\n        bp: 50,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 100\r\n    },\r\n    'Lumina Crash': {\r\n        bp: 80,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Lunar Blessing': {\r\n        bp: 0,\r\n        type: 'Psychic',\r\n        category: 'Status'\r\n    },\r\n    'Magical Torque': {\r\n        bp: 100,\r\n        type: 'Fairy',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Make It Rain': {\r\n        bp: 120,\r\n        type: 'Steel',\r\n        category: 'Special',\r\n        zp: 190,\r\n        maxPower: 140,\r\n        target: 'allAdjacentFoes',\r\n        self: { boosts: { spa: -1 } }\r\n    },\r\n    'Mortal Spin': {\r\n        bp: 30,\r\n        type: 'Poison',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 70,\r\n        makesContact: true,\r\n        secondaries: true,\r\n        target: 'allAdjacentFoes'\r\n    },\r\n    'Mountain Gale': {\r\n        bp: 100,\r\n        type: 'Ice',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Mystical Power': {\r\n        bp: 70,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        zp: 140,\r\n        maxPower: 120,\r\n        secondaries: true\r\n    },\r\n    'Noxious Torque': {\r\n        bp: 100,\r\n        type: 'Poison',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 90,\r\n        secondaries: true\r\n    },\r\n    'Order Up': {\r\n        bp: 80,\r\n        type: 'Dragon',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        isPulse: true\r\n    },\r\n    'Population Bomb': {\r\n        bp: 20,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 90,\r\n        makesContact: true,\r\n        isSlicing: true,\r\n        multihit: 10\r\n    },\r\n    Pounce: {\r\n        bp: 50,\r\n        type: 'Bug',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 100,\r\n        makesContact: true,\r\n        secondaries: true\r\n    },\r\n    'Power Shift': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        category: 'Status'\r\n    },\r\n    'Psyshield Bash': {\r\n        bp: 70,\r\n        type: 'Psychic',\r\n        category: 'Physical',\r\n        zp: 140,\r\n        maxPower: 120,\r\n        makesContact: true,\r\n        secondaries: true\r\n    },\r\n    'Rage Fist': {\r\n        bp: 50,\r\n        type: 'Ghost',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 100,\r\n        makesContact: true,\r\n        isPunch: true\r\n    },\r\n    'Raging Bull': {\r\n        bp: 90,\r\n        type: 'Normal',\r\n        category: 'Physical',\r\n        zp: 175,\r\n        maxPower: 130,\r\n        makesContact: true\r\n    },\r\n    'Raging Fury': {\r\n        bp: 120,\r\n        type: 'Fire',\r\n        category: 'Physical',\r\n        zp: 190,\r\n        maxPower: 140\r\n    },\r\n    'Revival Blessing': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        category: 'Status'\r\n    },\r\n    Ruination: {\r\n        bp: 0,\r\n        type: 'Dark',\r\n        category: 'Special',\r\n        zp: 100,\r\n        maxPower: 100\r\n    },\r\n    'Salt Cure': {\r\n        bp: 40,\r\n        type: 'Rock',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 90,\r\n        secondaries: true\r\n    },\r\n    'Sandsear Storm': {\r\n        bp: 100,\r\n        type: 'Ground',\r\n        category: 'Special',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        secondaries: true,\r\n        isWind: true,\r\n        target: 'allAdjacentFoes'\r\n    },\r\n    'Shed Tail': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        category: 'Status'\r\n    },\r\n    Shelter: {\r\n        bp: 0,\r\n        type: 'Steel',\r\n        category: 'Status'\r\n    },\r\n    'Silk Trap': {\r\n        bp: 0,\r\n        type: 'Bug',\r\n        category: 'Status',\r\n        priority: 4\r\n    },\r\n    Snowscape: {\r\n        bp: 0,\r\n        type: 'Ice',\r\n        category: 'Status'\r\n    },\r\n    'Spicy Extract': {\r\n        bp: 0,\r\n        type: 'Grass',\r\n        category: 'Status'\r\n    },\r\n    'Spin Out': {\r\n        bp: 100,\r\n        type: 'Steel',\r\n        category: 'Physical',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        makesContact: true\r\n    },\r\n    'Springtide Storm': {\r\n        bp: 100,\r\n        type: 'Fairy',\r\n        category: 'Special',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        secondaries: true,\r\n        isWind: true,\r\n        target: 'allAdjacentFoes'\r\n    },\r\n    'Stone Axe': {\r\n        bp: 65,\r\n        type: 'Rock',\r\n        category: 'Physical',\r\n        zp: 120,\r\n        maxPower: 120,\r\n        makesContact: true,\r\n        isSlicing: true,\r\n        secondaries: true\r\n    },\r\n    'Take Heart': {\r\n        bp: 0,\r\n        type: 'Psychic',\r\n        category: 'Status'\r\n    },\r\n    'Tera Blast': {\r\n        bp: 80,\r\n        type: 'Normal',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130\r\n    },\r\n    'Tidy Up': {\r\n        bp: 0,\r\n        type: 'Normal',\r\n        category: 'Status'\r\n    },\r\n    'Torch Song': {\r\n        bp: 80,\r\n        type: 'Fire',\r\n        category: 'Special',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        secondaries: true,\r\n        isSound: true\r\n    },\r\n    Trailblaze: {\r\n        bp: 50,\r\n        type: 'Grass',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 100,\r\n        secondaries: true,\r\n        makesContact: true\r\n    },\r\n    'Triple Arrows': {\r\n        bp: 90,\r\n        type: 'Fighting',\r\n        category: 'Physical',\r\n        zp: 175,\r\n        maxPower: 90,\r\n        secondaries: true\r\n    },\r\n    'Triple Dive': {\r\n        bp: 30,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        zp: 100,\r\n        maxPower: 90,\r\n        makesContact: true,\r\n        multihit: 3\r\n    },\r\n    'Twin Beam': {\r\n        bp: 40,\r\n        type: 'Psychic',\r\n        category: 'Special',\r\n        zp: 100,\r\n        maxPower: 90,\r\n        multihit: 2\r\n    },\r\n    'Victory Dance': {\r\n        bp: 0,\r\n        type: 'Fighting',\r\n        category: 'Status'\r\n    },\r\n    'Wave Crash': {\r\n        bp: 120,\r\n        type: 'Water',\r\n        category: 'Physical',\r\n        zp: 190,\r\n        maxPower: 140,\r\n        makesContact: true,\r\n        recoil: [33, 100]\r\n    },\r\n    'Wicked Torque': {\r\n        bp: 80,\r\n        type: 'Dark',\r\n        category: 'Physical',\r\n        zp: 160,\r\n        maxPower: 130,\r\n        secondaries: true\r\n    },\r\n    'Wildbolt Storm': {\r\n        bp: 100,\r\n        type: 'Electric',\r\n        category: 'Special',\r\n        zp: 180,\r\n        maxPower: 130,\r\n        secondaries: true,\r\n        isWind: true,\r\n        target: 'allAdjacentFoes'\r\n    }\r\n};\r\nvar SV = (0, util_1.extend)(true, {}, SS, SV_PATCH);\r\nexports.MOVES = [{}, RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\r\nvar Moves = (function () {\r\n    function Moves(gen) {\r\n        this.gen = gen;\r\n    }\r\n    Moves.prototype.get = function (id) {\r\n        return MOVES_BY_ID[this.gen][id];\r\n    };\r\n    Moves.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _c, _i, id;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _a = MOVES_BY_ID[this.gen];\r\n                    _b = [];\r\n                    for (_c in _a)\r\n                        _b.push(_c);\r\n                    _i = 0;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!(_i < _b.length)) return [3, 4];\r\n                    _c = _b[_i];\r\n                    if (!(_c in _a)) return [3, 3];\r\n                    id = _c;\r\n                    return [4, this.get(id)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3, 1];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    };\r\n    return Moves;\r\n}());\r\nexports.Moves = Moves;\r\nvar Move = (function () {\r\n    function Move(name, data, gen) {\r\n        this.kind = 'Move';\r\n        this.id = (0, util_1.toID)(name);\r\n        this.name = name;\r\n        this.flags = {};\r\n        if (data.makesContact)\r\n            this.flags.contact = 1;\r\n        if (data.isPunch)\r\n            this.flags.punch = 1;\r\n        if (data.isBite)\r\n            this.flags.bite = 1;\r\n        if (data.isBullet)\r\n            this.flags.bullet = 1;\r\n        if (data.isSound)\r\n            this.flags.sound = 1;\r\n        if (data.isPulse)\r\n            this.flags.pulse = 1;\r\n        if (data.isSlicing)\r\n            this.flags.slicing = 1;\r\n        if (data.isWind)\r\n            this.flags.wind = 1;\r\n        (0, util_1.assignWithout)(this, data, Move.FLAGS);\r\n        this.basePower = data.bp;\r\n        if (data.zp)\r\n            this.zMove = { basePower: data.zp };\r\n        if (data.maxPower)\r\n            this.maxMove = { basePower: data.maxPower };\r\n        if (!this.category && gen >= 4)\r\n            this.category = 'Status';\r\n        if (this.struggleRecoil)\r\n            delete this.recoil;\r\n    }\r\n    Move.FLAGS = new Set([\r\n        'bp',\r\n        'makesContact',\r\n        'isPunch',\r\n        'isBite',\r\n        'isBullet',\r\n        'isSound',\r\n        'isPulse',\r\n        'zp',\r\n        'maxPower',\r\n        'isSlicing',\r\n        'isWind',\r\n    ]);\r\n    return Move;\r\n}());\r\nvar MOVES_BY_ID = [];\r\nvar gen = 0;\r\ntry {\r\n    for (var MOVES_1 = __values(exports.MOVES), MOVES_1_1 = MOVES_1.next(); !MOVES_1_1.done; MOVES_1_1 = MOVES_1.next()) {\r\n        var moves = MOVES_1_1.value;\r\n        var map = {};\r\n        for (var move in moves) {\r\n            var data = moves[move];\r\n            var m = new Move(move, data, gen);\r\n            map[m.id] = m;\r\n        }\r\n        MOVES_BY_ID.push(map);\r\n        gen++;\r\n    }\r\n}\r\ncatch (e_2_1) { e_2 = { error: e_2_1 }; }\r\nfinally {\r\n    try {\r\n        if (MOVES_1_1 && !MOVES_1_1.done && (_b = MOVES_1[\"return\"])) _b.call(MOVES_1);\r\n    }\r\n    finally { if (e_2) throw e_2.error; }\r\n}\r\n//# sourceMappingURL=moves.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/moves.js?\n}");

/***/ }),

/***/ "./calc/dist/data/natures.js":
/*!***********************************!*\
  !*** ./calc/dist/data/natures.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nexports.__esModule = true;\r\nexports.Natures = exports.NATURES = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nexports.NATURES = {\r\n    Adamant: ['atk', 'spa'],\r\n    Bashful: ['spa', 'spa'],\r\n    Bold: ['def', 'atk'],\r\n    Brave: ['atk', 'spe'],\r\n    Calm: ['spd', 'atk'],\r\n    Careful: ['spd', 'spa'],\r\n    Docile: ['def', 'def'],\r\n    Gentle: ['spd', 'def'],\r\n    Hardy: ['atk', 'atk'],\r\n    Hasty: ['spe', 'def'],\r\n    Impish: ['def', 'spa'],\r\n    Jolly: ['spe', 'spa'],\r\n    Lax: ['def', 'spd'],\r\n    Lonely: ['atk', 'def'],\r\n    Mild: ['spa', 'def'],\r\n    Modest: ['spa', 'atk'],\r\n    Naive: ['spe', 'spd'],\r\n    Naughty: ['atk', 'spd'],\r\n    Quiet: ['spa', 'spe'],\r\n    Quirky: ['spd', 'spd'],\r\n    Rash: ['spa', 'spd'],\r\n    Relaxed: ['def', 'spe'],\r\n    Sassy: ['spd', 'spe'],\r\n    Serious: ['spe', 'spe'],\r\n    Timid: ['spe', 'atk']\r\n};\r\nvar Natures = (function () {\r\n    function Natures() {\r\n    }\r\n    Natures.prototype.get = function (id) {\r\n        return NATURES_BY_ID[id];\r\n    };\r\n    Natures.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _c, _i, id;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _a = NATURES_BY_ID;\r\n                    _b = [];\r\n                    for (_c in _a)\r\n                        _b.push(_c);\r\n                    _i = 0;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!(_i < _b.length)) return [3, 4];\r\n                    _c = _b[_i];\r\n                    if (!(_c in _a)) return [3, 3];\r\n                    id = _c;\r\n                    return [4, this.get(id)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3, 1];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    };\r\n    return Natures;\r\n}());\r\nexports.Natures = Natures;\r\nvar Nature = (function () {\r\n    function Nature(name, _a) {\r\n        var _b = __read(_a, 2), plus = _b[0], minus = _b[1];\r\n        this.kind = 'Nature';\r\n        this.id = (0, util_1.toID)(name);\r\n        this.name = name;\r\n        this.plus = plus;\r\n        this.minus = minus;\r\n    }\r\n    return Nature;\r\n}());\r\nvar NATURES_BY_ID = {};\r\nfor (var nature in exports.NATURES) {\r\n    var n = new Nature(nature, exports.NATURES[nature]);\r\n    NATURES_BY_ID[n.id] = n;\r\n}\r\n//# sourceMappingURL=natures.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/natures.js?\n}");

/***/ }),

/***/ "./calc/dist/data/species.js":
/*!***********************************!*\
  !*** ./calc/dist/data/species.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar e_1, _a;\r\nexports.__esModule = true;\r\nexports.Species = exports.SPECIES = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar RBY = {\r\n    Abra: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 25, at: 20, df: 15, sp: 90, sl: 105 },\r\n        weightkg: 19.5,\r\n        nfe: true\r\n    },\r\n    Aerodactyl: {\r\n        types: ['Rock', 'Flying'],\r\n        bs: { hp: 80, at: 105, df: 65, sp: 130, sl: 60 },\r\n        weightkg: 59\r\n    },\r\n    Alakazam: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 55, at: 50, df: 45, sp: 120, sl: 135 },\r\n        weightkg: 48\r\n    },\r\n    Arbok: { types: ['Poison'], bs: { hp: 60, at: 85, df: 69, sp: 80, sl: 65 }, weightkg: 65 },\r\n    Arcanine: {\r\n        types: ['Fire'],\r\n        bs: { hp: 90, at: 110, df: 80, sp: 95, sl: 80 },\r\n        weightkg: 155\r\n    },\r\n    Articuno: {\r\n        types: ['Ice', 'Flying'],\r\n        bs: { hp: 90, at: 85, df: 100, sp: 85, sl: 125 },\r\n        weightkg: 55.4\r\n    },\r\n    Beedrill: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 65, at: 80, df: 40, sp: 75, sl: 45 },\r\n        weightkg: 29.5\r\n    },\r\n    Bellsprout: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 50, at: 75, df: 35, sp: 40, sl: 70 },\r\n        weightkg: 4,\r\n        nfe: true\r\n    },\r\n    Blastoise: {\r\n        types: ['Water'],\r\n        bs: { hp: 79, at: 83, df: 100, sp: 78, sl: 85 },\r\n        weightkg: 85.5\r\n    },\r\n    Bulbasaur: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 45, at: 49, df: 49, sp: 45, sl: 65 },\r\n        weightkg: 6.9,\r\n        nfe: true\r\n    },\r\n    Butterfree: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 60, at: 45, df: 50, sp: 70, sl: 80 },\r\n        weightkg: 32\r\n    },\r\n    Caterpie: {\r\n        types: ['Bug'],\r\n        bs: { hp: 45, at: 30, df: 35, sp: 45, sl: 20 },\r\n        weightkg: 2.9,\r\n        nfe: true\r\n    },\r\n    Chansey: {\r\n        types: ['Normal'],\r\n        bs: { hp: 250, at: 5, df: 5, sp: 50, sl: 105 },\r\n        weightkg: 34.6\r\n    },\r\n    Charizard: {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 78, at: 84, df: 78, sp: 100, sl: 85 },\r\n        weightkg: 90.5\r\n    },\r\n    Charmander: {\r\n        types: ['Fire'],\r\n        bs: { hp: 39, at: 52, df: 43, sp: 65, sl: 50 },\r\n        weightkg: 8.5,\r\n        nfe: true\r\n    },\r\n    Charmeleon: {\r\n        types: ['Fire'],\r\n        bs: { hp: 58, at: 64, df: 58, sp: 80, sl: 65 },\r\n        weightkg: 19,\r\n        nfe: true\r\n    },\r\n    Clefable: { types: ['Normal'], bs: { hp: 95, at: 70, df: 73, sp: 60, sl: 85 }, weightkg: 40 },\r\n    Clefairy: {\r\n        types: ['Normal'],\r\n        bs: { hp: 70, at: 45, df: 48, sp: 35, sl: 60 },\r\n        weightkg: 7.5,\r\n        nfe: true\r\n    },\r\n    Cloyster: {\r\n        types: ['Water', 'Ice'],\r\n        bs: { hp: 50, at: 95, df: 180, sp: 70, sl: 85 },\r\n        weightkg: 132.5\r\n    },\r\n    Cubone: {\r\n        types: ['Ground'],\r\n        bs: { hp: 50, at: 50, df: 95, sp: 35, sl: 40 },\r\n        weightkg: 6.5,\r\n        nfe: true\r\n    },\r\n    Dewgong: {\r\n        types: ['Water', 'Ice'],\r\n        bs: { hp: 90, at: 70, df: 80, sp: 70, sl: 95 },\r\n        weightkg: 120\r\n    },\r\n    Diglett: {\r\n        types: ['Ground'],\r\n        bs: { hp: 10, at: 55, df: 25, sp: 95, sl: 45 },\r\n        weightkg: 0.8,\r\n        nfe: true\r\n    },\r\n    Ditto: { types: ['Normal'], bs: { hp: 48, at: 48, df: 48, sp: 48, sl: 48 }, weightkg: 4 },\r\n    Dodrio: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 60, at: 110, df: 70, sp: 100, sl: 60 },\r\n        weightkg: 85.2\r\n    },\r\n    Doduo: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 35, at: 85, df: 45, sp: 75, sl: 35 },\r\n        weightkg: 39.2,\r\n        nfe: true\r\n    },\r\n    Dragonair: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 61, at: 84, df: 65, sp: 70, sl: 70 },\r\n        weightkg: 16.5,\r\n        nfe: true\r\n    },\r\n    Dragonite: {\r\n        types: ['Dragon', 'Flying'],\r\n        bs: { hp: 91, at: 134, df: 95, sp: 80, sl: 100 },\r\n        weightkg: 210\r\n    },\r\n    Dratini: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 41, at: 64, df: 45, sp: 50, sl: 50 },\r\n        weightkg: 3.3,\r\n        nfe: true\r\n    },\r\n    Drowzee: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 60, at: 48, df: 45, sp: 42, sl: 90 },\r\n        weightkg: 32.4,\r\n        nfe: true\r\n    },\r\n    Dugtrio: {\r\n        types: ['Ground'],\r\n        bs: { hp: 35, at: 80, df: 50, sp: 120, sl: 70 },\r\n        weightkg: 33.3\r\n    },\r\n    Eevee: {\r\n        types: ['Normal'],\r\n        bs: { hp: 55, at: 55, df: 50, sp: 55, sl: 65 },\r\n        weightkg: 6.5,\r\n        nfe: true\r\n    },\r\n    Ekans: {\r\n        types: ['Poison'],\r\n        bs: { hp: 35, at: 60, df: 44, sp: 55, sl: 40 },\r\n        weightkg: 6.9,\r\n        nfe: true\r\n    },\r\n    Electabuzz: {\r\n        types: ['Electric'],\r\n        bs: { hp: 65, at: 83, df: 57, sp: 105, sl: 85 },\r\n        weightkg: 30\r\n    },\r\n    Electrode: {\r\n        types: ['Electric'],\r\n        bs: { hp: 60, at: 50, df: 70, sp: 140, sl: 80 },\r\n        weightkg: 66.6\r\n    },\r\n    Exeggcute: {\r\n        types: ['Grass', 'Psychic'],\r\n        bs: { hp: 60, at: 40, df: 80, sp: 40, sl: 60 },\r\n        weightkg: 2.5,\r\n        nfe: true\r\n    },\r\n    Exeggutor: {\r\n        types: ['Grass', 'Psychic'],\r\n        bs: { hp: 95, at: 95, df: 85, sp: 55, sl: 125 },\r\n        weightkg: 120\r\n    },\r\n    'Farfetch\\u2019d': {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 52, at: 65, df: 55, sp: 60, sl: 58 },\r\n        weightkg: 15\r\n    },\r\n    Fearow: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 65, at: 90, df: 65, sp: 100, sl: 61 },\r\n        weightkg: 38\r\n    },\r\n    Flareon: { types: ['Fire'], bs: { hp: 65, at: 130, df: 60, sp: 65, sl: 110 }, weightkg: 25 },\r\n    Gastly: {\r\n        types: ['Ghost', 'Poison'],\r\n        bs: { hp: 30, at: 35, df: 30, sp: 80, sl: 100 },\r\n        weightkg: 0.1,\r\n        nfe: true\r\n    },\r\n    Gengar: {\r\n        types: ['Ghost', 'Poison'],\r\n        bs: { hp: 60, at: 65, df: 60, sp: 110, sl: 130 },\r\n        weightkg: 40.5\r\n    },\r\n    Geodude: {\r\n        types: ['Rock', 'Ground'],\r\n        bs: { hp: 40, at: 80, df: 100, sp: 20, sl: 30 },\r\n        weightkg: 20,\r\n        nfe: true\r\n    },\r\n    Gloom: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 60, at: 65, df: 70, sp: 40, sl: 85 },\r\n        weightkg: 8.6,\r\n        nfe: true\r\n    },\r\n    Golbat: {\r\n        types: ['Poison', 'Flying'],\r\n        bs: { hp: 75, at: 80, df: 70, sp: 90, sl: 75 },\r\n        weightkg: 55\r\n    },\r\n    Goldeen: {\r\n        types: ['Water'],\r\n        bs: { hp: 45, at: 67, df: 60, sp: 63, sl: 50 },\r\n        weightkg: 15,\r\n        nfe: true\r\n    },\r\n    Golduck: { types: ['Water'], bs: { hp: 80, at: 82, df: 78, sp: 85, sl: 80 }, weightkg: 76.6 },\r\n    Golem: {\r\n        types: ['Rock', 'Ground'],\r\n        bs: { hp: 80, at: 110, df: 130, sp: 45, sl: 55 },\r\n        weightkg: 300\r\n    },\r\n    Graveler: {\r\n        types: ['Rock', 'Ground'],\r\n        bs: { hp: 55, at: 95, df: 115, sp: 35, sl: 45 },\r\n        weightkg: 105,\r\n        nfe: true\r\n    },\r\n    Grimer: {\r\n        types: ['Poison'],\r\n        bs: { hp: 80, at: 80, df: 50, sp: 25, sl: 40 },\r\n        weightkg: 30,\r\n        nfe: true\r\n    },\r\n    Growlithe: {\r\n        types: ['Fire'],\r\n        bs: { hp: 55, at: 70, df: 45, sp: 60, sl: 50 },\r\n        weightkg: 19,\r\n        nfe: true\r\n    },\r\n    Gyarados: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 95, at: 125, df: 79, sp: 81, sl: 100 },\r\n        weightkg: 235\r\n    },\r\n    Haunter: {\r\n        types: ['Ghost', 'Poison'],\r\n        bs: { hp: 45, at: 50, df: 45, sp: 95, sl: 115 },\r\n        weightkg: 0.1,\r\n        nfe: true\r\n    },\r\n    Hitmonchan: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 50, at: 105, df: 79, sp: 76, sl: 35 },\r\n        weightkg: 50.2\r\n    },\r\n    Hitmonlee: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 50, at: 120, df: 53, sp: 87, sl: 35 },\r\n        weightkg: 49.8\r\n    },\r\n    Horsea: {\r\n        types: ['Water'],\r\n        bs: { hp: 30, at: 40, df: 70, sp: 60, sl: 70 },\r\n        weightkg: 8,\r\n        nfe: true\r\n    },\r\n    Hypno: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 85, at: 73, df: 70, sp: 67, sl: 115 },\r\n        weightkg: 75.6\r\n    },\r\n    Ivysaur: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 60, at: 62, df: 63, sp: 60, sl: 80 },\r\n        weightkg: 13,\r\n        nfe: true\r\n    },\r\n    Jigglypuff: {\r\n        types: ['Normal'],\r\n        bs: { hp: 115, at: 45, df: 20, sp: 20, sl: 25 },\r\n        weightkg: 5.5,\r\n        nfe: true\r\n    },\r\n    Jolteon: {\r\n        types: ['Electric'],\r\n        bs: { hp: 65, at: 65, df: 60, sp: 130, sl: 110 },\r\n        weightkg: 24.5\r\n    },\r\n    Jynx: {\r\n        types: ['Ice', 'Psychic'],\r\n        bs: { hp: 65, at: 50, df: 35, sp: 95, sl: 95 },\r\n        weightkg: 40.6\r\n    },\r\n    Kabuto: {\r\n        types: ['Rock', 'Water'],\r\n        bs: { hp: 30, at: 80, df: 90, sp: 55, sl: 45 },\r\n        weightkg: 11.5,\r\n        nfe: true\r\n    },\r\n    Kabutops: {\r\n        types: ['Rock', 'Water'],\r\n        bs: { hp: 60, at: 115, df: 105, sp: 80, sl: 70 },\r\n        weightkg: 40.5\r\n    },\r\n    Kadabra: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 40, at: 35, df: 30, sp: 105, sl: 120 },\r\n        weightkg: 56.5,\r\n        nfe: true\r\n    },\r\n    Kakuna: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 45, at: 25, df: 50, sp: 35, sl: 25 },\r\n        weightkg: 10,\r\n        nfe: true\r\n    },\r\n    Kangaskhan: {\r\n        types: ['Normal'],\r\n        bs: { hp: 105, at: 95, df: 80, sp: 90, sl: 40 },\r\n        weightkg: 80\r\n    },\r\n    Kingler: { types: ['Water'], bs: { hp: 55, at: 130, df: 115, sp: 75, sl: 50 }, weightkg: 60 },\r\n    Koffing: {\r\n        types: ['Poison'],\r\n        bs: { hp: 40, at: 65, df: 95, sp: 35, sl: 60 },\r\n        weightkg: 1,\r\n        nfe: true\r\n    },\r\n    Krabby: {\r\n        types: ['Water'],\r\n        bs: { hp: 30, at: 105, df: 90, sp: 50, sl: 25 },\r\n        weightkg: 6.5,\r\n        nfe: true\r\n    },\r\n    Lapras: {\r\n        types: ['Water', 'Ice'],\r\n        bs: { hp: 130, at: 85, df: 80, sp: 60, sl: 95 },\r\n        weightkg: 220\r\n    },\r\n    Lickitung: {\r\n        types: ['Normal'],\r\n        bs: { hp: 90, at: 55, df: 75, sp: 30, sl: 60 },\r\n        weightkg: 65.5\r\n    },\r\n    Machamp: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 90, at: 130, df: 80, sp: 55, sl: 65 },\r\n        weightkg: 130\r\n    },\r\n    Machoke: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 80, at: 100, df: 70, sp: 45, sl: 50 },\r\n        weightkg: 70.5,\r\n        nfe: true\r\n    },\r\n    Machop: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 70, at: 80, df: 50, sp: 35, sl: 35 },\r\n        weightkg: 19.5,\r\n        nfe: true\r\n    },\r\n    Magikarp: {\r\n        types: ['Water'],\r\n        bs: { hp: 20, at: 10, df: 55, sp: 80, sl: 20 },\r\n        weightkg: 10,\r\n        nfe: true\r\n    },\r\n    Magmar: {\r\n        types: ['Fire'],\r\n        bs: { hp: 65, at: 95, df: 57, sp: 93, sl: 85 },\r\n        weightkg: 44.5\r\n    },\r\n    Magnemite: {\r\n        types: ['Electric'],\r\n        bs: { hp: 25, at: 35, df: 70, sp: 45, sl: 95 },\r\n        weightkg: 6,\r\n        nfe: true\r\n    },\r\n    Magneton: {\r\n        types: ['Electric'],\r\n        bs: { hp: 50, at: 60, df: 95, sp: 70, sl: 120 },\r\n        weightkg: 60\r\n    },\r\n    Mankey: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 40, at: 80, df: 35, sp: 70, sl: 35 },\r\n        weightkg: 28,\r\n        nfe: true\r\n    },\r\n    Marowak: { types: ['Ground'], bs: { hp: 60, at: 80, df: 110, sp: 45, sl: 50 }, weightkg: 45 },\r\n    Meowth: {\r\n        types: ['Normal'],\r\n        bs: { hp: 40, at: 45, df: 35, sp: 90, sl: 40 },\r\n        weightkg: 4.2,\r\n        nfe: true\r\n    },\r\n    Metapod: {\r\n        types: ['Bug'],\r\n        bs: { hp: 50, at: 20, df: 55, sp: 30, sl: 25 },\r\n        weightkg: 9.9,\r\n        nfe: true\r\n    },\r\n    Mew: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 100, at: 100, df: 100, sp: 100, sl: 100 },\r\n        weightkg: 4\r\n    },\r\n    Mewtwo: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 106, at: 110, df: 90, sp: 130, sl: 154 },\r\n        weightkg: 122\r\n    },\r\n    Moltres: {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 90, at: 100, df: 90, sp: 90, sl: 125 },\r\n        weightkg: 60\r\n    },\r\n    'Mr. Mime': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 40, at: 45, df: 65, sp: 90, sl: 100 },\r\n        weightkg: 54.5\r\n    },\r\n    Muk: { types: ['Poison'], bs: { hp: 105, at: 105, df: 75, sp: 50, sl: 65 }, weightkg: 30 },\r\n    Nidoking: {\r\n        types: ['Poison', 'Ground'],\r\n        bs: { hp: 81, at: 92, df: 77, sp: 85, sl: 75 },\r\n        weightkg: 62\r\n    },\r\n    Nidoqueen: {\r\n        types: ['Poison', 'Ground'],\r\n        bs: { hp: 90, at: 82, df: 87, sp: 76, sl: 75 },\r\n        weightkg: 60\r\n    },\r\n    'Nidoran-F': {\r\n        types: ['Poison'],\r\n        bs: { hp: 55, at: 47, df: 52, sp: 41, sl: 40 },\r\n        weightkg: 7,\r\n        nfe: true\r\n    },\r\n    'Nidoran-M': {\r\n        types: ['Poison'],\r\n        bs: { hp: 46, at: 57, df: 40, sp: 50, sl: 40 },\r\n        weightkg: 9,\r\n        nfe: true\r\n    },\r\n    Nidorina: {\r\n        types: ['Poison'],\r\n        bs: { hp: 70, at: 62, df: 67, sp: 56, sl: 55 },\r\n        weightkg: 20,\r\n        nfe: true\r\n    },\r\n    Nidorino: {\r\n        types: ['Poison'],\r\n        bs: { hp: 61, at: 72, df: 57, sp: 65, sl: 55 },\r\n        weightkg: 19.5,\r\n        nfe: true\r\n    },\r\n    Ninetales: {\r\n        types: ['Fire'],\r\n        bs: { hp: 73, at: 76, df: 75, sp: 100, sl: 100 },\r\n        weightkg: 19.9\r\n    },\r\n    Oddish: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 45, at: 50, df: 55, sp: 30, sl: 75 },\r\n        weightkg: 5.4,\r\n        nfe: true\r\n    },\r\n    Omanyte: {\r\n        types: ['Rock', 'Water'],\r\n        bs: { hp: 35, at: 40, df: 100, sp: 35, sl: 90 },\r\n        weightkg: 7.5,\r\n        nfe: true\r\n    },\r\n    Omastar: {\r\n        types: ['Rock', 'Water'],\r\n        bs: { hp: 70, at: 60, df: 125, sp: 55, sl: 115 },\r\n        weightkg: 35\r\n    },\r\n    Onix: {\r\n        types: ['Rock', 'Ground'],\r\n        bs: { hp: 35, at: 45, df: 160, sp: 70, sl: 30 },\r\n        weightkg: 210\r\n    },\r\n    Paras: {\r\n        types: ['Bug', 'Grass'],\r\n        bs: { hp: 35, at: 70, df: 55, sp: 25, sl: 55 },\r\n        weightkg: 5.4,\r\n        nfe: true\r\n    },\r\n    Parasect: {\r\n        types: ['Bug', 'Grass'],\r\n        bs: { hp: 60, at: 95, df: 80, sp: 30, sl: 80 },\r\n        weightkg: 29.5\r\n    },\r\n    Persian: { types: ['Normal'], bs: { hp: 65, at: 70, df: 60, sp: 115, sl: 65 }, weightkg: 32 },\r\n    Pidgeot: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 83, at: 80, df: 75, sp: 91, sl: 70 },\r\n        weightkg: 39.5\r\n    },\r\n    Pidgeotto: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 63, at: 60, df: 55, sp: 71, sl: 50 },\r\n        weightkg: 30,\r\n        nfe: true\r\n    },\r\n    Pidgey: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 40, at: 45, df: 40, sp: 56, sl: 35 },\r\n        weightkg: 1.8,\r\n        nfe: true\r\n    },\r\n    Pikachu: {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 30, sp: 90, sl: 50 },\r\n        weightkg: 6,\r\n        nfe: true\r\n    },\r\n    Pinsir: { types: ['Bug'], bs: { hp: 65, at: 125, df: 100, sp: 85, sl: 55 }, weightkg: 55 },\r\n    Poliwag: {\r\n        types: ['Water'],\r\n        bs: { hp: 40, at: 50, df: 40, sp: 90, sl: 40 },\r\n        weightkg: 12.4,\r\n        nfe: true\r\n    },\r\n    Poliwhirl: {\r\n        types: ['Water'],\r\n        bs: { hp: 65, at: 65, df: 65, sp: 90, sl: 50 },\r\n        weightkg: 20,\r\n        nfe: true\r\n    },\r\n    Poliwrath: {\r\n        types: ['Water', 'Fighting'],\r\n        bs: { hp: 90, at: 85, df: 95, sp: 70, sl: 70 },\r\n        weightkg: 54\r\n    },\r\n    Ponyta: {\r\n        types: ['Fire'],\r\n        bs: { hp: 50, at: 85, df: 55, sp: 90, sl: 65 },\r\n        weightkg: 30,\r\n        nfe: true\r\n    },\r\n    Porygon: {\r\n        types: ['Normal'],\r\n        bs: { hp: 65, at: 60, df: 70, sp: 40, sl: 75 },\r\n        weightkg: 36.5\r\n    },\r\n    Primeape: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 65, at: 105, df: 60, sp: 95, sl: 60 },\r\n        weightkg: 32\r\n    },\r\n    Psyduck: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 52, df: 48, sp: 55, sl: 50 },\r\n        weightkg: 19.6,\r\n        nfe: true\r\n    },\r\n    Raichu: {\r\n        types: ['Electric'],\r\n        bs: { hp: 60, at: 90, df: 55, sp: 100, sl: 90 },\r\n        weightkg: 30\r\n    },\r\n    Rapidash: { types: ['Fire'], bs: { hp: 65, at: 100, df: 70, sp: 105, sl: 80 }, weightkg: 95 },\r\n    Raticate: {\r\n        types: ['Normal'],\r\n        bs: { hp: 55, at: 81, df: 60, sp: 97, sl: 50 },\r\n        weightkg: 18.5\r\n    },\r\n    Rattata: {\r\n        types: ['Normal'],\r\n        bs: { hp: 30, at: 56, df: 35, sp: 72, sl: 25 },\r\n        weightkg: 3.5,\r\n        nfe: true\r\n    },\r\n    Rhydon: {\r\n        types: ['Ground', 'Rock'],\r\n        bs: { hp: 105, at: 130, df: 120, sp: 40, sl: 45 },\r\n        weightkg: 120\r\n    },\r\n    Rhyhorn: {\r\n        types: ['Ground', 'Rock'],\r\n        bs: { hp: 80, at: 85, df: 95, sp: 25, sl: 30 },\r\n        weightkg: 115,\r\n        nfe: true\r\n    },\r\n    Sandshrew: {\r\n        types: ['Ground'],\r\n        bs: { hp: 50, at: 75, df: 85, sp: 40, sl: 30 },\r\n        weightkg: 12,\r\n        nfe: true\r\n    },\r\n    Sandslash: {\r\n        types: ['Ground'],\r\n        bs: { hp: 75, at: 100, df: 110, sp: 65, sl: 55 },\r\n        weightkg: 29.5\r\n    },\r\n    Scyther: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 70, at: 110, df: 80, sp: 105, sl: 55 },\r\n        weightkg: 56\r\n    },\r\n    Seadra: { types: ['Water'], bs: { hp: 55, at: 65, df: 95, sp: 85, sl: 95 }, weightkg: 25 },\r\n    Seaking: { types: ['Water'], bs: { hp: 80, at: 92, df: 65, sp: 68, sl: 80 }, weightkg: 39 },\r\n    Seel: {\r\n        types: ['Water'],\r\n        bs: { hp: 65, at: 45, df: 55, sp: 45, sl: 70 },\r\n        weightkg: 90,\r\n        nfe: true\r\n    },\r\n    Shellder: {\r\n        types: ['Water'],\r\n        bs: { hp: 30, at: 65, df: 100, sp: 40, sl: 45 },\r\n        weightkg: 4,\r\n        nfe: true\r\n    },\r\n    Slowbro: {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 95, at: 75, df: 110, sp: 30, sl: 80 },\r\n        weightkg: 78.5\r\n    },\r\n    Slowpoke: {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 90, at: 65, df: 65, sp: 15, sl: 40 },\r\n        weightkg: 36,\r\n        nfe: true\r\n    },\r\n    Snorlax: {\r\n        types: ['Normal'],\r\n        bs: { hp: 160, at: 110, df: 65, sp: 30, sl: 65 },\r\n        weightkg: 460\r\n    },\r\n    Spearow: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 40, at: 60, df: 30, sp: 70, sl: 31 },\r\n        weightkg: 2,\r\n        nfe: true\r\n    },\r\n    Squirtle: {\r\n        types: ['Water'],\r\n        bs: { hp: 44, at: 48, df: 65, sp: 43, sl: 50 },\r\n        weightkg: 9,\r\n        nfe: true\r\n    },\r\n    Starmie: {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 60, at: 75, df: 85, sp: 115, sl: 100 },\r\n        weightkg: 80\r\n    },\r\n    Staryu: {\r\n        types: ['Water'],\r\n        bs: { hp: 30, at: 45, df: 55, sp: 85, sl: 70 },\r\n        weightkg: 34.5,\r\n        nfe: true\r\n    },\r\n    Tangela: {\r\n        types: ['Grass'],\r\n        bs: { hp: 65, at: 55, df: 115, sp: 60, sl: 100 },\r\n        weightkg: 35\r\n    },\r\n    Tauros: {\r\n        types: ['Normal'],\r\n        bs: { hp: 75, at: 100, df: 95, sp: 110, sl: 70 },\r\n        weightkg: 88.4\r\n    },\r\n    Tentacool: {\r\n        types: ['Water', 'Poison'],\r\n        bs: { hp: 40, at: 40, df: 35, sp: 70, sl: 100 },\r\n        weightkg: 45.5,\r\n        nfe: true\r\n    },\r\n    Tentacruel: {\r\n        types: ['Water', 'Poison'],\r\n        bs: { hp: 80, at: 70, df: 65, sp: 100, sl: 120 },\r\n        weightkg: 55\r\n    },\r\n    Vaporeon: {\r\n        types: ['Water'],\r\n        bs: { hp: 130, at: 65, df: 60, sp: 65, sl: 110 },\r\n        weightkg: 29\r\n    },\r\n    Venomoth: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 70, at: 65, df: 60, sp: 90, sl: 90 },\r\n        weightkg: 12.5\r\n    },\r\n    Venonat: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 60, at: 55, df: 50, sp: 45, sl: 40 },\r\n        weightkg: 30,\r\n        nfe: true\r\n    },\r\n    Venusaur: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 80, at: 82, df: 83, sp: 80, sl: 100 },\r\n        weightkg: 100\r\n    },\r\n    Victreebel: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 80, at: 105, df: 65, sp: 70, sl: 100 },\r\n        weightkg: 15.5\r\n    },\r\n    Vileplume: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 75, at: 80, df: 85, sp: 50, sl: 100 },\r\n        weightkg: 18.6\r\n    },\r\n    Voltorb: {\r\n        types: ['Electric'],\r\n        bs: { hp: 40, at: 30, df: 50, sp: 100, sl: 55 },\r\n        weightkg: 10.4,\r\n        nfe: true\r\n    },\r\n    Vulpix: {\r\n        types: ['Fire'],\r\n        bs: { hp: 38, at: 41, df: 40, sp: 65, sl: 65 },\r\n        weightkg: 9.9,\r\n        nfe: true\r\n    },\r\n    Wartortle: {\r\n        types: ['Water'],\r\n        bs: { hp: 59, at: 63, df: 80, sp: 58, sl: 65 },\r\n        weightkg: 22.5,\r\n        nfe: true\r\n    },\r\n    Weedle: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 40, at: 35, df: 30, sp: 50, sl: 20 },\r\n        weightkg: 3.2,\r\n        nfe: true\r\n    },\r\n    Weepinbell: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 65, at: 90, df: 50, sp: 55, sl: 85 },\r\n        weightkg: 6.4,\r\n        nfe: true\r\n    },\r\n    Weezing: {\r\n        types: ['Poison'],\r\n        bs: { hp: 65, at: 90, df: 120, sp: 60, sl: 85 },\r\n        weightkg: 9.5\r\n    },\r\n    Wigglytuff: {\r\n        types: ['Normal'],\r\n        bs: { hp: 140, at: 70, df: 45, sp: 45, sl: 50 },\r\n        weightkg: 12\r\n    },\r\n    Zapdos: {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 90, at: 90, df: 85, sp: 100, sl: 125 },\r\n        weightkg: 52.6\r\n    },\r\n    Zubat: {\r\n        types: ['Poison', 'Flying'],\r\n        bs: { hp: 40, at: 45, df: 35, sp: 55, sl: 40 },\r\n        weightkg: 7.5,\r\n        nfe: true\r\n    }\r\n};\r\nvar GSC_PATCH = {\r\n    Abra: { bs: { sa: 105, sd: 55 } },\r\n    Aerodactyl: { bs: { sa: 60, sd: 75 } },\r\n    Alakazam: { bs: { sa: 135, sd: 85 } },\r\n    Arbok: { bs: { sa: 65, sd: 79 } },\r\n    Arcanine: { bs: { sa: 100, sd: 80 } },\r\n    Articuno: { bs: { sa: 95, sd: 125 }, gender: 'N' },\r\n    Beedrill: { bs: { sa: 45, sd: 80 } },\r\n    Bellsprout: { bs: { sa: 70, sd: 30 } },\r\n    Blastoise: { bs: { sa: 85, sd: 105 } },\r\n    Bulbasaur: { bs: { sa: 65, sd: 65 } },\r\n    Butterfree: { bs: { sa: 80, sd: 80 } },\r\n    Caterpie: { bs: { sa: 20, sd: 20 } },\r\n    Chansey: { bs: { sa: 35, sd: 105 }, nfe: true },\r\n    Charizard: { bs: { sa: 109, sd: 85 } },\r\n    Charmander: { bs: { sa: 60, sd: 50 } },\r\n    Charmeleon: { bs: { sa: 80, sd: 65 } },\r\n    Clefable: { bs: { sa: 85, sd: 90 } },\r\n    Clefairy: { bs: { sa: 60, sd: 65 } },\r\n    Cloyster: { bs: { sa: 85, sd: 45 } },\r\n    Cubone: { bs: { sa: 40, sd: 50 } },\r\n    Dewgong: { bs: { sa: 70, sd: 95 } },\r\n    Diglett: { bs: { sa: 35, sd: 45 } },\r\n    Ditto: { bs: { sa: 48, sd: 48 }, gender: 'N' },\r\n    Dodrio: { bs: { sa: 60, sd: 60 } },\r\n    Doduo: { bs: { sa: 35, sd: 35 } },\r\n    Dragonair: { bs: { sa: 70, sd: 70 } },\r\n    Dragonite: { bs: { sa: 100, sd: 100 } },\r\n    Dratini: { bs: { sa: 50, sd: 50 } },\r\n    Drowzee: { bs: { sa: 43, sd: 90 } },\r\n    Dugtrio: { bs: { sa: 50, sd: 70 } },\r\n    Eevee: { bs: { sa: 45, sd: 65 } },\r\n    Ekans: { bs: { sa: 40, sd: 54 } },\r\n    Electabuzz: { bs: { sa: 95, sd: 85 } },\r\n    Electrode: { bs: { sa: 80, sd: 80 }, gender: 'N' },\r\n    Exeggcute: { bs: { sa: 60, sd: 45 } },\r\n    Exeggutor: { bs: { sa: 125, sd: 65 } },\r\n    'Farfetch\\u2019d': { bs: { sa: 58, sd: 62 } },\r\n    Fearow: { bs: { sa: 61, sd: 61 } },\r\n    Flareon: { bs: { sa: 95, sd: 110 } },\r\n    Gastly: { bs: { sa: 100, sd: 35 } },\r\n    Gengar: { bs: { sa: 130, sd: 75 } },\r\n    Geodude: { bs: { sa: 30, sd: 30 } },\r\n    Gloom: { bs: { sa: 85, sd: 75 } },\r\n    Golbat: { bs: { sa: 65, sd: 75 }, nfe: true },\r\n    Goldeen: { bs: { sa: 35, sd: 50 } },\r\n    Golduck: { bs: { sa: 95, sd: 80 } },\r\n    Golem: { bs: { sa: 55, sd: 65 } },\r\n    Graveler: { bs: { sa: 45, sd: 45 } },\r\n    Grimer: { bs: { sa: 40, sd: 50 } },\r\n    Growlithe: { bs: { sa: 70, sd: 50 } },\r\n    Gyarados: { bs: { sa: 60, sd: 100 } },\r\n    Haunter: { bs: { sa: 115, sd: 55 } },\r\n    Hitmonchan: { bs: { sa: 35, sd: 110 } },\r\n    Hitmonlee: { bs: { sa: 35, sd: 110 } },\r\n    Horsea: { bs: { sa: 70, sd: 25 } },\r\n    Hypno: { bs: { sa: 73, sd: 115 } },\r\n    Ivysaur: { bs: { sa: 80, sd: 80 } },\r\n    Jigglypuff: { bs: { sa: 45, sd: 25 } },\r\n    Jolteon: { bs: { sa: 110, sd: 95 } },\r\n    Jynx: { bs: { sa: 115, sd: 95 } },\r\n    Kabuto: { bs: { sa: 55, sd: 45 } },\r\n    Kabutops: { bs: { sa: 65, sd: 70 } },\r\n    Kadabra: { bs: { sa: 120, sd: 70 } },\r\n    Kakuna: { bs: { sa: 25, sd: 25 } },\r\n    Kangaskhan: { bs: { sa: 40, sd: 80 } },\r\n    Kingler: { bs: { sa: 50, sd: 50 } },\r\n    Koffing: { bs: { sa: 60, sd: 45 } },\r\n    Krabby: { bs: { sa: 25, sd: 25 } },\r\n    Lapras: { bs: { sa: 85, sd: 95 } },\r\n    Lickitung: { bs: { sa: 60, sd: 75 } },\r\n    Machamp: { bs: { sa: 65, sd: 85 } },\r\n    Machoke: { bs: { sa: 50, sd: 60 } },\r\n    Machop: { bs: { sa: 35, sd: 35 } },\r\n    Magikarp: { bs: { sa: 15, sd: 20 } },\r\n    Magmar: { bs: { sa: 100, sd: 85 } },\r\n    Magnemite: { types: ['Electric', 'Steel'], bs: { sa: 95, sd: 55 }, gender: 'N' },\r\n    Magneton: { types: ['Electric', 'Steel'], bs: { sa: 120, sd: 70 }, gender: 'N' },\r\n    Mankey: { bs: { sa: 35, sd: 45 } },\r\n    Marowak: { bs: { sa: 50, sd: 80 } },\r\n    Meowth: { bs: { sa: 40, sd: 40 } },\r\n    Metapod: { bs: { sa: 25, sd: 25 } },\r\n    Mew: { bs: { sa: 100, sd: 100 }, gender: 'N' },\r\n    Mewtwo: { bs: { sa: 154, sd: 90 }, gender: 'N' },\r\n    Moltres: { bs: { sa: 125, sd: 85 }, gender: 'N' },\r\n    'Mr. Mime': { bs: { sa: 100, sd: 120 } },\r\n    Muk: { bs: { sa: 65, sd: 100 } },\r\n    Nidoking: { bs: { sa: 85, sd: 75 } },\r\n    Nidoqueen: { bs: { sa: 75, sd: 85 } },\r\n    'Nidoran-F': { bs: { sa: 40, sd: 40 } },\r\n    'Nidoran-M': { bs: { sa: 40, sd: 40 } },\r\n    Nidorina: { bs: { sa: 55, sd: 55 } },\r\n    Nidorino: { bs: { sa: 55, sd: 55 } },\r\n    Ninetales: { bs: { sa: 81, sd: 100 } },\r\n    Oddish: { bs: { sa: 75, sd: 65 } },\r\n    Omanyte: { bs: { sa: 90, sd: 55 } },\r\n    Omastar: { bs: { sa: 115, sd: 70 } },\r\n    Onix: { bs: { sa: 30, sd: 45 }, nfe: true },\r\n    Paras: { bs: { sa: 45, sd: 55 } },\r\n    Parasect: { bs: { sa: 60, sd: 80 } },\r\n    Persian: { bs: { sa: 65, sd: 65 } },\r\n    Pidgeot: { bs: { sa: 70, sd: 70 } },\r\n    Pidgeotto: { bs: { sa: 50, sd: 50 } },\r\n    Pidgey: { bs: { sa: 35, sd: 35 } },\r\n    Pikachu: { bs: { sa: 50, sd: 40 } },\r\n    Pinsir: { bs: { sa: 55, sd: 70 } },\r\n    Poliwag: { bs: { sa: 40, sd: 40 } },\r\n    Poliwhirl: { bs: { sa: 50, sd: 50 } },\r\n    Poliwrath: { bs: { sa: 70, sd: 90 } },\r\n    Ponyta: { bs: { sa: 65, sd: 65 } },\r\n    Porygon: { bs: { sa: 85, sd: 75 }, nfe: true, gender: 'N' },\r\n    Primeape: { bs: { sa: 60, sd: 70 } },\r\n    Psyduck: { bs: { sa: 65, sd: 50 } },\r\n    Raichu: { bs: { sa: 90, sd: 80 } },\r\n    Rapidash: { bs: { sa: 80, sd: 80 } },\r\n    Raticate: { bs: { sa: 50, sd: 70 } },\r\n    Rattata: { bs: { sa: 25, sd: 35 } },\r\n    Rhydon: { bs: { sa: 45, sd: 45 } },\r\n    Rhyhorn: { bs: { sa: 30, sd: 30 } },\r\n    Sandshrew: { bs: { sa: 20, sd: 30 } },\r\n    Sandslash: { bs: { sa: 45, sd: 55 } },\r\n    Scyther: { bs: { sa: 55, sd: 80 }, nfe: true },\r\n    Seadra: { bs: { sa: 95, sd: 45 }, nfe: true },\r\n    Seaking: { bs: { sa: 65, sd: 80 } },\r\n    Seel: { bs: { sa: 45, sd: 70 } },\r\n    Shellder: { bs: { sa: 45, sd: 25 } },\r\n    Slowbro: { bs: { sa: 100, sd: 80 } },\r\n    Slowpoke: { bs: { sa: 40, sd: 40 } },\r\n    Snorlax: { bs: { sa: 65, sd: 110 } },\r\n    Spearow: { bs: { sa: 31, sd: 31 } },\r\n    Squirtle: { bs: { sa: 50, sd: 64 } },\r\n    Starmie: { bs: { sa: 100, sd: 85 }, gender: 'N' },\r\n    Staryu: { bs: { sa: 70, sd: 55 }, gender: 'N' },\r\n    Tangela: { bs: { sa: 100, sd: 40 } },\r\n    Tauros: { bs: { sa: 40, sd: 70 } },\r\n    Tentacool: { bs: { sa: 50, sd: 100 } },\r\n    Tentacruel: { bs: { sa: 80, sd: 120 } },\r\n    Vaporeon: { bs: { sa: 110, sd: 95 } },\r\n    Venomoth: { bs: { sa: 90, sd: 75 } },\r\n    Venonat: { bs: { sa: 40, sd: 55 } },\r\n    Venusaur: { bs: { sa: 100, sd: 100 } },\r\n    Victreebel: { bs: { sa: 100, sd: 60 } },\r\n    Vileplume: { bs: { sa: 100, sd: 90 } },\r\n    Voltorb: { bs: { sa: 55, sd: 55 }, gender: 'N' },\r\n    Vulpix: { bs: { sa: 50, sd: 65 } },\r\n    Wartortle: { bs: { sa: 65, sd: 80 } },\r\n    Weedle: { bs: { sa: 20, sd: 20 } },\r\n    Weepinbell: { bs: { sa: 85, sd: 45 } },\r\n    Weezing: { bs: { sa: 85, sd: 70 } },\r\n    Wigglytuff: { bs: { sa: 75, sd: 50 } },\r\n    Zapdos: { bs: { sa: 125, sd: 90 }, gender: 'N' },\r\n    Zubat: { bs: { sa: 30, sd: 40 } },\r\n    Aipom: { types: ['Normal'], bs: { hp: 55, at: 70, df: 55, sa: 40, sd: 55, sp: 85 }, weightkg: 11.5 },\r\n    Ampharos: {\r\n        types: ['Electric'],\r\n        bs: { hp: 90, at: 75, df: 75, sa: 115, sd: 90, sp: 55 },\r\n        weightkg: 61.5\r\n    },\r\n    Ariados: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 70, at: 90, df: 70, sa: 60, sd: 60, sp: 40 },\r\n        weightkg: 33.5\r\n    },\r\n    Azumarill: {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 65, df: 80, sa: 50, sd: 80, sp: 50 },\r\n        weightkg: 28.5\r\n    },\r\n    Bayleef: {\r\n        types: ['Grass'],\r\n        bs: { hp: 60, at: 62, df: 80, sa: 63, sd: 80, sp: 60 },\r\n        weightkg: 15.8,\r\n        nfe: true\r\n    },\r\n    Bellossom: {\r\n        types: ['Grass'],\r\n        bs: { hp: 75, at: 80, df: 85, sa: 90, sd: 100, sp: 50 },\r\n        weightkg: 5.8\r\n    },\r\n    Blissey: {\r\n        types: ['Normal'],\r\n        bs: { hp: 255, at: 10, df: 10, sa: 75, sd: 135, sp: 55 },\r\n        weightkg: 46.8\r\n    },\r\n    Celebi: {\r\n        types: ['Psychic', 'Grass'],\r\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\r\n        weightkg: 5,\r\n        gender: 'N'\r\n    },\r\n    Chikorita: {\r\n        types: ['Grass'],\r\n        bs: { hp: 45, at: 49, df: 65, sa: 49, sd: 65, sp: 45 },\r\n        weightkg: 6.4,\r\n        nfe: true\r\n    },\r\n    Chinchou: {\r\n        types: ['Water', 'Electric'],\r\n        bs: { hp: 75, at: 38, df: 38, sa: 56, sd: 56, sp: 67 },\r\n        weightkg: 12,\r\n        nfe: true\r\n    },\r\n    Cleffa: {\r\n        types: ['Normal'],\r\n        bs: { hp: 50, at: 25, df: 28, sa: 45, sd: 55, sp: 15 },\r\n        weightkg: 3,\r\n        nfe: true\r\n    },\r\n    Corsola: {\r\n        types: ['Water', 'Rock'],\r\n        bs: { hp: 55, at: 55, df: 85, sa: 65, sd: 85, sp: 35 },\r\n        weightkg: 5\r\n    },\r\n    Crobat: {\r\n        types: ['Poison', 'Flying'],\r\n        bs: { hp: 85, at: 90, df: 80, sa: 70, sd: 80, sp: 130 },\r\n        weightkg: 75\r\n    },\r\n    Croconaw: {\r\n        types: ['Water'],\r\n        bs: { hp: 65, at: 80, df: 80, sa: 59, sd: 63, sp: 58 },\r\n        weightkg: 25,\r\n        nfe: true\r\n    },\r\n    Cyndaquil: {\r\n        types: ['Fire'],\r\n        bs: { hp: 39, at: 52, df: 43, sa: 60, sd: 50, sp: 65 },\r\n        weightkg: 7.9,\r\n        nfe: true\r\n    },\r\n    Delibird: {\r\n        types: ['Ice', 'Flying'],\r\n        bs: { hp: 45, at: 55, df: 45, sa: 65, sd: 45, sp: 75 },\r\n        weightkg: 16\r\n    },\r\n    Donphan: {\r\n        types: ['Ground'],\r\n        bs: { hp: 90, at: 120, df: 120, sa: 60, sd: 60, sp: 50 },\r\n        weightkg: 120\r\n    },\r\n    Dunsparce: {\r\n        types: ['Normal'],\r\n        bs: { hp: 100, at: 70, df: 70, sa: 65, sd: 65, sp: 45 },\r\n        weightkg: 14\r\n    },\r\n    Elekid: {\r\n        types: ['Electric'],\r\n        bs: { hp: 45, at: 63, df: 37, sa: 65, sd: 55, sp: 95 },\r\n        weightkg: 23.5,\r\n        nfe: true\r\n    },\r\n    Entei: {\r\n        types: ['Fire'],\r\n        bs: { hp: 115, at: 115, df: 85, sa: 90, sd: 75, sp: 100 },\r\n        weightkg: 198,\r\n        gender: 'N'\r\n    },\r\n    Espeon: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 65, at: 65, df: 60, sa: 130, sd: 95, sp: 110 },\r\n        weightkg: 26.5\r\n    },\r\n    Feraligatr: {\r\n        types: ['Water'],\r\n        bs: { hp: 85, at: 105, df: 100, sa: 79, sd: 83, sp: 78 },\r\n        weightkg: 88.8\r\n    },\r\n    Flaaffy: {\r\n        types: ['Electric'],\r\n        bs: { hp: 70, at: 55, df: 55, sa: 80, sd: 60, sp: 45 },\r\n        weightkg: 13.3,\r\n        nfe: true\r\n    },\r\n    Forretress: {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 75, at: 90, df: 140, sa: 60, sd: 60, sp: 40 },\r\n        weightkg: 125.8\r\n    },\r\n    Furret: { types: ['Normal'], bs: { hp: 85, at: 76, df: 64, sa: 45, sd: 55, sp: 90 }, weightkg: 32.5 },\r\n    Girafarig: {\r\n        types: ['Normal', 'Psychic'],\r\n        bs: { hp: 70, at: 80, df: 65, sa: 90, sd: 65, sp: 85 },\r\n        weightkg: 41.5\r\n    },\r\n    Gligar: {\r\n        types: ['Ground', 'Flying'],\r\n        bs: { hp: 65, at: 75, df: 105, sa: 35, sd: 65, sp: 85 },\r\n        weightkg: 64.8\r\n    },\r\n    Granbull: {\r\n        types: ['Normal'],\r\n        bs: { hp: 90, at: 120, df: 75, sa: 60, sd: 60, sp: 45 },\r\n        weightkg: 48.7\r\n    },\r\n    Heracross: {\r\n        types: ['Bug', 'Fighting'],\r\n        bs: { hp: 80, at: 125, df: 75, sa: 40, sd: 95, sp: 85 },\r\n        weightkg: 54\r\n    },\r\n    Hitmontop: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 50, at: 95, df: 95, sa: 35, sd: 110, sp: 70 },\r\n        weightkg: 48\r\n    },\r\n    'Ho-Oh': {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 106, at: 130, df: 90, sa: 110, sd: 154, sp: 90 },\r\n        weightkg: 199,\r\n        gender: 'N'\r\n    },\r\n    Hoothoot: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 60, at: 30, df: 30, sa: 36, sd: 56, sp: 50 },\r\n        weightkg: 21.2,\r\n        nfe: true\r\n    },\r\n    Hoppip: {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 35, at: 35, df: 40, sa: 35, sd: 55, sp: 50 },\r\n        weightkg: 0.5,\r\n        nfe: true\r\n    },\r\n    Houndoom: {\r\n        types: ['Dark', 'Fire'],\r\n        bs: { hp: 75, at: 90, df: 50, sa: 110, sd: 80, sp: 95 },\r\n        weightkg: 35\r\n    },\r\n    Houndour: {\r\n        types: ['Dark', 'Fire'],\r\n        bs: { hp: 45, at: 60, df: 30, sa: 80, sd: 50, sp: 65 },\r\n        weightkg: 10.8,\r\n        nfe: true\r\n    },\r\n    Igglybuff: {\r\n        types: ['Normal'],\r\n        bs: { hp: 90, at: 30, df: 15, sa: 40, sd: 20, sp: 15 },\r\n        weightkg: 1,\r\n        nfe: true\r\n    },\r\n    Jumpluff: {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 75, at: 55, df: 70, sa: 55, sd: 85, sp: 110 },\r\n        weightkg: 3\r\n    },\r\n    Kingdra: {\r\n        types: ['Water', 'Dragon'],\r\n        bs: { hp: 75, at: 95, df: 95, sa: 95, sd: 95, sp: 85 },\r\n        weightkg: 152\r\n    },\r\n    Lanturn: {\r\n        types: ['Water', 'Electric'],\r\n        bs: { hp: 125, at: 58, df: 58, sa: 76, sd: 76, sp: 67 },\r\n        weightkg: 22.5\r\n    },\r\n    Larvitar: {\r\n        types: ['Rock', 'Ground'],\r\n        bs: { hp: 50, at: 64, df: 50, sa: 45, sd: 50, sp: 41 },\r\n        weightkg: 72,\r\n        nfe: true\r\n    },\r\n    Ledian: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 55, at: 35, df: 50, sa: 55, sd: 110, sp: 85 },\r\n        weightkg: 35.6\r\n    },\r\n    Ledyba: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 40, at: 20, df: 30, sa: 40, sd: 80, sp: 55 },\r\n        weightkg: 10.8,\r\n        nfe: true\r\n    },\r\n    Lugia: {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 106, at: 90, df: 130, sa: 90, sd: 154, sp: 110 },\r\n        weightkg: 216,\r\n        gender: 'N'\r\n    },\r\n    Magby: {\r\n        types: ['Fire'],\r\n        bs: { hp: 45, at: 75, df: 37, sa: 70, sd: 55, sp: 83 },\r\n        weightkg: 21.4,\r\n        nfe: true\r\n    },\r\n    Magcargo: {\r\n        types: ['Fire', 'Rock'],\r\n        bs: { hp: 50, at: 50, df: 120, sa: 80, sd: 80, sp: 30 },\r\n        weightkg: 55\r\n    },\r\n    Mantine: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 65, at: 40, df: 70, sa: 80, sd: 140, sp: 70 },\r\n        weightkg: 220\r\n    },\r\n    Mareep: {\r\n        types: ['Electric'],\r\n        bs: { hp: 55, at: 40, df: 40, sa: 65, sd: 45, sp: 35 },\r\n        weightkg: 7.8,\r\n        nfe: true\r\n    },\r\n    Marill: {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 20, df: 50, sa: 20, sd: 50, sp: 40 },\r\n        weightkg: 8.5,\r\n        nfe: true\r\n    },\r\n    Meganium: {\r\n        types: ['Grass'],\r\n        bs: { hp: 80, at: 82, df: 100, sa: 83, sd: 100, sp: 80 },\r\n        weightkg: 100.5\r\n    },\r\n    Miltank: {\r\n        types: ['Normal'],\r\n        bs: { hp: 95, at: 80, df: 105, sa: 40, sd: 70, sp: 100 },\r\n        weightkg: 75.5\r\n    },\r\n    Misdreavus: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 60, at: 60, df: 60, sa: 85, sd: 85, sp: 85 },\r\n        weightkg: 1\r\n    },\r\n    Murkrow: {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 60, at: 85, df: 42, sa: 85, sd: 42, sp: 91 },\r\n        weightkg: 2.1\r\n    },\r\n    Natu: {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 40, at: 50, df: 45, sa: 70, sd: 45, sp: 70 },\r\n        weightkg: 2,\r\n        nfe: true\r\n    },\r\n    Noctowl: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 100, at: 50, df: 50, sa: 76, sd: 96, sp: 70 },\r\n        weightkg: 40.8\r\n    },\r\n    Octillery: {\r\n        types: ['Water'],\r\n        bs: { hp: 75, at: 105, df: 75, sa: 105, sd: 75, sp: 45 },\r\n        weightkg: 28.5\r\n    },\r\n    Phanpy: {\r\n        types: ['Ground'],\r\n        bs: { hp: 90, at: 60, df: 60, sa: 40, sd: 40, sp: 40 },\r\n        weightkg: 33.5,\r\n        nfe: true\r\n    },\r\n    Pichu: {\r\n        types: ['Electric'],\r\n        bs: { hp: 20, at: 40, df: 15, sa: 35, sd: 35, sp: 60 },\r\n        weightkg: 2,\r\n        nfe: true\r\n    },\r\n    Piloswine: {\r\n        types: ['Ice', 'Ground'],\r\n        bs: { hp: 100, at: 100, df: 80, sa: 60, sd: 60, sp: 50 },\r\n        weightkg: 55.8\r\n    },\r\n    Pineco: {\r\n        types: ['Bug'],\r\n        bs: { hp: 50, at: 65, df: 90, sa: 35, sd: 35, sp: 15 },\r\n        weightkg: 7.2,\r\n        nfe: true\r\n    },\r\n    Politoed: {\r\n        types: ['Water'],\r\n        bs: { hp: 90, at: 75, df: 75, sa: 90, sd: 100, sp: 70 },\r\n        weightkg: 33.9\r\n    },\r\n    Porygon2: {\r\n        types: ['Normal'],\r\n        bs: { hp: 85, at: 80, df: 90, sa: 105, sd: 95, sp: 60 },\r\n        weightkg: 32.5,\r\n        gender: 'N'\r\n    },\r\n    Pupitar: {\r\n        types: ['Rock', 'Ground'],\r\n        bs: { hp: 70, at: 84, df: 70, sa: 65, sd: 70, sp: 51 },\r\n        weightkg: 152,\r\n        nfe: true\r\n    },\r\n    Quagsire: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 95, at: 85, df: 85, sa: 65, sd: 65, sp: 35 },\r\n        weightkg: 75\r\n    },\r\n    Quilava: {\r\n        types: ['Fire'],\r\n        bs: { hp: 58, at: 64, df: 58, sa: 80, sd: 65, sp: 80 },\r\n        weightkg: 19,\r\n        nfe: true\r\n    },\r\n    Qwilfish: {\r\n        types: ['Water', 'Poison'],\r\n        bs: { hp: 65, at: 95, df: 75, sa: 55, sd: 55, sp: 85 },\r\n        weightkg: 3.9\r\n    },\r\n    Raikou: {\r\n        types: ['Electric'],\r\n        bs: { hp: 90, at: 85, df: 75, sa: 115, sd: 100, sp: 115 },\r\n        weightkg: 178,\r\n        gender: 'N'\r\n    },\r\n    Remoraid: {\r\n        types: ['Water'],\r\n        bs: { hp: 35, at: 65, df: 35, sa: 65, sd: 35, sp: 65 },\r\n        weightkg: 12,\r\n        nfe: true\r\n    },\r\n    Scizor: {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 70, at: 130, df: 100, sa: 55, sd: 80, sp: 65 },\r\n        weightkg: 118\r\n    },\r\n    Sentret: {\r\n        types: ['Normal'],\r\n        bs: { hp: 35, at: 46, df: 34, sa: 35, sd: 45, sp: 20 },\r\n        weightkg: 6,\r\n        nfe: true\r\n    },\r\n    Shuckle: {\r\n        types: ['Bug', 'Rock'],\r\n        bs: { hp: 20, at: 10, df: 230, sa: 10, sd: 230, sp: 5 },\r\n        weightkg: 20.5\r\n    },\r\n    Skarmory: {\r\n        types: ['Steel', 'Flying'],\r\n        bs: { hp: 65, at: 80, df: 140, sa: 40, sd: 70, sp: 70 },\r\n        weightkg: 50.5\r\n    },\r\n    Skiploom: {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 55, at: 45, df: 50, sa: 45, sd: 65, sp: 80 },\r\n        weightkg: 1,\r\n        nfe: true\r\n    },\r\n    Slowking: {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 95, at: 75, df: 80, sa: 100, sd: 110, sp: 30 },\r\n        weightkg: 79.5\r\n    },\r\n    Slugma: {\r\n        types: ['Fire'],\r\n        bs: { hp: 40, at: 40, df: 40, sa: 70, sd: 40, sp: 20 },\r\n        weightkg: 35,\r\n        nfe: true\r\n    },\r\n    Smeargle: { types: ['Normal'], bs: { hp: 55, at: 20, df: 35, sa: 20, sd: 45, sp: 75 }, weightkg: 58 },\r\n    Smoochum: {\r\n        types: ['Ice', 'Psychic'],\r\n        bs: { hp: 45, at: 30, df: 15, sa: 85, sd: 65, sp: 65 },\r\n        weightkg: 6,\r\n        nfe: true\r\n    },\r\n    Sneasel: {\r\n        types: ['Dark', 'Ice'],\r\n        bs: { hp: 55, at: 95, df: 55, sa: 35, sd: 75, sp: 115 },\r\n        weightkg: 28\r\n    },\r\n    Snubbull: {\r\n        types: ['Normal'],\r\n        bs: { hp: 60, at: 80, df: 50, sa: 40, sd: 40, sp: 30 },\r\n        weightkg: 7.8,\r\n        nfe: true\r\n    },\r\n    Spinarak: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 40, at: 60, df: 40, sa: 40, sd: 40, sp: 30 },\r\n        weightkg: 8.5,\r\n        nfe: true\r\n    },\r\n    Stantler: {\r\n        types: ['Normal'],\r\n        bs: { hp: 73, at: 95, df: 62, sa: 85, sd: 65, sp: 85 },\r\n        weightkg: 71.2\r\n    },\r\n    Steelix: {\r\n        types: ['Steel', 'Ground'],\r\n        bs: { hp: 75, at: 85, df: 200, sa: 55, sd: 65, sp: 30 },\r\n        weightkg: 400\r\n    },\r\n    Sudowoodo: {\r\n        types: ['Rock'],\r\n        bs: { hp: 70, at: 100, df: 115, sa: 30, sd: 65, sp: 30 },\r\n        weightkg: 38\r\n    },\r\n    Suicune: {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 75, df: 115, sa: 90, sd: 115, sp: 85 },\r\n        weightkg: 187,\r\n        gender: 'N'\r\n    },\r\n    Sunflora: {\r\n        types: ['Grass'],\r\n        bs: { hp: 75, at: 75, df: 55, sa: 105, sd: 85, sp: 30 },\r\n        weightkg: 8.5\r\n    },\r\n    Sunkern: {\r\n        types: ['Grass'],\r\n        bs: { hp: 30, at: 30, df: 30, sa: 30, sd: 30, sp: 30 },\r\n        weightkg: 1.8,\r\n        nfe: true\r\n    },\r\n    Swinub: {\r\n        types: ['Ice', 'Ground'],\r\n        bs: { hp: 50, at: 50, df: 40, sa: 30, sd: 30, sp: 50 },\r\n        weightkg: 6.5,\r\n        nfe: true\r\n    },\r\n    Teddiursa: {\r\n        types: ['Normal'],\r\n        bs: { hp: 60, at: 80, df: 50, sa: 50, sd: 50, sp: 40 },\r\n        weightkg: 8.8,\r\n        nfe: true\r\n    },\r\n    Togepi: {\r\n        types: ['Normal'],\r\n        bs: { hp: 35, at: 20, df: 65, sa: 40, sd: 65, sp: 20 },\r\n        weightkg: 1.5,\r\n        nfe: true\r\n    },\r\n    Togetic: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 55, at: 40, df: 85, sa: 80, sd: 105, sp: 40 },\r\n        weightkg: 3.2\r\n    },\r\n    Totodile: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 65, df: 64, sa: 44, sd: 48, sp: 43 },\r\n        weightkg: 9.5,\r\n        nfe: true\r\n    },\r\n    Typhlosion: {\r\n        types: ['Fire'],\r\n        bs: { hp: 78, at: 84, df: 78, sa: 109, sd: 85, sp: 100 },\r\n        weightkg: 79.5\r\n    },\r\n    Tyranitar: {\r\n        types: ['Rock', 'Dark'],\r\n        bs: { hp: 100, at: 134, df: 110, sa: 95, sd: 100, sp: 61 },\r\n        weightkg: 202\r\n    },\r\n    Tyrogue: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 35, at: 35, df: 35, sa: 35, sd: 35, sp: 35 },\r\n        weightkg: 21,\r\n        nfe: true\r\n    },\r\n    Umbreon: { types: ['Dark'], bs: { hp: 95, at: 65, df: 110, sa: 60, sd: 130, sp: 65 }, weightkg: 27 },\r\n    Unown: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 48, at: 72, df: 48, sa: 72, sd: 48, sp: 48 },\r\n        weightkg: 5,\r\n        gender: 'N'\r\n    },\r\n    Ursaring: {\r\n        types: ['Normal'],\r\n        bs: { hp: 90, at: 130, df: 75, sa: 75, sd: 75, sp: 55 },\r\n        weightkg: 125.8\r\n    },\r\n    Wobbuffet: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 190, at: 33, df: 58, sa: 33, sd: 58, sp: 33 },\r\n        weightkg: 28.5\r\n    },\r\n    Wooper: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 55, at: 45, df: 45, sa: 25, sd: 25, sp: 15 },\r\n        weightkg: 8.5,\r\n        nfe: true\r\n    },\r\n    Xatu: {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 65, at: 75, df: 70, sa: 95, sd: 70, sp: 95 },\r\n        weightkg: 15\r\n    },\r\n    Yanma: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 65, at: 65, df: 45, sa: 75, sd: 45, sp: 95 },\r\n        weightkg: 38\r\n    }\r\n};\r\nvar GSC = (0, util_1.extend)(true, {}, RBY, GSC_PATCH);\r\nvar ADV_PATCH = {\r\n    Abra: { abilities: { 0: 'Synchronize' } },\r\n    Aerodactyl: { abilities: { 0: 'Rock Head' } },\r\n    Alakazam: { abilities: { 0: 'Synchronize' } },\r\n    Arbok: { abilities: { 0: 'Intimidate' } },\r\n    Arcanine: { abilities: { 0: 'Intimidate' } },\r\n    Articuno: { abilities: { 0: 'Pressure' } },\r\n    Beedrill: { abilities: { 0: 'Swarm' } },\r\n    Bellsprout: { abilities: { 0: 'Chlorophyll' } },\r\n    Blastoise: { abilities: { 0: 'Torrent' } },\r\n    Bulbasaur: { abilities: { 0: 'Overgrow' } },\r\n    Butterfree: { abilities: { 0: 'Compound Eyes' } },\r\n    Caterpie: { abilities: { 0: 'Shield Dust' } },\r\n    Chansey: { abilities: { 0: 'Natural Cure' } },\r\n    Charizard: { abilities: { 0: 'Blaze' } },\r\n    Charmander: { abilities: { 0: 'Blaze' } },\r\n    Charmeleon: { abilities: { 0: 'Blaze' } },\r\n    Clefable: { abilities: { 0: 'Cute Charm' } },\r\n    Clefairy: { abilities: { 0: 'Cute Charm' } },\r\n    Cloyster: { abilities: { 0: 'Shell Armor' } },\r\n    Cubone: { abilities: { 0: 'Rock Head' } },\r\n    Dewgong: { abilities: { 0: 'Thick Fat' } },\r\n    Diglett: { abilities: { 0: 'Sand Veil' } },\r\n    Ditto: { abilities: { 0: 'Limber' } },\r\n    Dodrio: { abilities: { 0: 'Run Away' } },\r\n    Doduo: { abilities: { 0: 'Run Away' } },\r\n    Dragonair: { abilities: { 0: 'Shed Skin' } },\r\n    Dragonite: { abilities: { 0: 'Inner Focus' } },\r\n    Dratini: { abilities: { 0: 'Shed Skin' } },\r\n    Drowzee: { abilities: { 0: 'Insomnia' } },\r\n    Dugtrio: { abilities: { 0: 'Sand Veil' } },\r\n    Eevee: { abilities: { 0: 'Run Away' } },\r\n    Ekans: { abilities: { 0: 'Intimidate' } },\r\n    Electabuzz: { abilities: { 0: 'Static' } },\r\n    Electrode: { abilities: { 0: 'Soundproof' } },\r\n    Exeggcute: { abilities: { 0: 'Chlorophyll' } },\r\n    Exeggutor: { abilities: { 0: 'Chlorophyll' } },\r\n    'Farfetch\\u2019d': { abilities: { 0: 'Keen Eye' } },\r\n    Fearow: { abilities: { 0: 'Keen Eye' } },\r\n    Flareon: { abilities: { 0: 'Flash Fire' } },\r\n    Gastly: { abilities: { 0: 'Levitate' } },\r\n    Gengar: { abilities: { 0: 'Levitate' } },\r\n    Geodude: { abilities: { 0: 'Rock Head' } },\r\n    Gloom: { abilities: { 0: 'Chlorophyll' } },\r\n    Golbat: { abilities: { 0: 'Inner Focus' } },\r\n    Goldeen: { abilities: { 0: 'Swift Swim' } },\r\n    Golduck: { abilities: { 0: 'Damp' } },\r\n    Golem: { abilities: { 0: 'Rock Head' } },\r\n    Graveler: { abilities: { 0: 'Rock Head' } },\r\n    Grimer: { abilities: { 0: 'Stench' } },\r\n    Growlithe: { abilities: { 0: 'Intimidate' } },\r\n    Gyarados: { abilities: { 0: 'Intimidate' } },\r\n    Haunter: { abilities: { 0: 'Levitate' } },\r\n    Hitmonchan: { abilities: { 0: 'Keen Eye' } },\r\n    Hitmonlee: { abilities: { 0: 'Limber' } },\r\n    Horsea: { abilities: { 0: 'Swift Swim' } },\r\n    Hypno: { abilities: { 0: 'Insomnia' } },\r\n    Ivysaur: { abilities: { 0: 'Overgrow' } },\r\n    Jigglypuff: { abilities: { 0: 'Cute Charm' } },\r\n    Jolteon: { abilities: { 0: 'Volt Absorb' } },\r\n    Jynx: { abilities: { 0: 'Oblivious' } },\r\n    Kabuto: { abilities: { 0: 'Swift Swim' } },\r\n    Kabutops: { abilities: { 0: 'Swift Swim' } },\r\n    Kadabra: { abilities: { 0: 'Synchronize' } },\r\n    Kakuna: { abilities: { 0: 'Shed Skin' } },\r\n    Kangaskhan: { abilities: { 0: 'Early Bird' } },\r\n    Kingler: { abilities: { 0: 'Hyper Cutter' } },\r\n    Koffing: { abilities: { 0: 'Levitate' } },\r\n    Krabby: { abilities: { 0: 'Hyper Cutter' } },\r\n    Lapras: { abilities: { 0: 'Water Absorb' } },\r\n    Lickitung: { abilities: { 0: 'Own Tempo' } },\r\n    Machamp: { abilities: { 0: 'Guts' } },\r\n    Machoke: { abilities: { 0: 'Guts' } },\r\n    Machop: { abilities: { 0: 'Guts' } },\r\n    Magikarp: { abilities: { 0: 'Swift Swim' } },\r\n    Magmar: { abilities: { 0: 'Flame Body' } },\r\n    Magnemite: { abilities: { 0: 'Magnet Pull' } },\r\n    Magneton: { abilities: { 0: 'Magnet Pull' } },\r\n    Mankey: { abilities: { 0: 'Vital Spirit' } },\r\n    Marowak: { abilities: { 0: 'Rock Head' } },\r\n    Meowth: { abilities: { 0: 'Pickup' } },\r\n    Metapod: { abilities: { 0: 'Shed Skin' } },\r\n    Mew: { abilities: { 0: 'Synchronize' } },\r\n    Mewtwo: { abilities: { 0: 'Pressure' } },\r\n    Moltres: { abilities: { 0: 'Pressure' } },\r\n    'Mr. Mime': { abilities: { 0: 'Soundproof' } },\r\n    Muk: { abilities: { 0: 'Stench' } },\r\n    Nidoking: { abilities: { 0: 'Poison Point' } },\r\n    Nidoqueen: { abilities: { 0: 'Poison Point' } },\r\n    'Nidoran-F': { abilities: { 0: 'Poison Point' } },\r\n    'Nidoran-M': { abilities: { 0: 'Poison Point' } },\r\n    Nidorina: { abilities: { 0: 'Poison Point' } },\r\n    Nidorino: { abilities: { 0: 'Poison Point' } },\r\n    Ninetales: { abilities: { 0: 'Flash Fire' } },\r\n    Oddish: { abilities: { 0: 'Chlorophyll' } },\r\n    Omanyte: { abilities: { 0: 'Swift Swim' } },\r\n    Omastar: { abilities: { 0: 'Swift Swim' } },\r\n    Onix: { abilities: { 0: 'Rock Head' } },\r\n    Paras: { abilities: { 0: 'Effect Spore' } },\r\n    Parasect: { abilities: { 0: 'Effect Spore' } },\r\n    Persian: { abilities: { 0: 'Limber' } },\r\n    Pidgeot: { abilities: { 0: 'Keen Eye' } },\r\n    Pidgeotto: { abilities: { 0: 'Keen Eye' } },\r\n    Pidgey: { abilities: { 0: 'Keen Eye' } },\r\n    Pikachu: { abilities: { 0: 'Static' } },\r\n    Pinsir: { abilities: { 0: 'Hyper Cutter' } },\r\n    Poliwag: { abilities: { 0: 'Water Absorb' } },\r\n    Poliwhirl: { abilities: { 0: 'Water Absorb' } },\r\n    Poliwrath: { abilities: { 0: 'Water Absorb' } },\r\n    Ponyta: { abilities: { 0: 'Run Away' } },\r\n    Porygon: { abilities: { 0: 'Trace' } },\r\n    Primeape: { abilities: { 0: 'Vital Spirit' } },\r\n    Psyduck: { abilities: { 0: 'Damp' } },\r\n    Raichu: { abilities: { 0: 'Static' } },\r\n    Rapidash: { abilities: { 0: 'Run Away' } },\r\n    Raticate: { abilities: { 0: 'Run Away' } },\r\n    Rattata: { abilities: { 0: 'Run Away' } },\r\n    Rhydon: { abilities: { 0: 'Lightning Rod' } },\r\n    Rhyhorn: { abilities: { 0: 'Lightning Rod' } },\r\n    Sandshrew: { abilities: { 0: 'Sand Veil' } },\r\n    Sandslash: { abilities: { 0: 'Sand Veil' } },\r\n    Scyther: { abilities: { 0: 'Swarm' } },\r\n    Seadra: { abilities: { 0: 'Poison Point' } },\r\n    Seaking: { abilities: { 0: 'Swift Swim' } },\r\n    Seel: { abilities: { 0: 'Thick Fat' } },\r\n    Shellder: { abilities: { 0: 'Shell Armor' } },\r\n    Slowbro: { abilities: { 0: 'Oblivious' } },\r\n    Slowpoke: { abilities: { 0: 'Oblivious' } },\r\n    Snorlax: { abilities: { 0: 'Immunity' } },\r\n    Spearow: { abilities: { 0: 'Keen Eye' } },\r\n    Squirtle: { abilities: { 0: 'Torrent' } },\r\n    Starmie: { abilities: { 0: 'Illuminate' } },\r\n    Staryu: { abilities: { 0: 'Illuminate' } },\r\n    Tangela: { abilities: { 0: 'Chlorophyll' } },\r\n    Tauros: { abilities: { 0: 'Intimidate' } },\r\n    Tentacool: { abilities: { 0: 'Clear Body' } },\r\n    Tentacruel: { abilities: { 0: 'Clear Body' } },\r\n    Vaporeon: { abilities: { 0: 'Water Absorb' } },\r\n    Venomoth: { abilities: { 0: 'Shield Dust' } },\r\n    Venonat: { abilities: { 0: 'Compound Eyes' } },\r\n    Venusaur: { abilities: { 0: 'Overgrow' } },\r\n    Victreebel: { abilities: { 0: 'Chlorophyll' } },\r\n    Vileplume: { abilities: { 0: 'Chlorophyll' } },\r\n    Voltorb: { abilities: { 0: 'Soundproof' } },\r\n    Vulpix: { abilities: { 0: 'Flash Fire' } },\r\n    Wartortle: { abilities: { 0: 'Torrent' } },\r\n    Weedle: { abilities: { 0: 'Shield Dust' } },\r\n    Weepinbell: { abilities: { 0: 'Chlorophyll' } },\r\n    Weezing: { abilities: { 0: 'Levitate' } },\r\n    Wigglytuff: { abilities: { 0: 'Cute Charm' } },\r\n    Zapdos: { abilities: { 0: 'Pressure' } },\r\n    Zubat: { abilities: { 0: 'Inner Focus' } },\r\n    Aipom: { abilities: { 0: 'Run Away' } },\r\n    Ampharos: { abilities: { 0: 'Static' } },\r\n    Ariados: { abilities: { 0: 'Swarm' } },\r\n    Azumarill: { abilities: { 0: 'Thick Fat' } },\r\n    Bayleef: { abilities: { 0: 'Overgrow' } },\r\n    Bellossom: { abilities: { 0: 'Chlorophyll' } },\r\n    Blissey: { abilities: { 0: 'Natural Cure' } },\r\n    Celebi: { abilities: { 0: 'Natural Cure' } },\r\n    Chikorita: { abilities: { 0: 'Overgrow' } },\r\n    Chinchou: { abilities: { 0: 'Volt Absorb' } },\r\n    Cleffa: { abilities: { 0: 'Cute Charm' } },\r\n    Corsola: { abilities: { 0: 'Hustle' } },\r\n    Crobat: { abilities: { 0: 'Inner Focus' } },\r\n    Croconaw: { abilities: { 0: 'Torrent' } },\r\n    Cyndaquil: { abilities: { 0: 'Blaze' } },\r\n    Delibird: { abilities: { 0: 'Vital Spirit' } },\r\n    Donphan: { abilities: { 0: 'Sturdy' } },\r\n    Dunsparce: { abilities: { 0: 'Serene Grace' } },\r\n    Elekid: { abilities: { 0: 'Static' } },\r\n    Entei: { abilities: { 0: 'Pressure' } },\r\n    Espeon: { abilities: { 0: 'Synchronize' } },\r\n    Feraligatr: { abilities: { 0: 'Torrent' } },\r\n    Flaaffy: { abilities: { 0: 'Static' } },\r\n    Forretress: { abilities: { 0: 'Sturdy' } },\r\n    Furret: { abilities: { 0: 'Run Away' } },\r\n    Girafarig: { abilities: { 0: 'Inner Focus' } },\r\n    Gligar: { abilities: { 0: 'Hyper Cutter' } },\r\n    Granbull: { abilities: { 0: 'Intimidate' } },\r\n    Heracross: { abilities: { 0: 'Swarm' } },\r\n    Hitmontop: { abilities: { 0: 'Intimidate' } },\r\n    'Ho-Oh': { abilities: { 0: 'Pressure' } },\r\n    Hoothoot: { abilities: { 0: 'Insomnia' } },\r\n    Hoppip: { abilities: { 0: 'Chlorophyll' } },\r\n    Houndoom: { abilities: { 0: 'Early Bird' } },\r\n    Houndour: { abilities: { 0: 'Early Bird' } },\r\n    Igglybuff: { abilities: { 0: 'Cute Charm' } },\r\n    Jumpluff: { abilities: { 0: 'Chlorophyll' } },\r\n    Kingdra: { abilities: { 0: 'Swift Swim' } },\r\n    Lanturn: { abilities: { 0: 'Volt Absorb' } },\r\n    Larvitar: { abilities: { 0: 'Guts' } },\r\n    Ledian: { abilities: { 0: 'Swarm' } },\r\n    Ledyba: { abilities: { 0: 'Swarm' } },\r\n    Lugia: { abilities: { 0: 'Pressure' } },\r\n    Magby: { abilities: { 0: 'Flame Body' } },\r\n    Magcargo: { abilities: { 0: 'Magma Armor' } },\r\n    Mantine: { abilities: { 0: 'Swift Swim' } },\r\n    Mareep: { abilities: { 0: 'Static' } },\r\n    Marill: { abilities: { 0: 'Thick Fat' } },\r\n    Meganium: { abilities: { 0: 'Overgrow' } },\r\n    Miltank: { abilities: { 0: 'Thick Fat' } },\r\n    Misdreavus: { abilities: { 0: 'Levitate' } },\r\n    Murkrow: { abilities: { 0: 'Insomnia' } },\r\n    Natu: { abilities: { 0: 'Synchronize' } },\r\n    Noctowl: { abilities: { 0: 'Insomnia' } },\r\n    Octillery: { abilities: { 0: 'Suction Cups' } },\r\n    Phanpy: { abilities: { 0: 'Pickup' } },\r\n    Pichu: { abilities: { 0: 'Static' } },\r\n    Piloswine: { abilities: { 0: 'Oblivious' } },\r\n    Pineco: { abilities: { 0: 'Sturdy' } },\r\n    Politoed: { abilities: { 0: 'Water Absorb' } },\r\n    Porygon2: { abilities: { 0: 'Trace' } },\r\n    Pupitar: { abilities: { 0: 'Shed Skin' } },\r\n    Quagsire: { abilities: { 0: 'Damp' } },\r\n    Quilava: { abilities: { 0: 'Blaze' } },\r\n    Qwilfish: { abilities: { 0: 'Poison Point' } },\r\n    Raikou: { abilities: { 0: 'Pressure' } },\r\n    Remoraid: { abilities: { 0: 'Hustle' } },\r\n    Scizor: { abilities: { 0: 'Swarm' } },\r\n    Sentret: { abilities: { 0: 'Run Away' } },\r\n    Shuckle: { abilities: { 0: 'Sturdy' } },\r\n    Skarmory: { abilities: { 0: 'Keen Eye' } },\r\n    Skiploom: { abilities: { 0: 'Chlorophyll' } },\r\n    Slowking: { abilities: { 0: 'Oblivious' } },\r\n    Slugma: { abilities: { 0: 'Magma Armor' } },\r\n    Smeargle: { abilities: { 0: 'Own Tempo' } },\r\n    Smoochum: { abilities: { 0: 'Oblivious' } },\r\n    Sneasel: { abilities: { 0: 'Inner Focus' } },\r\n    Snubbull: { abilities: { 0: 'Intimidate' } },\r\n    Spinarak: { abilities: { 0: 'Swarm' } },\r\n    Stantler: { abilities: { 0: 'Intimidate' } },\r\n    Steelix: { abilities: { 0: 'Rock Head' } },\r\n    Sudowoodo: { abilities: { 0: 'Sturdy' } },\r\n    Suicune: { abilities: { 0: 'Pressure' } },\r\n    Sunflora: { abilities: { 0: 'Chlorophyll' } },\r\n    Sunkern: { abilities: { 0: 'Chlorophyll' } },\r\n    Swinub: { abilities: { 0: 'Oblivious' } },\r\n    Teddiursa: { abilities: { 0: 'Pickup' } },\r\n    Togepi: { abilities: { 0: 'Hustle' } },\r\n    Togetic: { abilities: { 0: 'Hustle' } },\r\n    Totodile: { abilities: { 0: 'Torrent' } },\r\n    Typhlosion: { abilities: { 0: 'Blaze' } },\r\n    Tyranitar: { abilities: { 0: 'Sand Stream' } },\r\n    Tyrogue: { abilities: { 0: 'Guts' } },\r\n    Umbreon: { abilities: { 0: 'Synchronize' } },\r\n    Unown: { abilities: { 0: 'Levitate' } },\r\n    Ursaring: { abilities: { 0: 'Guts' } },\r\n    Wobbuffet: { abilities: { 0: 'Shadow Tag' } },\r\n    Wooper: { abilities: { 0: 'Damp' } },\r\n    Xatu: { abilities: { 0: 'Synchronize' } },\r\n    Yanma: { abilities: { 0: 'Speed Boost' } },\r\n    Absol: {\r\n        types: ['Dark'],\r\n        bs: { hp: 65, at: 130, df: 60, sa: 75, sd: 60, sp: 75 },\r\n        weightkg: 47,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Aggron: {\r\n        types: ['Steel', 'Rock'],\r\n        bs: { hp: 70, at: 110, df: 180, sa: 60, sd: 60, sp: 50 },\r\n        weightkg: 360,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Altaria: {\r\n        types: ['Dragon', 'Flying'],\r\n        bs: { hp: 75, at: 70, df: 90, sa: 70, sd: 105, sp: 80 },\r\n        weightkg: 20.6,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Anorith: {\r\n        types: ['Rock', 'Bug'],\r\n        bs: { hp: 45, at: 95, df: 50, sa: 40, sd: 50, sp: 75 },\r\n        weightkg: 12.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Battle Armor' }\r\n    },\r\n    Armaldo: {\r\n        types: ['Rock', 'Bug'],\r\n        bs: { hp: 75, at: 125, df: 100, sa: 70, sd: 80, sp: 45 },\r\n        weightkg: 68.2,\r\n        abilities: { 0: 'Battle Armor' }\r\n    },\r\n    Aron: {\r\n        types: ['Steel', 'Rock'],\r\n        bs: { hp: 50, at: 70, df: 100, sa: 40, sd: 40, sp: 30 },\r\n        weightkg: 60,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Azurill: {\r\n        types: ['Normal'],\r\n        bs: { hp: 50, at: 20, df: 40, sa: 20, sd: 40, sp: 20 },\r\n        weightkg: 2,\r\n        nfe: true,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Bagon: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 45, at: 75, df: 60, sa: 40, sd: 30, sp: 50 },\r\n        weightkg: 42.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Rock Head' }\r\n    },\r\n    Baltoy: {\r\n        types: ['Ground', 'Psychic'],\r\n        bs: { hp: 40, at: 40, df: 55, sa: 40, sd: 70, sp: 55 },\r\n        weightkg: 21.5,\r\n        abilities: { 0: 'Levitate' },\r\n        nfe: true,\r\n        gender: 'N'\r\n    },\r\n    Banette: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 64, at: 115, df: 65, sa: 83, sd: 63, sp: 65 },\r\n        weightkg: 12.5,\r\n        abilities: { 0: 'Insomnia' }\r\n    },\r\n    Barboach: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 50, at: 48, df: 43, sa: 46, sd: 41, sp: 60 },\r\n        weightkg: 1.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Oblivious' }\r\n    },\r\n    Beautifly: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 60, at: 70, df: 50, sa: 90, sd: 50, sp: 65 },\r\n        weightkg: 28.4,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Beldum: {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 40, at: 55, df: 80, sa: 35, sd: 60, sp: 30 },\r\n        weightkg: 95.2,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Blaziken: {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 80, at: 120, df: 70, sa: 110, sd: 70, sp: 80 },\r\n        weightkg: 52,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Breloom: {\r\n        types: ['Grass', 'Fighting'],\r\n        bs: { hp: 60, at: 130, df: 80, sa: 60, sd: 60, sp: 70 },\r\n        weightkg: 39.2,\r\n        abilities: { 0: 'Effect Spore' }\r\n    },\r\n    Cacnea: {\r\n        types: ['Grass'],\r\n        bs: { hp: 50, at: 85, df: 40, sa: 85, sd: 40, sp: 35 },\r\n        weightkg: 51.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    Cacturne: {\r\n        types: ['Grass', 'Dark'],\r\n        bs: { hp: 70, at: 115, df: 60, sa: 115, sd: 60, sp: 55 },\r\n        weightkg: 77.4,\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    Camerupt: {\r\n        types: ['Fire', 'Ground'],\r\n        bs: { hp: 70, at: 100, df: 70, sa: 105, sd: 75, sp: 40 },\r\n        weightkg: 220,\r\n        abilities: { 0: 'Magma Armor' }\r\n    },\r\n    Carvanha: {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 45, at: 90, df: 20, sa: 65, sd: 20, sp: 65 },\r\n        weightkg: 20.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Rough Skin' }\r\n    },\r\n    Cascoon: {\r\n        types: ['Bug'],\r\n        bs: { hp: 50, at: 35, df: 55, sa: 25, sd: 25, sp: 15 },\r\n        weightkg: 11.5,\r\n        abilities: { 0: 'Shed Skin' },\r\n        nfe: true\r\n    },\r\n    Castform: {\r\n        types: ['Normal'],\r\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\r\n        weightkg: 0.8,\r\n        abilities: { 0: 'Forecast' },\r\n        otherFormes: ['Castform-Rainy', 'Castform-Snowy', 'Castform-Sunny']\r\n    },\r\n    'Castform-Rainy': {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\r\n        weightkg: 0.8,\r\n        abilities: { 0: 'Forecast' },\r\n        baseSpecies: 'Castform'\r\n    },\r\n    'Castform-Snowy': {\r\n        types: ['Ice'],\r\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\r\n        weightkg: 0.8,\r\n        abilities: { 0: 'Forecast' },\r\n        baseSpecies: 'Castform'\r\n    },\r\n    'Castform-Sunny': {\r\n        types: ['Fire'],\r\n        bs: { hp: 70, at: 70, df: 70, sa: 70, sd: 70, sp: 70 },\r\n        weightkg: 0.8,\r\n        abilities: { 0: 'Forecast' },\r\n        baseSpecies: 'Castform'\r\n    },\r\n    Chimecho: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 65, at: 50, df: 70, sa: 95, sd: 80, sp: 65 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Clamperl: {\r\n        types: ['Water'],\r\n        bs: { hp: 35, at: 64, df: 85, sa: 74, sd: 55, sp: 32 },\r\n        weightkg: 52.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Shell Armor' }\r\n    },\r\n    Claydol: {\r\n        types: ['Ground', 'Psychic'],\r\n        bs: { hp: 60, at: 70, df: 105, sa: 70, sd: 120, sp: 75 },\r\n        weightkg: 108,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Combusken: {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 60, at: 85, df: 60, sa: 85, sd: 60, sp: 55 },\r\n        weightkg: 19.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Corphish: {\r\n        types: ['Water'],\r\n        bs: { hp: 43, at: 80, df: 65, sa: 50, sd: 35, sp: 35 },\r\n        weightkg: 11.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Cradily: {\r\n        types: ['Rock', 'Grass'],\r\n        bs: { hp: 86, at: 81, df: 97, sa: 81, sd: 107, sp: 43 },\r\n        weightkg: 60.4,\r\n        abilities: { 0: 'Suction Cups' }\r\n    },\r\n    Crawdaunt: {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 63, at: 120, df: 85, sa: 90, sd: 55, sp: 55 },\r\n        weightkg: 32.8,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Delcatty: {\r\n        types: ['Normal'],\r\n        bs: { hp: 70, at: 65, df: 65, sa: 55, sd: 55, sp: 70 },\r\n        weightkg: 32.6,\r\n        abilities: { 0: 'Cute Charm' }\r\n    },\r\n    Deoxys: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 50, at: 150, df: 50, sa: 150, sd: 50, sp: 150 },\r\n        weightkg: 60.8,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        otherFormes: ['Deoxys-Attack', 'Deoxys-Defense', 'Deoxys-Speed']\r\n    },\r\n    'Deoxys-Attack': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 50, at: 180, df: 20, sa: 180, sd: 20, sp: 150 },\r\n        weightkg: 60.8,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        baseSpecies: 'Deoxys'\r\n    },\r\n    'Deoxys-Defense': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 50, at: 70, df: 160, sa: 70, sd: 160, sp: 90 },\r\n        weightkg: 60.8,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        baseSpecies: 'Deoxys'\r\n    },\r\n    'Deoxys-Speed': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 50, at: 95, df: 90, sa: 95, sd: 90, sp: 180 },\r\n        weightkg: 60.8,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        baseSpecies: 'Deoxys'\r\n    },\r\n    Dusclops: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 40, at: 70, df: 130, sa: 60, sd: 130, sp: 25 },\r\n        weightkg: 30.6,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Duskull: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 20, at: 40, df: 90, sa: 30, sd: 90, sp: 25 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Dustox: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 60, at: 50, df: 70, sa: 50, sd: 90, sp: 65 },\r\n        weightkg: 31.6,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Electrike: {\r\n        types: ['Electric'],\r\n        bs: { hp: 40, at: 45, df: 40, sa: 65, sd: 40, sp: 65 },\r\n        weightkg: 15.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Static' }\r\n    },\r\n    Exploud: {\r\n        types: ['Normal'],\r\n        bs: { hp: 104, at: 91, df: 63, sa: 91, sd: 63, sp: 68 },\r\n        weightkg: 84,\r\n        abilities: { 0: 'Soundproof' }\r\n    },\r\n    Feebas: {\r\n        types: ['Water'],\r\n        bs: { hp: 20, at: 15, df: 20, sa: 10, sd: 55, sp: 80 },\r\n        weightkg: 7.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Flygon: {\r\n        types: ['Ground', 'Dragon'],\r\n        bs: { hp: 80, at: 100, df: 80, sa: 80, sd: 80, sp: 100 },\r\n        weightkg: 82,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Gardevoir: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 68, at: 65, df: 65, sa: 125, sd: 115, sp: 80 },\r\n        weightkg: 48.4,\r\n        abilities: { 0: 'Synchronize' }\r\n    },\r\n    Glalie: {\r\n        types: ['Ice'],\r\n        bs: { hp: 80, at: 80, df: 80, sa: 80, sd: 80, sp: 80 },\r\n        weightkg: 256.5,\r\n        abilities: { 0: 'Inner Focus' }\r\n    },\r\n    Gorebyss: {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 84, df: 105, sa: 114, sd: 75, sp: 52 },\r\n        weightkg: 22.6,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Groudon: {\r\n        types: ['Ground'],\r\n        bs: { hp: 100, at: 150, df: 140, sa: 100, sd: 90, sp: 90 },\r\n        weightkg: 950,\r\n        abilities: { 0: 'Drought' },\r\n        gender: 'N'\r\n    },\r\n    Grovyle: {\r\n        types: ['Grass'],\r\n        bs: { hp: 50, at: 65, df: 45, sa: 85, sd: 65, sp: 95 },\r\n        weightkg: 21.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Grumpig: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 80, at: 45, df: 65, sa: 90, sd: 110, sp: 80 },\r\n        weightkg: 71.5,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Gulpin: {\r\n        types: ['Poison'],\r\n        bs: { hp: 70, at: 43, df: 53, sa: 43, sd: 53, sp: 40 },\r\n        weightkg: 10.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Liquid Ooze' }\r\n    },\r\n    Hariyama: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 144, at: 120, df: 60, sa: 40, sd: 60, sp: 50 },\r\n        weightkg: 253.8,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Huntail: {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 104, df: 105, sa: 94, sd: 75, sp: 52 },\r\n        weightkg: 27,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Illumise: {\r\n        types: ['Bug'],\r\n        bs: { hp: 65, at: 47, df: 55, sa: 73, sd: 75, sp: 85 },\r\n        abilities: { 0: 'Oblivious' },\r\n        weightkg: 17.7\r\n    },\r\n    Jirachi: {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\r\n        weightkg: 1.1,\r\n        abilities: { 0: 'Serene Grace' },\r\n        gender: 'N'\r\n    },\r\n    Kecleon: {\r\n        types: ['Normal'],\r\n        bs: { hp: 60, at: 90, df: 70, sa: 60, sd: 120, sp: 40 },\r\n        weightkg: 22,\r\n        abilities: { 0: 'Color Change' }\r\n    },\r\n    Kirlia: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 38, at: 35, df: 35, sa: 65, sd: 55, sp: 50 },\r\n        weightkg: 20.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Synchronize' }\r\n    },\r\n    Kyogre: {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 100, df: 90, sa: 150, sd: 140, sp: 90 },\r\n        weightkg: 352,\r\n        abilities: { 0: 'Drizzle' },\r\n        gender: 'N'\r\n    },\r\n    Lairon: {\r\n        types: ['Steel', 'Rock'],\r\n        bs: { hp: 60, at: 90, df: 140, sa: 50, sd: 50, sp: 40 },\r\n        weightkg: 120,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Latias: {\r\n        types: ['Dragon', 'Psychic'],\r\n        bs: { hp: 80, at: 80, df: 90, sa: 110, sd: 130, sp: 110 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Latios: {\r\n        types: ['Dragon', 'Psychic'],\r\n        bs: { hp: 80, at: 90, df: 80, sa: 130, sd: 110, sp: 110 },\r\n        weightkg: 60,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Lileep: {\r\n        types: ['Rock', 'Grass'],\r\n        bs: { hp: 66, at: 41, df: 77, sa: 61, sd: 87, sp: 23 },\r\n        weightkg: 23.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Suction Cups' }\r\n    },\r\n    Linoone: {\r\n        types: ['Normal'],\r\n        bs: { hp: 78, at: 70, df: 61, sa: 50, sd: 61, sp: 100 },\r\n        weightkg: 32.5,\r\n        abilities: { 0: 'Pickup' }\r\n    },\r\n    Lombre: {\r\n        types: ['Water', 'Grass'],\r\n        bs: { hp: 60, at: 50, df: 50, sa: 60, sd: 70, sp: 50 },\r\n        weightkg: 32.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Lotad: {\r\n        types: ['Water', 'Grass'],\r\n        bs: { hp: 40, at: 30, df: 30, sa: 40, sd: 50, sp: 30 },\r\n        weightkg: 2.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Loudred: {\r\n        types: ['Normal'],\r\n        bs: { hp: 84, at: 71, df: 43, sa: 71, sd: 43, sp: 48 },\r\n        weightkg: 40.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Soundproof' }\r\n    },\r\n    Ludicolo: {\r\n        types: ['Water', 'Grass'],\r\n        bs: { hp: 80, at: 70, df: 70, sa: 90, sd: 100, sp: 70 },\r\n        weightkg: 55,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Lunatone: {\r\n        types: ['Rock', 'Psychic'],\r\n        bs: { hp: 70, at: 55, df: 65, sa: 95, sd: 85, sp: 70 },\r\n        weightkg: 168,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Luvdisc: {\r\n        types: ['Water'],\r\n        bs: { hp: 43, at: 30, df: 55, sa: 40, sd: 65, sp: 97 },\r\n        weightkg: 8.7,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Makuhita: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 72, at: 60, df: 30, sa: 20, sd: 30, sp: 25 },\r\n        weightkg: 86.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Manectric: {\r\n        types: ['Electric'],\r\n        bs: { hp: 70, at: 75, df: 60, sa: 105, sd: 60, sp: 105 },\r\n        weightkg: 40.2,\r\n        abilities: { 0: 'Static' }\r\n    },\r\n    Marshtomp: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 70, at: 85, df: 70, sa: 60, sd: 70, sp: 50 },\r\n        weightkg: 28,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Masquerain: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 70, at: 60, df: 62, sa: 80, sd: 82, sp: 60 },\r\n        weightkg: 3.6,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Mawile: {\r\n        types: ['Steel'],\r\n        bs: { hp: 50, at: 85, df: 85, sa: 55, sd: 55, sp: 50 },\r\n        weightkg: 11.5,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Medicham: {\r\n        types: ['Fighting', 'Psychic'],\r\n        bs: { hp: 60, at: 60, df: 75, sa: 60, sd: 75, sp: 80 },\r\n        weightkg: 31.5,\r\n        abilities: { 0: 'Pure Power' }\r\n    },\r\n    Meditite: {\r\n        types: ['Fighting', 'Psychic'],\r\n        bs: { hp: 30, at: 40, df: 55, sa: 40, sd: 55, sp: 60 },\r\n        weightkg: 11.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Pure Power' }\r\n    },\r\n    Metagross: {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 80, at: 135, df: 130, sa: 95, sd: 90, sp: 70 },\r\n        weightkg: 550,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Metang: {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 60, at: 75, df: 100, sa: 55, sd: 80, sp: 50 },\r\n        weightkg: 202.5,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Mightyena: {\r\n        types: ['Dark'],\r\n        bs: { hp: 70, at: 90, df: 70, sa: 60, sd: 60, sp: 70 },\r\n        weightkg: 37,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Milotic: {\r\n        types: ['Water'],\r\n        bs: { hp: 95, at: 60, df: 79, sa: 100, sd: 125, sp: 81 },\r\n        weightkg: 162,\r\n        abilities: { 0: 'Marvel Scale' }\r\n    },\r\n    Minun: {\r\n        types: ['Electric'],\r\n        bs: { hp: 60, at: 40, df: 50, sa: 75, sd: 85, sp: 95 },\r\n        weightkg: 4.2,\r\n        abilities: { 0: 'Minus' }\r\n    },\r\n    Mudkip: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 70, df: 50, sa: 50, sd: 50, sp: 40 },\r\n        weightkg: 7.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Nincada: {\r\n        types: ['Bug', 'Ground'],\r\n        bs: { hp: 31, at: 45, df: 90, sa: 30, sd: 30, sp: 40 },\r\n        weightkg: 5.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Compound Eyes' }\r\n    },\r\n    Ninjask: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 61, at: 90, df: 45, sa: 50, sd: 50, sp: 160 },\r\n        weightkg: 12,\r\n        abilities: { 0: 'Speed Boost' }\r\n    },\r\n    Nosepass: {\r\n        types: ['Rock'],\r\n        bs: { hp: 30, at: 45, df: 135, sa: 45, sd: 90, sp: 30 },\r\n        weightkg: 97,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Numel: {\r\n        types: ['Fire', 'Ground'],\r\n        bs: { hp: 60, at: 60, df: 40, sa: 65, sd: 45, sp: 35 },\r\n        weightkg: 24,\r\n        nfe: true,\r\n        abilities: { 0: 'Oblivious' }\r\n    },\r\n    Nuzleaf: {\r\n        types: ['Grass', 'Dark'],\r\n        bs: { hp: 70, at: 70, df: 40, sa: 60, sd: 40, sp: 60 },\r\n        weightkg: 28,\r\n        nfe: true,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Pelipper: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 60, at: 50, df: 100, sa: 85, sd: 70, sp: 65 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Plusle: {\r\n        types: ['Electric'],\r\n        bs: { hp: 60, at: 50, df: 40, sa: 85, sd: 75, sp: 95 },\r\n        weightkg: 4.2,\r\n        abilities: { 0: 'Plus' }\r\n    },\r\n    Poochyena: {\r\n        types: ['Dark'],\r\n        bs: { hp: 35, at: 55, df: 35, sa: 30, sd: 30, sp: 35 },\r\n        weightkg: 13.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Run Away' }\r\n    },\r\n    Ralts: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 28, at: 25, df: 25, sa: 45, sd: 35, sp: 40 },\r\n        weightkg: 6.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Synchronize' }\r\n    },\r\n    Rayquaza: {\r\n        types: ['Dragon', 'Flying'],\r\n        bs: { hp: 105, at: 150, df: 90, sa: 150, sd: 90, sp: 95 },\r\n        weightkg: 206.5,\r\n        abilities: { 0: 'Air Lock' },\r\n        gender: 'N'\r\n    },\r\n    Regice: {\r\n        types: ['Ice'],\r\n        bs: { hp: 80, at: 50, df: 100, sa: 100, sd: 200, sp: 50 },\r\n        weightkg: 175,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Regirock: {\r\n        types: ['Rock'],\r\n        bs: { hp: 80, at: 100, df: 200, sa: 50, sd: 100, sp: 50 },\r\n        weightkg: 230,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Registeel: {\r\n        types: ['Steel'],\r\n        bs: { hp: 80, at: 75, df: 150, sa: 75, sd: 150, sp: 50 },\r\n        weightkg: 205,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Relicanth: {\r\n        types: ['Water', 'Rock'],\r\n        bs: { hp: 100, at: 90, df: 130, sa: 45, sd: 65, sp: 55 },\r\n        weightkg: 23.4,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Roselia: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 50, at: 60, df: 45, sa: 100, sd: 80, sp: 65 },\r\n        weightkg: 2,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Sableye: {\r\n        types: ['Dark', 'Ghost'],\r\n        bs: { hp: 50, at: 75, df: 75, sa: 65, sd: 65, sp: 50 },\r\n        weightkg: 11,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Salamence: {\r\n        types: ['Dragon', 'Flying'],\r\n        bs: { hp: 95, at: 135, df: 80, sa: 110, sd: 80, sp: 100 },\r\n        weightkg: 102.6,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Sceptile: {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 85, df: 65, sa: 105, sd: 85, sp: 120 },\r\n        weightkg: 52.2,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Sealeo: {\r\n        types: ['Ice', 'Water'],\r\n        bs: { hp: 90, at: 60, df: 70, sa: 75, sd: 70, sp: 45 },\r\n        weightkg: 87.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Seedot: {\r\n        types: ['Grass'],\r\n        bs: { hp: 40, at: 40, df: 50, sa: 30, sd: 30, sp: 30 },\r\n        weightkg: 4,\r\n        nfe: true,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Seviper: {\r\n        types: ['Poison'],\r\n        bs: { hp: 73, at: 100, df: 60, sa: 100, sd: 60, sp: 65 },\r\n        weightkg: 52.5,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Sharpedo: {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 70, at: 120, df: 40, sa: 95, sd: 40, sp: 95 },\r\n        weightkg: 88.8,\r\n        abilities: { 0: 'Rough Skin' }\r\n    },\r\n    Shedinja: {\r\n        types: ['Bug', 'Ghost'],\r\n        bs: { hp: 1, at: 90, df: 45, sa: 30, sd: 30, sp: 40 },\r\n        weightkg: 1.2,\r\n        abilities: { 0: 'Wonder Guard' },\r\n        gender: 'N'\r\n    },\r\n    Shelgon: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 65, at: 95, df: 100, sa: 60, sd: 50, sp: 50 },\r\n        weightkg: 110.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Rock Head' }\r\n    },\r\n    Shiftry: {\r\n        types: ['Grass', 'Dark'],\r\n        bs: { hp: 90, at: 100, df: 60, sa: 90, sd: 60, sp: 80 },\r\n        weightkg: 59.6,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Shroomish: {\r\n        types: ['Grass'],\r\n        bs: { hp: 60, at: 40, df: 60, sa: 40, sd: 60, sp: 35 },\r\n        weightkg: 4.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Effect Spore' }\r\n    },\r\n    Shuppet: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 44, at: 75, df: 35, sa: 63, sd: 33, sp: 45 },\r\n        weightkg: 2.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Insomnia' }\r\n    },\r\n    Silcoon: {\r\n        types: ['Bug'],\r\n        bs: { hp: 50, at: 35, df: 55, sa: 25, sd: 25, sp: 15 },\r\n        weightkg: 10,\r\n        abilities: { 0: 'Shed Skin' },\r\n        nfe: true\r\n    },\r\n    Skitty: {\r\n        types: ['Normal'],\r\n        bs: { hp: 50, at: 45, df: 45, sa: 35, sd: 35, sp: 50 },\r\n        weightkg: 11,\r\n        nfe: true,\r\n        abilities: { 0: 'Cute Charm' }\r\n    },\r\n    Slaking: {\r\n        types: ['Normal'],\r\n        bs: { hp: 150, at: 160, df: 100, sa: 95, sd: 65, sp: 100 },\r\n        weightkg: 130.5,\r\n        abilities: { 0: 'Truant' }\r\n    },\r\n    Slakoth: {\r\n        types: ['Normal'],\r\n        bs: { hp: 60, at: 60, df: 60, sa: 35, sd: 35, sp: 30 },\r\n        weightkg: 24,\r\n        abilities: { 0: 'Truant' },\r\n        nfe: true\r\n    },\r\n    Snorunt: {\r\n        types: ['Ice'],\r\n        bs: { hp: 50, at: 50, df: 50, sa: 50, sd: 50, sp: 50 },\r\n        weightkg: 16.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Inner Focus' }\r\n    },\r\n    Solrock: {\r\n        types: ['Rock', 'Psychic'],\r\n        bs: { hp: 70, at: 95, df: 85, sa: 55, sd: 65, sp: 70 },\r\n        weightkg: 154,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Spheal: {\r\n        types: ['Ice', 'Water'],\r\n        bs: { hp: 70, at: 40, df: 50, sa: 55, sd: 50, sp: 25 },\r\n        weightkg: 39.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Spinda: {\r\n        types: ['Normal'],\r\n        bs: { hp: 60, at: 60, df: 60, sa: 60, sd: 60, sp: 60 },\r\n        weightkg: 5,\r\n        abilities: { 0: 'Own Tempo' }\r\n    },\r\n    Spoink: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 60, at: 25, df: 35, sa: 70, sd: 80, sp: 60 },\r\n        weightkg: 30.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Surskit: {\r\n        types: ['Bug', 'Water'],\r\n        bs: { hp: 40, at: 30, df: 32, sa: 50, sd: 52, sp: 65 },\r\n        weightkg: 1.7,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Swablu: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 45, at: 40, df: 60, sa: 40, sd: 75, sp: 50 },\r\n        weightkg: 1.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Swalot: {\r\n        types: ['Poison'],\r\n        bs: { hp: 100, at: 73, df: 83, sa: 73, sd: 83, sp: 55 },\r\n        weightkg: 80,\r\n        abilities: { 0: 'Liquid Ooze' }\r\n    },\r\n    Swampert: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 100, at: 110, df: 90, sa: 85, sd: 90, sp: 60 },\r\n        weightkg: 81.9,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Swellow: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 60, at: 85, df: 60, sa: 50, sd: 50, sp: 125 },\r\n        weightkg: 19.8,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    Taillow: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 40, at: 55, df: 30, sa: 30, sd: 30, sp: 85 },\r\n        weightkg: 2.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    Torchic: {\r\n        types: ['Fire'],\r\n        bs: { hp: 45, at: 60, df: 40, sa: 70, sd: 50, sp: 45 },\r\n        weightkg: 2.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Torkoal: {\r\n        types: ['Fire'],\r\n        bs: { hp: 70, at: 85, df: 140, sa: 85, sd: 70, sp: 20 },\r\n        weightkg: 80.4,\r\n        abilities: { 0: 'White Smoke' }\r\n    },\r\n    Trapinch: {\r\n        types: ['Ground'],\r\n        bs: { hp: 45, at: 100, df: 45, sa: 45, sd: 45, sp: 10 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Treecko: {\r\n        types: ['Grass'],\r\n        bs: { hp: 40, at: 45, df: 35, sa: 65, sd: 55, sp: 70 },\r\n        weightkg: 5,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Tropius: {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 99, at: 68, df: 83, sa: 72, sd: 87, sp: 51 },\r\n        weightkg: 100,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Vibrava: {\r\n        types: ['Ground', 'Dragon'],\r\n        bs: { hp: 50, at: 70, df: 50, sa: 50, sd: 50, sp: 70 },\r\n        weightkg: 15.3,\r\n        abilities: { 0: 'Levitate' },\r\n        nfe: true\r\n    },\r\n    Vigoroth: {\r\n        types: ['Normal'],\r\n        bs: { hp: 80, at: 80, df: 80, sa: 55, sd: 55, sp: 90 },\r\n        weightkg: 46.5,\r\n        abilities: { 0: 'Vital Spirit' },\r\n        nfe: true\r\n    },\r\n    Volbeat: {\r\n        types: ['Bug'],\r\n        bs: { hp: 65, at: 73, df: 55, sa: 47, sd: 75, sp: 85 },\r\n        weightkg: 17.7,\r\n        abilities: { 0: 'Illuminate' }\r\n    },\r\n    Wailmer: {\r\n        types: ['Water'],\r\n        bs: { hp: 130, at: 70, df: 35, sa: 70, sd: 35, sp: 60 },\r\n        weightkg: 130,\r\n        nfe: true,\r\n        abilities: { 0: 'Water Veil' }\r\n    },\r\n    Wailord: {\r\n        types: ['Water'],\r\n        bs: { hp: 170, at: 90, df: 45, sa: 90, sd: 45, sp: 60 },\r\n        weightkg: 398,\r\n        abilities: { 0: 'Water Veil' }\r\n    },\r\n    Walrein: {\r\n        types: ['Ice', 'Water'],\r\n        bs: { hp: 110, at: 80, df: 90, sa: 95, sd: 90, sp: 65 },\r\n        weightkg: 150.6,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Whiscash: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 110, at: 78, df: 73, sa: 76, sd: 71, sp: 60 },\r\n        weightkg: 23.6,\r\n        abilities: { 0: 'Oblivious' }\r\n    },\r\n    Whismur: {\r\n        types: ['Normal'],\r\n        bs: { hp: 64, at: 51, df: 23, sa: 51, sd: 23, sp: 28 },\r\n        weightkg: 16.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Soundproof' }\r\n    },\r\n    Wingull: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 40, at: 30, df: 30, sa: 55, sd: 30, sp: 85 },\r\n        weightkg: 9.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Wurmple: {\r\n        types: ['Bug'],\r\n        bs: { hp: 45, at: 45, df: 35, sa: 20, sd: 30, sp: 20 },\r\n        weightkg: 3.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Wynaut: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 95, at: 23, df: 48, sa: 23, sd: 48, sp: 23 },\r\n        weightkg: 14,\r\n        nfe: true,\r\n        abilities: { 0: 'Shadow Tag' }\r\n    },\r\n    Zangoose: {\r\n        types: ['Normal'],\r\n        bs: { hp: 73, at: 115, df: 60, sa: 60, sd: 60, sp: 90 },\r\n        weightkg: 40.3,\r\n        abilities: { 0: 'Immunity' }\r\n    },\r\n    Zigzagoon: {\r\n        types: ['Normal'],\r\n        bs: { hp: 38, at: 30, df: 41, sa: 30, sd: 41, sp: 60 },\r\n        weightkg: 17.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' }\r\n    }\r\n};\r\nvar ADV = (0, util_1.extend)(true, {}, GSC, ADV_PATCH);\r\nvar DPP_PATCH = {\r\n    Aipom: { nfe: true },\r\n    Dusclops: { nfe: true },\r\n    Electabuzz: { nfe: true },\r\n    Gligar: { nfe: true },\r\n    Lickitung: { nfe: true },\r\n    Magmar: { nfe: true },\r\n    Magneton: { nfe: true },\r\n    Misdreavus: { nfe: true },\r\n    Murkrow: { nfe: true },\r\n    Nosepass: { nfe: true },\r\n    Piloswine: { nfe: true },\r\n    Pichu: { otherFormes: ['Pichu-Spiky-eared'] },\r\n    Porygon2: { nfe: true },\r\n    Rhydon: { nfe: true },\r\n    Roselia: { nfe: true },\r\n    Sneasel: { nfe: true },\r\n    Tangela: { nfe: true },\r\n    Togetic: { nfe: true },\r\n    Yanma: { nfe: true },\r\n    Abomasnow: {\r\n        types: ['Grass', 'Ice'],\r\n        bs: { hp: 90, at: 92, df: 75, sa: 92, sd: 85, sp: 60 },\r\n        weightkg: 135.5,\r\n        abilities: { 0: 'Snow Warning' }\r\n    },\r\n    Ambipom: {\r\n        types: ['Normal'],\r\n        bs: { hp: 75, at: 100, df: 66, sa: 60, sd: 66, sp: 115 },\r\n        weightkg: 20.3,\r\n        abilities: { 0: 'Technician' }\r\n    },\r\n    Arceus: {\r\n        types: ['Normal'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        otherFormes: [\r\n            'Arceus-Bug',\r\n            'Arceus-Dark',\r\n            'Arceus-Dragon',\r\n            'Arceus-Electric',\r\n            'Arceus-Fighting',\r\n            'Arceus-Fire',\r\n            'Arceus-Flying',\r\n            'Arceus-Ghost',\r\n            'Arceus-Grass',\r\n            'Arceus-Ground',\r\n            'Arceus-Ice',\r\n            'Arceus-Poison',\r\n            'Arceus-Psychic',\r\n            'Arceus-Rock',\r\n            'Arceus-Steel',\r\n            'Arceus-Water',\r\n        ]\r\n    },\r\n    'Arceus-Bug': {\r\n        types: ['Bug'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Dark': {\r\n        types: ['Dark'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Dragon': {\r\n        types: ['Dragon'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Electric': {\r\n        types: ['Electric'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Fighting': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Fire': {\r\n        types: ['Fire'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Flying': {\r\n        types: ['Flying'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Ghost': {\r\n        types: ['Ghost'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Grass': {\r\n        types: ['Grass'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Ground': {\r\n        types: ['Ground'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Ice': {\r\n        types: ['Ice'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Poison': {\r\n        types: ['Poison'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Psychic': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Rock': {\r\n        types: ['Rock'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Steel': {\r\n        types: ['Steel'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    'Arceus-Water': {\r\n        types: ['Water'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        gender: 'N',\r\n        baseSpecies: 'Arceus'\r\n    },\r\n    Arghonaut: {\r\n        types: ['Water', 'Fighting'],\r\n        bs: { hp: 105, at: 110, df: 95, sa: 70, sd: 100, sp: 75 },\r\n        weightkg: 151,\r\n        abilities: { 0: 'Unaware' }\r\n    },\r\n    Azelf: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 75, at: 125, df: 70, sa: 125, sd: 70, sp: 115 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Bastiodon: {\r\n        types: ['Rock', 'Steel'],\r\n        bs: { hp: 60, at: 52, df: 168, sa: 47, sd: 138, sp: 30 },\r\n        weightkg: 149.5,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Bibarel: {\r\n        types: ['Normal', 'Water'],\r\n        bs: { hp: 79, at: 85, df: 60, sa: 55, sd: 60, sp: 71 },\r\n        weightkg: 31.5,\r\n        abilities: { 0: 'Simple' }\r\n    },\r\n    Bidoof: {\r\n        types: ['Normal'],\r\n        bs: { hp: 59, at: 45, df: 40, sa: 35, sd: 40, sp: 31 },\r\n        weightkg: 20,\r\n        nfe: true,\r\n        abilities: { 0: 'Simple' }\r\n    },\r\n    Bonsly: {\r\n        types: ['Rock'],\r\n        bs: { hp: 50, at: 80, df: 95, sa: 10, sd: 45, sp: 10 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Breezi: {\r\n        types: ['Poison', 'Flying'],\r\n        bs: { hp: 50, at: 46, df: 69, sa: 60, sd: 50, sp: 75 },\r\n        weightkg: 0.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Unburden' }\r\n    },\r\n    Bronzong: {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 67, at: 89, df: 116, sa: 79, sd: 116, sp: 33 },\r\n        weightkg: 187,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Bronzor: {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 57, at: 24, df: 86, sa: 24, sd: 86, sp: 23 },\r\n        weightkg: 60.5,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Budew: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 40, at: 30, df: 35, sa: 50, sd: 70, sp: 55 },\r\n        weightkg: 1.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Buizel: {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 65, df: 35, sa: 60, sd: 30, sp: 85 },\r\n        weightkg: 29.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Buneary: {\r\n        types: ['Normal'],\r\n        bs: { hp: 55, at: 66, df: 44, sa: 44, sd: 56, sp: 85 },\r\n        weightkg: 5.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Run Away' }\r\n    },\r\n    Burmy: {\r\n        types: ['Bug'],\r\n        bs: { hp: 40, at: 29, df: 45, sa: 29, sd: 45, sp: 36 },\r\n        weightkg: 3.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Carnivine: {\r\n        types: ['Grass'],\r\n        bs: { hp: 74, at: 100, df: 72, sa: 90, sd: 72, sp: 46 },\r\n        weightkg: 27,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Chatot: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 76, at: 65, df: 45, sa: 92, sd: 42, sp: 91 },\r\n        weightkg: 1.9,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Cherrim: {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 60, df: 70, sa: 87, sd: 78, sp: 85 },\r\n        weightkg: 9.3,\r\n        abilities: { 0: 'Flower Gift' },\r\n        otherFormes: ['Cherrim-Sunshine']\r\n    },\r\n    'Cherrim-Sunshine': {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 60, df: 70, sa: 87, sd: 78, sp: 85 },\r\n        weightkg: 9.3,\r\n        abilities: { 0: 'Flower Gift' },\r\n        baseSpecies: 'Cherrim'\r\n    },\r\n    Cherubi: {\r\n        types: ['Grass'],\r\n        bs: { hp: 45, at: 35, df: 45, sa: 62, sd: 53, sp: 35 },\r\n        weightkg: 3.3,\r\n        abilities: { 0: 'Chlorophyll' },\r\n        nfe: true\r\n    },\r\n    Chimchar: {\r\n        types: ['Fire'],\r\n        bs: { hp: 44, at: 58, df: 44, sa: 58, sd: 44, sp: 61 },\r\n        weightkg: 6.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Chingling: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 45, at: 30, df: 50, sa: 65, sd: 50, sp: 45 },\r\n        weightkg: 0.6,\r\n        abilities: { 0: 'Levitate' },\r\n        nfe: true\r\n    },\r\n    Colossoil: {\r\n        types: ['Ground', 'Dark'],\r\n        bs: { hp: 133, at: 122, df: 72, sa: 71, sd: 72, sp: 95 },\r\n        weightkg: 683.6,\r\n        abilities: { 0: 'Rebound' }\r\n    },\r\n    Combee: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 30, at: 30, df: 42, sa: 30, sd: 42, sp: 70 },\r\n        weightkg: 5.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Honey Gather' }\r\n    },\r\n    Cranidos: {\r\n        types: ['Rock'],\r\n        bs: { hp: 67, at: 125, df: 40, sa: 30, sd: 30, sp: 58 },\r\n        weightkg: 31.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Mold Breaker' }\r\n    },\r\n    Cresselia: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 120, at: 70, df: 120, sa: 75, sd: 130, sp: 85 },\r\n        weightkg: 85.6,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Croagunk: {\r\n        types: ['Poison', 'Fighting'],\r\n        bs: { hp: 48, at: 61, df: 40, sa: 61, sd: 40, sp: 50 },\r\n        weightkg: 23,\r\n        nfe: true,\r\n        abilities: { 0: 'Anticipation' }\r\n    },\r\n    Cyclohm: {\r\n        types: ['Electric', 'Dragon'],\r\n        bs: { hp: 108, at: 60, df: 118, sa: 112, sd: 70, sp: 80 },\r\n        weightkg: 59,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Darkrai: {\r\n        types: ['Dark'],\r\n        bs: { hp: 70, at: 90, df: 90, sa: 135, sd: 90, sp: 125 },\r\n        weightkg: 50.5,\r\n        abilities: { 0: 'Bad Dreams' },\r\n        gender: 'N'\r\n    },\r\n    Dialga: {\r\n        types: ['Steel', 'Dragon'],\r\n        bs: { hp: 100, at: 120, df: 120, sa: 150, sd: 100, sp: 90 },\r\n        weightkg: 683,\r\n        gender: 'N',\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Dorsoil: {\r\n        types: ['Ground'],\r\n        bs: { hp: 103, at: 72, df: 52, sa: 61, sd: 52, sp: 65 },\r\n        weightkg: 145,\r\n        nfe: true,\r\n        abilities: { 0: 'Oblivious' }\r\n    },\r\n    Drapion: {\r\n        types: ['Poison', 'Dark'],\r\n        bs: { hp: 70, at: 90, df: 110, sa: 60, sd: 75, sp: 95 },\r\n        weightkg: 61.5,\r\n        abilities: { 0: 'Battle Armor' }\r\n    },\r\n    Drifblim: {\r\n        types: ['Ghost', 'Flying'],\r\n        bs: { hp: 150, at: 80, df: 44, sa: 90, sd: 54, sp: 80 },\r\n        weightkg: 15,\r\n        abilities: { 0: 'Aftermath' }\r\n    },\r\n    Drifloon: {\r\n        types: ['Ghost', 'Flying'],\r\n        bs: { hp: 90, at: 50, df: 34, sa: 60, sd: 44, sp: 70 },\r\n        weightkg: 1.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Aftermath' }\r\n    },\r\n    Duohm: {\r\n        types: ['Electric', 'Dragon'],\r\n        bs: { hp: 88, at: 40, df: 103, sa: 77, sd: 60, sp: 60 },\r\n        weightkg: 19.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Dusknoir: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 45, at: 100, df: 135, sa: 65, sd: 135, sp: 45 },\r\n        weightkg: 106.6,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Electivire: {\r\n        types: ['Electric'],\r\n        bs: { hp: 75, at: 123, df: 67, sa: 95, sd: 85, sp: 95 },\r\n        weightkg: 138.6,\r\n        abilities: { 0: 'Motor Drive' }\r\n    },\r\n    Embirch: {\r\n        types: ['Fire', 'Grass'],\r\n        bs: { hp: 60, at: 40, df: 55, sa: 65, sd: 40, sp: 60 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Reckless' }\r\n    },\r\n    Empoleon: {\r\n        types: ['Water', 'Steel'],\r\n        bs: { hp: 84, at: 86, df: 88, sa: 111, sd: 101, sp: 60 },\r\n        weightkg: 84.5,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Fidgit: {\r\n        types: ['Poison', 'Ground'],\r\n        bs: { hp: 95, at: 76, df: 109, sa: 90, sd: 80, sp: 105 },\r\n        weightkg: 53,\r\n        abilities: { 0: 'Persistent' }\r\n    },\r\n    Finneon: {\r\n        types: ['Water'],\r\n        bs: { hp: 49, at: 49, df: 56, sa: 49, sd: 61, sp: 66 },\r\n        weightkg: 7,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Flarelm: {\r\n        types: ['Fire', 'Grass'],\r\n        bs: { hp: 90, at: 50, df: 95, sa: 75, sd: 70, sp: 40 },\r\n        weightkg: 73,\r\n        nfe: true,\r\n        abilities: { 0: 'Rock Head' }\r\n    },\r\n    Floatzel: {\r\n        types: ['Water'],\r\n        bs: { hp: 85, at: 105, df: 55, sa: 85, sd: 50, sp: 115 },\r\n        weightkg: 33.5,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Froslass: {\r\n        types: ['Ice', 'Ghost'],\r\n        bs: { hp: 70, at: 80, df: 70, sa: 80, sd: 70, sp: 110 },\r\n        weightkg: 26.6,\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    Gabite: {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 68, at: 90, df: 65, sa: 50, sd: 55, sp: 82 },\r\n        weightkg: 56,\r\n        nfe: true,\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    Gallade: {\r\n        types: ['Psychic', 'Fighting'],\r\n        bs: { hp: 68, at: 125, df: 65, sa: 65, sd: 115, sp: 80 },\r\n        weightkg: 52,\r\n        abilities: { 0: 'Steadfast' }\r\n    },\r\n    Garchomp: {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 108, at: 130, df: 95, sa: 80, sd: 85, sp: 102 },\r\n        weightkg: 95,\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    Gastrodon: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 111, at: 83, df: 68, sa: 92, sd: 82, sp: 39 },\r\n        weightkg: 29.9,\r\n        abilities: { 0: 'Sticky Hold' }\r\n    },\r\n    Gible: {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 58, at: 70, df: 45, sa: 40, sd: 45, sp: 42 },\r\n        weightkg: 20.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    Giratina: {\r\n        types: ['Ghost', 'Dragon'],\r\n        bs: { hp: 150, at: 100, df: 120, sa: 100, sd: 120, sp: 90 },\r\n        weightkg: 750,\r\n        gender: 'N',\r\n        otherFormes: ['Giratina-Origin'],\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    'Giratina-Origin': {\r\n        types: ['Ghost', 'Dragon'],\r\n        bs: { hp: 150, at: 120, df: 100, sa: 120, sd: 100, sp: 90 },\r\n        weightkg: 650,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' },\r\n        baseSpecies: 'Giratina'\r\n    },\r\n    Glaceon: {\r\n        types: ['Ice'],\r\n        bs: { hp: 65, at: 60, df: 110, sa: 130, sd: 95, sp: 65 },\r\n        weightkg: 25.9,\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    Glameow: {\r\n        types: ['Normal'],\r\n        bs: { hp: 49, at: 55, df: 42, sa: 42, sd: 37, sp: 85 },\r\n        weightkg: 3.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Limber' }\r\n    },\r\n    Gliscor: {\r\n        types: ['Ground', 'Flying'],\r\n        bs: { hp: 75, at: 95, df: 125, sa: 45, sd: 75, sp: 95 },\r\n        weightkg: 42.5,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Grotle: {\r\n        types: ['Grass'],\r\n        bs: { hp: 75, at: 89, df: 85, sa: 55, sd: 65, sp: 36 },\r\n        weightkg: 97,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Happiny: {\r\n        types: ['Normal'],\r\n        bs: { hp: 100, at: 5, df: 5, sa: 15, sd: 65, sp: 30 },\r\n        weightkg: 24.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Heatran: {\r\n        types: ['Fire', 'Steel'],\r\n        bs: { hp: 91, at: 90, df: 106, sa: 130, sd: 106, sp: 77 },\r\n        weightkg: 430,\r\n        abilities: { 0: 'Flash Fire' }\r\n    },\r\n    Hippopotas: {\r\n        types: ['Ground'],\r\n        bs: { hp: 68, at: 72, df: 78, sa: 38, sd: 42, sp: 32 },\r\n        weightkg: 49.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Sand Stream' }\r\n    },\r\n    Hippowdon: {\r\n        types: ['Ground'],\r\n        bs: { hp: 108, at: 112, df: 118, sa: 68, sd: 72, sp: 47 },\r\n        weightkg: 300,\r\n        abilities: { 0: 'Sand Stream' }\r\n    },\r\n    Honchkrow: {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 100, at: 125, df: 52, sa: 105, sd: 52, sp: 71 },\r\n        weightkg: 27.3,\r\n        abilities: { 0: 'Insomnia' }\r\n    },\r\n    Infernape: {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 76, at: 104, df: 71, sa: 104, sd: 71, sp: 108 },\r\n        weightkg: 55,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Kitsunoh: {\r\n        types: ['Ghost', 'Steel'],\r\n        bs: { hp: 80, at: 103, df: 85, sa: 55, sd: 80, sp: 110 },\r\n        weightkg: 51,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Kricketot: {\r\n        types: ['Bug'],\r\n        bs: { hp: 37, at: 25, df: 41, sa: 25, sd: 41, sp: 25 },\r\n        weightkg: 2.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Kricketune: {\r\n        types: ['Bug'],\r\n        bs: { hp: 77, at: 85, df: 51, sa: 55, sd: 51, sp: 65 },\r\n        weightkg: 25.5,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Krilowatt: {\r\n        types: ['Electric', 'Water'],\r\n        bs: { hp: 151, at: 84, df: 73, sa: 83, sd: 74, sp: 105 },\r\n        weightkg: 10.6,\r\n        abilities: { 0: 'Trace' }\r\n    },\r\n    Leafeon: {\r\n        types: ['Grass'],\r\n        bs: { hp: 65, at: 110, df: 130, sa: 60, sd: 65, sp: 95 },\r\n        weightkg: 25.5,\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    Lickilicky: {\r\n        types: ['Normal'],\r\n        bs: { hp: 110, at: 85, df: 95, sa: 80, sd: 95, sp: 50 },\r\n        weightkg: 140,\r\n        abilities: { 0: 'Own Tempo' }\r\n    },\r\n    Lopunny: {\r\n        types: ['Normal'],\r\n        bs: { hp: 65, at: 76, df: 84, sa: 54, sd: 96, sp: 105 },\r\n        weightkg: 33.3,\r\n        abilities: { 0: 'Cute Charm' }\r\n    },\r\n    Lucario: {\r\n        types: ['Fighting', 'Steel'],\r\n        bs: { hp: 70, at: 110, df: 70, sa: 115, sd: 70, sp: 90 },\r\n        weightkg: 54,\r\n        abilities: { 0: 'Steadfast' }\r\n    },\r\n    Lumineon: {\r\n        types: ['Water'],\r\n        bs: { hp: 69, at: 69, df: 76, sa: 69, sd: 86, sp: 91 },\r\n        weightkg: 24,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Luxio: {\r\n        types: ['Electric'],\r\n        bs: { hp: 60, at: 85, df: 49, sa: 60, sd: 49, sp: 60 },\r\n        weightkg: 30.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Luxray: {\r\n        types: ['Electric'],\r\n        bs: { hp: 80, at: 120, df: 79, sa: 95, sd: 79, sp: 70 },\r\n        weightkg: 42,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Magmortar: {\r\n        types: ['Fire'],\r\n        bs: { hp: 75, at: 95, df: 67, sa: 125, sd: 95, sp: 83 },\r\n        weightkg: 68,\r\n        abilities: { 0: 'Flame Body' }\r\n    },\r\n    Magnezone: {\r\n        types: ['Electric', 'Steel'],\r\n        bs: { hp: 70, at: 70, df: 115, sa: 130, sd: 90, sp: 60 },\r\n        weightkg: 180,\r\n        gender: 'N',\r\n        abilities: { 0: 'Magnet Pull' }\r\n    },\r\n    Mamoswine: {\r\n        types: ['Ice', 'Ground'],\r\n        bs: { hp: 110, at: 130, df: 80, sa: 70, sd: 60, sp: 80 },\r\n        weightkg: 291,\r\n        abilities: { 0: 'Oblivious' }\r\n    },\r\n    Manaphy: {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\r\n        weightkg: 1.4,\r\n        abilities: { 0: 'Hydration' },\r\n        gender: 'N'\r\n    },\r\n    Mantyke: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 45, at: 20, df: 50, sa: 60, sd: 120, sp: 50 },\r\n        weightkg: 65,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Mesprit: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 80, at: 105, df: 105, sa: 105, sd: 105, sp: 80 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    'Mime Jr.': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 20, at: 25, df: 45, sa: 70, sd: 90, sp: 60 },\r\n        weightkg: 13,\r\n        nfe: true,\r\n        abilities: { 0: 'Soundproof' }\r\n    },\r\n    Mismagius: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 60, at: 60, df: 60, sa: 105, sd: 105, sp: 105 },\r\n        weightkg: 4.4,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Monferno: {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 64, at: 78, df: 52, sa: 78, sd: 52, sp: 81 },\r\n        weightkg: 22,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Monohm: {\r\n        types: ['Electric'],\r\n        bs: { hp: 53, at: 40, df: 58, sa: 67, sd: 55, sp: 55 },\r\n        weightkg: 4.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Mothim: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 70, at: 94, df: 50, sa: 94, sd: 50, sp: 66 },\r\n        weightkg: 23.3,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Munchlax: {\r\n        types: ['Normal'],\r\n        bs: { hp: 135, at: 85, df: 40, sa: 40, sd: 85, sp: 5 },\r\n        weightkg: 105,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' }\r\n    },\r\n    Nohface: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 50, at: 73, df: 50, sa: 30, sd: 50, sp: 80 },\r\n        weightkg: 5.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Pachirisu: {\r\n        types: ['Electric'],\r\n        bs: { hp: 60, at: 45, df: 70, sa: 45, sd: 90, sp: 95 },\r\n        weightkg: 3.9,\r\n        abilities: { 0: 'Run Away' }\r\n    },\r\n    Palkia: {\r\n        types: ['Water', 'Dragon'],\r\n        bs: { hp: 90, at: 120, df: 100, sa: 150, sd: 120, sp: 100 },\r\n        weightkg: 336,\r\n        gender: 'N',\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Phione: {\r\n        types: ['Water'],\r\n        bs: { hp: 80, at: 80, df: 80, sa: 80, sd: 80, sp: 80 },\r\n        weightkg: 3.1,\r\n        abilities: { 0: 'Hydration' },\r\n        gender: 'N'\r\n    },\r\n    'Pichu-Spiky-eared': {\r\n        types: ['Electric'],\r\n        bs: { hp: 20, at: 40, df: 15, sa: 35, sd: 35, sp: 60 },\r\n        weightkg: 2,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pichu'\r\n    },\r\n    Piplup: {\r\n        types: ['Water'],\r\n        bs: { hp: 53, at: 51, df: 53, sa: 61, sd: 56, sp: 40 },\r\n        weightkg: 5.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    'Porygon-Z': {\r\n        types: ['Normal'],\r\n        bs: { hp: 85, at: 80, df: 70, sa: 135, sd: 75, sp: 90 },\r\n        weightkg: 34,\r\n        gender: 'N',\r\n        abilities: { 0: 'Adaptability' }\r\n    },\r\n    Prinplup: {\r\n        types: ['Water'],\r\n        bs: { hp: 64, at: 66, df: 68, sa: 81, sd: 76, sp: 50 },\r\n        weightkg: 23,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Privatyke: {\r\n        types: ['Water', 'Fighting'],\r\n        bs: { hp: 65, at: 75, df: 65, sa: 40, sd: 60, sp: 45 },\r\n        weightkg: 35,\r\n        nfe: true,\r\n        abilities: { 0: 'Unaware' }\r\n    },\r\n    Probopass: {\r\n        types: ['Rock', 'Steel'],\r\n        bs: { hp: 60, at: 55, df: 145, sa: 75, sd: 150, sp: 40 },\r\n        weightkg: 340,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Protowatt: {\r\n        types: ['Electric', 'Water'],\r\n        bs: { hp: 51, at: 44, df: 33, sa: 43, sd: 34, sp: 65 },\r\n        weightkg: 0.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Trace' }\r\n    },\r\n    Purugly: {\r\n        types: ['Normal'],\r\n        bs: { hp: 71, at: 82, df: 64, sa: 64, sd: 59, sp: 112 },\r\n        weightkg: 43.8,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Pyroak: {\r\n        types: ['Fire', 'Grass'],\r\n        bs: { hp: 120, at: 70, df: 105, sa: 95, sd: 90, sp: 60 },\r\n        weightkg: 168,\r\n        abilities: { 0: 'Rock Head' }\r\n    },\r\n    Rampardos: {\r\n        types: ['Rock'],\r\n        bs: { hp: 97, at: 165, df: 60, sa: 65, sd: 50, sp: 58 },\r\n        weightkg: 102.5,\r\n        abilities: { 0: 'Mold Breaker' }\r\n    },\r\n    Rebble: {\r\n        types: ['Rock'],\r\n        bs: { hp: 45, at: 25, df: 65, sa: 75, sd: 55, sp: 80 },\r\n        weightkg: 7,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Regigigas: {\r\n        types: ['Normal'],\r\n        bs: { hp: 110, at: 160, df: 110, sa: 80, sd: 110, sp: 100 },\r\n        weightkg: 420,\r\n        abilities: { 0: 'Slow Start' },\r\n        gender: 'N'\r\n    },\r\n    Revenankh: {\r\n        types: ['Ghost', 'Fighting'],\r\n        bs: { hp: 90, at: 105, df: 90, sa: 65, sd: 110, sp: 65 },\r\n        weightkg: 44,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Rhyperior: {\r\n        types: ['Ground', 'Rock'],\r\n        bs: { hp: 115, at: 140, df: 130, sa: 55, sd: 55, sp: 40 },\r\n        weightkg: 282.8,\r\n        abilities: { 0: 'Lightning Rod' }\r\n    },\r\n    Riolu: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 40, at: 70, df: 40, sa: 35, sd: 40, sp: 60 },\r\n        weightkg: 20.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Steadfast' }\r\n    },\r\n    Roserade: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 60, at: 70, df: 55, sa: 125, sd: 105, sp: 90 },\r\n        weightkg: 14.5,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Rotom: {\r\n        types: ['Electric', 'Ghost'],\r\n        bs: { hp: 50, at: 50, df: 77, sa: 95, sd: 77, sp: 91 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N',\r\n        otherFormes: ['Rotom-Fan', 'Rotom-Frost', 'Rotom-Heat', 'Rotom-Mow', 'Rotom-Wash']\r\n    },\r\n    'Rotom-Mow': {\r\n        types: ['Electric', 'Ghost'],\r\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N',\r\n        baseSpecies: 'Rotom'\r\n    },\r\n    'Rotom-Frost': {\r\n        types: ['Electric', 'Ghost'],\r\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N',\r\n        baseSpecies: 'Rotom'\r\n    },\r\n    'Rotom-Heat': {\r\n        types: ['Electric', 'Ghost'],\r\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N',\r\n        baseSpecies: 'Rotom'\r\n    },\r\n    'Rotom-Fan': {\r\n        types: ['Electric', 'Ghost'],\r\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N',\r\n        baseSpecies: 'Rotom'\r\n    },\r\n    'Rotom-Wash': {\r\n        types: ['Electric', 'Ghost'],\r\n        bs: { hp: 50, at: 65, df: 107, sa: 105, sd: 107, sp: 86 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N',\r\n        baseSpecies: 'Rotom'\r\n    },\r\n    Shaymin: {\r\n        types: ['Grass'],\r\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\r\n        weightkg: 2.1,\r\n        abilities: { 0: 'Natural Cure' },\r\n        gender: 'N',\r\n        otherFormes: ['Shaymin-Sky']\r\n    },\r\n    'Shaymin-Sky': {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 100, at: 103, df: 75, sa: 120, sd: 75, sp: 127 },\r\n        weightkg: 5.2,\r\n        abilities: { 0: 'Serene Grace' },\r\n        gender: 'N',\r\n        baseSpecies: 'Shaymin'\r\n    },\r\n    Shellos: {\r\n        types: ['Water'],\r\n        bs: { hp: 76, at: 48, df: 48, sa: 57, sd: 62, sp: 34 },\r\n        weightkg: 6.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Sticky Hold' }\r\n    },\r\n    Shieldon: {\r\n        types: ['Rock', 'Steel'],\r\n        bs: { hp: 30, at: 42, df: 118, sa: 42, sd: 88, sp: 30 },\r\n        weightkg: 57,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Shinx: {\r\n        types: ['Electric'],\r\n        bs: { hp: 45, at: 65, df: 34, sa: 40, sd: 34, sp: 45 },\r\n        weightkg: 9.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Skorupi: {\r\n        types: ['Poison', 'Bug'],\r\n        bs: { hp: 40, at: 50, df: 90, sa: 30, sd: 55, sp: 65 },\r\n        weightkg: 12,\r\n        nfe: true,\r\n        abilities: { 0: 'Battle Armor' }\r\n    },\r\n    Skuntank: {\r\n        types: ['Poison', 'Dark'],\r\n        bs: { hp: 103, at: 93, df: 67, sa: 71, sd: 61, sp: 84 },\r\n        weightkg: 38,\r\n        abilities: { 0: 'Stench' }\r\n    },\r\n    Snover: {\r\n        types: ['Grass', 'Ice'],\r\n        bs: { hp: 60, at: 62, df: 50, sa: 62, sd: 60, sp: 40 },\r\n        weightkg: 50.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Snow Warning' }\r\n    },\r\n    Spiritomb: {\r\n        types: ['Ghost', 'Dark'],\r\n        bs: { hp: 50, at: 92, df: 108, sa: 92, sd: 108, sp: 35 },\r\n        weightkg: 108,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Staraptor: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 85, at: 120, df: 70, sa: 50, sd: 50, sp: 100 },\r\n        weightkg: 24.9,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Staravia: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 55, at: 75, df: 50, sa: 40, sd: 40, sp: 80 },\r\n        weightkg: 15.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Starly: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 40, at: 55, df: 30, sa: 30, sd: 30, sp: 60 },\r\n        weightkg: 2,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Stratagem: {\r\n        types: ['Rock'],\r\n        bs: { hp: 90, at: 60, df: 65, sa: 120, sd: 70, sp: 130 },\r\n        weightkg: 45,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Stunky: {\r\n        types: ['Poison', 'Dark'],\r\n        bs: { hp: 63, at: 63, df: 47, sa: 41, sd: 41, sp: 74 },\r\n        weightkg: 19.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Stench' }\r\n    },\r\n    Syclant: {\r\n        types: ['Ice', 'Bug'],\r\n        bs: { hp: 70, at: 116, df: 70, sa: 114, sd: 64, sp: 121 },\r\n        weightkg: 52,\r\n        abilities: { 0: 'Compound Eyes' }\r\n    },\r\n    Syclar: {\r\n        types: ['Ice', 'Bug'],\r\n        bs: { hp: 40, at: 76, df: 45, sa: 74, sd: 39, sp: 91 },\r\n        weightkg: 4,\r\n        nfe: true,\r\n        abilities: { 0: 'Compound Eyes' }\r\n    },\r\n    Tactite: {\r\n        types: ['Rock'],\r\n        bs: { hp: 70, at: 40, df: 65, sa: 100, sd: 65, sp: 95 },\r\n        weightkg: 16,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Tangrowth: {\r\n        types: ['Grass'],\r\n        bs: { hp: 100, at: 100, df: 125, sa: 110, sd: 50, sp: 50 },\r\n        weightkg: 128.6,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Togekiss: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 85, at: 50, df: 95, sa: 120, sd: 115, sp: 80 },\r\n        weightkg: 38,\r\n        abilities: { 0: 'Hustle' }\r\n    },\r\n    Torterra: {\r\n        types: ['Grass', 'Ground'],\r\n        bs: { hp: 95, at: 109, df: 105, sa: 75, sd: 85, sp: 56 },\r\n        weightkg: 310,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Toxicroak: {\r\n        types: ['Poison', 'Fighting'],\r\n        bs: { hp: 83, at: 106, df: 65, sa: 86, sd: 65, sp: 85 },\r\n        weightkg: 44.4,\r\n        abilities: { 0: 'Anticipation' }\r\n    },\r\n    Turtwig: {\r\n        types: ['Grass'],\r\n        bs: { hp: 55, at: 68, df: 64, sa: 45, sd: 55, sp: 31 },\r\n        weightkg: 10.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Uxie: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 75, at: 75, df: 130, sa: 75, sd: 130, sp: 95 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Vespiquen: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 70, at: 80, df: 102, sa: 80, sd: 102, sp: 40 },\r\n        weightkg: 38.5,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Voodoll: {\r\n        types: ['Normal', 'Dark'],\r\n        bs: { hp: 55, at: 40, df: 55, sa: 75, sd: 50, sp: 70 },\r\n        weightkg: 25,\r\n        nfe: true,\r\n        abilities: { 0: 'Volt Absorb' }\r\n    },\r\n    Voodoom: {\r\n        types: ['Fighting', 'Dark'],\r\n        bs: { hp: 90, at: 85, df: 80, sa: 105, sd: 80, sp: 110 },\r\n        weightkg: 75.5,\r\n        abilities: { 0: 'Volt Absorb' }\r\n    },\r\n    Weavile: {\r\n        types: ['Dark', 'Ice'],\r\n        bs: { hp: 70, at: 120, df: 65, sa: 45, sd: 85, sp: 125 },\r\n        weightkg: 34,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    Wormadam: {\r\n        types: ['Bug', 'Grass'],\r\n        bs: { hp: 60, at: 59, df: 85, sa: 79, sd: 105, sp: 36 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Anticipation' },\r\n        otherFormes: ['Wormadam-Sandy', 'Wormadam-Trash']\r\n    },\r\n    'Wormadam-Sandy': {\r\n        types: ['Bug', 'Ground'],\r\n        bs: { hp: 60, at: 79, df: 105, sa: 59, sd: 85, sp: 36 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Anticipation' },\r\n        baseSpecies: 'Wormadam'\r\n    },\r\n    'Wormadam-Trash': {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 60, at: 69, df: 95, sa: 69, sd: 95, sp: 36 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Anticipation' },\r\n        baseSpecies: 'Wormadam'\r\n    },\r\n    Yanmega: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 86, at: 76, df: 86, sa: 116, sd: 56, sp: 95 },\r\n        weightkg: 51.5,\r\n        abilities: { 0: 'Speed Boost' }\r\n    }\r\n};\r\nvar DPP = (0, util_1.extend)(true, {}, ADV, DPP_PATCH);\r\nvar BW_PATCH = {\r\n    'Rotom-Fan': { types: ['Electric', 'Flying'] },\r\n    'Rotom-Frost': { types: ['Electric', 'Ice'] },\r\n    'Rotom-Heat': { types: ['Electric', 'Fire'] },\r\n    'Rotom-Mow': { types: ['Electric', 'Grass'] },\r\n    'Rotom-Wash': { types: ['Electric', 'Water'] },\r\n    Accelgor: {\r\n        types: ['Bug'],\r\n        bs: { hp: 80, at: 70, df: 40, sa: 100, sd: 60, sp: 145 },\r\n        weightkg: 25.3,\r\n        abilities: { 0: 'Hydration' }\r\n    },\r\n    Alomomola: {\r\n        types: ['Water'],\r\n        bs: { hp: 165, at: 75, df: 80, sa: 40, sd: 45, sp: 65 },\r\n        weightkg: 31.6,\r\n        abilities: { 0: 'Healer' }\r\n    },\r\n    Amoonguss: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 114, at: 85, df: 70, sa: 85, sd: 80, sp: 30 },\r\n        weightkg: 10.5,\r\n        abilities: { 0: 'Effect Spore' }\r\n    },\r\n    Archen: {\r\n        types: ['Rock', 'Flying'],\r\n        bs: { hp: 55, at: 112, df: 45, sa: 74, sd: 45, sp: 70 },\r\n        weightkg: 9.5,\r\n        abilities: { 0: 'Defeatist' },\r\n        nfe: true\r\n    },\r\n    Archeops: {\r\n        types: ['Rock', 'Flying'],\r\n        bs: { hp: 75, at: 140, df: 65, sa: 112, sd: 65, sp: 110 },\r\n        weightkg: 32,\r\n        abilities: { 0: 'Defeatist' }\r\n    },\r\n    Argalis: {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 60, at: 90, df: 89, sa: 87, sd: 40, sp: 54 },\r\n        weightkg: 341.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Audino: {\r\n        types: ['Normal'],\r\n        bs: { hp: 103, at: 60, df: 86, sa: 60, sd: 86, sp: 50 },\r\n        weightkg: 31,\r\n        abilities: { 0: 'Healer' }\r\n    },\r\n    Aurumoth: {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 110, at: 120, df: 99, sa: 117, sd: 60, sp: 94 },\r\n        weightkg: 193,\r\n        abilities: { 0: 'Weak Armor' }\r\n    },\r\n    Axew: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 46, at: 87, df: 60, sa: 30, sd: 40, sp: 57 },\r\n        weightkg: 18,\r\n        nfe: true,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Basculin: {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 92, df: 65, sa: 80, sd: 55, sp: 98 },\r\n        weightkg: 18,\r\n        abilities: { 0: 'Reckless' },\r\n        otherFormes: ['Basculin-Blue-Striped']\r\n    },\r\n    'Basculin-Blue-Striped': {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 92, df: 65, sa: 80, sd: 55, sp: 98 },\r\n        weightkg: 18,\r\n        abilities: { 0: 'Rock Head' },\r\n        baseSpecies: 'Basculin'\r\n    },\r\n    Beartic: {\r\n        types: ['Ice'],\r\n        bs: { hp: 95, at: 110, df: 80, sa: 70, sd: 80, sp: 50 },\r\n        weightkg: 260,\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    Beheeyem: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 75, at: 75, df: 75, sa: 125, sd: 95, sp: 40 },\r\n        weightkg: 34.5,\r\n        abilities: { 0: 'Telepathy' }\r\n    },\r\n    Bisharp: {\r\n        types: ['Dark', 'Steel'],\r\n        bs: { hp: 65, at: 125, df: 100, sa: 60, sd: 70, sp: 70 },\r\n        weightkg: 70,\r\n        abilities: { 0: 'Defiant' }\r\n    },\r\n    Blitzle: {\r\n        types: ['Electric'],\r\n        bs: { hp: 45, at: 60, df: 32, sa: 50, sd: 32, sp: 76 },\r\n        weightkg: 29.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Lightning Rod' }\r\n    },\r\n    Boldore: {\r\n        types: ['Rock'],\r\n        bs: { hp: 70, at: 105, df: 105, sa: 50, sd: 40, sp: 20 },\r\n        weightkg: 102,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Bouffalant: {\r\n        types: ['Normal'],\r\n        bs: { hp: 95, at: 110, df: 95, sa: 40, sd: 95, sp: 55 },\r\n        weightkg: 94.6,\r\n        abilities: { 0: 'Reckless' }\r\n    },\r\n    Brattler: {\r\n        types: ['Dark', 'Grass'],\r\n        bs: { hp: 80, at: 70, df: 40, sa: 20, sd: 90, sp: 30 },\r\n        weightkg: 11.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Harvest' }\r\n    },\r\n    Braviary: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 100, at: 123, df: 75, sa: 57, sd: 75, sp: 80 },\r\n        weightkg: 41,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Carracosta: {\r\n        types: ['Water', 'Rock'],\r\n        bs: { hp: 74, at: 108, df: 133, sa: 83, sd: 65, sp: 32 },\r\n        weightkg: 81,\r\n        abilities: { 0: 'Solid Rock' }\r\n    },\r\n    Cawdet: {\r\n        types: ['Steel', 'Flying'],\r\n        bs: { hp: 35, at: 72, df: 85, sa: 40, sd: 55, sp: 88 },\r\n        weightkg: 25,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Cawmodore: {\r\n        types: ['Steel', 'Flying'],\r\n        bs: { hp: 50, at: 92, df: 130, sa: 65, sd: 75, sp: 118 },\r\n        weightkg: 37,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Chandelure: {\r\n        types: ['Ghost', 'Fire'],\r\n        bs: { hp: 60, at: 55, df: 90, sa: 145, sd: 90, sp: 80 },\r\n        weightkg: 34.3,\r\n        abilities: { 0: 'Flash Fire' }\r\n    },\r\n    Cinccino: {\r\n        types: ['Normal'],\r\n        bs: { hp: 75, at: 95, df: 60, sa: 65, sd: 60, sp: 115 },\r\n        weightkg: 7.5,\r\n        abilities: { 0: 'Cute Charm' }\r\n    },\r\n    Cobalion: {\r\n        types: ['Steel', 'Fighting'],\r\n        bs: { hp: 91, at: 90, df: 129, sa: 90, sd: 72, sp: 108 },\r\n        weightkg: 250,\r\n        abilities: { 0: 'Justified' },\r\n        gender: 'N'\r\n    },\r\n    Cofagrigus: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 58, at: 50, df: 145, sa: 95, sd: 105, sp: 30 },\r\n        weightkg: 76.5,\r\n        abilities: { 0: 'Mummy' }\r\n    },\r\n    Conkeldurr: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 105, at: 140, df: 95, sa: 55, sd: 65, sp: 45 },\r\n        weightkg: 87,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    Cottonee: {\r\n        types: ['Grass'],\r\n        bs: { hp: 40, at: 27, df: 60, sa: 37, sd: 50, sp: 66 },\r\n        weightkg: 0.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Prankster' }\r\n    },\r\n    Crustle: {\r\n        types: ['Bug', 'Rock'],\r\n        bs: { hp: 70, at: 95, df: 125, sa: 65, sd: 75, sp: 45 },\r\n        weightkg: 200,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Cryogonal: {\r\n        types: ['Ice'],\r\n        bs: { hp: 70, at: 50, df: 30, sa: 95, sd: 135, sp: 105 },\r\n        weightkg: 148,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Cubchoo: {\r\n        types: ['Ice'],\r\n        bs: { hp: 55, at: 70, df: 40, sa: 60, sd: 40, sp: 40 },\r\n        weightkg: 8.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    Cupra: {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 50, at: 60, df: 49, sa: 67, sd: 30, sp: 44 },\r\n        weightkg: 4.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Darmanitan: {\r\n        types: ['Fire'],\r\n        bs: { hp: 105, at: 140, df: 55, sa: 30, sd: 55, sp: 95 },\r\n        weightkg: 92.9,\r\n        abilities: { 0: 'Sheer Force' },\r\n        otherFormes: ['Darmanitan-Zen']\r\n    },\r\n    'Darmanitan-Zen': {\r\n        types: ['Fire', 'Psychic'],\r\n        bs: { hp: 105, at: 30, df: 105, sa: 140, sd: 105, sp: 55 },\r\n        weightkg: 92.9,\r\n        baseSpecies: 'Darmanitan',\r\n        abilities: { 0: 'Zen Mode' }\r\n    },\r\n    Darumaka: {\r\n        types: ['Fire'],\r\n        bs: { hp: 70, at: 90, df: 45, sa: 15, sd: 45, sp: 50 },\r\n        weightkg: 37.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Hustle' }\r\n    },\r\n    Deerling: {\r\n        types: ['Normal', 'Grass'],\r\n        bs: { hp: 60, at: 60, df: 50, sa: 40, sd: 50, sp: 75 },\r\n        weightkg: 19.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Deino: {\r\n        types: ['Dark', 'Dragon'],\r\n        bs: { hp: 52, at: 65, df: 50, sa: 45, sd: 50, sp: 38 },\r\n        weightkg: 17.3,\r\n        abilities: { 0: 'Hustle' },\r\n        nfe: true\r\n    },\r\n    Dewott: {\r\n        types: ['Water'],\r\n        bs: { hp: 75, at: 75, df: 60, sa: 83, sd: 60, sp: 60 },\r\n        weightkg: 24.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Drilbur: {\r\n        types: ['Ground'],\r\n        bs: { hp: 60, at: 85, df: 40, sa: 30, sd: 45, sp: 68 },\r\n        weightkg: 8.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Sand Rush' }\r\n    },\r\n    Druddigon: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 77, at: 120, df: 90, sa: 60, sd: 90, sp: 48 },\r\n        weightkg: 139,\r\n        abilities: { 0: 'Rough Skin' }\r\n    },\r\n    Ducklett: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 62, at: 44, df: 50, sa: 44, sd: 50, sp: 55 },\r\n        weightkg: 5.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Duosion: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 65, at: 40, df: 50, sa: 125, sd: 60, sp: 30 },\r\n        weightkg: 8,\r\n        nfe: true,\r\n        abilities: { 0: 'Overcoat' }\r\n    },\r\n    Durant: {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 58, at: 109, df: 112, sa: 48, sd: 48, sp: 109 },\r\n        weightkg: 33,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Dwebble: {\r\n        types: ['Bug', 'Rock'],\r\n        bs: { hp: 50, at: 65, df: 85, sa: 35, sd: 35, sp: 55 },\r\n        weightkg: 14.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Eelektrik: {\r\n        types: ['Electric'],\r\n        bs: { hp: 65, at: 85, df: 70, sa: 75, sd: 70, sp: 40 },\r\n        weightkg: 22,\r\n        abilities: { 0: 'Levitate' },\r\n        nfe: true\r\n    },\r\n    Eelektross: {\r\n        types: ['Electric'],\r\n        bs: { hp: 85, at: 115, df: 80, sa: 105, sd: 80, sp: 50 },\r\n        weightkg: 80.5,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Elgyem: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 55, at: 55, df: 55, sa: 85, sd: 55, sp: 30 },\r\n        weightkg: 9,\r\n        nfe: true,\r\n        abilities: { 0: 'Telepathy' }\r\n    },\r\n    Emboar: {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 110, at: 123, df: 65, sa: 100, sd: 65, sp: 65 },\r\n        weightkg: 150,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Emolga: {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 55, at: 75, df: 60, sa: 75, sd: 60, sp: 103 },\r\n        weightkg: 5,\r\n        abilities: { 0: 'Static' }\r\n    },\r\n    Escavalier: {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 70, at: 135, df: 105, sa: 60, sd: 105, sp: 20 },\r\n        weightkg: 33,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Excadrill: {\r\n        types: ['Ground', 'Steel'],\r\n        bs: { hp: 110, at: 135, df: 60, sa: 50, sd: 65, sp: 88 },\r\n        weightkg: 40.4,\r\n        abilities: { 0: 'Sand Rush' }\r\n    },\r\n    Ferroseed: {\r\n        types: ['Grass', 'Steel'],\r\n        bs: { hp: 44, at: 50, df: 91, sa: 24, sd: 86, sp: 10 },\r\n        weightkg: 18.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Iron Barbs' }\r\n    },\r\n    Ferrothorn: {\r\n        types: ['Grass', 'Steel'],\r\n        bs: { hp: 74, at: 94, df: 131, sa: 54, sd: 116, sp: 20 },\r\n        weightkg: 110,\r\n        abilities: { 0: 'Iron Barbs' }\r\n    },\r\n    Foongus: {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 69, at: 55, df: 45, sa: 55, sd: 55, sp: 15 },\r\n        weightkg: 1,\r\n        nfe: true,\r\n        abilities: { 0: 'Effect Spore' }\r\n    },\r\n    Fraxure: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 66, at: 117, df: 70, sa: 40, sd: 50, sp: 67 },\r\n        weightkg: 36,\r\n        nfe: true,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Frillish: {\r\n        types: ['Water', 'Ghost'],\r\n        bs: { hp: 55, at: 40, df: 50, sa: 65, sd: 85, sp: 40 },\r\n        weightkg: 33,\r\n        nfe: true,\r\n        abilities: { 0: 'Water Absorb' }\r\n    },\r\n    Galvantula: {\r\n        types: ['Bug', 'Electric'],\r\n        bs: { hp: 70, at: 77, df: 60, sa: 97, sd: 60, sp: 108 },\r\n        weightkg: 14.3,\r\n        abilities: { 0: 'Compound Eyes' }\r\n    },\r\n    Garbodor: {\r\n        types: ['Poison'],\r\n        bs: { hp: 80, at: 95, df: 82, sa: 60, sd: 82, sp: 75 },\r\n        weightkg: 107.3,\r\n        abilities: { 0: 'Stench' }\r\n    },\r\n    Genesect: {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\r\n        weightkg: 82.5,\r\n        abilities: { 0: 'Download' },\r\n        gender: 'N',\r\n        otherFormes: ['Genesect-Burn', 'Genesect-Chill', 'Genesect-Douse', 'Genesect-Shock']\r\n    },\r\n    'Genesect-Burn': {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\r\n        weightkg: 82.5,\r\n        abilities: { 0: 'Download' },\r\n        gender: 'N',\r\n        baseSpecies: 'Genesect'\r\n    },\r\n    'Genesect-Chill': {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\r\n        weightkg: 82.5,\r\n        abilities: { 0: 'Download' },\r\n        gender: 'N',\r\n        baseSpecies: 'Genesect'\r\n    },\r\n    'Genesect-Douse': {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\r\n        weightkg: 82.5,\r\n        abilities: { 0: 'Download' },\r\n        gender: 'N',\r\n        baseSpecies: 'Genesect'\r\n    },\r\n    'Genesect-Shock': {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 71, at: 120, df: 95, sa: 120, sd: 95, sp: 99 },\r\n        weightkg: 82.5,\r\n        abilities: { 0: 'Download' },\r\n        gender: 'N',\r\n        baseSpecies: 'Genesect'\r\n    },\r\n    Gigalith: {\r\n        types: ['Rock'],\r\n        bs: { hp: 85, at: 135, df: 130, sa: 60, sd: 70, sp: 25 },\r\n        weightkg: 260,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Golett: {\r\n        types: ['Ground', 'Ghost'],\r\n        bs: { hp: 59, at: 74, df: 50, sa: 35, sd: 50, sp: 35 },\r\n        weightkg: 92,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Iron Fist' }\r\n    },\r\n    Golurk: {\r\n        types: ['Ground', 'Ghost'],\r\n        bs: { hp: 89, at: 124, df: 80, sa: 55, sd: 80, sp: 55 },\r\n        weightkg: 330,\r\n        gender: 'N',\r\n        abilities: { 0: 'Iron Fist' }\r\n    },\r\n    Gothita: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 45, at: 30, df: 50, sa: 55, sd: 65, sp: 45 },\r\n        weightkg: 5.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Gothitelle: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 70, at: 55, df: 95, sa: 95, sd: 110, sp: 65 },\r\n        weightkg: 44,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Gothorita: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 60, at: 45, df: 70, sa: 75, sd: 85, sp: 55 },\r\n        weightkg: 18,\r\n        nfe: true,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Gurdurr: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 85, at: 105, df: 85, sa: 40, sd: 50, sp: 40 },\r\n        weightkg: 40,\r\n        nfe: true,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    Haxorus: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 76, at: 147, df: 90, sa: 60, sd: 70, sp: 97 },\r\n        weightkg: 105.5,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Heatmor: {\r\n        types: ['Fire'],\r\n        bs: { hp: 85, at: 97, df: 66, sa: 105, sd: 66, sp: 65 },\r\n        weightkg: 58,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Herdier: {\r\n        types: ['Normal'],\r\n        bs: { hp: 65, at: 80, df: 65, sa: 35, sd: 65, sp: 60 },\r\n        weightkg: 14.7,\r\n        nfe: true,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Hydreigon: {\r\n        types: ['Dark', 'Dragon'],\r\n        bs: { hp: 92, at: 105, df: 90, sa: 125, sd: 90, sp: 98 },\r\n        weightkg: 160,\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    Jellicent: {\r\n        types: ['Water', 'Ghost'],\r\n        bs: { hp: 100, at: 60, df: 70, sa: 85, sd: 105, sp: 60 },\r\n        weightkg: 135,\r\n        abilities: { 0: 'Water Absorb' }\r\n    },\r\n    Joltik: {\r\n        types: ['Bug', 'Electric'],\r\n        bs: { hp: 50, at: 47, df: 50, sa: 57, sd: 50, sp: 65 },\r\n        weightkg: 0.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Compound Eyes' }\r\n    },\r\n    Karrablast: {\r\n        types: ['Bug'],\r\n        bs: { hp: 50, at: 75, df: 45, sa: 40, sd: 45, sp: 60 },\r\n        weightkg: 5.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Keldeo: {\r\n        types: ['Water', 'Fighting'],\r\n        bs: { hp: 91, at: 72, df: 90, sa: 129, sd: 90, sp: 108 },\r\n        weightkg: 48.5,\r\n        abilities: { 0: 'Justified' },\r\n        gender: 'N',\r\n        otherFormes: ['Keldeo-Resolute']\r\n    },\r\n    'Keldeo-Resolute': {\r\n        types: ['Water', 'Fighting'],\r\n        bs: { hp: 91, at: 72, df: 90, sa: 129, sd: 90, sp: 108 },\r\n        weightkg: 48.5,\r\n        abilities: { 0: 'Justified' },\r\n        gender: 'N',\r\n        baseSpecies: 'Keldeo'\r\n    },\r\n    Klang: {\r\n        types: ['Steel'],\r\n        bs: { hp: 60, at: 80, df: 95, sa: 70, sd: 85, sp: 50 },\r\n        weightkg: 51,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Plus' }\r\n    },\r\n    Klink: {\r\n        types: ['Steel'],\r\n        bs: { hp: 40, at: 55, df: 70, sa: 45, sd: 60, sp: 30 },\r\n        weightkg: 21,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Plus' }\r\n    },\r\n    Klinklang: {\r\n        types: ['Steel'],\r\n        bs: { hp: 60, at: 100, df: 115, sa: 70, sd: 85, sp: 90 },\r\n        weightkg: 81,\r\n        gender: 'N',\r\n        abilities: { 0: 'Plus' }\r\n    },\r\n    Krokorok: {\r\n        types: ['Ground', 'Dark'],\r\n        bs: { hp: 60, at: 82, df: 45, sa: 45, sd: 45, sp: 74 },\r\n        weightkg: 33.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Krookodile: {\r\n        types: ['Ground', 'Dark'],\r\n        bs: { hp: 95, at: 117, df: 70, sa: 65, sd: 70, sp: 92 },\r\n        weightkg: 96.3,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Kyurem: {\r\n        types: ['Dragon', 'Ice'],\r\n        bs: { hp: 125, at: 130, df: 90, sa: 130, sd: 90, sp: 95 },\r\n        weightkg: 325,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        otherFormes: ['Kyurem-Black', 'Kyurem-White']\r\n    },\r\n    'Kyurem-Black': {\r\n        types: ['Dragon', 'Ice'],\r\n        bs: { hp: 125, at: 170, df: 100, sa: 120, sd: 90, sp: 95 },\r\n        weightkg: 325,\r\n        abilities: { 0: 'Teravolt' },\r\n        gender: 'N',\r\n        baseSpecies: 'Kyurem'\r\n    },\r\n    'Kyurem-White': {\r\n        types: ['Dragon', 'Ice'],\r\n        bs: { hp: 125, at: 120, df: 90, sa: 170, sd: 100, sp: 95 },\r\n        weightkg: 325,\r\n        abilities: { 0: 'Turboblaze' },\r\n        gender: 'N',\r\n        baseSpecies: 'Kyurem'\r\n    },\r\n    Lampent: {\r\n        types: ['Ghost', 'Fire'],\r\n        bs: { hp: 60, at: 40, df: 60, sa: 95, sd: 60, sp: 55 },\r\n        weightkg: 13,\r\n        nfe: true,\r\n        abilities: { 0: 'Flash Fire' }\r\n    },\r\n    Landorus: {\r\n        types: ['Ground', 'Flying'],\r\n        bs: { hp: 89, at: 125, df: 90, sa: 115, sd: 80, sp: 101 },\r\n        weightkg: 68,\r\n        abilities: { 0: 'Sand Force' },\r\n        otherFormes: ['Landorus-Therian']\r\n    },\r\n    'Landorus-Therian': {\r\n        types: ['Ground', 'Flying'],\r\n        bs: { hp: 89, at: 145, df: 90, sa: 105, sd: 80, sp: 91 },\r\n        weightkg: 68,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Landorus'\r\n    },\r\n    Larvesta: {\r\n        types: ['Bug', 'Fire'],\r\n        bs: { hp: 55, at: 85, df: 55, sa: 50, sd: 55, sp: 60 },\r\n        weightkg: 28.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Flame Body' }\r\n    },\r\n    Leavanny: {\r\n        types: ['Bug', 'Grass'],\r\n        bs: { hp: 75, at: 103, df: 80, sa: 70, sd: 70, sp: 92 },\r\n        weightkg: 20.5,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Liepard: {\r\n        types: ['Dark'],\r\n        bs: { hp: 64, at: 88, df: 50, sa: 88, sd: 50, sp: 106 },\r\n        weightkg: 37.5,\r\n        abilities: { 0: 'Limber' }\r\n    },\r\n    Lilligant: {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 60, df: 75, sa: 110, sd: 75, sp: 90 },\r\n        weightkg: 16.3,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Lillipup: {\r\n        types: ['Normal'],\r\n        bs: { hp: 45, at: 60, df: 45, sa: 25, sd: 45, sp: 55 },\r\n        weightkg: 4.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Vital Spirit' }\r\n    },\r\n    Litwick: {\r\n        types: ['Ghost', 'Fire'],\r\n        bs: { hp: 50, at: 30, df: 55, sa: 65, sd: 55, sp: 20 },\r\n        weightkg: 3.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Flash Fire' }\r\n    },\r\n    Malaconda: {\r\n        types: ['Dark', 'Grass'],\r\n        bs: { hp: 115, at: 100, df: 60, sa: 40, sd: 130, sp: 55 },\r\n        weightkg: 108.8,\r\n        abilities: { 0: 'Harvest' }\r\n    },\r\n    Mandibuzz: {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 110, at: 65, df: 105, sa: 55, sd: 95, sp: 80 },\r\n        weightkg: 39.5,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Maractus: {\r\n        types: ['Grass'],\r\n        bs: { hp: 75, at: 86, df: 67, sa: 106, sd: 67, sp: 60 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Water Absorb' }\r\n    },\r\n    Meloetta: {\r\n        types: ['Normal', 'Psychic'],\r\n        bs: { hp: 100, at: 77, df: 77, sa: 128, sd: 128, sp: 90 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Serene Grace' },\r\n        otherFormes: ['Meloetta-Pirouette'],\r\n        gender: 'N'\r\n    },\r\n    'Meloetta-Pirouette': {\r\n        types: ['Normal', 'Fighting'],\r\n        bs: { hp: 100, at: 128, df: 90, sa: 77, sd: 77, sp: 128 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Serene Grace' },\r\n        baseSpecies: 'Meloetta',\r\n        gender: 'N'\r\n    },\r\n    Mienfoo: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 45, at: 85, df: 50, sa: 55, sd: 50, sp: 65 },\r\n        weightkg: 20,\r\n        nfe: true,\r\n        abilities: { 0: 'Inner Focus' }\r\n    },\r\n    Mienshao: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 65, at: 125, df: 60, sa: 95, sd: 60, sp: 105 },\r\n        weightkg: 35.5,\r\n        abilities: { 0: 'Inner Focus' }\r\n    },\r\n    Minccino: {\r\n        types: ['Normal'],\r\n        bs: { hp: 55, at: 50, df: 40, sa: 40, sd: 40, sp: 75 },\r\n        weightkg: 5.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Cute Charm' }\r\n    },\r\n    Mollux: {\r\n        types: ['Fire', 'Poison'],\r\n        bs: { hp: 95, at: 45, df: 83, sa: 131, sd: 105, sp: 76 },\r\n        weightkg: 41,\r\n        abilities: { 0: 'Dry Skin' }\r\n    },\r\n    Munna: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 76, at: 25, df: 45, sa: 67, sd: 55, sp: 24 },\r\n        weightkg: 23.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Forewarn' }\r\n    },\r\n    Musharna: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 116, at: 55, df: 85, sa: 107, sd: 95, sp: 29 },\r\n        weightkg: 60.5,\r\n        abilities: { 0: 'Forewarn' }\r\n    },\r\n    Necturine: {\r\n        types: ['Grass', 'Ghost'],\r\n        bs: { hp: 49, at: 55, df: 60, sa: 50, sd: 75, sp: 51 },\r\n        weightkg: 1.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Anticipation' }\r\n    },\r\n    Necturna: {\r\n        types: ['Grass', 'Ghost'],\r\n        bs: { hp: 64, at: 120, df: 100, sa: 85, sd: 120, sp: 81 },\r\n        weightkg: 49.6,\r\n        abilities: { 0: 'Forewarn' }\r\n    },\r\n    Oshawott: {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 55, df: 45, sa: 63, sd: 45, sp: 45 },\r\n        weightkg: 5.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Palpitoad: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 75, at: 65, df: 55, sa: 65, sd: 55, sp: 69 },\r\n        weightkg: 17,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Panpour: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 53, df: 48, sa: 53, sd: 48, sp: 64 },\r\n        weightkg: 13.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Pansage: {\r\n        types: ['Grass'],\r\n        bs: { hp: 50, at: 53, df: 48, sa: 53, sd: 48, sp: 64 },\r\n        weightkg: 10.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Pansear: {\r\n        types: ['Fire'],\r\n        bs: { hp: 50, at: 53, df: 48, sa: 53, sd: 48, sp: 64 },\r\n        weightkg: 11,\r\n        nfe: true,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Patrat: {\r\n        types: ['Normal'],\r\n        bs: { hp: 45, at: 55, df: 39, sa: 35, sd: 39, sp: 42 },\r\n        weightkg: 11.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Run Away' }\r\n    },\r\n    Pawniard: {\r\n        types: ['Dark', 'Steel'],\r\n        bs: { hp: 45, at: 85, df: 70, sa: 40, sd: 40, sp: 60 },\r\n        weightkg: 10.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Defiant' }\r\n    },\r\n    Petilil: {\r\n        types: ['Grass'],\r\n        bs: { hp: 45, at: 35, df: 50, sa: 70, sd: 50, sp: 30 },\r\n        weightkg: 6.6,\r\n        nfe: true,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Pidove: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 50, at: 55, df: 50, sa: 36, sd: 30, sp: 43 },\r\n        weightkg: 2.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Pignite: {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 90, at: 93, df: 55, sa: 70, sd: 55, sp: 55 },\r\n        weightkg: 55.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Purrloin: {\r\n        types: ['Dark'],\r\n        bs: { hp: 41, at: 50, df: 37, sa: 50, sd: 37, sp: 66 },\r\n        weightkg: 10.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Limber' }\r\n    },\r\n    Reshiram: {\r\n        types: ['Dragon', 'Fire'],\r\n        bs: { hp: 100, at: 120, df: 100, sa: 150, sd: 120, sp: 90 },\r\n        weightkg: 330,\r\n        abilities: { 0: 'Turboblaze' },\r\n        gender: 'N'\r\n    },\r\n    Reuniclus: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 110, at: 65, df: 75, sa: 125, sd: 85, sp: 30 },\r\n        weightkg: 20.1,\r\n        abilities: { 0: 'Overcoat' }\r\n    },\r\n    Roggenrola: {\r\n        types: ['Rock'],\r\n        bs: { hp: 55, at: 75, df: 85, sa: 25, sd: 25, sp: 15 },\r\n        weightkg: 18,\r\n        nfe: true,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Rufflet: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 70, at: 83, df: 50, sa: 37, sd: 50, sp: 60 },\r\n        weightkg: 10.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Samurott: {\r\n        types: ['Water'],\r\n        bs: { hp: 95, at: 100, df: 85, sa: 108, sd: 70, sp: 70 },\r\n        weightkg: 94.6,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Sandile: {\r\n        types: ['Ground', 'Dark'],\r\n        bs: { hp: 50, at: 72, df: 35, sa: 35, sd: 35, sp: 65 },\r\n        weightkg: 15.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Sawk: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 75, at: 125, df: 75, sa: 30, sd: 75, sp: 85 },\r\n        weightkg: 51,\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Sawsbuck: {\r\n        types: ['Normal', 'Grass'],\r\n        bs: { hp: 80, at: 100, df: 70, sa: 60, sd: 70, sp: 95 },\r\n        weightkg: 92.5,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    Scolipede: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 60, at: 90, df: 89, sa: 55, sd: 69, sp: 112 },\r\n        weightkg: 200.5,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    Scrafty: {\r\n        types: ['Dark', 'Fighting'],\r\n        bs: { hp: 65, at: 90, df: 115, sa: 45, sd: 115, sp: 58 },\r\n        weightkg: 30,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Scraggy: {\r\n        types: ['Dark', 'Fighting'],\r\n        bs: { hp: 50, at: 75, df: 70, sa: 35, sd: 70, sp: 48 },\r\n        weightkg: 11.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Scratchet: {\r\n        types: ['Normal', 'Fighting'],\r\n        bs: { hp: 55, at: 85, df: 80, sa: 20, sd: 70, sp: 40 },\r\n        weightkg: 20,\r\n        nfe: true,\r\n        abilities: { 0: 'Scrappy' }\r\n    },\r\n    Seismitoad: {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 105, at: 85, df: 75, sa: 85, sd: 75, sp: 74 },\r\n        weightkg: 62,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Serperior: {\r\n        types: ['Grass'],\r\n        bs: { hp: 75, at: 75, df: 95, sa: 75, sd: 95, sp: 113 },\r\n        weightkg: 63,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Servine: {\r\n        types: ['Grass'],\r\n        bs: { hp: 60, at: 60, df: 75, sa: 60, sd: 75, sp: 83 },\r\n        weightkg: 16,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Sewaddle: {\r\n        types: ['Bug', 'Grass'],\r\n        bs: { hp: 45, at: 53, df: 70, sa: 40, sd: 60, sp: 42 },\r\n        weightkg: 2.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Shelmet: {\r\n        types: ['Bug'],\r\n        bs: { hp: 50, at: 40, df: 85, sa: 40, sd: 65, sp: 25 },\r\n        weightkg: 7.7,\r\n        nfe: true,\r\n        abilities: { 0: 'Hydration' }\r\n    },\r\n    Sigilyph: {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 72, at: 58, df: 80, sa: 103, sd: 80, sp: 97 },\r\n        weightkg: 14,\r\n        abilities: { 0: 'Wonder Skin' }\r\n    },\r\n    Simipour: {\r\n        types: ['Water'],\r\n        bs: { hp: 75, at: 98, df: 63, sa: 98, sd: 63, sp: 101 },\r\n        weightkg: 29,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Simisage: {\r\n        types: ['Grass'],\r\n        bs: { hp: 75, at: 98, df: 63, sa: 98, sd: 63, sp: 101 },\r\n        weightkg: 30.5,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Simisear: {\r\n        types: ['Fire'],\r\n        bs: { hp: 75, at: 98, df: 63, sa: 98, sd: 63, sp: 101 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Snivy: {\r\n        types: ['Grass'],\r\n        bs: { hp: 45, at: 45, df: 55, sa: 45, sd: 55, sp: 63 },\r\n        weightkg: 8.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Solosis: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 45, at: 30, df: 40, sa: 105, sd: 50, sp: 20 },\r\n        weightkg: 1,\r\n        nfe: true,\r\n        abilities: { 0: 'Overcoat' }\r\n    },\r\n    Stoutland: {\r\n        types: ['Normal'],\r\n        bs: { hp: 85, at: 100, df: 90, sa: 45, sd: 90, sp: 80 },\r\n        weightkg: 61,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Stunfisk: {\r\n        types: ['Ground', 'Electric'],\r\n        bs: { hp: 109, at: 66, df: 84, sa: 81, sd: 99, sp: 32 },\r\n        weightkg: 11,\r\n        abilities: { 0: 'Static' }\r\n    },\r\n    Swadloon: {\r\n        types: ['Bug', 'Grass'],\r\n        bs: { hp: 55, at: 63, df: 90, sa: 50, sd: 80, sp: 42 },\r\n        weightkg: 7.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    Swanna: {\r\n        types: ['Water', 'Flying'],\r\n        bs: { hp: 75, at: 87, df: 63, sa: 87, sd: 63, sp: 98 },\r\n        weightkg: 24.2,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Swoobat: {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 67, at: 57, df: 55, sa: 77, sd: 55, sp: 114 },\r\n        weightkg: 10.5,\r\n        abilities: { 0: 'Unaware' }\r\n    },\r\n    Tepig: {\r\n        types: ['Fire'],\r\n        bs: { hp: 65, at: 63, df: 45, sa: 45, sd: 45, sp: 45 },\r\n        weightkg: 9.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Terrakion: {\r\n        types: ['Rock', 'Fighting'],\r\n        bs: { hp: 91, at: 129, df: 90, sa: 72, sd: 90, sp: 108 },\r\n        weightkg: 260,\r\n        abilities: { 0: 'Justified' },\r\n        gender: 'N'\r\n    },\r\n    Throh: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 120, at: 100, df: 85, sa: 30, sd: 85, sp: 45 },\r\n        weightkg: 55.5,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    Thundurus: {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 79, at: 115, df: 70, sa: 125, sd: 80, sp: 111 },\r\n        weightkg: 61,\r\n        abilities: { 0: 'Prankster' },\r\n        otherFormes: ['Thundurus-Therian']\r\n    },\r\n    'Thundurus-Therian': {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 79, at: 105, df: 70, sa: 145, sd: 80, sp: 101 },\r\n        weightkg: 61,\r\n        abilities: { 0: 'Volt Absorb' },\r\n        baseSpecies: 'Thundurus'\r\n    },\r\n    Timburr: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 75, at: 80, df: 55, sa: 25, sd: 35, sp: 35 },\r\n        weightkg: 12.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    Tirtouga: {\r\n        types: ['Water', 'Rock'],\r\n        bs: { hp: 54, at: 78, df: 103, sa: 53, sd: 45, sp: 22 },\r\n        weightkg: 16.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Solid Rock' }\r\n    },\r\n    Tomohawk: {\r\n        types: ['Flying', 'Fighting'],\r\n        bs: { hp: 105, at: 60, df: 90, sa: 115, sd: 80, sp: 85 },\r\n        weightkg: 37.2,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Tornadus: {\r\n        types: ['Flying'],\r\n        bs: { hp: 79, at: 115, df: 70, sa: 125, sd: 80, sp: 111 },\r\n        weightkg: 63,\r\n        abilities: { 0: 'Prankster' },\r\n        otherFormes: ['Tornadus-Therian']\r\n    },\r\n    'Tornadus-Therian': {\r\n        types: ['Flying'],\r\n        bs: { hp: 79, at: 100, df: 80, sa: 110, sd: 90, sp: 121 },\r\n        weightkg: 63,\r\n        abilities: { 0: 'Regenerator' },\r\n        baseSpecies: 'Tornadus'\r\n    },\r\n    Tranquill: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 62, at: 77, df: 62, sa: 50, sd: 42, sp: 65 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Trubbish: {\r\n        types: ['Poison'],\r\n        bs: { hp: 50, at: 50, df: 62, sa: 40, sd: 62, sp: 65 },\r\n        weightkg: 31,\r\n        nfe: true,\r\n        abilities: { 0: 'Stench' }\r\n    },\r\n    Tympole: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 50, df: 40, sa: 50, sd: 40, sp: 64 },\r\n        weightkg: 4.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    Tynamo: {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 45, sd: 40, sp: 60 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Levitate' },\r\n        nfe: true\r\n    },\r\n    Unfezant: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 80, at: 105, df: 80, sa: 65, sd: 55, sp: 93 },\r\n        weightkg: 29,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Vanillish: {\r\n        types: ['Ice'],\r\n        bs: { hp: 51, at: 65, df: 65, sa: 80, sd: 75, sp: 59 },\r\n        weightkg: 41,\r\n        nfe: true,\r\n        abilities: { 0: 'Ice Body' }\r\n    },\r\n    Vanillite: {\r\n        types: ['Ice'],\r\n        bs: { hp: 36, at: 50, df: 50, sa: 65, sd: 60, sp: 44 },\r\n        weightkg: 5.7,\r\n        nfe: true,\r\n        abilities: { 0: 'Ice Body' }\r\n    },\r\n    Vanilluxe: {\r\n        types: ['Ice'],\r\n        bs: { hp: 71, at: 95, df: 85, sa: 110, sd: 95, sp: 79 },\r\n        weightkg: 57.5,\r\n        abilities: { 0: 'Ice Body' }\r\n    },\r\n    Venipede: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 30, at: 45, df: 59, sa: 30, sd: 39, sp: 57 },\r\n        weightkg: 5.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    Victini: {\r\n        types: ['Psychic', 'Fire'],\r\n        bs: { hp: 100, at: 100, df: 100, sa: 100, sd: 100, sp: 100 },\r\n        weightkg: 4,\r\n        abilities: { 0: 'Victory Star' },\r\n        gender: 'N'\r\n    },\r\n    Virizion: {\r\n        types: ['Grass', 'Fighting'],\r\n        bs: { hp: 91, at: 90, df: 72, sa: 90, sd: 129, sp: 108 },\r\n        weightkg: 200,\r\n        abilities: { 0: 'Justified' },\r\n        gender: 'N'\r\n    },\r\n    Volcarona: {\r\n        types: ['Bug', 'Fire'],\r\n        bs: { hp: 85, at: 60, df: 65, sa: 135, sd: 105, sp: 100 },\r\n        weightkg: 46,\r\n        abilities: { 0: 'Flame Body' }\r\n    },\r\n    Vullaby: {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 70, at: 55, df: 75, sa: 45, sd: 65, sp: 60 },\r\n        weightkg: 9,\r\n        nfe: true,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Watchog: {\r\n        types: ['Normal'],\r\n        bs: { hp: 60, at: 85, df: 69, sa: 60, sd: 69, sp: 77 },\r\n        weightkg: 27,\r\n        abilities: { 0: 'Illuminate' }\r\n    },\r\n    Whimsicott: {\r\n        types: ['Grass'],\r\n        bs: { hp: 60, at: 67, df: 85, sa: 77, sd: 75, sp: 116 },\r\n        weightkg: 6.6,\r\n        abilities: { 0: 'Prankster' }\r\n    },\r\n    Whirlipede: {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 40, at: 55, df: 99, sa: 40, sd: 79, sp: 47 },\r\n        weightkg: 58.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    Woobat: {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 55, at: 45, df: 43, sa: 55, sd: 43, sp: 72 },\r\n        weightkg: 2.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Unaware' }\r\n    },\r\n    Yamask: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 38, at: 30, df: 85, sa: 55, sd: 65, sp: 30 },\r\n        weightkg: 1.5,\r\n        abilities: { 0: 'Mummy' },\r\n        nfe: true\r\n    },\r\n    Zebstrika: {\r\n        types: ['Electric'],\r\n        bs: { hp: 75, at: 100, df: 63, sa: 80, sd: 63, sp: 116 },\r\n        weightkg: 79.5,\r\n        abilities: { 0: 'Lightning Rod' }\r\n    },\r\n    Zekrom: {\r\n        types: ['Dragon', 'Electric'],\r\n        bs: { hp: 100, at: 150, df: 120, sa: 120, sd: 100, sp: 90 },\r\n        weightkg: 345,\r\n        abilities: { 0: 'Teravolt' },\r\n        gender: 'N'\r\n    },\r\n    Zoroark: {\r\n        types: ['Dark'],\r\n        bs: { hp: 60, at: 105, df: 60, sa: 120, sd: 60, sp: 105 },\r\n        weightkg: 81.1,\r\n        abilities: { 0: 'Illusion' }\r\n    },\r\n    Zorua: {\r\n        types: ['Dark'],\r\n        bs: { hp: 40, at: 65, df: 40, sa: 80, sd: 40, sp: 65 },\r\n        weightkg: 12.5,\r\n        abilities: { 0: 'Illusion' },\r\n        nfe: true\r\n    },\r\n    Zweilous: {\r\n        types: ['Dark', 'Dragon'],\r\n        bs: { hp: 72, at: 85, df: 70, sa: 65, sd: 70, sp: 58 },\r\n        weightkg: 50,\r\n        abilities: { 0: 'Hustle' },\r\n        nfe: true\r\n    }\r\n};\r\nvar BW = (0, util_1.extend)(true, {}, DPP, BW_PATCH);\r\ndelete BW['Pichu'].otherFormes;\r\ndelete BW['Pichu-Spiky-eared'];\r\nvar XY_PATCH = {\r\n    Abomasnow: { otherFormes: ['Abomasnow-Mega'] },\r\n    Absol: { otherFormes: ['Absol-Mega'] },\r\n    Aerodactyl: { otherFormes: ['Aerodactyl-Mega'] },\r\n    Aggron: { otherFormes: ['Aggron-Mega'] },\r\n    Alakazam: { bs: { sd: 95 }, otherFormes: ['Alakazam-Mega'] },\r\n    Altaria: { otherFormes: ['Altaria-Mega'] },\r\n    Ampharos: { bs: { df: 85 }, otherFormes: ['Ampharos-Mega'] },\r\n    Audino: { otherFormes: ['Audino-Mega'] },\r\n    Azumarill: { types: ['Water', 'Fairy'], bs: { sa: 90 } },\r\n    Azurill: { types: ['Normal', 'Fairy'] },\r\n    Banette: { otherFormes: ['Banette-Mega'] },\r\n    Beautifly: { bs: { sa: 100 } },\r\n    Beedrill: { bs: { at: 90 }, otherFormes: ['Beedrill-Mega'] },\r\n    Bellossom: { bs: { df: 95 } },\r\n    Blastoise: { otherFormes: ['Blastoise-Mega'] },\r\n    Blaziken: { otherFormes: ['Blaziken-Mega'] },\r\n    Butterfree: { bs: { sa: 90 } },\r\n    Camerupt: { otherFormes: ['Camerupt-Mega'] },\r\n    Charizard: { otherFormes: ['Charizard-Mega-X', 'Charizard-Mega-Y'] },\r\n    Clefable: { types: ['Fairy'], bs: { sa: 95 } },\r\n    Clefairy: { types: ['Fairy'] },\r\n    Cleffa: { types: ['Fairy'] },\r\n    Cottonee: { types: ['Grass', 'Fairy'] },\r\n    Exploud: { bs: { sd: 73 } },\r\n    Gallade: { otherFormes: ['Gallade-Mega'] },\r\n    Garchomp: { otherFormes: ['Garchomp-Mega'] },\r\n    Gardevoir: { types: ['Psychic', 'Fairy'], otherFormes: ['Gardevoir-Mega'] },\r\n    Gengar: { otherFormes: ['Gengar-Mega'] },\r\n    Gigalith: { bs: { sd: 80 } },\r\n    Glalie: { otherFormes: ['Glalie-Mega'] },\r\n    Golem: { bs: { at: 120 } },\r\n    Granbull: { types: ['Fairy'] },\r\n    Groudon: { otherFormes: ['Groudon-Primal'] },\r\n    Gyarados: { otherFormes: ['Gyarados-Mega'] },\r\n    Heracross: { otherFormes: ['Heracross-Mega'] },\r\n    Houndoom: { otherFormes: ['Houndoom-Mega'] },\r\n    Igglybuff: { types: ['Normal', 'Fairy'] },\r\n    Jigglypuff: { types: ['Normal', 'Fairy'] },\r\n    Jumpluff: { bs: { sd: 95 } },\r\n    Kangaskhan: { otherFormes: ['Kangaskhan-Mega'] },\r\n    Kirlia: { types: ['Psychic', 'Fairy'] },\r\n    Krookodile: { bs: { df: 80 } },\r\n    Kyogre: { otherFormes: ['Kyogre-Primal'] },\r\n    Latias: { otherFormes: ['Latias-Mega'] },\r\n    Latios: { otherFormes: ['Latios-Mega'] },\r\n    Leavanny: { bs: { sd: 80 } },\r\n    Lopunny: { otherFormes: ['Lopunny-Mega'] },\r\n    Lucario: { otherFormes: ['Lucario-Mega'] },\r\n    Manectric: { otherFormes: ['Manectric-Mega'] },\r\n    Marill: { types: ['Water', 'Fairy'] },\r\n    Mawile: { types: ['Steel', 'Fairy'], otherFormes: ['Mawile-Mega'] },\r\n    Medicham: { otherFormes: ['Medicham-Mega'] },\r\n    Metagross: { otherFormes: ['Metagross-Mega'] },\r\n    Mewtwo: { otherFormes: ['Mewtwo-Mega-X', 'Mewtwo-Mega-Y'] },\r\n    'Mime Jr.': { types: ['Psychic', 'Fairy'] },\r\n    'Mr. Mime': { types: ['Psychic', 'Fairy'] },\r\n    Nidoking: { bs: { at: 102 } },\r\n    Nidoqueen: { bs: { at: 92 } },\r\n    Pidgeot: { bs: { sp: 101 }, otherFormes: ['Pidgeot-Mega'] },\r\n    Pikachu: {\r\n        bs: { df: 40, sd: 50 },\r\n        otherFormes: [\r\n            'Pikachu-Belle',\r\n            'Pikachu-Cosplay',\r\n            'Pikachu-Libre',\r\n            'Pikachu-PhD',\r\n            'Pikachu-Pop-Star',\r\n            'Pikachu-Rock-Star',\r\n        ]\r\n    },\r\n    Pinsir: { otherFormes: ['Pinsir-Mega'] },\r\n    Poliwrath: { bs: { at: 95 } },\r\n    Raichu: { bs: { sp: 110 } },\r\n    Ralts: { types: ['Psychic', 'Fairy'] },\r\n    Rayquaza: { otherFormes: ['Rayquaza-Mega'] },\r\n    Roserade: { bs: { df: 65 } },\r\n    Sableye: { otherFormes: ['Sableye-Mega'] },\r\n    Salamence: { otherFormes: ['Salamence-Mega'] },\r\n    Sceptile: { otherFormes: ['Sceptile-Mega'] },\r\n    Scizor: { otherFormes: ['Scizor-Mega'] },\r\n    Scolipede: { bs: { at: 100 } },\r\n    Seismitoad: { bs: { at: 95 } },\r\n    Sharpedo: { otherFormes: ['Sharpedo-Mega'] },\r\n    Slowbro: { otherFormes: ['Slowbro-Mega'] },\r\n    Snubbull: { types: ['Fairy'] },\r\n    Staraptor: { bs: { sd: 60 } },\r\n    Steelix: { otherFormes: ['Steelix-Mega'] },\r\n    Stoutland: { bs: { at: 110 } },\r\n    Swampert: { otherFormes: ['Swampert-Mega'] },\r\n    Togekiss: { types: ['Fairy', 'Flying'] },\r\n    Togepi: { types: ['Fairy'] },\r\n    Togetic: { types: ['Fairy', 'Flying'] },\r\n    Tyranitar: { otherFormes: ['Tyranitar-Mega'] },\r\n    Unfezant: { bs: { at: 115 } },\r\n    Venusaur: { otherFormes: ['Venusaur-Mega'] },\r\n    Victreebel: { bs: { sd: 70 } },\r\n    Vileplume: { bs: { sa: 110 } },\r\n    Whimsicott: { types: ['Grass', 'Fairy'] },\r\n    Wigglytuff: { types: ['Normal', 'Fairy'], bs: { sa: 85 } },\r\n    'Aegislash-Blade': {\r\n        types: ['Steel', 'Ghost'],\r\n        bs: { hp: 60, at: 150, df: 50, sa: 150, sd: 50, sp: 60 },\r\n        weightkg: 53,\r\n        abilities: { 0: 'Stance Change' },\r\n        otherFormes: ['Aegislash-Shield', 'Aegislash-Both']\r\n    },\r\n    'Aegislash-Shield': {\r\n        types: ['Steel', 'Ghost'],\r\n        bs: { hp: 60, at: 50, df: 150, sa: 50, sd: 150, sp: 60 },\r\n        weightkg: 53,\r\n        abilities: { 0: 'Stance Change' },\r\n        baseSpecies: 'Aegislash-Blade'\r\n    },\r\n    'Aegislash-Both': {\r\n        types: ['Steel', 'Ghost'],\r\n        bs: { hp: 60, at: 150, df: 150, sa: 150, sd: 150, sp: 60 },\r\n        weightkg: 53,\r\n        abilities: { 0: 'Stance Change' },\r\n        baseSpecies: 'Aegislash-Blade'\r\n    },\r\n    Amaura: {\r\n        types: ['Rock', 'Ice'],\r\n        bs: { hp: 77, at: 59, df: 50, sa: 67, sd: 63, sp: 46 },\r\n        weightkg: 25.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Refrigerate' }\r\n    },\r\n    'Arceus-Fairy': {\r\n        types: ['Fairy'],\r\n        bs: { hp: 120, at: 120, df: 120, sa: 120, sd: 120, sp: 120 },\r\n        weightkg: 320,\r\n        abilities: { 0: 'Multitype' },\r\n        baseSpecies: 'Arceus',\r\n        gender: 'N'\r\n    },\r\n    Aromatisse: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 101, at: 72, df: 72, sa: 99, sd: 89, sp: 29 },\r\n        weightkg: 15.5,\r\n        abilities: { 0: 'Healer' }\r\n    },\r\n    Aurorus: {\r\n        types: ['Rock', 'Ice'],\r\n        bs: { hp: 123, at: 77, df: 72, sa: 99, sd: 92, sp: 58 },\r\n        weightkg: 225,\r\n        abilities: { 0: 'Refrigerate' }\r\n    },\r\n    Avalugg: {\r\n        types: ['Ice'],\r\n        bs: { hp: 95, at: 117, df: 184, sa: 44, sd: 46, sp: 28 },\r\n        weightkg: 505,\r\n        abilities: { 0: 'Own Tempo' }\r\n    },\r\n    Barbaracle: {\r\n        types: ['Rock', 'Water'],\r\n        bs: { hp: 72, at: 105, df: 115, sa: 54, sd: 86, sp: 68 },\r\n        weightkg: 96,\r\n        abilities: { 0: 'Tough Claws' }\r\n    },\r\n    Bergmite: {\r\n        types: ['Ice'],\r\n        bs: { hp: 55, at: 69, df: 85, sa: 32, sd: 35, sp: 28 },\r\n        weightkg: 99.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Own Tempo' }\r\n    },\r\n    Binacle: {\r\n        types: ['Rock', 'Water'],\r\n        bs: { hp: 42, at: 52, df: 67, sa: 39, sd: 56, sp: 50 },\r\n        weightkg: 31,\r\n        nfe: true,\r\n        abilities: { 0: 'Tough Claws' }\r\n    },\r\n    Braixen: {\r\n        types: ['Fire'],\r\n        bs: { hp: 59, at: 59, df: 58, sa: 90, sd: 70, sp: 73 },\r\n        weightkg: 14.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Bunnelby: {\r\n        types: ['Normal'],\r\n        bs: { hp: 38, at: 36, df: 38, sa: 32, sd: 36, sp: 57 },\r\n        weightkg: 5,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' }\r\n    },\r\n    Caimanoe: {\r\n        types: ['Water', 'Steel'],\r\n        bs: { hp: 73, at: 85, df: 65, sa: 80, sd: 40, sp: 87 },\r\n        weightkg: 72.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Water Veil' }\r\n    },\r\n    Carbink: {\r\n        types: ['Rock', 'Fairy'],\r\n        bs: { hp: 50, at: 50, df: 150, sa: 50, sd: 150, sp: 50 },\r\n        weightkg: 5.7,\r\n        gender: 'N',\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Chesnaught: {\r\n        types: ['Grass', 'Fighting'],\r\n        bs: { hp: 88, at: 107, df: 122, sa: 74, sd: 75, sp: 64 },\r\n        weightkg: 90,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Chespin: {\r\n        types: ['Grass'],\r\n        bs: { hp: 56, at: 61, df: 65, sa: 48, sd: 45, sp: 38 },\r\n        weightkg: 9,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Clauncher: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 53, df: 62, sa: 58, sd: 63, sp: 44 },\r\n        weightkg: 8.3,\r\n        abilities: { 0: 'Mega Launcher' },\r\n        nfe: true\r\n    },\r\n    Clawitzer: {\r\n        types: ['Water'],\r\n        bs: { hp: 71, at: 73, df: 88, sa: 120, sd: 89, sp: 59 },\r\n        weightkg: 35.3,\r\n        abilities: { 0: 'Mega Launcher' }\r\n    },\r\n    Crucibelle: {\r\n        types: ['Rock', 'Poison'],\r\n        bs: { hp: 106, at: 105, df: 65, sa: 75, sd: 85, sp: 104 },\r\n        weightkg: 23.6,\r\n        abilities: { 0: 'Regenerator' },\r\n        otherFormes: ['Crucibelle-Mega']\r\n    },\r\n    Diancie: {\r\n        types: ['Rock', 'Fairy'],\r\n        bs: { hp: 50, at: 100, df: 150, sa: 100, sd: 150, sp: 50 },\r\n        weightkg: 8.8,\r\n        abilities: { 0: 'Clear Body' },\r\n        otherFormes: ['Diancie-Mega'],\r\n        gender: 'N'\r\n    },\r\n    Dedenne: {\r\n        types: ['Electric', 'Fairy'],\r\n        bs: { hp: 67, at: 58, df: 57, sa: 81, sd: 67, sp: 101 },\r\n        weightkg: 2.2,\r\n        abilities: { 0: 'Cheek Pouch' }\r\n    },\r\n    Delphox: {\r\n        types: ['Fire', 'Psychic'],\r\n        bs: { hp: 75, at: 69, df: 72, sa: 114, sd: 100, sp: 104 },\r\n        weightkg: 39,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Diggersby: {\r\n        types: ['Normal', 'Ground'],\r\n        bs: { hp: 85, at: 71, df: 77, sa: 50, sd: 77, sp: 78 },\r\n        weightkg: 42.4,\r\n        abilities: { 0: 'Pickup' }\r\n    },\r\n    Doublade: {\r\n        types: ['Steel', 'Ghost'],\r\n        bs: { hp: 59, at: 110, df: 150, sa: 45, sd: 49, sp: 35 },\r\n        weightkg: 4.5,\r\n        abilities: { 0: 'No Guard' },\r\n        nfe: true\r\n    },\r\n    Dragalge: {\r\n        types: ['Poison', 'Dragon'],\r\n        bs: { hp: 65, at: 75, df: 90, sa: 97, sd: 123, sp: 44 },\r\n        weightkg: 81.5,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    Espurr: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 62, at: 48, df: 54, sa: 63, sd: 60, sp: 68 },\r\n        weightkg: 3.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Fennekin: {\r\n        types: ['Fire'],\r\n        bs: { hp: 40, at: 45, df: 40, sa: 62, sd: 60, sp: 60 },\r\n        weightkg: 9.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Flabébé: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 44, at: 38, df: 39, sa: 61, sd: 79, sp: 42 },\r\n        weightkg: 0.1,\r\n        nfe: true,\r\n        abilities: { 0: 'Flower Veil' }\r\n    },\r\n    Fletchinder: {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 62, at: 73, df: 55, sa: 56, sd: 52, sp: 84 },\r\n        weightkg: 16,\r\n        nfe: true,\r\n        abilities: { 0: 'Flame Body' }\r\n    },\r\n    Fletchling: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 45, at: 50, df: 43, sa: 40, sd: 38, sp: 62 },\r\n        weightkg: 1.7,\r\n        nfe: true,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Floatoy: {\r\n        types: ['Water'],\r\n        bs: { hp: 48, at: 70, df: 40, sa: 70, sd: 30, sp: 77 },\r\n        weightkg: 1.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Water Veil' }\r\n    },\r\n    Floette: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 54, at: 45, df: 47, sa: 75, sd: 98, sp: 52 },\r\n        weightkg: 0.9,\r\n        nfe: true,\r\n        otherFormes: ['Floette-Eternal'],\r\n        abilities: { 0: 'Flower Veil' }\r\n    },\r\n    'Floette-Eternal': {\r\n        types: ['Fairy'],\r\n        bs: { hp: 74, at: 65, df: 67, sa: 125, sd: 128, sp: 92 },\r\n        weightkg: 0.9,\r\n        abilities: { 0: 'Flower Veil' },\r\n        baseSpecies: 'Floette'\r\n    },\r\n    Florges: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 78, at: 65, df: 68, sa: 112, sd: 154, sp: 75 },\r\n        weightkg: 10,\r\n        abilities: { 0: 'Flower Veil' }\r\n    },\r\n    Froakie: {\r\n        types: ['Water'],\r\n        bs: { hp: 41, at: 56, df: 40, sa: 62, sd: 44, sp: 71 },\r\n        weightkg: 7,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Frogadier: {\r\n        types: ['Water'],\r\n        bs: { hp: 54, at: 63, df: 52, sa: 83, sd: 56, sp: 97 },\r\n        weightkg: 10.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Furfrou: {\r\n        types: ['Normal'],\r\n        bs: { hp: 75, at: 80, df: 60, sa: 65, sd: 90, sp: 102 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Fur Coat' }\r\n    },\r\n    Gogoat: {\r\n        types: ['Grass'],\r\n        bs: { hp: 123, at: 100, df: 62, sa: 97, sd: 81, sp: 68 },\r\n        weightkg: 91,\r\n        abilities: { 0: 'Sap Sipper' }\r\n    },\r\n    Goodra: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 90, at: 100, df: 70, sa: 110, sd: 150, sp: 80 },\r\n        weightkg: 150.5,\r\n        abilities: { 0: 'Sap Sipper' }\r\n    },\r\n    Goomy: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 45, at: 50, df: 35, sa: 55, sd: 75, sp: 40 },\r\n        weightkg: 2.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Sap Sipper' }\r\n    },\r\n    Gourgeist: {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 65, at: 90, df: 122, sa: 58, sd: 75, sp: 84 },\r\n        weightkg: 12.5,\r\n        abilities: { 0: 'Pickup' },\r\n        otherFormes: ['Gourgeist-Large', 'Gourgeist-Small', 'Gourgeist-Super']\r\n    },\r\n    'Gourgeist-Large': {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 75, at: 95, df: 122, sa: 58, sd: 75, sp: 69 },\r\n        weightkg: 14,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Gourgeist'\r\n    },\r\n    'Gourgeist-Small': {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 55, at: 85, df: 122, sa: 58, sd: 75, sp: 99 },\r\n        weightkg: 9.5,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Gourgeist'\r\n    },\r\n    'Gourgeist-Super': {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 85, at: 100, df: 122, sa: 58, sd: 75, sp: 54 },\r\n        weightkg: 39,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Gourgeist'\r\n    },\r\n    Greninja: {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 72, at: 95, df: 67, sa: 103, sd: 71, sp: 122 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Hawlucha: {\r\n        types: ['Fighting', 'Flying'],\r\n        bs: { hp: 78, at: 92, df: 75, sa: 74, sd: 63, sp: 118 },\r\n        weightkg: 21.5,\r\n        abilities: { 0: 'Limber' }\r\n    },\r\n    Heliolisk: {\r\n        types: ['Electric', 'Normal'],\r\n        bs: { hp: 62, at: 55, df: 52, sa: 109, sd: 94, sp: 109 },\r\n        weightkg: 21,\r\n        abilities: { 0: 'Dry Skin' }\r\n    },\r\n    Helioptile: {\r\n        types: ['Electric', 'Normal'],\r\n        bs: { hp: 44, at: 38, df: 33, sa: 61, sd: 43, sp: 70 },\r\n        weightkg: 6,\r\n        nfe: true,\r\n        abilities: { 0: 'Dry Skin' }\r\n    },\r\n    Honedge: {\r\n        types: ['Steel', 'Ghost'],\r\n        bs: { hp: 45, at: 80, df: 100, sa: 35, sd: 37, sp: 28 },\r\n        weightkg: 2,\r\n        abilities: { 0: 'No Guard' },\r\n        nfe: true\r\n    },\r\n    Hoopa: {\r\n        types: ['Psychic', 'Ghost'],\r\n        bs: { hp: 80, at: 110, df: 60, sa: 150, sd: 130, sp: 70 },\r\n        weightkg: 9,\r\n        gender: 'N',\r\n        abilities: { 0: 'Magician' },\r\n        otherFormes: ['Hoopa-Unbound']\r\n    },\r\n    'Hoopa-Unbound': {\r\n        types: ['Psychic', 'Dark'],\r\n        bs: { hp: 80, at: 160, df: 60, sa: 170, sd: 130, sp: 80 },\r\n        weightkg: 490,\r\n        gender: 'N',\r\n        abilities: { 0: 'Magician' },\r\n        baseSpecies: 'Hoopa'\r\n    },\r\n    Inkay: {\r\n        types: ['Dark', 'Psychic'],\r\n        bs: { hp: 53, at: 54, df: 53, sa: 37, sd: 46, sp: 45 },\r\n        weightkg: 3.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Contrary' }\r\n    },\r\n    Kerfluffle: {\r\n        types: ['Fairy', 'Fighting'],\r\n        bs: { hp: 84, at: 78, df: 86, sa: 115, sd: 88, sp: 119 },\r\n        weightkg: 24.2,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Klefki: {\r\n        types: ['Steel', 'Fairy'],\r\n        bs: { hp: 57, at: 80, df: 91, sa: 80, sd: 87, sp: 75 },\r\n        weightkg: 3,\r\n        abilities: { 0: 'Prankster' }\r\n    },\r\n    Litleo: {\r\n        types: ['Fire', 'Normal'],\r\n        bs: { hp: 62, at: 50, df: 58, sa: 73, sd: 54, sp: 72 },\r\n        weightkg: 13.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Malamar: {\r\n        types: ['Dark', 'Psychic'],\r\n        bs: { hp: 86, at: 92, df: 88, sa: 68, sd: 75, sp: 73 },\r\n        weightkg: 47,\r\n        abilities: { 0: 'Contrary' }\r\n    },\r\n    'Abomasnow-Mega': {\r\n        types: ['Grass', 'Ice'],\r\n        bs: { hp: 90, at: 132, df: 105, sa: 132, sd: 105, sp: 30 },\r\n        weightkg: 185,\r\n        abilities: { 0: 'Snow Warning' },\r\n        baseSpecies: 'Abomasnow'\r\n    },\r\n    'Absol-Mega': {\r\n        types: ['Dark'],\r\n        bs: { hp: 65, at: 150, df: 60, sa: 115, sd: 60, sp: 115 },\r\n        weightkg: 49,\r\n        abilities: { 0: 'Magic Bounce' },\r\n        baseSpecies: 'Absol'\r\n    },\r\n    'Aerodactyl-Mega': {\r\n        types: ['Rock', 'Flying'],\r\n        bs: { hp: 80, at: 135, df: 85, sa: 70, sd: 95, sp: 150 },\r\n        weightkg: 79,\r\n        abilities: { 0: 'Tough Claws' },\r\n        baseSpecies: 'Aerodactyl'\r\n    },\r\n    'Aggron-Mega': {\r\n        types: ['Steel'],\r\n        bs: { hp: 70, at: 140, df: 230, sa: 60, sd: 80, sp: 50 },\r\n        weightkg: 395,\r\n        abilities: { 0: 'Filter' },\r\n        baseSpecies: 'Aggron'\r\n    },\r\n    'Alakazam-Mega': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 55, at: 50, df: 65, sa: 175, sd: 95, sp: 150 },\r\n        weightkg: 48,\r\n        abilities: { 0: 'Trace' },\r\n        baseSpecies: 'Alakazam'\r\n    },\r\n    'Altaria-Mega': {\r\n        types: ['Dragon', 'Fairy'],\r\n        bs: { hp: 75, at: 110, df: 110, sa: 110, sd: 105, sp: 80 },\r\n        weightkg: 20.6,\r\n        abilities: { 0: 'Pixilate' },\r\n        baseSpecies: 'Altaria'\r\n    },\r\n    'Ampharos-Mega': {\r\n        types: ['Electric', 'Dragon'],\r\n        bs: { hp: 90, at: 95, df: 105, sa: 165, sd: 110, sp: 45 },\r\n        weightkg: 61.5,\r\n        abilities: { 0: 'Mold Breaker' },\r\n        baseSpecies: 'Ampharos'\r\n    },\r\n    'Audino-Mega': {\r\n        types: ['Normal', 'Fairy'],\r\n        bs: { hp: 103, at: 60, df: 126, sa: 80, sd: 126, sp: 50 },\r\n        weightkg: 32,\r\n        abilities: { 0: 'Healer' },\r\n        baseSpecies: 'Audino'\r\n    },\r\n    'Banette-Mega': {\r\n        types: ['Ghost'],\r\n        bs: { hp: 64, at: 165, df: 75, sa: 93, sd: 83, sp: 75 },\r\n        weightkg: 13,\r\n        abilities: { 0: 'Prankster' },\r\n        baseSpecies: 'Banette'\r\n    },\r\n    'Beedrill-Mega': {\r\n        types: ['Bug', 'Poison'],\r\n        bs: { hp: 65, at: 150, df: 40, sa: 15, sd: 80, sp: 145 },\r\n        weightkg: 40.5,\r\n        abilities: { 0: 'Adaptability' },\r\n        baseSpecies: 'Beedrill'\r\n    },\r\n    'Blastoise-Mega': {\r\n        types: ['Water'],\r\n        bs: { hp: 79, at: 103, df: 120, sa: 135, sd: 115, sp: 78 },\r\n        weightkg: 101.1,\r\n        abilities: { 0: 'Mega Launcher' },\r\n        baseSpecies: 'Blastoise'\r\n    },\r\n    'Blaziken-Mega': {\r\n        types: ['Fire', 'Fighting'],\r\n        bs: { hp: 80, at: 160, df: 80, sa: 130, sd: 80, sp: 100 },\r\n        weightkg: 52,\r\n        abilities: { 0: 'Speed Boost' },\r\n        baseSpecies: 'Blaziken'\r\n    },\r\n    'Camerupt-Mega': {\r\n        types: ['Fire', 'Ground'],\r\n        bs: { hp: 70, at: 120, df: 100, sa: 145, sd: 105, sp: 20 },\r\n        weightkg: 320.5,\r\n        abilities: { 0: 'Sheer Force' },\r\n        baseSpecies: 'Camerupt'\r\n    },\r\n    'Charizard-Mega-X': {\r\n        types: ['Fire', 'Dragon'],\r\n        bs: { hp: 78, at: 130, df: 111, sa: 130, sd: 85, sp: 100 },\r\n        weightkg: 110.5,\r\n        abilities: { 0: 'Tough Claws' },\r\n        baseSpecies: 'Charizard'\r\n    },\r\n    'Charizard-Mega-Y': {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 78, at: 104, df: 78, sa: 159, sd: 115, sp: 100 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'Drought' },\r\n        baseSpecies: 'Charizard'\r\n    },\r\n    'Crucibelle-Mega': {\r\n        types: ['Rock', 'Poison'],\r\n        bs: { hp: 106, at: 135, df: 75, sa: 85, sd: 125, sp: 114 },\r\n        weightkg: 22.5,\r\n        abilities: { 0: 'Magic Guard' },\r\n        baseSpecies: 'Crucibelle'\r\n    },\r\n    'Diancie-Mega': {\r\n        types: ['Rock', 'Fairy'],\r\n        bs: { hp: 50, at: 160, df: 110, sa: 160, sd: 110, sp: 110 },\r\n        weightkg: 27.8,\r\n        abilities: { 0: 'Magic Bounce' },\r\n        baseSpecies: 'Diancie',\r\n        gender: 'N'\r\n    },\r\n    'Gallade-Mega': {\r\n        types: ['Psychic', 'Fighting'],\r\n        bs: { hp: 68, at: 165, df: 95, sa: 65, sd: 115, sp: 110 },\r\n        weightkg: 56.4,\r\n        abilities: { 0: 'Inner Focus' },\r\n        baseSpecies: 'Gallade'\r\n    },\r\n    'Garchomp-Mega': {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 108, at: 170, df: 115, sa: 120, sd: 95, sp: 92 },\r\n        weightkg: 95,\r\n        abilities: { 0: 'Sand Force' },\r\n        baseSpecies: 'Garchomp'\r\n    },\r\n    'Gardevoir-Mega': {\r\n        types: ['Psychic', 'Fairy'],\r\n        bs: { hp: 68, at: 85, df: 65, sa: 165, sd: 135, sp: 100 },\r\n        weightkg: 48.4,\r\n        abilities: { 0: 'Pixilate' },\r\n        baseSpecies: 'Gardevoir'\r\n    },\r\n    'Gengar-Mega': {\r\n        types: ['Ghost', 'Poison'],\r\n        bs: { hp: 60, at: 65, df: 80, sa: 170, sd: 95, sp: 130 },\r\n        weightkg: 40.5,\r\n        abilities: { 0: 'Shadow Tag' },\r\n        baseSpecies: 'Gengar'\r\n    },\r\n    'Glalie-Mega': {\r\n        types: ['Ice'],\r\n        bs: { hp: 80, at: 120, df: 80, sa: 120, sd: 80, sp: 100 },\r\n        weightkg: 350.2,\r\n        abilities: { 0: 'Refrigerate' },\r\n        baseSpecies: 'Glalie'\r\n    },\r\n    'Gyarados-Mega': {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 95, at: 155, df: 109, sa: 70, sd: 130, sp: 81 },\r\n        weightkg: 305,\r\n        abilities: { 0: 'Mold Breaker' },\r\n        baseSpecies: 'Gyarados'\r\n    },\r\n    'Heracross-Mega': {\r\n        types: ['Bug', 'Fighting'],\r\n        bs: { hp: 80, at: 185, df: 115, sa: 40, sd: 105, sp: 75 },\r\n        weightkg: 62.5,\r\n        abilities: { 0: 'Skill Link' },\r\n        baseSpecies: 'Heracross'\r\n    },\r\n    'Houndoom-Mega': {\r\n        types: ['Dark', 'Fire'],\r\n        bs: { hp: 75, at: 90, df: 90, sa: 140, sd: 90, sp: 115 },\r\n        weightkg: 49.5,\r\n        abilities: { 0: 'Solar Power' },\r\n        baseSpecies: 'Houndoom'\r\n    },\r\n    'Kangaskhan-Mega': {\r\n        types: ['Normal'],\r\n        bs: { hp: 105, at: 125, df: 100, sa: 60, sd: 100, sp: 100 },\r\n        weightkg: 100,\r\n        abilities: { 0: 'Parental Bond' },\r\n        baseSpecies: 'Kangaskhan'\r\n    },\r\n    'Latias-Mega': {\r\n        types: ['Dragon', 'Psychic'],\r\n        bs: { hp: 80, at: 100, df: 120, sa: 140, sd: 150, sp: 110 },\r\n        weightkg: 52,\r\n        abilities: { 0: 'Levitate' },\r\n        baseSpecies: 'Latias'\r\n    },\r\n    'Latios-Mega': {\r\n        types: ['Dragon', 'Psychic'],\r\n        bs: { hp: 80, at: 130, df: 100, sa: 160, sd: 120, sp: 110 },\r\n        weightkg: 70,\r\n        abilities: { 0: 'Levitate' },\r\n        baseSpecies: 'Latios'\r\n    },\r\n    'Lopunny-Mega': {\r\n        types: ['Normal', 'Fighting'],\r\n        bs: { hp: 65, at: 136, df: 94, sa: 54, sd: 96, sp: 135 },\r\n        weightkg: 28.3,\r\n        abilities: { 0: 'Scrappy' },\r\n        baseSpecies: 'Lopunny'\r\n    },\r\n    'Lucario-Mega': {\r\n        types: ['Fighting', 'Steel'],\r\n        bs: { hp: 70, at: 145, df: 88, sa: 140, sd: 70, sp: 112 },\r\n        weightkg: 57.5,\r\n        abilities: { 0: 'Adaptability' },\r\n        baseSpecies: 'Lucario'\r\n    },\r\n    'Manectric-Mega': {\r\n        types: ['Electric'],\r\n        bs: { hp: 70, at: 75, df: 80, sa: 135, sd: 80, sp: 135 },\r\n        weightkg: 44,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Manectric'\r\n    },\r\n    'Mawile-Mega': {\r\n        types: ['Steel', 'Fairy'],\r\n        bs: { hp: 50, at: 105, df: 125, sa: 55, sd: 95, sp: 50 },\r\n        weightkg: 23.5,\r\n        abilities: { 0: 'Huge Power' },\r\n        baseSpecies: 'Mawile'\r\n    },\r\n    'Medicham-Mega': {\r\n        types: ['Fighting', 'Psychic'],\r\n        bs: { hp: 60, at: 100, df: 85, sa: 80, sd: 85, sp: 100 },\r\n        weightkg: 31.5,\r\n        abilities: { 0: 'Pure Power' },\r\n        baseSpecies: 'Medicham'\r\n    },\r\n    'Metagross-Mega': {\r\n        types: ['Steel', 'Psychic'],\r\n        bs: { hp: 80, at: 145, df: 150, sa: 105, sd: 110, sp: 110 },\r\n        weightkg: 942.9,\r\n        abilities: { 0: 'Tough Claws' },\r\n        baseSpecies: 'Metagross',\r\n        gender: 'N'\r\n    },\r\n    'Mewtwo-Mega-X': {\r\n        types: ['Psychic', 'Fighting'],\r\n        bs: { hp: 106, at: 190, df: 100, sa: 154, sd: 100, sp: 130 },\r\n        weightkg: 127,\r\n        abilities: { 0: 'Steadfast' },\r\n        baseSpecies: 'Mewtwo',\r\n        gender: 'N'\r\n    },\r\n    'Mewtwo-Mega-Y': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 106, at: 150, df: 70, sa: 194, sd: 120, sp: 140 },\r\n        weightkg: 33,\r\n        abilities: { 0: 'Insomnia' },\r\n        baseSpecies: 'Mewtwo',\r\n        gender: 'N'\r\n    },\r\n    'Pidgeot-Mega': {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 83, at: 80, df: 80, sa: 135, sd: 80, sp: 121 },\r\n        weightkg: 50.5,\r\n        abilities: { 0: 'No Guard' },\r\n        baseSpecies: 'Pidgeot'\r\n    },\r\n    'Pinsir-Mega': {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 65, at: 155, df: 120, sa: 65, sd: 90, sp: 105 },\r\n        weightkg: 59,\r\n        abilities: { 0: 'Aerilate' },\r\n        baseSpecies: 'Pinsir'\r\n    },\r\n    'Rayquaza-Mega': {\r\n        types: ['Dragon', 'Flying'],\r\n        bs: { hp: 105, at: 180, df: 100, sa: 180, sd: 100, sp: 115 },\r\n        weightkg: 392,\r\n        gender: 'N',\r\n        abilities: { 0: 'Delta Stream' },\r\n        baseSpecies: 'Rayquaza'\r\n    },\r\n    'Sableye-Mega': {\r\n        types: ['Dark', 'Ghost'],\r\n        bs: { hp: 50, at: 85, df: 125, sa: 85, sd: 115, sp: 20 },\r\n        weightkg: 161,\r\n        abilities: { 0: 'Magic Bounce' },\r\n        baseSpecies: 'Sableye'\r\n    },\r\n    'Salamence-Mega': {\r\n        types: ['Dragon', 'Flying'],\r\n        bs: { hp: 95, at: 145, df: 130, sa: 120, sd: 90, sp: 120 },\r\n        weightkg: 112.6,\r\n        abilities: { 0: 'Aerilate' },\r\n        baseSpecies: 'Salamence'\r\n    },\r\n    'Sceptile-Mega': {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 70, at: 110, df: 75, sa: 145, sd: 85, sp: 145 },\r\n        weightkg: 55.2,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Sceptile'\r\n    },\r\n    'Scizor-Mega': {\r\n        types: ['Bug', 'Steel'],\r\n        bs: { hp: 70, at: 150, df: 140, sa: 65, sd: 100, sp: 75 },\r\n        weightkg: 125,\r\n        abilities: { 0: 'Technician' },\r\n        baseSpecies: 'Scizor'\r\n    },\r\n    'Sharpedo-Mega': {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 70, at: 140, df: 70, sa: 110, sd: 65, sp: 105 },\r\n        weightkg: 130.3,\r\n        abilities: { 0: 'Strong Jaw' },\r\n        baseSpecies: 'Sharpedo'\r\n    },\r\n    'Slowbro-Mega': {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 95, at: 75, df: 180, sa: 130, sd: 80, sp: 30 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Shell Armor' },\r\n        baseSpecies: 'Slowbro'\r\n    },\r\n    'Steelix-Mega': {\r\n        types: ['Steel', 'Ground'],\r\n        bs: { hp: 75, at: 125, df: 230, sa: 55, sd: 95, sp: 30 },\r\n        weightkg: 740,\r\n        abilities: { 0: 'Sand Force' },\r\n        baseSpecies: 'Steelix'\r\n    },\r\n    'Swampert-Mega': {\r\n        types: ['Water', 'Ground'],\r\n        bs: { hp: 100, at: 150, df: 110, sa: 95, sd: 110, sp: 70 },\r\n        weightkg: 102,\r\n        abilities: { 0: 'Swift Swim' },\r\n        baseSpecies: 'Swampert'\r\n    },\r\n    'Tyranitar-Mega': {\r\n        types: ['Rock', 'Dark'],\r\n        bs: { hp: 100, at: 164, df: 150, sa: 95, sd: 120, sp: 71 },\r\n        weightkg: 255,\r\n        abilities: { 0: 'Sand Stream' },\r\n        baseSpecies: 'Tyranitar'\r\n    },\r\n    'Venusaur-Mega': {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 80, at: 100, df: 123, sa: 122, sd: 120, sp: 80 },\r\n        weightkg: 155.5,\r\n        abilities: { 0: 'Thick Fat' },\r\n        baseSpecies: 'Venusaur'\r\n    },\r\n    Meowstic: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 74, at: 48, df: 76, sa: 83, sd: 81, sp: 104 },\r\n        weightkg: 8.5,\r\n        abilities: { 0: 'Keen Eye' },\r\n        otherFormes: ['Meowstic-F']\r\n    },\r\n    'Meowstic-F': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 74, at: 48, df: 76, sa: 83, sd: 81, sp: 104 },\r\n        weightkg: 8.5,\r\n        abilities: { 0: 'Keen Eye' },\r\n        baseSpecies: 'Meowstic'\r\n    },\r\n    Naviathan: {\r\n        types: ['Water', 'Steel'],\r\n        bs: { hp: 103, at: 110, df: 90, sa: 95, sd: 65, sp: 97 },\r\n        weightkg: 510,\r\n        abilities: { 0: 'Water Veil' }\r\n    },\r\n    Noibat: {\r\n        types: ['Flying', 'Dragon'],\r\n        bs: { hp: 40, at: 30, df: 35, sa: 45, sd: 40, sp: 55 },\r\n        weightkg: 8,\r\n        nfe: true,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Noivern: {\r\n        types: ['Flying', 'Dragon'],\r\n        bs: { hp: 85, at: 70, df: 80, sa: 97, sd: 80, sp: 123 },\r\n        weightkg: 85,\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Pancham: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 67, at: 82, df: 62, sa: 46, sd: 48, sp: 43 },\r\n        weightkg: 8,\r\n        nfe: true,\r\n        abilities: { 0: 'Iron Fist' }\r\n    },\r\n    Pangoro: {\r\n        types: ['Fighting', 'Dark'],\r\n        bs: { hp: 95, at: 124, df: 78, sa: 69, sd: 71, sp: 58 },\r\n        weightkg: 136,\r\n        abilities: { 0: 'Iron Fist' }\r\n    },\r\n    Phantump: {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 43, at: 70, df: 48, sa: 50, sd: 60, sp: 38 },\r\n        weightkg: 7,\r\n        nfe: true,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    'Pikachu-Cosplay': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Rock-Star': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Belle': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-PhD': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Pop-Star': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Libre': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Lightning Rod' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    Plasmanta: {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 60, at: 57, df: 119, sa: 131, sd: 98, sp: 100 },\r\n        weightkg: 460,\r\n        abilities: { 0: 'Storm Drain' }\r\n    },\r\n    Pluffle: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 74, at: 38, df: 51, sa: 65, sd: 78, sp: 49 },\r\n        weightkg: 1.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    'Groudon-Primal': {\r\n        types: ['Ground', 'Fire'],\r\n        bs: { hp: 100, at: 180, df: 160, sa: 150, sd: 90, sp: 90 },\r\n        weightkg: 999.7,\r\n        abilities: { 0: 'Desolate Land' },\r\n        baseSpecies: 'Groudon',\r\n        gender: 'N'\r\n    },\r\n    'Kyogre-Primal': {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 150, df: 90, sa: 180, sd: 160, sp: 90 },\r\n        weightkg: 430,\r\n        abilities: { 0: 'Primordial Sea' },\r\n        baseSpecies: 'Kyogre',\r\n        gender: 'N'\r\n    },\r\n    Pumpkaboo: {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 49, at: 66, df: 70, sa: 44, sd: 55, sp: 51 },\r\n        weightkg: 5,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' },\r\n        otherFormes: ['Pumpkaboo-Large', 'Pumpkaboo-Small', 'Pumpkaboo-Super']\r\n    },\r\n    'Pumpkaboo-Large': {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 54, at: 66, df: 70, sa: 44, sd: 55, sp: 46 },\r\n        weightkg: 7.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Pumpkaboo'\r\n    },\r\n    'Pumpkaboo-Small': {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 44, at: 66, df: 70, sa: 44, sd: 55, sp: 56 },\r\n        weightkg: 3.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Pumpkaboo'\r\n    },\r\n    'Pumpkaboo-Super': {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 59, at: 66, df: 70, sa: 44, sd: 55, sp: 41 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Pumpkaboo'\r\n    },\r\n    Pyroar: {\r\n        types: ['Fire', 'Normal'],\r\n        bs: { hp: 86, at: 68, df: 72, sa: 109, sd: 66, sp: 106 },\r\n        weightkg: 81.5,\r\n        abilities: { 0: 'Rivalry' }\r\n    },\r\n    Quilladin: {\r\n        types: ['Grass'],\r\n        bs: { hp: 61, at: 78, df: 95, sa: 56, sd: 58, sp: 57 },\r\n        weightkg: 29,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Scatterbug: {\r\n        types: ['Bug'],\r\n        bs: { hp: 38, at: 35, df: 40, sa: 27, sd: 25, sp: 35 },\r\n        weightkg: 2.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    Skiddo: {\r\n        types: ['Grass'],\r\n        bs: { hp: 66, at: 65, df: 48, sa: 62, sd: 57, sp: 52 },\r\n        weightkg: 31,\r\n        nfe: true,\r\n        abilities: { 0: 'Sap Sipper' }\r\n    },\r\n    Skrelp: {\r\n        types: ['Poison', 'Water'],\r\n        bs: { hp: 50, at: 60, df: 60, sa: 60, sd: 60, sp: 30 },\r\n        weightkg: 7.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    Sliggoo: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 68, at: 75, df: 53, sa: 83, sd: 113, sp: 60 },\r\n        weightkg: 17.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Sap Sipper' }\r\n    },\r\n    Slurpuff: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 82, at: 80, df: 86, sa: 85, sd: 75, sp: 72 },\r\n        weightkg: 5,\r\n        abilities: { 0: 'Sweet Veil' }\r\n    },\r\n    Snugglow: {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 40, at: 37, df: 79, sa: 91, sd: 68, sp: 70 },\r\n        weightkg: 6,\r\n        nfe: true,\r\n        abilities: { 0: 'Storm Drain' }\r\n    },\r\n    Spewpa: {\r\n        types: ['Bug'],\r\n        bs: { hp: 45, at: 22, df: 60, sa: 27, sd: 30, sp: 29 },\r\n        weightkg: 8.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Spritzee: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 78, at: 52, df: 60, sa: 63, sd: 65, sp: 23 },\r\n        weightkg: 0.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Healer' }\r\n    },\r\n    Swirlix: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 62, at: 48, df: 66, sa: 59, sd: 57, sp: 49 },\r\n        weightkg: 3.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Sweet Veil' }\r\n    },\r\n    Sylveon: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 95, at: 65, df: 65, sa: 110, sd: 130, sp: 60 },\r\n        weightkg: 23.5,\r\n        abilities: { 0: 'Cute Charm' }\r\n    },\r\n    Talonflame: {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 78, at: 81, df: 71, sa: 74, sd: 69, sp: 126 },\r\n        weightkg: 24.5,\r\n        abilities: { 0: 'Flame Body' }\r\n    },\r\n    Trevenant: {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 85, at: 110, df: 76, sa: 65, sd: 82, sp: 56 },\r\n        weightkg: 71,\r\n        abilities: { 0: 'Natural Cure' }\r\n    },\r\n    Tyrantrum: {\r\n        types: ['Rock', 'Dragon'],\r\n        bs: { hp: 82, at: 121, df: 119, sa: 69, sd: 59, sp: 71 },\r\n        weightkg: 270,\r\n        abilities: { 0: 'Strong Jaw' }\r\n    },\r\n    Tyrunt: {\r\n        types: ['Rock', 'Dragon'],\r\n        bs: { hp: 58, at: 89, df: 77, sa: 45, sd: 45, sp: 48 },\r\n        weightkg: 26,\r\n        nfe: true,\r\n        abilities: { 0: 'Strong Jaw' }\r\n    },\r\n    Vivillon: {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 80, at: 52, df: 50, sa: 90, sd: 50, sp: 89 },\r\n        weightkg: 17,\r\n        abilities: { 0: 'Shield Dust' },\r\n        otherFormes: ['Vivillon-Fancy', 'Vivillon-Pokeball']\r\n    },\r\n    'Vivillon-Fancy': {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 80, at: 52, df: 50, sa: 90, sd: 50, sp: 89 },\r\n        weightkg: 17,\r\n        abilities: { 0: 'Shield Dust' },\r\n        baseSpecies: 'Vivillon'\r\n    },\r\n    'Vivillon-Pokeball': {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 80, at: 52, df: 50, sa: 90, sd: 50, sp: 89 },\r\n        weightkg: 17,\r\n        abilities: { 0: 'Shield Dust' },\r\n        baseSpecies: 'Vivillon'\r\n    },\r\n    Volcanion: {\r\n        types: ['Fire', 'Water'],\r\n        bs: { hp: 80, at: 110, df: 120, sa: 130, sd: 90, sp: 70 },\r\n        weightkg: 195,\r\n        gender: 'N',\r\n        abilities: { 0: 'Water Absorb' }\r\n    },\r\n    Volkraken: {\r\n        types: ['Water', 'Fire'],\r\n        bs: { hp: 100, at: 45, df: 80, sa: 135, sd: 100, sp: 95 },\r\n        weightkg: 44.5,\r\n        abilities: { 0: 'Analytic' }\r\n    },\r\n    Volkritter: {\r\n        types: ['Water', 'Fire'],\r\n        bs: { hp: 60, at: 30, df: 50, sa: 80, sd: 60, sp: 70 },\r\n        weightkg: 15,\r\n        nfe: true,\r\n        abilities: { 0: 'Anticipation' }\r\n    },\r\n    Xerneas: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 126, at: 131, df: 95, sa: 131, sd: 98, sp: 99 },\r\n        weightkg: 215,\r\n        abilities: { 0: 'Fairy Aura' },\r\n        gender: 'N'\r\n    },\r\n    Yveltal: {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 126, at: 131, df: 95, sa: 131, sd: 98, sp: 99 },\r\n        weightkg: 203,\r\n        abilities: { 0: 'Dark Aura' },\r\n        gender: 'N'\r\n    },\r\n    Zygarde: {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 108, at: 100, df: 121, sa: 81, sd: 95, sp: 95 },\r\n        weightkg: 305,\r\n        abilities: { 0: 'Aura Break' },\r\n        gender: 'N'\r\n    }\r\n};\r\nvar XY = (0, util_1.extend)(true, {}, BW, XY_PATCH);\r\nXY['Arceus'].otherFormes.push('Arceus-Fairy');\r\nXY['Arceus'].otherFormes.sort();\r\nvar SM_PATCH = {\r\n    'Alakazam-Mega': { bs: { sd: 105 } },\r\n    Arbok: { bs: { at: 95 } },\r\n    Ariados: { bs: { sd: 70 } },\r\n    Beartic: { bs: { at: 130 } },\r\n    Chimecho: { bs: { hp: 75, df: 80, sd: 90 } },\r\n    Corsola: { bs: { hp: 65, df: 95, sd: 95 } },\r\n    'Crucibelle-Mega': { bs: { sa: 91, sp: 108 } },\r\n    Crustle: { bs: { at: 105 } },\r\n    Cryogonal: { bs: { hp: 80, df: 50 } },\r\n    Delcatty: { bs: { sp: 90 } },\r\n    Diglett: { otherFormes: ['Diglett-Alola'] },\r\n    Dodrio: { bs: { sp: 110 } },\r\n    Dugtrio: { bs: { at: 100 }, otherFormes: ['Dugtrio-Alola'] },\r\n    Eevee: { otherFormes: ['Eevee-Starter'] },\r\n    Electrode: { bs: { sp: 150 } },\r\n    Exeggutor: { bs: { sd: 75 }, otherFormes: ['Exeggutor-Alola'] },\r\n    'Farfetch\\u2019d': { bs: { at: 90 } },\r\n    Gengar: { abilities: { 0: 'Cursed Body' } },\r\n    Geodude: { otherFormes: ['Geodude-Alola'] },\r\n    Golem: { otherFormes: ['Golem-Alola'] },\r\n    Graveler: { otherFormes: ['Graveler-Alola'] },\r\n    Greninja: { otherFormes: ['Greninja-Ash'] },\r\n    Grimer: { otherFormes: ['Grimer-Alola'] },\r\n    Illumise: { bs: { df: 75, sd: 85 } },\r\n    Lunatone: { bs: { hp: 90 } },\r\n    Magcargo: { bs: { hp: 60, sa: 90 } },\r\n    Mantine: { bs: { hp: 85 } },\r\n    Marowak: { otherFormes: ['Marowak-Alola', 'Marowak-Alola-Totem'] },\r\n    Masquerain: { bs: { sa: 100, sp: 80 } },\r\n    Meowth: { otherFormes: ['Meowth-Alola'] },\r\n    Muk: { otherFormes: ['Muk-Alola'] },\r\n    Necturna: { bs: { sp: 58 } },\r\n    Ninetales: { otherFormes: ['Ninetales-Alola'] },\r\n    Naviathan: { abilities: { 0: 'Guts' } },\r\n    Noctowl: { bs: { sa: 86 } },\r\n    Pelipper: { bs: { sa: 95 } },\r\n    Persian: { otherFormes: ['Persian-Alola'] },\r\n    Pikachu: {\r\n        otherFormes: [\r\n            'Pikachu-Alola',\r\n            'Pikachu-Hoenn',\r\n            'Pikachu-Kalos',\r\n            'Pikachu-Original',\r\n            'Pikachu-Partner',\r\n            'Pikachu-Sinnoh',\r\n            'Pikachu-Starter',\r\n            'Pikachu-Unova',\r\n        ]\r\n    },\r\n    Qwilfish: { bs: { df: 85 } },\r\n    Raichu: { otherFormes: ['Raichu-Alola'] },\r\n    Raticate: { otherFormes: ['Raticate-Alola', 'Raticate-Alola-Totem'] },\r\n    Rattata: { otherFormes: ['Rattata-Alola'] },\r\n    Sandshrew: { otherFormes: ['Sandshrew-Alola'] },\r\n    Sandslash: { otherFormes: ['Sandslash-Alola'] },\r\n    Solrock: { bs: { hp: 90 } },\r\n    Swellow: { bs: { sa: 75 } },\r\n    Volbeat: { bs: { df: 75, sd: 85 } },\r\n    Vulpix: { otherFormes: ['Vulpix-Alola'] },\r\n    Woobat: { bs: { hp: 65 } },\r\n    Zygarde: { otherFormes: ['Zygarde-10%', 'Zygarde-Complete'] },\r\n    Araquanid: {\r\n        types: ['Water', 'Bug'],\r\n        bs: { hp: 68, at: 70, df: 92, sa: 50, sd: 132, sp: 42 },\r\n        abilities: { 0: 'Water Bubble' },\r\n        weightkg: 82,\r\n        otherFormes: ['Araquanid-Totem']\r\n    },\r\n    'Araquanid-Totem': {\r\n        types: ['Water', 'Bug'],\r\n        bs: { hp: 68, at: 70, df: 92, sa: 50, sd: 132, sp: 42 },\r\n        abilities: { 0: 'Water Bubble' },\r\n        weightkg: 217.5,\r\n        baseSpecies: 'Araquanid'\r\n    },\r\n    Bewear: {\r\n        types: ['Normal', 'Fighting'],\r\n        bs: { hp: 120, at: 125, df: 80, sa: 55, sd: 60, sp: 60 },\r\n        abilities: { 0: 'Fluffy' },\r\n        weightkg: 135\r\n    },\r\n    Blacephalon: {\r\n        types: ['Fire', 'Ghost'],\r\n        bs: { hp: 53, at: 127, df: 53, sa: 151, sd: 79, sp: 107 },\r\n        weightkg: 13,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Bounsweet: {\r\n        types: ['Grass'],\r\n        bs: { hp: 42, at: 30, df: 38, sa: 30, sd: 38, sp: 32 },\r\n        weightkg: 3.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    Brionne: {\r\n        types: ['Water'],\r\n        bs: { hp: 60, at: 69, df: 69, sa: 91, sd: 81, sp: 50 },\r\n        weightkg: 17.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Bruxish: {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 68, at: 105, df: 70, sa: 70, sd: 70, sp: 92 },\r\n        weightkg: 19,\r\n        abilities: { 0: 'Dazzling' }\r\n    },\r\n    Buzzwole: {\r\n        types: ['Bug', 'Fighting'],\r\n        bs: { hp: 107, at: 139, df: 139, sa: 53, sd: 53, sp: 79 },\r\n        weightkg: 333.6,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Caribolt: {\r\n        types: ['Grass', 'Electric'],\r\n        bs: { hp: 84, at: 106, df: 82, sa: 77, sd: 80, sp: 106 },\r\n        weightkg: 140,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Celesteela: {\r\n        types: ['Steel', 'Flying'],\r\n        bs: { hp: 97, at: 101, df: 103, sa: 107, sd: 101, sp: 61 },\r\n        weightkg: 999.9,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Charjabug: {\r\n        types: ['Bug', 'Electric'],\r\n        bs: { hp: 57, at: 82, df: 95, sa: 55, sd: 75, sp: 36 },\r\n        weightkg: 10.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Battery' }\r\n    },\r\n    Comfey: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 51, at: 52, df: 90, sa: 82, sd: 110, sp: 100 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Flower Veil' }\r\n    },\r\n    Cosmoem: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 43, at: 29, df: 131, sa: 29, sd: 131, sp: 37 },\r\n        weightkg: 999.9,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Sturdy' }\r\n    },\r\n    Coribalis: {\r\n        types: ['Water', 'Bug'],\r\n        bs: { hp: 76, at: 69, df: 90, sa: 65, sd: 77, sp: 43 },\r\n        weightkg: 24.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Cosmog: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 43, at: 29, df: 31, sa: 29, sd: 31, sp: 37 },\r\n        weightkg: 0.1,\r\n        nfe: true,\r\n        gender: 'N',\r\n        abilities: { 0: 'Unaware' }\r\n    },\r\n    Crabominable: {\r\n        types: ['Fighting', 'Ice'],\r\n        bs: { hp: 97, at: 132, df: 77, sa: 62, sd: 67, sp: 43 },\r\n        weightkg: 180,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Crabrawler: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 47, at: 82, df: 57, sa: 42, sd: 47, sp: 63 },\r\n        weightkg: 7,\r\n        nfe: true,\r\n        abilities: { 0: 'Hyper Cutter' }\r\n    },\r\n    Cutiefly: {\r\n        types: ['Bug', 'Fairy'],\r\n        bs: { hp: 40, at: 45, df: 40, sa: 55, sd: 40, sp: 84 },\r\n        weightkg: 0.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Honey Gather' }\r\n    },\r\n    Dartrix: {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 78, at: 75, df: 75, sa: 70, sd: 70, sp: 52 },\r\n        weightkg: 16,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Decidueye: {\r\n        types: ['Grass', 'Ghost'],\r\n        bs: { hp: 78, at: 107, df: 75, sa: 100, sd: 100, sp: 70 },\r\n        weightkg: 36.6,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Dewpider: {\r\n        types: ['Water', 'Bug'],\r\n        bs: { hp: 38, at: 40, df: 52, sa: 40, sd: 72, sp: 27 },\r\n        weightkg: 4,\r\n        nfe: true,\r\n        abilities: { 0: 'Water Bubble' }\r\n    },\r\n    Dhelmise: {\r\n        types: ['Ghost', 'Grass'],\r\n        bs: { hp: 70, at: 131, df: 100, sa: 86, sd: 90, sp: 40 },\r\n        weightkg: 210,\r\n        gender: 'N',\r\n        abilities: { 0: 'Steelworker' }\r\n    },\r\n    Drampa: {\r\n        types: ['Normal', 'Dragon'],\r\n        bs: { hp: 78, at: 60, df: 85, sa: 135, sd: 91, sp: 36 },\r\n        weightkg: 185,\r\n        abilities: { 0: 'Berserk' }\r\n    },\r\n    'Diglett-Alola': {\r\n        types: ['Ground', 'Steel'],\r\n        bs: { hp: 10, at: 55, df: 30, sa: 35, sd: 45, sp: 90 },\r\n        weightkg: 1,\r\n        baseSpecies: 'Diglett',\r\n        nfe: true,\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    'Dugtrio-Alola': {\r\n        types: ['Ground', 'Steel'],\r\n        bs: { hp: 35, at: 100, df: 60, sa: 50, sd: 70, sp: 110 },\r\n        weightkg: 66.6,\r\n        baseSpecies: 'Dugtrio',\r\n        abilities: { 0: 'Sand Veil' }\r\n    },\r\n    'Eevee-Starter': {\r\n        types: ['Normal'],\r\n        bs: { hp: 65, at: 75, df: 70, sa: 65, sd: 85, sp: 75 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Run Away' },\r\n        baseSpecies: 'Eevee'\r\n    },\r\n    Electrelk: {\r\n        types: ['Grass', 'Electric'],\r\n        bs: { hp: 59, at: 81, df: 67, sa: 57, sd: 55, sp: 101 },\r\n        weightkg: 41.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Equilibra: {\r\n        types: ['Steel', 'Ground'],\r\n        bs: { hp: 102, at: 50, df: 96, sa: 133, sd: 118, sp: 60 },\r\n        weightkg: 51.3,\r\n        gender: 'N',\r\n        abilities: { 0: 'Levitate' }\r\n    },\r\n    'Exeggutor-Alola': {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 95, at: 105, df: 85, sa: 125, sd: 75, sp: 45 },\r\n        weightkg: 415.6,\r\n        baseSpecies: 'Exeggutor',\r\n        abilities: { 0: 'Frisk' }\r\n    },\r\n    Fawnifer: {\r\n        types: ['Grass'],\r\n        bs: { hp: 49, at: 61, df: 42, sa: 52, sd: 40, sp: 76 },\r\n        weightkg: 6.9,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Fomantis: {\r\n        types: ['Grass'],\r\n        bs: { hp: 40, at: 55, df: 35, sa: 50, sd: 35, sp: 35 },\r\n        weightkg: 1.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    'Geodude-Alola': {\r\n        types: ['Rock', 'Electric'],\r\n        bs: { hp: 40, at: 80, df: 100, sa: 30, sd: 30, sp: 20 },\r\n        weightkg: 20.3,\r\n        baseSpecies: 'Geodude',\r\n        nfe: true,\r\n        abilities: { 0: 'Magnet Pull' }\r\n    },\r\n    'Golem-Alola': {\r\n        types: ['Rock', 'Electric'],\r\n        bs: { hp: 80, at: 120, df: 130, sa: 55, sd: 65, sp: 45 },\r\n        weightkg: 316,\r\n        abilities: { 0: 'Magnet Pull' },\r\n        baseSpecies: 'Golem'\r\n    },\r\n    Golisopod: {\r\n        types: ['Bug', 'Water'],\r\n        bs: { hp: 75, at: 125, df: 140, sa: 60, sd: 90, sp: 40 },\r\n        weightkg: 108,\r\n        abilities: { 0: 'Emergency Exit' }\r\n    },\r\n    'Graveler-Alola': {\r\n        types: ['Rock', 'Electric'],\r\n        bs: { hp: 55, at: 95, df: 115, sa: 45, sd: 45, sp: 35 },\r\n        weightkg: 110,\r\n        baseSpecies: 'Graveler',\r\n        nfe: true,\r\n        abilities: { 0: 'Magnet Pull' }\r\n    },\r\n    'Grimer-Alola': {\r\n        types: ['Poison', 'Dark'],\r\n        bs: { hp: 80, at: 80, df: 50, sa: 40, sd: 50, sp: 25 },\r\n        weightkg: 42,\r\n        baseSpecies: 'Grimer',\r\n        nfe: true,\r\n        abilities: { 0: 'Poison Touch' }\r\n    },\r\n    'Greninja-Ash': {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 72, at: 145, df: 67, sa: 153, sd: 71, sp: 132 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Battle Bond' },\r\n        baseSpecies: 'Greninja'\r\n    },\r\n    Grubbin: {\r\n        types: ['Bug'],\r\n        bs: { hp: 47, at: 62, df: 45, sa: 55, sd: 45, sp: 46 },\r\n        weightkg: 4.4,\r\n        nfe: true,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Gumshoos: {\r\n        types: ['Normal'],\r\n        bs: { hp: 88, at: 110, df: 60, sa: 55, sd: 60, sp: 45 },\r\n        weightkg: 14.2,\r\n        otherFormes: ['Gumshoos-Totem'],\r\n        abilities: { 0: 'Stakeout' }\r\n    },\r\n    'Gumshoos-Totem': {\r\n        types: ['Normal'],\r\n        bs: { hp: 88, at: 110, df: 60, sa: 55, sd: 60, sp: 45 },\r\n        weightkg: 60,\r\n        baseSpecies: 'Gumshoos',\r\n        abilities: { 0: 'Adaptability' }\r\n    },\r\n    Guzzlord: {\r\n        types: ['Dark', 'Dragon'],\r\n        bs: { hp: 223, at: 101, df: 53, sa: 97, sd: 53, sp: 43 },\r\n        weightkg: 888,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    'Hakamo-o': {\r\n        types: ['Dragon', 'Fighting'],\r\n        bs: { hp: 55, at: 75, df: 90, sa: 65, sd: 70, sp: 65 },\r\n        weightkg: 47,\r\n        nfe: true,\r\n        abilities: { 0: 'Bulletproof' }\r\n    },\r\n    Incineroar: {\r\n        types: ['Fire', 'Dark'],\r\n        bs: { hp: 95, at: 115, df: 90, sa: 80, sd: 90, sp: 60 },\r\n        weightkg: 83,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    'Jangmo-o': {\r\n        types: ['Dragon'],\r\n        bs: { hp: 45, at: 55, df: 65, sa: 45, sd: 45, sp: 45 },\r\n        weightkg: 29.7,\r\n        nfe: true,\r\n        abilities: { 0: 'Bulletproof' }\r\n    },\r\n    Justyke: {\r\n        types: ['Steel', 'Ground'],\r\n        bs: { hp: 72, at: 70, df: 56, sa: 83, sd: 68, sp: 30 },\r\n        weightkg: 36.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Levitate' },\r\n        gender: 'N'\r\n    },\r\n    Jumbao: {\r\n        types: ['Grass', 'Fairy'],\r\n        bs: { hp: 92, at: 63, df: 97, sa: 124, sd: 104, sp: 96 },\r\n        weightkg: 200,\r\n        abilities: { 0: 'Trace' }\r\n    },\r\n    Kartana: {\r\n        types: ['Grass', 'Steel'],\r\n        bs: { hp: 59, at: 181, df: 131, sa: 59, sd: 31, sp: 109 },\r\n        weightkg: 0.1,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Komala: {\r\n        types: ['Normal'],\r\n        bs: { hp: 65, at: 115, df: 65, sa: 75, sd: 95, sp: 65 },\r\n        weightkg: 19.9,\r\n        abilities: { 0: 'Comatose' }\r\n    },\r\n    'Kommo-o': {\r\n        types: ['Dragon', 'Fighting'],\r\n        bs: { hp: 75, at: 110, df: 125, sa: 100, sd: 105, sp: 85 },\r\n        weightkg: 78.2,\r\n        otherFormes: ['Kommo-o-Totem'],\r\n        abilities: { 0: 'Bulletproof' }\r\n    },\r\n    'Kommo-o-Totem': {\r\n        types: ['Dragon', 'Fighting'],\r\n        bs: { hp: 75, at: 110, df: 125, sa: 100, sd: 105, sp: 85 },\r\n        weightkg: 207.5,\r\n        abilities: { 0: 'Overcoat' },\r\n        baseSpecies: 'Kommo-o'\r\n    },\r\n    Litten: {\r\n        types: ['Fire'],\r\n        bs: { hp: 45, at: 65, df: 40, sa: 60, sd: 40, sp: 70 },\r\n        weightkg: 4.3,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Lunala: {\r\n        types: ['Psychic', 'Ghost'],\r\n        bs: { hp: 137, at: 113, df: 89, sa: 137, sd: 107, sp: 97 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Shadow Shield' },\r\n        gender: 'N'\r\n    },\r\n    Lurantis: {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 105, df: 90, sa: 80, sd: 90, sp: 45 },\r\n        weightkg: 18.5,\r\n        otherFormes: ['Lurantis-Totem'],\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    'Lurantis-Totem': {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 105, df: 90, sa: 80, sd: 90, sp: 45 },\r\n        weightkg: 58,\r\n        abilities: { 0: 'Leaf Guard' },\r\n        baseSpecies: 'Lurantis'\r\n    },\r\n    Lycanroc: {\r\n        types: ['Rock'],\r\n        bs: { hp: 75, at: 115, df: 65, sa: 55, sd: 65, sp: 112 },\r\n        weightkg: 25,\r\n        otherFormes: ['Lycanroc-Dusk', 'Lycanroc-Midnight'],\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    'Lycanroc-Dusk': {\r\n        types: ['Rock'],\r\n        bs: { hp: 75, at: 117, df: 65, sa: 55, sd: 65, sp: 110 },\r\n        weightkg: 25,\r\n        abilities: { 0: 'Tough Claws' },\r\n        baseSpecies: 'Lycanroc'\r\n    },\r\n    'Lycanroc-Midnight': {\r\n        types: ['Rock'],\r\n        bs: { hp: 85, at: 115, df: 75, sa: 55, sd: 75, sp: 82 },\r\n        weightkg: 25,\r\n        baseSpecies: 'Lycanroc',\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Magearna: {\r\n        types: ['Steel', 'Fairy'],\r\n        bs: { hp: 80, at: 95, df: 115, sa: 130, sd: 115, sp: 65 },\r\n        weightkg: 80.5,\r\n        gender: 'N',\r\n        abilities: { 0: 'Soul-Heart' }\r\n    },\r\n    Mareanie: {\r\n        types: ['Poison', 'Water'],\r\n        bs: { hp: 50, at: 53, df: 62, sa: 43, sd: 52, sp: 45 },\r\n        weightkg: 8,\r\n        nfe: true,\r\n        abilities: { 0: 'Merciless' }\r\n    },\r\n    'Marowak-Alola': {\r\n        types: ['Fire', 'Ghost'],\r\n        bs: { hp: 60, at: 80, df: 110, sa: 50, sd: 80, sp: 45 },\r\n        weightkg: 34,\r\n        abilities: { 0: 'Cursed Body' },\r\n        baseSpecies: 'Marowak'\r\n    },\r\n    'Marowak-Alola-Totem': {\r\n        types: ['Fire', 'Ghost'],\r\n        bs: { hp: 60, at: 80, df: 110, sa: 50, sd: 80, sp: 45 },\r\n        weightkg: 98,\r\n        abilities: { 0: 'Rock Head' },\r\n        baseSpecies: 'Marowak'\r\n    },\r\n    Marshadow: {\r\n        types: ['Fighting', 'Ghost'],\r\n        bs: { hp: 90, at: 125, df: 80, sa: 90, sd: 90, sp: 125 },\r\n        weightkg: 22.2,\r\n        gender: 'N',\r\n        abilities: { 0: 'Technician' }\r\n    },\r\n    Melmetal: {\r\n        types: ['Steel'],\r\n        bs: { hp: 135, at: 143, df: 143, sa: 80, sd: 65, sp: 34 },\r\n        weightkg: 800,\r\n        gender: 'N',\r\n        abilities: { 0: 'Iron Fist' }\r\n    },\r\n    Meltan: {\r\n        types: ['Steel'],\r\n        bs: { hp: 46, at: 65, df: 65, sa: 55, sd: 35, sp: 34 },\r\n        weightkg: 8,\r\n        gender: 'N',\r\n        abilities: { 0: 'Magnet Pull' }\r\n    },\r\n    'Meowth-Alola': {\r\n        types: ['Dark'],\r\n        bs: { hp: 40, at: 35, df: 35, sa: 50, sd: 40, sp: 90 },\r\n        weightkg: 4.2,\r\n        baseSpecies: 'Meowth',\r\n        nfe: true,\r\n        abilities: { 0: 'Pickup' }\r\n    },\r\n    Mimikyu: {\r\n        types: ['Ghost', 'Fairy'],\r\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\r\n        weightkg: 0.7,\r\n        otherFormes: ['Mimikyu-Busted', 'Mimikyu-Busted-Totem', 'Mimikyu-Totem'],\r\n        abilities: { 0: 'Disguise' }\r\n    },\r\n    'Mimikyu-Busted': {\r\n        types: ['Ghost', 'Fairy'],\r\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\r\n        weightkg: 0.7,\r\n        baseSpecies: 'Mimikyu',\r\n        abilities: { 0: 'Disguise' }\r\n    },\r\n    'Mimikyu-Busted-Totem': {\r\n        types: ['Ghost', 'Fairy'],\r\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\r\n        weightkg: 2.8,\r\n        baseSpecies: 'Mimikyu',\r\n        abilities: { 0: 'Disguise' }\r\n    },\r\n    'Mimikyu-Totem': {\r\n        types: ['Ghost', 'Fairy'],\r\n        bs: { hp: 55, at: 90, df: 80, sa: 50, sd: 105, sp: 96 },\r\n        weightkg: 2.8,\r\n        baseSpecies: 'Mimikyu',\r\n        abilities: { 0: 'Disguise' }\r\n    },\r\n    Minior: {\r\n        types: ['Rock', 'Flying'],\r\n        bs: { hp: 60, at: 100, df: 60, sa: 100, sd: 60, sp: 120 },\r\n        weightkg: 0.3,\r\n        otherFormes: ['Minior-Meteor'],\r\n        gender: 'N',\r\n        abilities: { 0: 'Shields Down' }\r\n    },\r\n    'Minior-Meteor': {\r\n        types: ['Rock', 'Flying'],\r\n        bs: { hp: 60, at: 60, df: 100, sa: 60, sd: 100, sp: 60 },\r\n        weightkg: 40,\r\n        gender: 'N',\r\n        baseSpecies: 'Minior',\r\n        abilities: { 0: 'Shields Down' }\r\n    },\r\n    Morelull: {\r\n        types: ['Grass', 'Fairy'],\r\n        bs: { hp: 40, at: 35, df: 55, sa: 65, sd: 75, sp: 15 },\r\n        weightkg: 1.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Illuminate' }\r\n    },\r\n    Mudbray: {\r\n        types: ['Ground'],\r\n        bs: { hp: 70, at: 100, df: 70, sa: 45, sd: 55, sp: 45 },\r\n        weightkg: 110,\r\n        nfe: true,\r\n        abilities: { 0: 'Own Tempo' }\r\n    },\r\n    Mudsdale: {\r\n        types: ['Ground'],\r\n        bs: { hp: 100, at: 125, df: 100, sa: 55, sd: 85, sp: 35 },\r\n        weightkg: 920,\r\n        abilities: { 0: 'Own Tempo' }\r\n    },\r\n    'Muk-Alola': {\r\n        types: ['Poison', 'Dark'],\r\n        bs: { hp: 105, at: 105, df: 75, sa: 65, sd: 100, sp: 50 },\r\n        weightkg: 52,\r\n        baseSpecies: 'Muk',\r\n        abilities: { 0: 'Poison Touch' }\r\n    },\r\n    Mumbao: {\r\n        types: ['Grass', 'Fairy'],\r\n        bs: { hp: 55, at: 30, df: 64, sa: 87, sd: 73, sp: 66 },\r\n        weightkg: 83,\r\n        nfe: true,\r\n        abilities: { 0: 'Trace' }\r\n    },\r\n    Naganadel: {\r\n        types: ['Poison', 'Dragon'],\r\n        bs: { hp: 73, at: 73, df: 73, sa: 127, sd: 73, sp: 121 },\r\n        weightkg: 150,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Necrozma: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 97, at: 107, df: 101, sa: 127, sd: 89, sp: 79 },\r\n        weightkg: 230,\r\n        abilities: { 0: 'Prism Armor' },\r\n        otherFormes: ['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane', 'Necrozma-Ultra'],\r\n        gender: 'N'\r\n    },\r\n    'Necrozma-Dawn-Wings': {\r\n        types: ['Psychic', 'Ghost'],\r\n        bs: { hp: 97, at: 113, df: 109, sa: 157, sd: 127, sp: 77 },\r\n        weightkg: 350,\r\n        abilities: { 0: 'Prism Armor' },\r\n        baseSpecies: 'Necrozma',\r\n        gender: 'N'\r\n    },\r\n    'Necrozma-Dusk-Mane': {\r\n        types: ['Psychic', 'Steel'],\r\n        bs: { hp: 97, at: 157, df: 127, sa: 113, sd: 109, sp: 77 },\r\n        weightkg: 460,\r\n        abilities: { 0: 'Prism Armor' },\r\n        baseSpecies: 'Necrozma',\r\n        gender: 'N'\r\n    },\r\n    'Necrozma-Ultra': {\r\n        types: ['Psychic', 'Dragon'],\r\n        bs: { hp: 97, at: 167, df: 97, sa: 167, sd: 97, sp: 129 },\r\n        weightkg: 230,\r\n        abilities: { 0: 'Neuroforce' },\r\n        baseSpecies: 'Necrozma',\r\n        gender: 'N'\r\n    },\r\n    Nihilego: {\r\n        types: ['Rock', 'Poison'],\r\n        bs: { hp: 109, at: 53, df: 47, sa: 127, sd: 131, sp: 103 },\r\n        weightkg: 55.5,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    'Ninetales-Alola': {\r\n        types: ['Ice', 'Fairy'],\r\n        bs: { hp: 73, at: 67, df: 75, sa: 81, sd: 100, sp: 109 },\r\n        weightkg: 19.9,\r\n        abilities: { 0: 'Snow Cloak' },\r\n        baseSpecies: 'Ninetales'\r\n    },\r\n    Oranguru: {\r\n        types: ['Normal', 'Psychic'],\r\n        bs: { hp: 90, at: 60, df: 80, sa: 90, sd: 110, sp: 60 },\r\n        weightkg: 76,\r\n        abilities: { 0: 'Inner Focus' }\r\n    },\r\n    Oricorio: {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\r\n        weightkg: 3.4,\r\n        abilities: { 0: 'Dancer' },\r\n        otherFormes: ['Oricorio-Pa\\'u', 'Oricorio-Pom-Pom', 'Oricorio-Sensu']\r\n    },\r\n    'Oricorio-Pa\\'u': {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\r\n        weightkg: 3.4,\r\n        abilities: { 0: 'Dancer' },\r\n        baseSpecies: 'Oricorio'\r\n    },\r\n    'Oricorio-Pom-Pom': {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\r\n        weightkg: 3.4,\r\n        abilities: { 0: 'Dancer' },\r\n        baseSpecies: 'Oricorio'\r\n    },\r\n    'Oricorio-Sensu': {\r\n        types: ['Ghost', 'Flying'],\r\n        bs: { hp: 75, at: 70, df: 70, sa: 98, sd: 70, sp: 93 },\r\n        weightkg: 3.4,\r\n        abilities: { 0: 'Dancer' },\r\n        baseSpecies: 'Oricorio'\r\n    },\r\n    Pajantom: {\r\n        types: ['Dragon', 'Ghost'],\r\n        bs: { hp: 84, at: 133, df: 71, sa: 51, sd: 111, sp: 101 },\r\n        weightkg: 3.1,\r\n        abilities: { 0: 'Comatose' }\r\n    },\r\n    Palossand: {\r\n        types: ['Ghost', 'Ground'],\r\n        bs: { hp: 85, at: 75, df: 110, sa: 100, sd: 75, sp: 35 },\r\n        weightkg: 250,\r\n        abilities: { 0: 'Water Compaction' }\r\n    },\r\n    Passimian: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 100, at: 120, df: 90, sa: 40, sd: 60, sp: 80 },\r\n        weightkg: 82.8,\r\n        abilities: { 0: 'Receiver' }\r\n    },\r\n    'Persian-Alola': {\r\n        types: ['Dark'],\r\n        bs: { hp: 65, at: 60, df: 60, sa: 75, sd: 65, sp: 115 },\r\n        weightkg: 33,\r\n        baseSpecies: 'Persian',\r\n        abilities: { 0: 'Fur Coat' }\r\n    },\r\n    Pheromosa: {\r\n        types: ['Bug', 'Fighting'],\r\n        bs: { hp: 71, at: 137, df: 37, sa: 137, sd: 37, sp: 151 },\r\n        weightkg: 25,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    'Pikachu-Alola': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Hoenn': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Kalos': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Original': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Partner': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Sinnoh': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Starter': {\r\n        types: ['Electric'],\r\n        bs: { hp: 45, at: 80, df: 50, sa: 75, sd: 60, sp: 120 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-Unova': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    Pikipek: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 35, at: 75, df: 30, sa: 30, sd: 30, sp: 65 },\r\n        weightkg: 1.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Poipole: {\r\n        types: ['Poison'],\r\n        bs: { hp: 67, at: 73, df: 67, sa: 73, sd: 67, sp: 73 },\r\n        weightkg: 1.8,\r\n        abilities: { 0: 'Beast Boost' },\r\n        nfe: true,\r\n        gender: 'N'\r\n    },\r\n    Popplio: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 54, df: 54, sa: 66, sd: 56, sp: 40 },\r\n        weightkg: 7.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Primarina: {\r\n        types: ['Water', 'Fairy'],\r\n        bs: { hp: 80, at: 74, df: 74, sa: 126, sd: 116, sp: 60 },\r\n        weightkg: 44,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Pyukumuku: {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 60, df: 130, sa: 30, sd: 130, sp: 5 },\r\n        weightkg: 1.2,\r\n        abilities: { 0: 'Innards Out' }\r\n    },\r\n    'Raichu-Alola': {\r\n        types: ['Electric', 'Psychic'],\r\n        bs: { hp: 60, at: 85, df: 50, sa: 95, sd: 85, sp: 110 },\r\n        weightkg: 21,\r\n        baseSpecies: 'Raichu',\r\n        abilities: { 0: 'Surge Surfer' }\r\n    },\r\n    'Raticate-Alola': {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 75, at: 71, df: 70, sa: 40, sd: 80, sp: 77 },\r\n        weightkg: 25.5,\r\n        baseSpecies: 'Raticate',\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    'Raticate-Alola-Totem': {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 75, at: 71, df: 70, sa: 40, sd: 80, sp: 77 },\r\n        weightkg: 105,\r\n        abilities: { 0: 'Thick Fat' },\r\n        baseSpecies: 'Raticate'\r\n    },\r\n    'Rattata-Alola': {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 30, at: 56, df: 35, sa: 25, sd: 35, sp: 72 },\r\n        weightkg: 3.8,\r\n        baseSpecies: 'Rattata',\r\n        nfe: true,\r\n        abilities: { 0: 'Gluttony' }\r\n    },\r\n    Ribombee: {\r\n        types: ['Bug', 'Fairy'],\r\n        bs: { hp: 60, at: 55, df: 60, sa: 95, sd: 70, sp: 124 },\r\n        weightkg: 0.5,\r\n        otherFormes: ['Ribombee-Totem'],\r\n        abilities: { 0: 'Honey Gather' }\r\n    },\r\n    'Ribombee-Totem': {\r\n        types: ['Bug', 'Fairy'],\r\n        bs: { hp: 60, at: 55, df: 60, sa: 95, sd: 70, sp: 124 },\r\n        weightkg: 2,\r\n        abilities: { 0: 'Sweet Veil' },\r\n        baseSpecies: 'Ribombee'\r\n    },\r\n    Rockruff: {\r\n        types: ['Rock'],\r\n        bs: { hp: 45, at: 65, df: 40, sa: 30, sd: 40, sp: 60 },\r\n        weightkg: 9.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Rowlet: {\r\n        types: ['Grass', 'Flying'],\r\n        bs: { hp: 68, at: 55, df: 55, sa: 50, sd: 50, sp: 42 },\r\n        weightkg: 1.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Salandit: {\r\n        types: ['Poison', 'Fire'],\r\n        bs: { hp: 48, at: 44, df: 40, sa: 71, sd: 40, sp: 77 },\r\n        weightkg: 4.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Corrosion' }\r\n    },\r\n    Salazzle: {\r\n        types: ['Poison', 'Fire'],\r\n        bs: { hp: 68, at: 64, df: 60, sa: 111, sd: 60, sp: 117 },\r\n        weightkg: 22.2,\r\n        otherFormes: ['Salazzle-Totem'],\r\n        abilities: { 0: 'Corrosion' }\r\n    },\r\n    'Salazzle-Totem': {\r\n        types: ['Poison', 'Fire'],\r\n        bs: { hp: 68, at: 64, df: 60, sa: 111, sd: 60, sp: 117 },\r\n        weightkg: 81,\r\n        abilities: { 0: 'Corrosion' },\r\n        baseSpecies: 'Salazzle'\r\n    },\r\n    'Sandshrew-Alola': {\r\n        types: ['Ice', 'Steel'],\r\n        bs: { hp: 50, at: 75, df: 90, sa: 10, sd: 35, sp: 40 },\r\n        weightkg: 40,\r\n        baseSpecies: 'Sandshrew',\r\n        nfe: true,\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    'Sandslash-Alola': {\r\n        types: ['Ice', 'Steel'],\r\n        bs: { hp: 75, at: 100, df: 120, sa: 25, sd: 65, sp: 65 },\r\n        weightkg: 55,\r\n        baseSpecies: 'Sandslash',\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    Sandygast: {\r\n        types: ['Ghost', 'Ground'],\r\n        bs: { hp: 55, at: 55, df: 80, sa: 70, sd: 45, sp: 15 },\r\n        weightkg: 70,\r\n        nfe: true,\r\n        abilities: { 0: 'Water Compaction' }\r\n    },\r\n    Shiinotic: {\r\n        types: ['Grass', 'Fairy'],\r\n        bs: { hp: 60, at: 45, df: 80, sa: 90, sd: 100, sp: 30 },\r\n        weightkg: 11.5,\r\n        abilities: { 0: 'Illuminate' }\r\n    },\r\n    Silvally: {\r\n        types: ['Normal'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        gender: 'N',\r\n        otherFormes: [\r\n            'Silvally-Bug',\r\n            'Silvally-Dark',\r\n            'Silvally-Dragon',\r\n            'Silvally-Electric',\r\n            'Silvally-Fairy',\r\n            'Silvally-Fighting',\r\n            'Silvally-Fire',\r\n            'Silvally-Flying',\r\n            'Silvally-Ghost',\r\n            'Silvally-Grass',\r\n            'Silvally-Ground',\r\n            'Silvally-Ice',\r\n            'Silvally-Poison',\r\n            'Silvally-Psychic',\r\n            'Silvally-Rock',\r\n            'Silvally-Steel',\r\n            'Silvally-Water',\r\n        ]\r\n    },\r\n    'Silvally-Bug': {\r\n        types: ['Bug'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Dark': {\r\n        types: ['Dark'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Dragon': {\r\n        types: ['Dragon'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Electric': {\r\n        types: ['Electric'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Fairy': {\r\n        types: ['Fairy'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Fighting': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Fire': {\r\n        types: ['Fire'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Flying': {\r\n        types: ['Flying'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Ghost': {\r\n        types: ['Ghost'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Grass': {\r\n        types: ['Grass'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Ground': {\r\n        types: ['Ground'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Ice': {\r\n        types: ['Ice'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Poison': {\r\n        types: ['Poison'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Psychic': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Rock': {\r\n        types: ['Rock'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Steel': {\r\n        types: ['Steel'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    'Silvally-Water': {\r\n        types: ['Water'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 95 },\r\n        weightkg: 100.5,\r\n        abilities: { 0: 'RKS System' },\r\n        baseSpecies: 'Silvally',\r\n        gender: 'N'\r\n    },\r\n    Smogecko: {\r\n        types: ['Fire'],\r\n        bs: { hp: 48, at: 66, df: 43, sa: 58, sd: 48, sp: 56 },\r\n        weightkg: 8.5,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Smoguana: {\r\n        types: ['Fire', 'Ground'],\r\n        bs: { hp: 68, at: 86, df: 53, sa: 68, sd: 68, sp: 76 },\r\n        weightkg: 22.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Smokomodo: {\r\n        types: ['Fire', 'Ground'],\r\n        bs: { hp: 88, at: 116, df: 67, sa: 88, sd: 78, sp: 97 },\r\n        weightkg: 205,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Snaelstrom: {\r\n        types: ['Water', 'Bug'],\r\n        bs: { hp: 91, at: 94, df: 110, sa: 80, sd: 97, sp: 63 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Solgaleo: {\r\n        types: ['Psychic', 'Steel'],\r\n        bs: { hp: 137, at: 137, df: 107, sa: 113, sd: 89, sp: 97 },\r\n        weightkg: 230,\r\n        abilities: { 0: 'Full Metal Body' },\r\n        gender: 'N'\r\n    },\r\n    Stakataka: {\r\n        types: ['Rock', 'Steel'],\r\n        bs: { hp: 61, at: 131, df: 211, sa: 53, sd: 101, sp: 13 },\r\n        weightkg: 820,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Steenee: {\r\n        types: ['Grass'],\r\n        bs: { hp: 52, at: 40, df: 48, sa: 40, sd: 48, sp: 62 },\r\n        weightkg: 8.2,\r\n        nfe: true,\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    Stufful: {\r\n        types: ['Normal', 'Fighting'],\r\n        bs: { hp: 70, at: 75, df: 50, sa: 45, sd: 50, sp: 50 },\r\n        weightkg: 6.8,\r\n        abilities: { 0: 'Fluffy' },\r\n        nfe: true\r\n    },\r\n    Swirlpool: {\r\n        types: ['Water'],\r\n        bs: { hp: 61, at: 49, df: 70, sa: 50, sd: 62, sp: 28 },\r\n        weightkg: 7,\r\n        nfe: true,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    'Tapu Bulu': {\r\n        types: ['Grass', 'Fairy'],\r\n        bs: { hp: 70, at: 130, df: 115, sa: 85, sd: 95, sp: 75 },\r\n        weightkg: 45.5,\r\n        abilities: { 0: 'Grassy Surge' },\r\n        gender: 'N'\r\n    },\r\n    'Tapu Fini': {\r\n        types: ['Water', 'Fairy'],\r\n        bs: { hp: 70, at: 75, df: 115, sa: 95, sd: 130, sp: 85 },\r\n        weightkg: 21.2,\r\n        abilities: { 0: 'Misty Surge' },\r\n        gender: 'N'\r\n    },\r\n    'Tapu Koko': {\r\n        types: ['Electric', 'Fairy'],\r\n        bs: { hp: 70, at: 115, df: 85, sa: 95, sd: 75, sp: 130 },\r\n        weightkg: 20.5,\r\n        abilities: { 0: 'Electric Surge' },\r\n        gender: 'N'\r\n    },\r\n    'Tapu Lele': {\r\n        types: ['Psychic', 'Fairy'],\r\n        bs: { hp: 70, at: 85, df: 75, sa: 130, sd: 115, sp: 95 },\r\n        weightkg: 18.6,\r\n        abilities: { 0: 'Psychic Surge' },\r\n        gender: 'N'\r\n    },\r\n    Togedemaru: {\r\n        types: ['Electric', 'Steel'],\r\n        bs: { hp: 65, at: 98, df: 63, sa: 40, sd: 73, sp: 96 },\r\n        weightkg: 3.3,\r\n        abilities: { 0: 'Iron Barbs' },\r\n        otherFormes: ['Togedemaru-Totem']\r\n    },\r\n    'Togedemaru-Totem': {\r\n        types: ['Electric', 'Steel'],\r\n        bs: { hp: 65, at: 98, df: 63, sa: 40, sd: 73, sp: 96 },\r\n        weightkg: 13,\r\n        abilities: { 0: 'Sturdy' },\r\n        baseSpecies: 'Togedemaru'\r\n    },\r\n    Torracat: {\r\n        types: ['Fire'],\r\n        bs: { hp: 65, at: 85, df: 50, sa: 80, sd: 50, sp: 90 },\r\n        weightkg: 25,\r\n        nfe: true,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    Toucannon: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 80, at: 120, df: 75, sa: 75, sd: 75, sp: 60 },\r\n        weightkg: 26,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Toxapex: {\r\n        types: ['Poison', 'Water'],\r\n        bs: { hp: 50, at: 63, df: 152, sa: 53, sd: 142, sp: 35 },\r\n        weightkg: 14.5,\r\n        abilities: { 0: 'Merciless' }\r\n    },\r\n    Trumbeak: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 55, at: 85, df: 50, sa: 40, sd: 50, sp: 75 },\r\n        weightkg: 14.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Keen Eye' }\r\n    },\r\n    Tsareena: {\r\n        types: ['Grass'],\r\n        bs: { hp: 72, at: 120, df: 98, sa: 50, sd: 98, sp: 72 },\r\n        weightkg: 21.4,\r\n        abilities: { 0: 'Leaf Guard' }\r\n    },\r\n    Turtonator: {\r\n        types: ['Fire', 'Dragon'],\r\n        bs: { hp: 60, at: 78, df: 135, sa: 91, sd: 85, sp: 36 },\r\n        weightkg: 212,\r\n        abilities: { 0: 'Shell Armor' }\r\n    },\r\n    'Type: Null': {\r\n        types: ['Normal'],\r\n        bs: { hp: 95, at: 95, df: 95, sa: 95, sd: 95, sp: 59 },\r\n        weightkg: 120.5,\r\n        abilities: { 0: 'Battle Armor' },\r\n        nfe: true,\r\n        gender: 'N'\r\n    },\r\n    Vikavolt: {\r\n        types: ['Bug', 'Electric'],\r\n        bs: { hp: 77, at: 70, df: 90, sa: 145, sd: 75, sp: 43 },\r\n        weightkg: 45,\r\n        abilities: { 0: 'Levitate' },\r\n        otherFormes: ['Vikavolt-Totem']\r\n    },\r\n    'Vikavolt-Totem': {\r\n        types: ['Bug', 'Electric'],\r\n        bs: { hp: 77, at: 70, df: 90, sa: 145, sd: 75, sp: 43 },\r\n        weightkg: 147.5,\r\n        abilities: { 0: 'Levitate' },\r\n        baseSpecies: 'Vikavolt'\r\n    },\r\n    'Vulpix-Alola': {\r\n        types: ['Ice'],\r\n        bs: { hp: 38, at: 41, df: 40, sa: 50, sd: 65, sp: 65 },\r\n        weightkg: 9.9,\r\n        baseSpecies: 'Vulpix',\r\n        nfe: true,\r\n        abilities: { 0: 'Snow Cloak' }\r\n    },\r\n    Wimpod: {\r\n        types: ['Bug', 'Water'],\r\n        bs: { hp: 25, at: 35, df: 40, sa: 20, sd: 30, sp: 80 },\r\n        weightkg: 12,\r\n        abilities: { 0: 'Wimp Out' },\r\n        nfe: true\r\n    },\r\n    Wishiwashi: {\r\n        types: ['Water'],\r\n        bs: { hp: 45, at: 20, df: 20, sa: 25, sd: 25, sp: 40 },\r\n        weightkg: 0.3,\r\n        otherFormes: ['Wishiwashi-School'],\r\n        abilities: { 0: 'Schooling' }\r\n    },\r\n    'Wishiwashi-School': {\r\n        types: ['Water'],\r\n        bs: { hp: 45, at: 140, df: 130, sa: 140, sd: 135, sp: 30 },\r\n        weightkg: 78.6,\r\n        baseSpecies: 'Wishiwashi',\r\n        abilities: { 0: 'Schooling' }\r\n    },\r\n    Xurkitree: {\r\n        types: ['Electric'],\r\n        bs: { hp: 83, at: 89, df: 71, sa: 173, sd: 71, sp: 83 },\r\n        weightkg: 100,\r\n        abilities: { 0: 'Beast Boost' },\r\n        gender: 'N'\r\n    },\r\n    Yungoos: {\r\n        types: ['Normal'],\r\n        bs: { hp: 48, at: 70, df: 30, sa: 30, sd: 30, sp: 45 },\r\n        weightkg: 6,\r\n        nfe: true,\r\n        abilities: { 0: 'Stakeout' }\r\n    },\r\n    Zeraora: {\r\n        types: ['Electric'],\r\n        bs: { hp: 88, at: 112, df: 75, sa: 102, sd: 80, sp: 143 },\r\n        weightkg: 44.5,\r\n        abilities: { 0: 'Volt Absorb' },\r\n        gender: 'N'\r\n    },\r\n    'Zygarde-10%': {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 54, at: 100, df: 71, sa: 61, sd: 85, sp: 115 },\r\n        weightkg: 33.5,\r\n        abilities: { 0: 'Aura Break' },\r\n        baseSpecies: 'Zygarde',\r\n        gender: 'N'\r\n    },\r\n    'Zygarde-Complete': {\r\n        types: ['Dragon', 'Ground'],\r\n        bs: { hp: 216, at: 100, df: 121, sa: 91, sd: 95, sp: 85 },\r\n        weightkg: 610,\r\n        abilities: { 0: 'Power Construct' },\r\n        baseSpecies: 'Zygarde',\r\n        gender: 'N'\r\n    }\r\n};\r\nvar SM = (0, util_1.extend)(true, {}, XY, SM_PATCH);\r\ndelete SM['Pikachu-Cosplay'];\r\ndelete SM['Pikachu-Rock-Star'];\r\ndelete SM['Pikachu-Belle'];\r\ndelete SM['Pikachu-PhD'];\r\ndelete SM['Pikachu-Pop-Star'];\r\ndelete SM['Pikachu-Libre'];\r\nvar SS_PATCH = {\r\n    'Aegislash-Blade': { bs: { at: 140, sa: 140 } },\r\n    'Aegislash-Both': { bs: { at: 140, df: 140, sa: 140, sd: 140 } },\r\n    'Aegislash-Shield': { bs: { df: 140, sd: 140 } },\r\n    Articuno: { otherFormes: ['Articuno-Galar'] },\r\n    Blastoise: { otherFormes: ['Blastoise-Gmax', 'Blastoise-Mega'] },\r\n    Butterfree: { otherFormes: ['Butterfree-Gmax'] },\r\n    Charizard: { otherFormes: ['Charizard-Gmax', 'Charizard-Mega-X', 'Charizard-Mega-Y'] },\r\n    Corsola: { otherFormes: ['Corsola-Galar'] },\r\n    Darmanitan: {\r\n        otherFormes: ['Darmanitan-Galar', 'Darmanitan-Galar-Zen', 'Darmanitan-Zen']\r\n    },\r\n    Darumaka: { otherFormes: ['Darumaka-Galar'] },\r\n    Eevee: { otherFormes: ['Eevee-Gmax'] },\r\n    Equilibra: { bs: { sa: 133 } },\r\n    'Farfetch\\u2019d': { otherFormes: ['Farfetch\\u2019d-Galar'] },\r\n    Garbodor: { otherFormes: ['Garbodor-Gmax'] },\r\n    Gengar: { otherFormes: ['Gengar-Gmax', 'Gengar-Mega'] },\r\n    Kingler: { otherFormes: ['Kingler-Gmax'] },\r\n    Lapras: { otherFormes: ['Lapras-Gmax'] },\r\n    Linoone: { otherFormes: ['Linoone-Galar'] },\r\n    Machamp: { otherFormes: ['Machamp-Gmax'] },\r\n    Melmetal: { otherFormes: ['Melmetal-Gmax'] },\r\n    Meowth: { otherFormes: ['Meowth-Alola', 'Meowth-Galar', 'Meowth-Gmax'] },\r\n    Moltres: { otherFormes: ['Moltres-Galar'] },\r\n    'Mr. Mime': { otherFormes: ['Mr. Mime-Galar'] },\r\n    Pikachu: {\r\n        otherFormes: [\r\n            'Pikachu-Alola',\r\n            'Pikachu-Gmax',\r\n            'Pikachu-Hoenn',\r\n            'Pikachu-Kalos',\r\n            'Pikachu-Original',\r\n            'Pikachu-Partner',\r\n            'Pikachu-Sinnoh',\r\n            'Pikachu-Unova',\r\n            'Pikachu-World',\r\n        ]\r\n    },\r\n    Ponyta: { otherFormes: ['Ponyta-Galar'] },\r\n    Pyroak: { bs: { sa: 70, sd: 65 } },\r\n    Rapidash: { otherFormes: ['Rapidash-Galar'] },\r\n    Slowbro: { otherFormes: ['Slowbro-Galar', 'Slowbro-Mega'] },\r\n    Slowking: { otherFormes: ['Slowking-Galar'] },\r\n    Slowpoke: { otherFormes: ['Slowpoke-Galar'] },\r\n    Snorlax: { otherFormes: ['Snorlax-Gmax'] },\r\n    Stunfisk: { otherFormes: ['Stunfisk-Galar'] },\r\n    Venusaur: { otherFormes: ['Venusaur-Gmax', 'Venusaur-Mega'] },\r\n    Voodoom: { bs: { sa: 130 } },\r\n    Weezing: { otherFormes: ['Weezing-Galar'] },\r\n    Yamask: { otherFormes: ['Yamask-Galar'] },\r\n    Zapdos: { otherFormes: ['Zapdos-Galar'] },\r\n    Zigzagoon: { otherFormes: ['Zigzagoon-Galar'] },\r\n    Alcremie: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 65, at: 60, df: 75, sa: 110, sd: 121, sp: 64 },\r\n        weightkg: 0.5,\r\n        abilities: { 0: 'Sweet Veil' },\r\n        otherFormes: ['Alcremie-Gmax']\r\n    },\r\n    'Alcremie-Gmax': {\r\n        types: ['Fairy'],\r\n        bs: { hp: 65, at: 60, df: 75, sa: 110, sd: 121, sp: 64 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Sweet Veil' },\r\n        baseSpecies: 'Alcremie'\r\n    },\r\n    Appletun: {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 110, at: 85, df: 80, sa: 100, sd: 80, sp: 30 },\r\n        weightkg: 13,\r\n        abilities: { 0: 'Ripen' },\r\n        otherFormes: ['Appletun-Gmax']\r\n    },\r\n    'Appletun-Gmax': {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 110, at: 85, df: 80, sa: 100, sd: 80, sp: 30 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Ripen' },\r\n        baseSpecies: 'Appletun'\r\n    },\r\n    Applin: {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 40, at: 40, df: 80, sa: 40, sd: 40, sp: 20 },\r\n        weightkg: 0.5,\r\n        abilities: { 0: 'Ripen' },\r\n        nfe: true\r\n    },\r\n    Arctovish: {\r\n        types: ['Water', 'Ice'],\r\n        bs: { hp: 90, at: 90, df: 100, sa: 80, sd: 90, sp: 55 },\r\n        weightkg: 175,\r\n        abilities: { 0: 'Water Absorb' },\r\n        gender: 'N'\r\n    },\r\n    Arctozolt: {\r\n        types: ['Electric', 'Ice'],\r\n        bs: { hp: 90, at: 100, df: 90, sa: 90, sd: 80, sp: 55 },\r\n        weightkg: 150,\r\n        abilities: { 0: 'Volt Absorb' },\r\n        gender: 'N'\r\n    },\r\n    Arrokuda: {\r\n        types: ['Water'],\r\n        bs: { hp: 41, at: 63, df: 40, sa: 40, sd: 30, sp: 66 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Swift Swim' },\r\n        nfe: true\r\n    },\r\n    'Articuno-Galar': {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 90, at: 85, df: 85, sa: 125, sd: 100, sp: 95 },\r\n        weightkg: 50.9,\r\n        abilities: { 0: 'Competitive' },\r\n        gender: 'N',\r\n        baseSpecies: 'Articuno'\r\n    },\r\n    Astrolotl: {\r\n        types: ['Fire', 'Dragon'],\r\n        bs: { hp: 108, at: 108, df: 74, sa: 92, sd: 64, sp: 114 },\r\n        weightkg: 50,\r\n        abilities: { 0: 'Regenerator' }\r\n    },\r\n    Barraskewda: {\r\n        types: ['Water'],\r\n        bs: { hp: 61, at: 123, df: 60, sa: 60, sd: 50, sp: 136 },\r\n        weightkg: 30,\r\n        abilities: { 0: 'Swift Swim' }\r\n    },\r\n    'Blastoise-Gmax': {\r\n        types: ['Water'],\r\n        bs: { hp: 79, at: 83, df: 100, sa: 85, sd: 105, sp: 78 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Torrent' },\r\n        baseSpecies: 'Blastoise'\r\n    },\r\n    Blipbug: {\r\n        types: ['Bug'],\r\n        bs: { hp: 25, at: 20, df: 20, sa: 25, sd: 45, sp: 45 },\r\n        weightkg: 8,\r\n        abilities: { 0: 'Swarm' },\r\n        nfe: true\r\n    },\r\n    Boltund: {\r\n        types: ['Electric'],\r\n        bs: { hp: 69, at: 90, df: 60, sa: 90, sd: 60, sp: 121 },\r\n        weightkg: 34,\r\n        abilities: { 0: 'Strong Jaw' }\r\n    },\r\n    'Butterfree-Gmax': {\r\n        types: ['Bug', 'Flying'],\r\n        bs: { hp: 60, at: 45, df: 50, sa: 90, sd: 80, sp: 70 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Compound Eyes' },\r\n        baseSpecies: 'Butterfree'\r\n    },\r\n    Calyrex: {\r\n        types: ['Psychic', 'Grass'],\r\n        bs: { hp: 100, at: 80, df: 80, sa: 80, sd: 80, sp: 80 },\r\n        weightkg: 7.7,\r\n        abilities: { 0: 'Unnerve' },\r\n        gender: 'N',\r\n        otherFormes: ['Calyrex-Ice', 'Calyrex-Shadow']\r\n    },\r\n    'Calyrex-Ice': {\r\n        types: ['Psychic', 'Ice'],\r\n        bs: { hp: 100, at: 165, df: 150, sa: 85, sd: 130, sp: 50 },\r\n        weightkg: 809.1,\r\n        abilities: { 0: 'As One (Glastrier)' },\r\n        gender: 'N',\r\n        baseSpecies: 'Calyrex'\r\n    },\r\n    'Calyrex-Shadow': {\r\n        types: ['Psychic', 'Ghost'],\r\n        bs: { hp: 100, at: 85, df: 80, sa: 165, sd: 100, sp: 150 },\r\n        weightkg: 53.6,\r\n        abilities: { 0: 'As One (Spectrier)' },\r\n        gender: 'N',\r\n        baseSpecies: 'Calyrex'\r\n    },\r\n    Carkol: {\r\n        types: ['Rock', 'Fire'],\r\n        bs: { hp: 80, at: 60, df: 90, sa: 60, sd: 70, sp: 50 },\r\n        weightkg: 78,\r\n        abilities: { 0: 'Steam Engine' },\r\n        nfe: true\r\n    },\r\n    Centiskorch: {\r\n        types: ['Fire', 'Bug'],\r\n        bs: { hp: 100, at: 115, df: 65, sa: 90, sd: 90, sp: 65 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Flash Fire' },\r\n        otherFormes: ['Centiskorch-Gmax']\r\n    },\r\n    'Centiskorch-Gmax': {\r\n        types: ['Fire', 'Bug'],\r\n        bs: { hp: 100, at: 115, df: 65, sa: 90, sd: 90, sp: 65 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Flash Fire' },\r\n        baseSpecies: 'Centiskorch'\r\n    },\r\n    'Charizard-Gmax': {\r\n        types: ['Fire', 'Flying'],\r\n        bs: { hp: 78, at: 84, df: 78, sa: 109, sd: 85, sp: 100 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Blaze' },\r\n        baseSpecies: 'Charizard'\r\n    },\r\n    Chewtle: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 64, df: 50, sa: 38, sd: 38, sp: 44 },\r\n        weightkg: 8.5,\r\n        abilities: { 0: 'Strong Jaw' },\r\n        nfe: true\r\n    },\r\n    Chromera: {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 85, at: 85, df: 115, sa: 115, sd: 100, sp: 100 },\r\n        weightkg: 215,\r\n        abilities: { 0: 'Color Change' },\r\n        gender: 'N'\r\n    },\r\n    Cinderace: {\r\n        types: ['Fire'],\r\n        bs: { hp: 80, at: 116, df: 75, sa: 65, sd: 75, sp: 119 },\r\n        weightkg: 33,\r\n        abilities: { 0: 'Blaze' },\r\n        otherFormes: ['Cinderace-Gmax']\r\n    },\r\n    'Cinderace-Gmax': {\r\n        types: ['Fire'],\r\n        bs: { hp: 80, at: 116, df: 75, sa: 65, sd: 75, sp: 119 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Blaze' },\r\n        baseSpecies: 'Cinderace'\r\n    },\r\n    Clobbopus: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 50, at: 68, df: 60, sa: 50, sd: 50, sp: 32 },\r\n        weightkg: 4,\r\n        abilities: { 0: 'Limber' },\r\n        nfe: true\r\n    },\r\n    Coalossal: {\r\n        types: ['Rock', 'Fire'],\r\n        bs: { hp: 110, at: 80, df: 120, sa: 80, sd: 90, sp: 30 },\r\n        weightkg: 310.5,\r\n        abilities: { 0: 'Steam Engine' },\r\n        otherFormes: ['Coalossal-Gmax']\r\n    },\r\n    'Coalossal-Gmax': {\r\n        types: ['Rock', 'Fire'],\r\n        bs: { hp: 110, at: 80, df: 120, sa: 80, sd: 90, sp: 30 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Steam Engine' },\r\n        baseSpecies: 'Coalossal'\r\n    },\r\n    Copperajah: {\r\n        types: ['Steel'],\r\n        bs: { hp: 122, at: 130, df: 69, sa: 80, sd: 69, sp: 30 },\r\n        weightkg: 650,\r\n        abilities: { 0: 'Sheer Force' },\r\n        otherFormes: ['Copperajah-Gmax']\r\n    },\r\n    'Copperajah-Gmax': {\r\n        types: ['Steel'],\r\n        bs: { hp: 122, at: 130, df: 69, sa: 80, sd: 69, sp: 30 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Sheer Force' },\r\n        baseSpecies: 'Copperajah'\r\n    },\r\n    'Corsola-Galar': {\r\n        types: ['Ghost'],\r\n        bs: { hp: 60, at: 55, df: 100, sa: 65, sd: 100, sp: 30 },\r\n        weightkg: 0.5,\r\n        abilities: { 0: 'Weak Armor' },\r\n        nfe: true,\r\n        baseSpecies: 'Corsola'\r\n    },\r\n    Corviknight: {\r\n        types: ['Flying', 'Steel'],\r\n        bs: { hp: 98, at: 87, df: 105, sa: 53, sd: 85, sp: 67 },\r\n        weightkg: 75,\r\n        abilities: { 0: 'Pressure' },\r\n        otherFormes: ['Corviknight-Gmax']\r\n    },\r\n    'Corviknight-Gmax': {\r\n        types: ['Flying', 'Steel'],\r\n        bs: { hp: 98, at: 87, df: 105, sa: 53, sd: 85, sp: 67 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Pressure' },\r\n        baseSpecies: 'Corviknight'\r\n    },\r\n    Corvisquire: {\r\n        types: ['Flying'],\r\n        bs: { hp: 68, at: 67, df: 55, sa: 43, sd: 55, sp: 77 },\r\n        weightkg: 16,\r\n        abilities: { 0: 'Keen Eye' },\r\n        nfe: true\r\n    },\r\n    Cramorant: {\r\n        types: ['Flying', 'Water'],\r\n        bs: { hp: 70, at: 85, df: 55, sa: 85, sd: 95, sp: 85 },\r\n        weightkg: 18,\r\n        abilities: { 0: 'Gulp Missile' },\r\n        otherFormes: ['Cramorant-Gorging', 'Cramorant-Gulping']\r\n    },\r\n    'Cramorant-Gorging': {\r\n        types: ['Flying', 'Water'],\r\n        bs: { hp: 70, at: 85, df: 55, sa: 85, sd: 95, sp: 85 },\r\n        weightkg: 18,\r\n        abilities: { 0: 'Gulp Missile' },\r\n        baseSpecies: 'Cramorant'\r\n    },\r\n    'Cramorant-Gulping': {\r\n        types: ['Flying', 'Water'],\r\n        bs: { hp: 70, at: 85, df: 55, sa: 85, sd: 95, sp: 85 },\r\n        weightkg: 18,\r\n        abilities: { 0: 'Gulp Missile' },\r\n        baseSpecies: 'Cramorant'\r\n    },\r\n    Cufant: {\r\n        types: ['Steel'],\r\n        bs: { hp: 72, at: 80, df: 49, sa: 40, sd: 49, sp: 40 },\r\n        weightkg: 100,\r\n        abilities: { 0: 'Sheer Force' },\r\n        nfe: true\r\n    },\r\n    Cursola: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 60, at: 95, df: 50, sa: 145, sd: 130, sp: 30 },\r\n        weightkg: 0.4,\r\n        abilities: { 0: 'Weak Armor' }\r\n    },\r\n    'Darmanitan-Galar': {\r\n        types: ['Ice'],\r\n        bs: { hp: 105, at: 140, df: 55, sa: 30, sd: 55, sp: 95 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Gorilla Tactics' },\r\n        baseSpecies: 'Darmanitan'\r\n    },\r\n    'Darmanitan-Galar-Zen': {\r\n        types: ['Ice', 'Fire'],\r\n        bs: { hp: 105, at: 160, df: 55, sa: 30, sd: 55, sp: 135 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Zen Mode' },\r\n        baseSpecies: 'Darmanitan'\r\n    },\r\n    'Darumaka-Galar': {\r\n        types: ['Ice'],\r\n        bs: { hp: 70, at: 90, df: 45, sa: 15, sd: 45, sp: 50 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Hustle' },\r\n        nfe: true,\r\n        baseSpecies: 'Darumaka'\r\n    },\r\n    Dottler: {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 50, at: 35, df: 80, sa: 50, sd: 90, sp: 30 },\r\n        weightkg: 19.5,\r\n        abilities: { 0: 'Swarm' },\r\n        nfe: true\r\n    },\r\n    Dracovish: {\r\n        types: ['Water', 'Dragon'],\r\n        bs: { hp: 90, at: 90, df: 100, sa: 70, sd: 80, sp: 75 },\r\n        weightkg: 215,\r\n        abilities: { 0: 'Water Absorb' },\r\n        gender: 'N'\r\n    },\r\n    Dracozolt: {\r\n        types: ['Electric', 'Dragon'],\r\n        bs: { hp: 90, at: 100, df: 90, sa: 80, sd: 70, sp: 75 },\r\n        weightkg: 190,\r\n        abilities: { 0: 'Volt Absorb' },\r\n        gender: 'N'\r\n    },\r\n    Dragapult: {\r\n        types: ['Dragon', 'Ghost'],\r\n        bs: { hp: 88, at: 120, df: 75, sa: 100, sd: 75, sp: 142 },\r\n        weightkg: 50,\r\n        abilities: { 0: 'Clear Body' }\r\n    },\r\n    Drakloak: {\r\n        types: ['Dragon', 'Ghost'],\r\n        bs: { hp: 68, at: 80, df: 50, sa: 60, sd: 50, sp: 102 },\r\n        weightkg: 11,\r\n        abilities: { 0: 'Clear Body' },\r\n        nfe: true\r\n    },\r\n    Drednaw: {\r\n        types: ['Water', 'Rock'],\r\n        bs: { hp: 90, at: 115, df: 90, sa: 48, sd: 68, sp: 74 },\r\n        weightkg: 115.5,\r\n        abilities: { 0: 'Strong Jaw' },\r\n        otherFormes: ['Drednaw-Gmax']\r\n    },\r\n    'Drednaw-Gmax': {\r\n        types: ['Water', 'Rock'],\r\n        bs: { hp: 90, at: 115, df: 90, sa: 48, sd: 68, sp: 74 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Strong Jaw' },\r\n        baseSpecies: 'Drednaw'\r\n    },\r\n    Dreepy: {\r\n        types: ['Dragon', 'Ghost'],\r\n        bs: { hp: 28, at: 60, df: 30, sa: 40, sd: 30, sp: 82 },\r\n        weightkg: 2,\r\n        abilities: { 0: 'Clear Body' },\r\n        nfe: true\r\n    },\r\n    Drizzile: {\r\n        types: ['Water'],\r\n        bs: { hp: 65, at: 60, df: 55, sa: 95, sd: 55, sp: 90 },\r\n        weightkg: 11.5,\r\n        abilities: { 0: 'Torrent' },\r\n        nfe: true\r\n    },\r\n    Dubwool: {\r\n        types: ['Normal'],\r\n        bs: { hp: 72, at: 80, df: 100, sa: 60, sd: 90, sp: 88 },\r\n        weightkg: 43,\r\n        abilities: { 0: 'Fluffy' }\r\n    },\r\n    Duraludon: {\r\n        types: ['Steel', 'Dragon'],\r\n        bs: { hp: 70, at: 95, df: 115, sa: 120, sd: 50, sp: 85 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Light Metal' },\r\n        otherFormes: ['Duraludon-Gmax']\r\n    },\r\n    'Duraludon-Gmax': {\r\n        types: ['Steel', 'Dragon'],\r\n        bs: { hp: 70, at: 95, df: 115, sa: 120, sd: 50, sp: 85 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Light Metal' },\r\n        baseSpecies: 'Duraludon'\r\n    },\r\n    'Eevee-Gmax': {\r\n        types: ['Normal'],\r\n        bs: { hp: 55, at: 55, df: 50, sa: 45, sd: 65, sp: 55 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Run Away' },\r\n        baseSpecies: 'Eevee'\r\n    },\r\n    Eiscue: {\r\n        types: ['Ice'],\r\n        bs: { hp: 75, at: 80, df: 110, sa: 65, sd: 90, sp: 50 },\r\n        weightkg: 89,\r\n        abilities: { 0: 'Ice Face' },\r\n        otherFormes: ['Eiscue-Noice']\r\n    },\r\n    'Eiscue-Noice': {\r\n        types: ['Ice'],\r\n        bs: { hp: 75, at: 80, df: 70, sa: 65, sd: 50, sp: 130 },\r\n        weightkg: 89,\r\n        abilities: { 0: 'Ice Face' },\r\n        baseSpecies: 'Eiscue'\r\n    },\r\n    Eldegoss: {\r\n        types: ['Grass'],\r\n        bs: { hp: 60, at: 50, df: 90, sa: 80, sd: 120, sp: 60 },\r\n        weightkg: 2.5,\r\n        abilities: { 0: 'Cotton Down' }\r\n    },\r\n    Eternatus: {\r\n        types: ['Poison', 'Dragon'],\r\n        bs: { hp: 140, at: 85, df: 95, sa: 145, sd: 95, sp: 130 },\r\n        weightkg: 950,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        otherFormes: ['Eternatus-Eternamax']\r\n    },\r\n    'Eternatus-Eternamax': {\r\n        types: ['Poison', 'Dragon'],\r\n        bs: { hp: 255, at: 115, df: 250, sa: 125, sd: 250, sp: 130 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Pressure' },\r\n        gender: 'N',\r\n        baseSpecies: 'Eternatus'\r\n    },\r\n    Falinks: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 65, at: 100, df: 100, sa: 70, sd: 60, sp: 75 },\r\n        weightkg: 62,\r\n        abilities: { 0: 'Battle Armor' },\r\n        gender: 'N'\r\n    },\r\n    'Farfetch\\u2019d-Galar': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 52, at: 95, df: 55, sa: 58, sd: 62, sp: 55 },\r\n        weightkg: 15,\r\n        abilities: { 0: 'Steadfast' },\r\n        nfe: true,\r\n        baseSpecies: 'Farfetch\\u2019d'\r\n    },\r\n    Flapple: {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 70, at: 110, df: 80, sa: 95, sd: 60, sp: 70 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Ripen' },\r\n        otherFormes: ['Flapple-Gmax']\r\n    },\r\n    'Flapple-Gmax': {\r\n        types: ['Grass', 'Dragon'],\r\n        bs: { hp: 70, at: 110, df: 80, sa: 95, sd: 60, sp: 70 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Ripen' },\r\n        baseSpecies: 'Flapple'\r\n    },\r\n    Frosmoth: {\r\n        types: ['Ice', 'Bug'],\r\n        bs: { hp: 70, at: 65, df: 60, sa: 125, sd: 90, sp: 65 },\r\n        weightkg: 42,\r\n        abilities: { 0: 'Shield Dust' }\r\n    },\r\n    'Garbodor-Gmax': {\r\n        types: ['Poison'],\r\n        bs: { hp: 80, at: 95, df: 82, sa: 60, sd: 82, sp: 75 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Stench' },\r\n        baseSpecies: 'Garbodor'\r\n    },\r\n    'Gengar-Gmax': {\r\n        types: ['Ghost', 'Poison'],\r\n        bs: { hp: 60, at: 65, df: 60, sa: 130, sd: 75, sp: 110 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Cursed Body' },\r\n        baseSpecies: 'Gengar'\r\n    },\r\n    Glastrier: {\r\n        types: ['Ice'],\r\n        bs: { hp: 100, at: 145, df: 130, sa: 65, sd: 110, sp: 30 },\r\n        weightkg: 800,\r\n        abilities: { 0: 'Chilling Neigh' },\r\n        gender: 'N'\r\n    },\r\n    Gossifleur: {\r\n        types: ['Grass'],\r\n        bs: { hp: 40, at: 40, df: 60, sa: 40, sd: 60, sp: 10 },\r\n        weightkg: 2.2,\r\n        abilities: { 0: 'Cotton Down' },\r\n        nfe: true\r\n    },\r\n    Grapploct: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 80, at: 118, df: 90, sa: 70, sd: 80, sp: 42 },\r\n        weightkg: 39,\r\n        abilities: { 0: 'Limber' }\r\n    },\r\n    Greedent: {\r\n        types: ['Normal'],\r\n        bs: { hp: 120, at: 95, df: 95, sa: 55, sd: 75, sp: 20 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Cheek Pouch' }\r\n    },\r\n    Grimmsnarl: {\r\n        types: ['Dark', 'Fairy'],\r\n        bs: { hp: 95, at: 120, df: 65, sa: 95, sd: 75, sp: 60 },\r\n        weightkg: 61,\r\n        abilities: { 0: 'Prankster' },\r\n        otherFormes: ['Grimmsnarl-Gmax']\r\n    },\r\n    'Grimmsnarl-Gmax': {\r\n        types: ['Dark', 'Fairy'],\r\n        bs: { hp: 95, at: 120, df: 65, sa: 95, sd: 75, sp: 60 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Prankster' },\r\n        baseSpecies: 'Grimmsnarl'\r\n    },\r\n    Grookey: {\r\n        types: ['Grass'],\r\n        bs: { hp: 50, at: 65, df: 50, sa: 40, sd: 40, sp: 65 },\r\n        weightkg: 5,\r\n        abilities: { 0: 'Overgrow' },\r\n        nfe: true\r\n    },\r\n    Hatenna: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 42, at: 30, df: 45, sa: 56, sd: 53, sp: 39 },\r\n        weightkg: 3.4,\r\n        abilities: { 0: 'Healer' },\r\n        nfe: true\r\n    },\r\n    Hatterene: {\r\n        types: ['Psychic', 'Fairy'],\r\n        bs: { hp: 57, at: 90, df: 95, sa: 136, sd: 103, sp: 29 },\r\n        weightkg: 5.1,\r\n        abilities: { 0: 'Healer' },\r\n        otherFormes: ['Hatterene-Gmax']\r\n    },\r\n    'Hatterene-Gmax': {\r\n        types: ['Psychic', 'Fairy'],\r\n        bs: { hp: 57, at: 90, df: 95, sa: 136, sd: 103, sp: 29 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Healer' },\r\n        baseSpecies: 'Hatterene'\r\n    },\r\n    Hattrem: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 57, at: 40, df: 65, sa: 86, sd: 73, sp: 49 },\r\n        weightkg: 4.8,\r\n        abilities: { 0: 'Healer' },\r\n        nfe: true\r\n    },\r\n    Impidimp: {\r\n        types: ['Dark', 'Fairy'],\r\n        bs: { hp: 45, at: 45, df: 30, sa: 55, sd: 40, sp: 50 },\r\n        weightkg: 5.5,\r\n        abilities: { 0: 'Prankster' },\r\n        nfe: true\r\n    },\r\n    Indeedee: {\r\n        types: ['Psychic', 'Normal'],\r\n        bs: { hp: 60, at: 65, df: 55, sa: 105, sd: 95, sp: 95 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Inner Focus' },\r\n        otherFormes: ['Indeedee-F']\r\n    },\r\n    'Indeedee-F': {\r\n        types: ['Psychic', 'Normal'],\r\n        bs: { hp: 70, at: 55, df: 65, sa: 95, sd: 105, sp: 85 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Own Tempo' },\r\n        baseSpecies: 'Indeedee'\r\n    },\r\n    Inteleon: {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 85, df: 65, sa: 125, sd: 65, sp: 120 },\r\n        weightkg: 45.2,\r\n        abilities: { 0: 'Torrent' },\r\n        otherFormes: ['Inteleon-Gmax']\r\n    },\r\n    'Inteleon-Gmax': {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 85, df: 65, sa: 125, sd: 65, sp: 120 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Torrent' },\r\n        baseSpecies: 'Inteleon'\r\n    },\r\n    'Kingler-Gmax': {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 130, df: 115, sa: 50, sd: 50, sp: 75 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Hyper Cutter' },\r\n        baseSpecies: 'Kingler'\r\n    },\r\n    'Kubfu': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 60, at: 90, df: 60, sa: 53, sd: 50, sp: 72 },\r\n        weightkg: 12,\r\n        nfe: true,\r\n        abilities: { 0: 'Inner Focus' }\r\n    },\r\n    'Lapras-Gmax': {\r\n        types: ['Water', 'Ice'],\r\n        bs: { hp: 130, at: 85, df: 80, sa: 85, sd: 95, sp: 60 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Water Absorb' },\r\n        baseSpecies: 'Lapras'\r\n    },\r\n    'Linoone-Galar': {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 78, at: 70, df: 61, sa: 50, sd: 61, sp: 100 },\r\n        weightkg: 32.5,\r\n        abilities: { 0: 'Pickup' },\r\n        nfe: true,\r\n        baseSpecies: 'Linoone'\r\n    },\r\n    Magearna: { otherFormes: ['Magearna-Original'] },\r\n    'Magearna-Original': {\r\n        baseSpecies: 'Magearna',\r\n        types: ['Steel', 'Fairy'],\r\n        bs: { hp: 80, at: 95, df: 115, sa: 130, sd: 115, sp: 65 },\r\n        weightkg: 80.5,\r\n        gender: 'N',\r\n        abilities: { 0: 'Soul-Heart' }\r\n    },\r\n    'Machamp-Gmax': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 90, at: 130, df: 80, sa: 65, sd: 85, sp: 55 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Guts' },\r\n        baseSpecies: 'Machamp'\r\n    },\r\n    'Melmetal-Gmax': {\r\n        types: ['Steel'],\r\n        bs: { hp: 135, at: 143, df: 143, sa: 80, sd: 65, sp: 34 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Iron Fist' },\r\n        baseSpecies: 'Melmetal',\r\n        gender: 'N'\r\n    },\r\n    'Meowth-Galar': {\r\n        types: ['Steel'],\r\n        bs: { hp: 50, at: 65, df: 55, sa: 40, sd: 40, sp: 40 },\r\n        weightkg: 7.5,\r\n        abilities: { 0: 'Pickup' },\r\n        nfe: true,\r\n        baseSpecies: 'Meowth'\r\n    },\r\n    'Meowth-Gmax': {\r\n        types: ['Normal'],\r\n        bs: { hp: 40, at: 45, df: 35, sa: 40, sd: 40, sp: 90 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Pickup' },\r\n        baseSpecies: 'Meowth'\r\n    },\r\n    Miasmaw: {\r\n        types: ['Bug', 'Dragon'],\r\n        bs: { hp: 85, at: 135, df: 60, sa: 88, sd: 105, sp: 99 },\r\n        weightkg: 57,\r\n        abilities: { 0: 'Neutralizing Gas' }\r\n    },\r\n    Miasmite: {\r\n        types: ['Bug', 'Dragon'],\r\n        bs: { hp: 40, at: 85, df: 60, sa: 52, sd: 52, sp: 44 },\r\n        weightkg: 10.1,\r\n        abilities: { 0: 'Neutralizing Gas' },\r\n        nfe: true\r\n    },\r\n    Milcery: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 45, at: 40, df: 40, sa: 50, sd: 61, sp: 34 },\r\n        weightkg: 0.3,\r\n        abilities: { 0: 'Sweet Veil' },\r\n        nfe: true\r\n    },\r\n    'Moltres-Galar': {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 90, at: 85, df: 90, sa: 100, sd: 125, sp: 90 },\r\n        weightkg: 66,\r\n        abilities: { 0: 'Berserk' },\r\n        gender: 'N',\r\n        baseSpecies: 'Moltres'\r\n    },\r\n    Morgrem: {\r\n        types: ['Dark', 'Fairy'],\r\n        bs: { hp: 65, at: 60, df: 45, sa: 75, sd: 55, sp: 70 },\r\n        weightkg: 12.5,\r\n        abilities: { 0: 'Prankster' },\r\n        nfe: true\r\n    },\r\n    Morpeko: {\r\n        types: ['Electric', 'Dark'],\r\n        bs: { hp: 58, at: 95, df: 58, sa: 70, sd: 58, sp: 97 },\r\n        weightkg: 3,\r\n        abilities: { 0: 'Hunger Switch' },\r\n        otherFormes: ['Morpeko-Hangry']\r\n    },\r\n    'Morpeko-Hangry': {\r\n        types: ['Electric', 'Dark'],\r\n        bs: { hp: 58, at: 95, df: 58, sa: 70, sd: 58, sp: 97 },\r\n        weightkg: 3,\r\n        abilities: { 0: 'Hunger Switch' },\r\n        baseSpecies: 'Morpeko'\r\n    },\r\n    'Mr. Mime-Galar': {\r\n        types: ['Ice', 'Psychic'],\r\n        bs: { hp: 50, at: 65, df: 65, sa: 90, sd: 90, sp: 100 },\r\n        weightkg: 56.8,\r\n        abilities: { 0: 'Vital Spirit' },\r\n        nfe: true,\r\n        baseSpecies: 'Mr. Mime'\r\n    },\r\n    'Mr. Rime': {\r\n        types: ['Ice', 'Psychic'],\r\n        bs: { hp: 80, at: 85, df: 75, sa: 110, sd: 100, sp: 70 },\r\n        weightkg: 58.2,\r\n        abilities: { 0: 'Tangled Feet' }\r\n    },\r\n    Nickit: {\r\n        types: ['Dark'],\r\n        bs: { hp: 40, at: 28, df: 28, sa: 47, sd: 52, sp: 50 },\r\n        weightkg: 8.9,\r\n        abilities: { 0: 'Run Away' },\r\n        nfe: true\r\n    },\r\n    Obstagoon: {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 93, at: 90, df: 101, sa: 60, sd: 81, sp: 95 },\r\n        weightkg: 46,\r\n        abilities: { 0: 'Reckless' }\r\n    },\r\n    Orbeetle: {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 60, at: 45, df: 110, sa: 80, sd: 120, sp: 90 },\r\n        weightkg: 40.8,\r\n        abilities: { 0: 'Swarm' },\r\n        otherFormes: ['Orbeetle-Gmax']\r\n    },\r\n    'Orbeetle-Gmax': {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 60, at: 45, df: 110, sa: 80, sd: 120, sp: 90 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Swarm' },\r\n        baseSpecies: 'Orbeetle'\r\n    },\r\n    Perrserker: {\r\n        types: ['Steel'],\r\n        bs: { hp: 70, at: 110, df: 100, sa: 50, sd: 60, sp: 50 },\r\n        weightkg: 28,\r\n        abilities: { 0: 'Battle Armor' }\r\n    },\r\n    'Pikachu-Gmax': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    'Pikachu-World': {\r\n        types: ['Electric'],\r\n        bs: { hp: 35, at: 55, df: 40, sa: 50, sd: 50, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Static' },\r\n        baseSpecies: 'Pikachu'\r\n    },\r\n    Pincurchin: {\r\n        types: ['Electric'],\r\n        bs: { hp: 48, at: 101, df: 95, sa: 91, sd: 85, sp: 15 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Lightning Rod' }\r\n    },\r\n    Polteageist: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 60, at: 65, df: 65, sa: 134, sd: 114, sp: 70 },\r\n        weightkg: 0.4,\r\n        abilities: { 0: 'Weak Armor' },\r\n        otherFormes: ['Polteageist-Antique'],\r\n        gender: 'N'\r\n    },\r\n    'Polteageist-Antique': {\r\n        types: ['Ghost'],\r\n        bs: { hp: 60, at: 65, df: 65, sa: 134, sd: 114, sp: 70 },\r\n        weightkg: 0.4,\r\n        abilities: { 0: 'Weak Armor' },\r\n        baseSpecies: 'Polteageist',\r\n        gender: 'N'\r\n    },\r\n    'Ponyta-Galar': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 50, at: 85, df: 55, sa: 65, sd: 65, sp: 90 },\r\n        weightkg: 24,\r\n        abilities: { 0: 'Run Away' },\r\n        nfe: true,\r\n        baseSpecies: 'Ponyta'\r\n    },\r\n    Raboot: {\r\n        types: ['Fire'],\r\n        bs: { hp: 65, at: 86, df: 60, sa: 55, sd: 60, sp: 94 },\r\n        weightkg: 9,\r\n        abilities: { 0: 'Blaze' },\r\n        nfe: true\r\n    },\r\n    'Rapidash-Galar': {\r\n        types: ['Psychic', 'Fairy'],\r\n        bs: { hp: 65, at: 100, df: 70, sa: 80, sd: 80, sp: 105 },\r\n        weightkg: 80,\r\n        abilities: { 0: 'Run Away' },\r\n        baseSpecies: 'Rapidash'\r\n    },\r\n    Regidrago: {\r\n        types: ['Dragon'],\r\n        bs: { hp: 200, at: 100, df: 50, sa: 100, sd: 50, sp: 80 },\r\n        weightkg: 200,\r\n        abilities: { 0: 'Dragon\\'s Maw' },\r\n        gender: 'N'\r\n    },\r\n    Regieleki: {\r\n        types: ['Electric'],\r\n        bs: { hp: 80, at: 100, df: 50, sa: 100, sd: 50, sp: 200 },\r\n        weightkg: 145,\r\n        abilities: { 0: 'Transistor' },\r\n        gender: 'N'\r\n    },\r\n    Rillaboom: {\r\n        types: ['Grass'],\r\n        bs: { hp: 100, at: 125, df: 90, sa: 60, sd: 70, sp: 85 },\r\n        weightkg: 90,\r\n        abilities: { 0: 'Overgrow' },\r\n        otherFormes: ['Rillaboom-Gmax']\r\n    },\r\n    'Rillaboom-Gmax': {\r\n        types: ['Grass'],\r\n        bs: { hp: 100, at: 125, df: 90, sa: 60, sd: 70, sp: 85 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Overgrow' },\r\n        baseSpecies: 'Rillaboom'\r\n    },\r\n    Rolycoly: {\r\n        types: ['Rock'],\r\n        bs: { hp: 30, at: 40, df: 50, sa: 40, sd: 50, sp: 30 },\r\n        weightkg: 12,\r\n        abilities: { 0: 'Steam Engine' },\r\n        nfe: true\r\n    },\r\n    Rookidee: {\r\n        types: ['Flying'],\r\n        bs: { hp: 38, at: 47, df: 35, sa: 33, sd: 35, sp: 57 },\r\n        weightkg: 1.8,\r\n        abilities: { 0: 'Keen Eye' },\r\n        nfe: true\r\n    },\r\n    Runerigus: {\r\n        types: ['Ground', 'Ghost'],\r\n        bs: { hp: 58, at: 95, df: 145, sa: 50, sd: 105, sp: 30 },\r\n        weightkg: 66.6,\r\n        abilities: { 0: 'Wandering Spirit' }\r\n    },\r\n    Saharaja: {\r\n        types: ['Ground'],\r\n        bs: { hp: 70, at: 112, df: 105, sa: 65, sd: 123, sp: 78 },\r\n        weightkg: 303.9,\r\n        abilities: { 0: 'Water Absorb' }\r\n    },\r\n    Saharascal: {\r\n        types: ['Ground'],\r\n        bs: { hp: 50, at: 80, df: 65, sa: 45, sd: 90, sp: 70 },\r\n        weightkg: 48,\r\n        abilities: { 0: 'Water Absorb' },\r\n        nfe: true\r\n    },\r\n    Sandaconda: {\r\n        types: ['Ground'],\r\n        bs: { hp: 72, at: 107, df: 125, sa: 65, sd: 70, sp: 71 },\r\n        weightkg: 65.5,\r\n        abilities: { 0: 'Sand Spit' },\r\n        otherFormes: ['Sandaconda-Gmax']\r\n    },\r\n    'Sandaconda-Gmax': {\r\n        types: ['Ground'],\r\n        bs: { hp: 72, at: 107, df: 125, sa: 65, sd: 70, sp: 71 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Sand Spit' },\r\n        baseSpecies: 'Sandaconda'\r\n    },\r\n    Scorbunny: {\r\n        types: ['Fire'],\r\n        bs: { hp: 50, at: 71, df: 40, sa: 40, sd: 40, sp: 69 },\r\n        weightkg: 4.5,\r\n        abilities: { 0: 'Blaze' },\r\n        nfe: true\r\n    },\r\n    Silicobra: {\r\n        types: ['Ground'],\r\n        bs: { hp: 52, at: 57, df: 75, sa: 35, sd: 50, sp: 46 },\r\n        weightkg: 7.6,\r\n        abilities: { 0: 'Sand Spit' },\r\n        nfe: true\r\n    },\r\n    Sinistea: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 40, at: 45, df: 45, sa: 74, sd: 54, sp: 50 },\r\n        weightkg: 0.2,\r\n        abilities: { 0: 'Weak Armor' },\r\n        nfe: true,\r\n        otherFormes: ['Sinistea-Antique'],\r\n        gender: 'N'\r\n    },\r\n    'Sinistea-Antique': {\r\n        types: ['Ghost'],\r\n        bs: { hp: 40, at: 45, df: 45, sa: 74, sd: 54, sp: 50 },\r\n        weightkg: 0.2,\r\n        abilities: { 0: 'Weak Armor' },\r\n        nfe: true,\r\n        baseSpecies: 'Sinistea',\r\n        gender: 'N'\r\n    },\r\n    'Sirfetch\\u2019d': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 62, at: 135, df: 95, sa: 68, sd: 82, sp: 65 },\r\n        weightkg: 117,\r\n        abilities: { 0: 'Steadfast' }\r\n    },\r\n    Sizzlipede: {\r\n        types: ['Fire', 'Bug'],\r\n        bs: { hp: 50, at: 65, df: 45, sa: 50, sd: 50, sp: 45 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Flash Fire' },\r\n        nfe: true\r\n    },\r\n    Skwovet: {\r\n        types: ['Normal'],\r\n        bs: { hp: 70, at: 55, df: 55, sa: 35, sd: 35, sp: 25 },\r\n        weightkg: 2.5,\r\n        abilities: { 0: 'Cheek Pouch' },\r\n        nfe: true\r\n    },\r\n    'Slowbro-Galar': {\r\n        types: ['Poison', 'Psychic'],\r\n        bs: { hp: 95, at: 100, df: 95, sa: 100, sd: 70, sp: 30 },\r\n        weightkg: 70.5,\r\n        abilities: { 0: 'Quick Draw' },\r\n        baseSpecies: 'Slowbro'\r\n    },\r\n    'Slowking-Galar': {\r\n        types: ['Poison', 'Psychic'],\r\n        bs: { hp: 95, at: 65, df: 80, sa: 110, sd: 110, sp: 30 },\r\n        weightkg: 79.5,\r\n        abilities: { 0: 'Curious Medicine' },\r\n        baseSpecies: 'Slowking'\r\n    },\r\n    'Slowpoke-Galar': {\r\n        types: ['Psychic'],\r\n        bs: { hp: 90, at: 65, df: 65, sa: 40, sd: 40, sp: 15 },\r\n        weightkg: 36,\r\n        nfe: true,\r\n        abilities: { 0: 'Gluttony' },\r\n        baseSpecies: 'Slowpoke'\r\n    },\r\n    Solotl: {\r\n        types: ['Fire', 'Dragon'],\r\n        bs: { hp: 68, at: 48, df: 34, sa: 72, sd: 24, sp: 84 },\r\n        weightkg: 11.8,\r\n        nfe: true,\r\n        abilities: { 0: 'Regenerator' }\r\n    },\r\n    Snom: {\r\n        types: ['Ice', 'Bug'],\r\n        bs: { hp: 30, at: 25, df: 35, sa: 45, sd: 30, sp: 20 },\r\n        weightkg: 3.8,\r\n        abilities: { 0: 'Shield Dust' },\r\n        nfe: true\r\n    },\r\n    'Snorlax-Gmax': {\r\n        types: ['Normal'],\r\n        bs: { hp: 160, at: 110, df: 65, sa: 65, sd: 110, sp: 30 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Immunity' },\r\n        baseSpecies: 'Snorlax'\r\n    },\r\n    Sobble: {\r\n        types: ['Water'],\r\n        bs: { hp: 50, at: 40, df: 40, sa: 70, sd: 40, sp: 70 },\r\n        weightkg: 4,\r\n        abilities: { 0: 'Torrent' },\r\n        nfe: true\r\n    },\r\n    Spectrier: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 100, at: 65, df: 60, sa: 145, sd: 80, sp: 130 },\r\n        weightkg: 44.5,\r\n        abilities: { 0: 'Grim Neigh' },\r\n        gender: 'N'\r\n    },\r\n    Stonjourner: {\r\n        types: ['Rock'],\r\n        bs: { hp: 100, at: 125, df: 135, sa: 20, sd: 20, sp: 70 },\r\n        weightkg: 520,\r\n        abilities: { 0: 'Power Spot' }\r\n    },\r\n    'Stunfisk-Galar': {\r\n        types: ['Ground', 'Steel'],\r\n        bs: { hp: 109, at: 81, df: 99, sa: 66, sd: 84, sp: 32 },\r\n        weightkg: 20.5,\r\n        abilities: { 0: 'Mimicry' },\r\n        baseSpecies: 'Stunfisk'\r\n    },\r\n    Thievul: {\r\n        types: ['Dark'],\r\n        bs: { hp: 70, at: 58, df: 58, sa: 87, sd: 92, sp: 90 },\r\n        weightkg: 19.9,\r\n        abilities: { 0: 'Run Away' }\r\n    },\r\n    Thwackey: {\r\n        types: ['Grass'],\r\n        bs: { hp: 70, at: 85, df: 70, sa: 55, sd: 60, sp: 80 },\r\n        weightkg: 14,\r\n        abilities: { 0: 'Overgrow' },\r\n        nfe: true\r\n    },\r\n    Toxel: {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 40, at: 38, df: 35, sa: 54, sd: 35, sp: 40 },\r\n        weightkg: 11,\r\n        abilities: { 0: 'Rattled' },\r\n        nfe: true\r\n    },\r\n    Toxtricity: {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Punk Rock' },\r\n        otherFormes: ['Toxtricity-Gmax', 'Toxtricity-Low-Key', 'Toxtricity-Low-Key-Gmax']\r\n    },\r\n    'Toxtricity-Gmax': {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Punk Rock' },\r\n        baseSpecies: 'Toxtricity'\r\n    },\r\n    'Toxtricity-Low-Key': {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\r\n        weightkg: 40,\r\n        abilities: { 0: 'Punk Rock' },\r\n        baseSpecies: 'Toxtricity'\r\n    },\r\n    'Toxtricity-Low-Key-Gmax': {\r\n        types: ['Electric', 'Poison'],\r\n        bs: { hp: 75, at: 98, df: 70, sa: 114, sd: 70, sp: 75 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Punk Rock' },\r\n        baseSpecies: 'Toxtricity'\r\n    },\r\n    Urshifu: {\r\n        types: ['Fighting', 'Dark'],\r\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\r\n        weightkg: 105,\r\n        abilities: { 0: 'Unseen Fist' },\r\n        otherFormes: ['Urshifu-Gmax', 'Urshifu-Rapid-Strike', 'Urshifu-Rapid-Strike-Gmax']\r\n    },\r\n    'Urshifu-Rapid-Strike': {\r\n        types: ['Fighting', 'Water'],\r\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\r\n        weightkg: 105,\r\n        abilities: { 0: 'Unseen Fist' },\r\n        baseSpecies: 'Urshifu'\r\n    },\r\n    'Urshifu-Rapid-Strike-Gmax': {\r\n        types: ['Fighting', 'Water'],\r\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\r\n        weightkg: 105,\r\n        abilities: { 0: 'Unseen Fist' },\r\n        baseSpecies: 'Urshifu'\r\n    },\r\n    'Urshifu-Gmax': {\r\n        types: ['Fighting', 'Dark'],\r\n        bs: { hp: 100, at: 130, df: 100, sa: 63, sd: 60, sp: 97 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Unseen Fist' },\r\n        baseSpecies: 'Urshifu'\r\n    },\r\n    Venomicon: {\r\n        types: ['Poison', 'Flying'],\r\n        bs: { hp: 85, at: 50, df: 113, sa: 118, sd: 90, sp: 64 },\r\n        weightkg: 11.5,\r\n        abilities: { 0: 'Stamina' },\r\n        otherFormes: ['Venomicon-Epilogue'],\r\n        gender: 'N'\r\n    },\r\n    'Venomicon-Epilogue': {\r\n        types: ['Poison', 'Flying'],\r\n        bs: { hp: 85, at: 102, df: 85, sa: 62, sd: 85, sp: 101 },\r\n        weightkg: 12.4,\r\n        abilities: { 0: 'Tinted Lens' },\r\n        baseSpecies: 'Venomicon',\r\n        gender: 'N'\r\n    },\r\n    'Venusaur-Gmax': {\r\n        types: ['Grass', 'Poison'],\r\n        bs: { hp: 80, at: 82, df: 83, sa: 100, sd: 100, sp: 80 },\r\n        weightkg: 0,\r\n        abilities: { 0: 'Overgrow' },\r\n        baseSpecies: 'Venusaur'\r\n    },\r\n    'Weezing-Galar': {\r\n        types: ['Poison', 'Fairy'],\r\n        bs: { hp: 65, at: 90, df: 120, sa: 85, sd: 70, sp: 60 },\r\n        weightkg: 16,\r\n        abilities: { 0: 'Levitate' },\r\n        baseSpecies: 'Weezing'\r\n    },\r\n    Wooloo: {\r\n        types: ['Normal'],\r\n        bs: { hp: 42, at: 40, df: 55, sa: 40, sd: 45, sp: 48 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Fluffy' },\r\n        nfe: true\r\n    },\r\n    'Yamask-Galar': {\r\n        types: ['Ground', 'Ghost'],\r\n        bs: { hp: 38, at: 55, df: 85, sa: 30, sd: 65, sp: 30 },\r\n        weightkg: 1.5,\r\n        abilities: { 0: 'Wandering Spirit' },\r\n        nfe: true,\r\n        baseSpecies: 'Yamask'\r\n    },\r\n    Yamper: {\r\n        types: ['Electric'],\r\n        bs: { hp: 59, at: 45, df: 50, sa: 40, sd: 50, sp: 26 },\r\n        weightkg: 13.5,\r\n        abilities: { 0: 'Ball Fetch' },\r\n        nfe: true\r\n    },\r\n    Zacian: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 92, at: 130, df: 115, sa: 80, sd: 115, sp: 138 },\r\n        weightkg: 110,\r\n        abilities: { 0: 'Intrepid Sword' },\r\n        gender: 'N',\r\n        otherFormes: ['Zacian-Crowned']\r\n    },\r\n    'Zacian-Crowned': {\r\n        types: ['Fairy', 'Steel'],\r\n        bs: { hp: 92, at: 170, df: 115, sa: 80, sd: 115, sp: 148 },\r\n        weightkg: 355,\r\n        abilities: { 0: 'Intrepid Sword' },\r\n        baseSpecies: 'Zacian',\r\n        gender: 'N'\r\n    },\r\n    Zamazenta: {\r\n        types: ['Fighting'],\r\n        bs: { hp: 92, at: 130, df: 115, sa: 80, sd: 115, sp: 138 },\r\n        weightkg: 210,\r\n        abilities: { 0: 'Dauntless Shield' },\r\n        gender: 'N',\r\n        otherFormes: ['Zamazenta-Crowned']\r\n    },\r\n    'Zamazenta-Crowned': {\r\n        types: ['Fighting', 'Steel'],\r\n        bs: { hp: 92, at: 130, df: 145, sa: 80, sd: 145, sp: 128 },\r\n        weightkg: 785,\r\n        abilities: { 0: 'Dauntless Shield' },\r\n        baseSpecies: 'Zamazenta',\r\n        gender: 'N'\r\n    },\r\n    'Zapdos-Galar': {\r\n        types: ['Fighting', 'Flying'],\r\n        bs: { hp: 90, at: 125, df: 90, sa: 85, sd: 90, sp: 100 },\r\n        weightkg: 58.2,\r\n        abilities: { 0: 'Defiant' },\r\n        gender: 'N',\r\n        baseSpecies: 'Zapdos'\r\n    },\r\n    Zarude: {\r\n        types: ['Dark', 'Grass'],\r\n        bs: { hp: 105, at: 120, df: 105, sa: 70, sd: 95, sp: 105 },\r\n        weightkg: 70,\r\n        abilities: { 0: 'Leaf Guard' },\r\n        gender: 'N',\r\n        otherFormes: ['Zarude-Dada']\r\n    },\r\n    'Zarude-Dada': {\r\n        types: ['Dark', 'Grass'],\r\n        bs: { hp: 105, at: 120, df: 105, sa: 70, sd: 95, sp: 105 },\r\n        weightkg: 70,\r\n        abilities: { 0: 'Leaf Guard' },\r\n        baseSpecies: 'Zarude',\r\n        gender: 'N'\r\n    },\r\n    'Zigzagoon-Galar': {\r\n        types: ['Dark', 'Normal'],\r\n        bs: { hp: 38, at: 30, df: 41, sa: 30, sd: 41, sp: 60 },\r\n        weightkg: 17.5,\r\n        abilities: { 0: 'Pickup' },\r\n        nfe: true,\r\n        baseSpecies: 'Zigzagoon'\r\n    }\r\n};\r\nvar PLA_PATCH = {\r\n    Arcanine: { otherFormes: ['Arcanine-Hisui'] },\r\n    Avalugg: { otherFormes: ['Avalugg-Hisui'] },\r\n    Basculin: { otherFormes: ['Basculin-Blue-Striped', 'Basculin-White-Striped'] },\r\n    Braviary: { otherFormes: ['Braviary-Hisui'] },\r\n    Decidueye: { otherFormes: ['Decidueye-Hisui'] },\r\n    Dialga: { otherFormes: ['Dialga-Origin'] },\r\n    Electrode: { otherFormes: ['Electrode-Hisui'] },\r\n    Goodra: { otherFormes: ['Goodra-Hisui'] },\r\n    Growlithe: { otherFormes: ['Growlithe-Hisui'] },\r\n    Lilligant: { otherFormes: ['Lilligant-Hisui'] },\r\n    Palkia: { otherFormes: ['Palkia-Origin'] },\r\n    Qwilfish: { otherFormes: ['Qwilfish-Hisui'] },\r\n    Samurott: { otherFormes: ['Samurott-Hisui'] },\r\n    Sliggoo: { otherFormes: ['Sliggoo-Hisui'] },\r\n    Sneasel: { otherFormes: ['Sneasel-Hisui'] },\r\n    Stantler: { nfe: true },\r\n    Typhlosion: { otherFormes: ['Typhlosion-Hisui'] },\r\n    Ursaring: { nfe: true },\r\n    Voltorb: { otherFormes: ['Voltorb-Hisui'] },\r\n    Zoroark: { otherFormes: ['Zoroark-Hisui'] },\r\n    Zorua: { otherFormes: ['Zorua-Hisui'] },\r\n    'Arcanine-Hisui': {\r\n        types: ['Fire', 'Rock'],\r\n        bs: { hp: 95, at: 115, df: 80, sa: 95, sd: 80, sp: 90 },\r\n        weightkg: 168,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Arcanine'\r\n    },\r\n    'Avalugg-Hisui': {\r\n        types: ['Ice', 'Rock'],\r\n        bs: { hp: 95, at: 127, df: 184, sa: 34, sd: 36, sp: 38 },\r\n        weightkg: 262.4,\r\n        abilities: { 0: 'Strong Jaw' },\r\n        baseSpecies: 'Avalugg'\r\n    },\r\n    Basculegion: {\r\n        types: ['Water', 'Ghost'],\r\n        bs: { hp: 120, at: 112, df: 65, sa: 80, sd: 75, sp: 78 },\r\n        weightkg: 110,\r\n        abilities: { 0: 'Swift Swim' },\r\n        otherFormes: ['Basculegion-F']\r\n    },\r\n    'Basculegion-F': {\r\n        types: ['Water', 'Ghost'],\r\n        bs: { hp: 120, at: 92, df: 65, sa: 100, sd: 75, sp: 78 },\r\n        weightkg: 110,\r\n        abilities: { 0: 'Swift Swim' },\r\n        baseSpecies: 'Basculegion'\r\n    },\r\n    'Basculin-White-Striped': {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 92, df: 65, sa: 80, sd: 55, sp: 98 },\r\n        weightkg: 18,\r\n        abilities: { 0: 'Rattled' },\r\n        baseSpecies: 'Basculin',\r\n        nfe: true\r\n    },\r\n    'Braviary-Hisui': {\r\n        types: ['Psychic', 'Flying'],\r\n        bs: { hp: 110, at: 83, df: 70, sa: 112, sd: 70, sp: 65 },\r\n        weightkg: 43.4,\r\n        abilities: { 0: 'Keen Eye' },\r\n        baseSpecies: 'Braviary'\r\n    },\r\n    'Decidueye-Hisui': {\r\n        types: ['Grass', 'Fighting'],\r\n        bs: { hp: 88, at: 112, df: 80, sa: 95, sd: 95, sp: 60 },\r\n        weightkg: 37,\r\n        abilities: { 0: 'Overgrow' },\r\n        baseSpecies: 'Decidueye'\r\n    },\r\n    'Dialga-Origin': {\r\n        types: ['Steel', 'Dragon'],\r\n        bs: { hp: 100, at: 100, df: 120, sa: 150, sd: 120, sp: 90 },\r\n        weightkg: 850,\r\n        gender: 'N',\r\n        abilities: { 0: 'Pressure' },\r\n        baseSpecies: 'Dialga'\r\n    },\r\n    'Electrode-Hisui': {\r\n        types: ['Electric', 'Grass'],\r\n        bs: { hp: 60, at: 50, df: 70, sa: 80, sd: 80, sp: 150 },\r\n        weightkg: 71,\r\n        gender: 'N',\r\n        abilities: { 0: 'Soundproof' },\r\n        baseSpecies: 'Electrode'\r\n    },\r\n    Enamorus: {\r\n        types: ['Fairy', 'Flying'],\r\n        bs: { hp: 74, at: 115, df: 70, sa: 135, sd: 80, sp: 106 },\r\n        weightkg: 48,\r\n        abilities: { 0: 'Cute Charm' },\r\n        otherFormes: ['Enamorus-Therian']\r\n    },\r\n    'Enamorus-Therian': {\r\n        types: ['Fairy', 'Flying'],\r\n        bs: { hp: 74, at: 115, df: 110, sa: 135, sd: 100, sp: 46 },\r\n        weightkg: 48,\r\n        abilities: { 0: 'Overcoat' },\r\n        baseSpecies: 'Enamorus'\r\n    },\r\n    'Goodra-Hisui': {\r\n        types: ['Steel', 'Dragon'],\r\n        bs: { hp: 80, at: 100, df: 100, sa: 110, sd: 150, sp: 60 },\r\n        weightkg: 334.1,\r\n        abilities: { 0: 'Sap Sipper' },\r\n        baseSpecies: 'Goodra'\r\n    },\r\n    'Growlithe-Hisui': {\r\n        types: ['Fire', 'Rock'],\r\n        bs: { hp: 60, at: 75, df: 45, sa: 65, sd: 50, sp: 55 },\r\n        weightkg: 22.7,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Growlithe',\r\n        nfe: true\r\n    },\r\n    Kleavor: {\r\n        types: ['Bug', 'Rock'],\r\n        bs: { hp: 70, at: 130, df: 95, sa: 45, sd: 75, sp: 85 },\r\n        weightkg: 89,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    'Lilligant-Hisui': {\r\n        types: ['Grass', 'Fighting'],\r\n        bs: { hp: 70, at: 105, df: 75, sa: 50, sd: 75, sp: 105 },\r\n        weightkg: 19.2,\r\n        abilities: { 0: 'Chlorophyll' },\r\n        baseSpecies: 'Lilligant'\r\n    },\r\n    Overqwil: {\r\n        types: ['Dark', 'Poison'],\r\n        bs: { hp: 85, at: 115, df: 95, sa: 65, sd: 65, sp: 85 },\r\n        weightkg: 3.9,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    'Palkia-Origin': {\r\n        types: ['Water', 'Dragon'],\r\n        bs: { hp: 90, at: 100, df: 100, sa: 150, sd: 120, sp: 120 },\r\n        weightkg: 660,\r\n        gender: 'N',\r\n        abilities: { 0: 'Pressure' },\r\n        baseSpecies: 'Palkia'\r\n    },\r\n    'Qwilfish-Hisui': {\r\n        types: ['Dark', 'Poison'],\r\n        bs: { hp: 65, at: 95, df: 85, sa: 55, sd: 55, sp: 85 },\r\n        weightkg: 3.9,\r\n        abilities: { 0: 'Poison Point' },\r\n        baseSpecies: 'Qwilfish',\r\n        nfe: true\r\n    },\r\n    'Samurott-Hisui': {\r\n        types: ['Water', 'Dark'],\r\n        bs: { hp: 90, at: 108, df: 80, sa: 100, sd: 65, sp: 85 },\r\n        weightkg: 58.2,\r\n        abilities: { 0: 'Torrent' },\r\n        baseSpecies: 'Samurott'\r\n    },\r\n    'Sliggoo-Hisui': {\r\n        types: ['Steel', 'Dragon'],\r\n        bs: { hp: 58, at: 75, df: 83, sa: 83, sd: 113, sp: 40 },\r\n        weightkg: 68.5,\r\n        abilities: { 0: 'Sap Sipper' },\r\n        baseSpecies: 'Sliggoo',\r\n        nfe: true\r\n    },\r\n    'Sneasel-Hisui': {\r\n        types: ['Fighting', 'Poison'],\r\n        bs: { hp: 55, at: 95, df: 55, sa: 35, sd: 75, sp: 115 },\r\n        weightkg: 27,\r\n        abilities: { 0: 'Inner Focus' },\r\n        baseSpecies: 'Sneasel',\r\n        nfe: true\r\n    },\r\n    Sneasler: {\r\n        types: ['Fighting', 'Poison'],\r\n        bs: { hp: 80, at: 130, df: 60, sa: 40, sd: 80, sp: 120 },\r\n        weightkg: 43,\r\n        abilities: { 0: 'Pressure' }\r\n    },\r\n    'Typhlosion-Hisui': {\r\n        types: ['Fire', 'Ghost'],\r\n        bs: { hp: 73, at: 84, df: 78, sa: 119, sd: 85, sp: 95 },\r\n        weightkg: 69.8,\r\n        abilities: { 0: 'Blaze' },\r\n        baseSpecies: 'Typhlosion'\r\n    },\r\n    Ursaluna: {\r\n        types: ['Ground', 'Normal'],\r\n        bs: { hp: 130, at: 140, df: 105, sa: 45, sd: 80, sp: 50 },\r\n        weightkg: 290,\r\n        abilities: { 0: 'Guts' }\r\n    },\r\n    'Voltorb-Hisui': {\r\n        types: ['Electric', 'Grass'],\r\n        bs: { hp: 40, at: 30, df: 50, sa: 55, sd: 55, sp: 100 },\r\n        weightkg: 13,\r\n        gender: 'N',\r\n        abilities: { 0: 'Soundproof' },\r\n        baseSpecies: 'Voltorb',\r\n        nfe: true\r\n    },\r\n    Wyrdeer: {\r\n        types: ['Normal', 'Psychic'],\r\n        bs: { hp: 103, at: 105, df: 72, sa: 105, sd: 75, sp: 65 },\r\n        weightkg: 95.1,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    'Zoroark-Hisui': {\r\n        types: ['Normal', 'Ghost'],\r\n        bs: { hp: 60, at: 105, df: 60, sa: 120, sd: 60, sp: 105 },\r\n        weightkg: 73,\r\n        abilities: { 0: 'Illusion' },\r\n        baseSpecies: 'Zoroark'\r\n    },\r\n    'Zorua-Hisui': {\r\n        types: ['Normal', 'Ghost'],\r\n        bs: { hp: 35, at: 60, df: 40, sa: 85, sd: 40, sp: 70 },\r\n        weightkg: 12.5,\r\n        abilities: { 0: 'Illusion' },\r\n        baseSpecies: 'Zorua',\r\n        nfe: true\r\n    }\r\n};\r\nvar SS = (0, util_1.extend)(true, {}, SM, SS_PATCH, PLA_PATCH);\r\ndelete SS['Pikachu-Starter'];\r\ndelete SS['Eevee-Starter'];\r\nvar SV_PATCH = {\r\n    Bisharp: { nfe: true },\r\n    Cresselia: { bs: { df: 110, sd: 120 } },\r\n    Dunsparce: { nfe: true },\r\n    Girafarig: { nfe: true },\r\n    Primeape: { nfe: true },\r\n    Tauros: { otherFormes: ['Tauros-Paldea', 'Tauros-Paldea-Fire', 'Tauros-Paldea-Water'] },\r\n    Wooper: { otherFormes: ['Wooper-Paldea'] },\r\n    Zacian: { bs: { at: 120 } },\r\n    'Zacian-Crowned': { bs: { at: 150 } },\r\n    Zamazenta: { bs: { at: 120 } },\r\n    'Zamazenta-Crowned': { bs: { at: 120, df: 140, sd: 140 } },\r\n    Annihilape: {\r\n        types: ['Fighting', 'Ghost'],\r\n        bs: { hp: 110, at: 115, df: 80, sa: 50, sd: 90, sp: 90 },\r\n        weightkg: 56,\r\n        abilities: { 0: 'Vital Spirit' }\r\n    },\r\n    Arboliva: {\r\n        types: ['Grass', 'Normal'],\r\n        bs: { hp: 78, at: 69, df: 90, sa: 125, sd: 109, sp: 39 },\r\n        weightkg: 48.2,\r\n        abilities: { 0: 'Seed Sower' }\r\n    },\r\n    Arctibax: {\r\n        types: ['Dragon', 'Ice'],\r\n        bs: { hp: 90, at: 95, df: 66, sa: 45, sd: 65, sp: 62 },\r\n        weightkg: 30,\r\n        abilities: { 0: 'Thermal Exchange' },\r\n        nfe: true\r\n    },\r\n    Armarouge: {\r\n        types: ['Fire', 'Psychic'],\r\n        bs: { hp: 85, at: 60, df: 100, sa: 125, sd: 80, sp: 75 },\r\n        weightkg: 85,\r\n        abilities: { 0: 'Flash Fire' }\r\n    },\r\n    Baxcalibur: {\r\n        types: ['Dragon', 'Ice'],\r\n        bs: { hp: 115, at: 145, df: 92, sa: 75, sd: 86, sp: 87 },\r\n        weightkg: 210,\r\n        abilities: { 0: 'Thermal Exchange' }\r\n    },\r\n    Bellibolt: {\r\n        types: ['Electric'],\r\n        bs: { hp: 109, at: 64, df: 91, sa: 103, sd: 83, sp: 45 },\r\n        weightkg: 113,\r\n        abilities: { 0: 'Electromorphosis' }\r\n    },\r\n    Bombirdier: {\r\n        types: ['Flying', 'Dark'],\r\n        bs: { hp: 70, at: 103, df: 85, sa: 60, sd: 85, sp: 82 },\r\n        weightkg: 42.9,\r\n        abilities: { 0: 'Big Pecks' }\r\n    },\r\n    Brambleghast: {\r\n        types: ['Grass', 'Ghost'],\r\n        bs: { hp: 55, at: 115, df: 70, sa: 80, sd: 70, sp: 90 },\r\n        weightkg: 6,\r\n        abilities: { 0: 'Wind Rider' }\r\n    },\r\n    Bramblin: {\r\n        types: ['Grass', 'Ghost'],\r\n        bs: { hp: 40, at: 65, df: 30, sa: 45, sd: 35, sp: 60 },\r\n        weightkg: 0.6,\r\n        abilities: { 0: 'Wind Rider' },\r\n        nfe: true\r\n    },\r\n    'Brute Bonnet': {\r\n        types: ['Grass', 'Dark'],\r\n        bs: { hp: 111, at: 127, df: 99, sa: 79, sd: 99, sp: 55 },\r\n        weightkg: 21,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    Capsakid: {\r\n        types: ['Grass'],\r\n        bs: { hp: 52, at: 62, df: 40, sa: 62, sd: 40, sp: 50 },\r\n        weightkg: 3,\r\n        abilities: { 0: 'Chlorophyll' },\r\n        nfe: true\r\n    },\r\n    Ceruledge: {\r\n        types: ['Fire', 'Ghost'],\r\n        bs: { hp: 75, at: 125, df: 80, sa: 60, sd: 100, sp: 85 },\r\n        weightkg: 62,\r\n        abilities: { 0: 'Flash Fire' }\r\n    },\r\n    Cetitan: {\r\n        types: ['Ice'],\r\n        bs: { hp: 170, at: 113, df: 65, sa: 45, sd: 55, sp: 73 },\r\n        weightkg: 700,\r\n        abilities: { 0: 'Thick Fat' }\r\n    },\r\n    Cetoddle: {\r\n        types: ['Ice'],\r\n        bs: { hp: 108, at: 68, df: 45, sa: 30, sd: 40, sp: 43 },\r\n        weightkg: 45,\r\n        abilities: { 0: 'Thick Fat' },\r\n        nfe: true\r\n    },\r\n    Charcadet: {\r\n        types: ['Fire'],\r\n        bs: { hp: 40, at: 50, df: 40, sa: 50, sd: 40, sp: 35 },\r\n        weightkg: 10.5,\r\n        abilities: { 0: 'Flash Fire' },\r\n        nfe: true\r\n    },\r\n    'Chi-Yu': {\r\n        types: ['Dark', 'Fire'],\r\n        bs: { hp: 55, at: 80, df: 80, sa: 135, sd: 120, sp: 100 },\r\n        weightkg: 4.9,\r\n        gender: 'N',\r\n        abilities: { 0: 'Beads of Ruin' }\r\n    },\r\n    'Chien-Pao': {\r\n        types: ['Dark', 'Ice'],\r\n        bs: { hp: 80, at: 120, df: 80, sa: 90, sd: 65, sp: 135 },\r\n        weightkg: 152.2,\r\n        gender: 'N',\r\n        abilities: { 0: 'Sword of Ruin' }\r\n    },\r\n    Clodsire: {\r\n        types: ['Poison', 'Ground'],\r\n        bs: { hp: 130, at: 75, df: 60, sa: 45, sd: 100, sp: 20 },\r\n        weightkg: 223,\r\n        abilities: { 0: 'Poison Point' }\r\n    },\r\n    Crocalor: {\r\n        types: ['Fire'],\r\n        bs: { hp: 81, at: 55, df: 78, sa: 90, sd: 58, sp: 49 },\r\n        weightkg: 30.7,\r\n        abilities: { 0: 'Blaze' },\r\n        nfe: true\r\n    },\r\n    Cyclizar: {\r\n        types: ['Dragon', 'Normal'],\r\n        bs: { hp: 70, at: 95, df: 65, sa: 85, sd: 65, sp: 121 },\r\n        weightkg: 63,\r\n        abilities: { 0: 'Shed Skin' }\r\n    },\r\n    Dachsbun: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 57, at: 80, df: 115, sa: 50, sd: 80, sp: 95 },\r\n        weightkg: 14.9,\r\n        abilities: { 0: 'Well-Baked Body' }\r\n    },\r\n    Dolliv: {\r\n        types: ['Grass', 'Normal'],\r\n        bs: { hp: 52, at: 53, df: 60, sa: 78, sd: 78, sp: 33 },\r\n        weightkg: 11.9,\r\n        abilities: { 0: 'Early Bird' },\r\n        nfe: true\r\n    },\r\n    Dondozo: {\r\n        types: ['Water'],\r\n        bs: { hp: 150, at: 100, df: 115, sa: 65, sd: 65, sp: 35 },\r\n        weightkg: 220,\r\n        abilities: { 0: 'Unaware' }\r\n    },\r\n    Dudunsparce: {\r\n        types: ['Normal'],\r\n        bs: { hp: 125, at: 100, df: 80, sa: 85, sd: 75, sp: 55 },\r\n        weightkg: 39.2,\r\n        abilities: { 0: 'Serene Grace' },\r\n        otherFormes: ['Dudunsparce-Three-Segment']\r\n    },\r\n    'Dudunsparce-Three-Segment': {\r\n        types: ['Normal'],\r\n        bs: { hp: 125, at: 100, df: 80, sa: 85, sd: 75, sp: 55 },\r\n        weightkg: 47.4,\r\n        abilities: { 0: 'Serene Grace' },\r\n        baseSpecies: 'Dudunsparce'\r\n    },\r\n    Espathra: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 95, at: 60, df: 60, sa: 101, sd: 60, sp: 105 },\r\n        weightkg: 90,\r\n        abilities: { 0: 'Opportunist' }\r\n    },\r\n    Farigiraf: {\r\n        types: ['Normal', 'Psychic'],\r\n        bs: { hp: 120, at: 90, df: 70, sa: 110, sd: 70, sp: 60 },\r\n        weightkg: 160,\r\n        abilities: { 0: 'Cud Chew' }\r\n    },\r\n    Fidough: {\r\n        types: ['Fairy'],\r\n        bs: { hp: 37, at: 55, df: 70, sa: 30, sd: 55, sp: 65 },\r\n        weightkg: 10.9,\r\n        abilities: { 0: 'Own Tempo' },\r\n        nfe: true\r\n    },\r\n    Finizen: {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 45, df: 40, sa: 45, sd: 40, sp: 75 },\r\n        weightkg: 60.2,\r\n        abilities: { 0: 'Water Veil' },\r\n        nfe: true\r\n    },\r\n    Flamigo: {\r\n        types: ['Flying', 'Fighting'],\r\n        bs: { hp: 82, at: 115, df: 74, sa: 75, sd: 64, sp: 90 },\r\n        weightkg: 37,\r\n        abilities: { 0: 'Scrappy' }\r\n    },\r\n    Flittle: {\r\n        types: ['Psychic'],\r\n        bs: { hp: 30, at: 35, df: 30, sa: 55, sd: 40, sp: 75 },\r\n        weightkg: 1.5,\r\n        abilities: { 0: 'Anticipation' },\r\n        nfe: true\r\n    },\r\n    Floragato: {\r\n        types: ['Grass'],\r\n        bs: { hp: 61, at: 80, df: 63, sa: 60, sd: 63, sp: 83 },\r\n        weightkg: 12.2,\r\n        abilities: { 0: 'Overgrow' },\r\n        nfe: true\r\n    },\r\n    'Flutter Mane': {\r\n        types: ['Ghost', 'Fairy'],\r\n        bs: { hp: 55, at: 55, df: 55, sa: 135, sd: 135, sp: 135 },\r\n        weightkg: 4,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    Frigibax: {\r\n        types: ['Dragon', 'Ice'],\r\n        bs: { hp: 65, at: 75, df: 45, sa: 35, sd: 45, sp: 55 },\r\n        weightkg: 17,\r\n        abilities: { 0: 'Thermal Exchange' },\r\n        nfe: true\r\n    },\r\n    Fuecoco: {\r\n        types: ['Fire'],\r\n        bs: { hp: 67, at: 45, df: 59, sa: 63, sd: 40, sp: 36 },\r\n        weightkg: 9.8,\r\n        abilities: { 0: 'Blaze' },\r\n        nfe: true\r\n    },\r\n    Garganacl: {\r\n        types: ['Rock'],\r\n        bs: { hp: 100, at: 100, df: 130, sa: 45, sd: 90, sp: 35 },\r\n        weightkg: 240,\r\n        abilities: { 0: 'Purifying Salt' }\r\n    },\r\n    Gholdengo: {\r\n        types: ['Steel', 'Ghost'],\r\n        bs: { hp: 87, at: 60, df: 95, sa: 133, sd: 91, sp: 84 },\r\n        weightkg: 30,\r\n        gender: 'N',\r\n        abilities: { 0: 'Good as Gold' }\r\n    },\r\n    Gimmighoul: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 45, at: 30, df: 70, sa: 75, sd: 70, sp: 10 },\r\n        weightkg: 5,\r\n        gender: 'N',\r\n        abilities: { 0: 'Rattled' },\r\n        nfe: true\r\n    },\r\n    Glimmet: {\r\n        types: ['Rock', 'Poison'],\r\n        bs: { hp: 48, at: 35, df: 42, sa: 105, sd: 60, sp: 60 },\r\n        weightkg: 8,\r\n        abilities: { 0: 'Toxic Debris' },\r\n        nfe: true\r\n    },\r\n    Glimmora: {\r\n        types: ['Rock', 'Poison'],\r\n        bs: { hp: 83, at: 55, df: 90, sa: 130, sd: 81, sp: 86 },\r\n        weightkg: 45,\r\n        abilities: { 0: 'Toxic Debris' }\r\n    },\r\n    Grafaiai: {\r\n        types: ['Poison', 'Normal'],\r\n        bs: { hp: 63, at: 95, df: 65, sa: 80, sd: 72, sp: 110 },\r\n        weightkg: 27.2,\r\n        abilities: { 0: 'Unburden' }\r\n    },\r\n    'Great Tusk': {\r\n        types: ['Ground', 'Fighting'],\r\n        bs: { hp: 115, at: 131, df: 131, sa: 53, sd: 53, sp: 87 },\r\n        weightkg: 320,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    Greavard: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 50, at: 61, df: 60, sa: 30, sd: 55, sp: 34 },\r\n        weightkg: 35,\r\n        abilities: { 0: 'Pickup' },\r\n        nfe: true\r\n    },\r\n    Houndstone: {\r\n        types: ['Ghost'],\r\n        bs: { hp: 72, at: 101, df: 100, sa: 50, sd: 97, sp: 68 },\r\n        weightkg: 15,\r\n        abilities: { 0: 'Sand Rush' }\r\n    },\r\n    'Iron Bundle': {\r\n        types: ['Ice', 'Water'],\r\n        bs: { hp: 56, at: 80, df: 114, sa: 124, sd: 60, sp: 136 },\r\n        weightkg: 11,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    'Iron Hands': {\r\n        types: ['Fighting', 'Electric'],\r\n        bs: { hp: 154, at: 140, df: 108, sa: 50, sd: 68, sp: 50 },\r\n        weightkg: 380.7,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    'Iron Jugulis': {\r\n        types: ['Dark', 'Flying'],\r\n        bs: { hp: 94, at: 80, df: 86, sa: 122, sd: 80, sp: 108 },\r\n        weightkg: 111,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    'Iron Moth': {\r\n        types: ['Fire', 'Poison'],\r\n        bs: { hp: 80, at: 70, df: 60, sa: 140, sd: 110, sp: 110 },\r\n        weightkg: 36,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    'Iron Thorns': {\r\n        types: ['Rock', 'Electric'],\r\n        bs: { hp: 100, at: 134, df: 110, sa: 70, sd: 84, sp: 72 },\r\n        weightkg: 303,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    'Iron Treads': {\r\n        types: ['Ground', 'Steel'],\r\n        bs: { hp: 90, at: 112, df: 120, sa: 72, sd: 70, sp: 106 },\r\n        weightkg: 240,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    'Iron Valiant': {\r\n        types: ['Fairy', 'Fighting'],\r\n        bs: { hp: 74, at: 130, df: 90, sa: 120, sd: 60, sp: 116 },\r\n        weightkg: 35,\r\n        gender: 'N',\r\n        abilities: { 0: 'Quark Drive' }\r\n    },\r\n    Kilowattrel: {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 70, at: 70, df: 60, sa: 105, sd: 60, sp: 125 },\r\n        weightkg: 38.6,\r\n        abilities: { 0: 'Wind Power' }\r\n    },\r\n    Kingambit: {\r\n        types: ['Dark', 'Steel'],\r\n        bs: { hp: 100, at: 135, df: 120, sa: 60, sd: 85, sp: 50 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Defiant' }\r\n    },\r\n    Klawf: {\r\n        types: ['Rock'],\r\n        bs: { hp: 70, at: 100, df: 115, sa: 35, sd: 55, sp: 75 },\r\n        weightkg: 79,\r\n        abilities: { 0: 'Anger Shell' }\r\n    },\r\n    Koraidon: {\r\n        types: ['Fighting', 'Dragon'],\r\n        bs: { hp: 100, at: 135, df: 115, sa: 85, sd: 100, sp: 135 },\r\n        weightkg: 303,\r\n        gender: 'N',\r\n        abilities: { 0: 'Orichalcum Pulse' }\r\n    },\r\n    Lechonk: {\r\n        types: ['Normal'],\r\n        bs: { hp: 54, at: 45, df: 40, sa: 35, sd: 45, sp: 35 },\r\n        weightkg: 10.2,\r\n        abilities: { 0: 'Aroma Veil' },\r\n        nfe: true\r\n    },\r\n    Lokix: {\r\n        types: ['Bug', 'Dark'],\r\n        bs: { hp: 71, at: 102, df: 78, sa: 52, sd: 55, sp: 92 },\r\n        weightkg: 17.5,\r\n        abilities: { 0: 'Swarm' }\r\n    },\r\n    Mabosstiff: {\r\n        types: ['Dark'],\r\n        bs: { hp: 80, at: 120, df: 90, sa: 60, sd: 70, sp: 85 },\r\n        weightkg: 61,\r\n        abilities: { 0: 'Intimidate' }\r\n    },\r\n    Maschiff: {\r\n        types: ['Dark'],\r\n        bs: { hp: 60, at: 78, df: 60, sa: 40, sd: 51, sp: 51 },\r\n        weightkg: 16,\r\n        abilities: { 0: 'Intimidate' },\r\n        nfe: true\r\n    },\r\n    Maushold: {\r\n        types: ['Normal'],\r\n        bs: { hp: 74, at: 75, df: 70, sa: 65, sd: 75, sp: 111 },\r\n        weightkg: 2.3,\r\n        gender: 'N',\r\n        abilities: { 0: 'Friend Guard' },\r\n        otherFormes: ['Maushold-Four']\r\n    },\r\n    'Maushold-Four': {\r\n        types: ['Normal'],\r\n        bs: { hp: 74, at: 75, df: 70, sa: 65, sd: 75, sp: 111 },\r\n        weightkg: 2.8,\r\n        gender: 'N',\r\n        abilities: { 0: 'Friend Guard' },\r\n        baseSpecies: 'Maushold'\r\n    },\r\n    Meowscarada: {\r\n        types: ['Grass', 'Dark'],\r\n        bs: { hp: 76, at: 110, df: 70, sa: 81, sd: 70, sp: 123 },\r\n        weightkg: 31.2,\r\n        abilities: { 0: 'Overgrow' }\r\n    },\r\n    Miraidon: {\r\n        types: ['Electric', 'Dragon'],\r\n        bs: { hp: 100, at: 85, df: 100, sa: 135, sd: 115, sp: 135 },\r\n        weightkg: 240,\r\n        gender: 'N',\r\n        abilities: { 0: 'Hadron Engine' }\r\n    },\r\n    Nacli: {\r\n        types: ['Rock'],\r\n        bs: { hp: 55, at: 55, df: 75, sa: 35, sd: 35, sp: 25 },\r\n        weightkg: 16,\r\n        abilities: { 0: 'Purifying Salt' },\r\n        nfe: true\r\n    },\r\n    Naclstack: {\r\n        types: ['Rock'],\r\n        bs: { hp: 60, at: 60, df: 100, sa: 35, sd: 65, sp: 35 },\r\n        weightkg: 105,\r\n        abilities: { 0: 'Purifying Salt' },\r\n        nfe: true\r\n    },\r\n    Nymble: {\r\n        types: ['Bug'],\r\n        bs: { hp: 33, at: 46, df: 40, sa: 21, sd: 25, sp: 45 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Swarm' },\r\n        nfe: true\r\n    },\r\n    Oinkologne: {\r\n        types: ['Normal'],\r\n        bs: { hp: 110, at: 100, df: 75, sa: 59, sd: 80, sp: 65 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Lingering Aroma' },\r\n        otherFormes: ['Oinkologne-F']\r\n    },\r\n    'Oinkologne-F': {\r\n        types: ['Normal'],\r\n        bs: { hp: 115, at: 90, df: 70, sa: 59, sd: 90, sp: 65 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Aroma Veil' },\r\n        baseSpecies: 'Oinkologne'\r\n    },\r\n    Orthworm: {\r\n        types: ['Steel'],\r\n        bs: { hp: 70, at: 85, df: 145, sa: 60, sd: 55, sp: 65 },\r\n        weightkg: 310,\r\n        abilities: { 0: 'Earth Eater' }\r\n    },\r\n    Palafin: {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 70, df: 72, sa: 53, sd: 62, sp: 100 },\r\n        weightkg: 60.2,\r\n        abilities: { 0: 'Zero to Hero' },\r\n        otherFormes: ['Palafin-Hero']\r\n    },\r\n    'Palafin-Hero': {\r\n        types: ['Water'],\r\n        bs: { hp: 100, at: 160, df: 97, sa: 106, sd: 87, sp: 100 },\r\n        weightkg: 97.4,\r\n        abilities: { 0: 'Zero to Hero' },\r\n        baseSpecies: 'Palafin'\r\n    },\r\n    Pawmi: {\r\n        types: ['Electric'],\r\n        bs: { hp: 45, at: 50, df: 20, sa: 40, sd: 25, sp: 60 },\r\n        weightkg: 2.5,\r\n        abilities: { 0: 'Static' },\r\n        nfe: true\r\n    },\r\n    Pawmo: {\r\n        types: ['Electric', 'Fighting'],\r\n        bs: { hp: 60, at: 75, df: 40, sa: 50, sd: 40, sp: 85 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Volt Absorb' },\r\n        nfe: true\r\n    },\r\n    Pawmot: {\r\n        types: ['Electric', 'Fighting'],\r\n        bs: { hp: 70, at: 115, df: 70, sa: 70, sd: 60, sp: 105 },\r\n        weightkg: 41,\r\n        abilities: { 0: 'Volt Absorb' }\r\n    },\r\n    Quaquaval: {\r\n        types: ['Water', 'Fighting'],\r\n        bs: { hp: 85, at: 120, df: 80, sa: 85, sd: 75, sp: 85 },\r\n        weightkg: 61.9,\r\n        abilities: { 0: 'Torrent' }\r\n    },\r\n    Quaxly: {\r\n        types: ['Water'],\r\n        bs: { hp: 55, at: 65, df: 45, sa: 50, sd: 45, sp: 50 },\r\n        weightkg: 6.1,\r\n        abilities: { 0: 'Torrent' },\r\n        nfe: true\r\n    },\r\n    Quaxwell: {\r\n        types: ['Water'],\r\n        bs: { hp: 70, at: 85, df: 65, sa: 65, sd: 60, sp: 65 },\r\n        weightkg: 21.5,\r\n        abilities: { 0: 'Torrent' },\r\n        nfe: true\r\n    },\r\n    Rabsca: {\r\n        types: ['Bug', 'Psychic'],\r\n        bs: { hp: 75, at: 50, df: 85, sa: 115, sd: 100, sp: 45 },\r\n        weightkg: 3.5,\r\n        abilities: { 0: 'Synchronize' }\r\n    },\r\n    Rellor: {\r\n        types: ['Bug'],\r\n        bs: { hp: 41, at: 50, df: 60, sa: 31, sd: 58, sp: 30 },\r\n        weightkg: 1,\r\n        abilities: { 0: 'Compound Eyes' },\r\n        nfe: true\r\n    },\r\n    Revavroom: {\r\n        types: ['Steel', 'Poison'],\r\n        bs: { hp: 80, at: 119, df: 90, sa: 54, sd: 67, sp: 90 },\r\n        weightkg: 120,\r\n        abilities: { 0: 'Overcoat' }\r\n    },\r\n    'Roaring Moon': {\r\n        types: ['Dragon', 'Dark'],\r\n        bs: { hp: 105, at: 139, df: 71, sa: 55, sd: 101, sp: 119 },\r\n        weightkg: 380,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    'Sandy Shocks': {\r\n        types: ['Electric', 'Ground'],\r\n        bs: { hp: 85, at: 81, df: 97, sa: 121, sd: 85, sp: 101 },\r\n        weightkg: 60,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    Scovillain: {\r\n        types: ['Grass', 'Fire'],\r\n        bs: { hp: 65, at: 108, df: 65, sa: 108, sd: 65, sp: 75 },\r\n        weightkg: 15,\r\n        abilities: { 0: 'Chlorophyll' }\r\n    },\r\n    'Scream Tail': {\r\n        types: ['Fairy', 'Psychic'],\r\n        bs: { hp: 115, at: 65, df: 99, sa: 65, sd: 115, sp: 111 },\r\n        weightkg: 8,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    Shroodle: {\r\n        types: ['Poison', 'Normal'],\r\n        bs: { hp: 40, at: 65, df: 35, sa: 40, sd: 35, sp: 75 },\r\n        weightkg: 0.7,\r\n        abilities: { 0: 'Unburden' },\r\n        nfe: true\r\n    },\r\n    Skeledirge: {\r\n        types: ['Fire', 'Ghost'],\r\n        bs: { hp: 104, at: 75, df: 100, sa: 110, sd: 75, sp: 66 },\r\n        weightkg: 326.5,\r\n        abilities: { 0: 'Blaze' }\r\n    },\r\n    'Slither Wing': {\r\n        types: ['Bug', 'Fighting'],\r\n        bs: { hp: 85, at: 135, df: 79, sa: 85, sd: 105, sp: 81 },\r\n        weightkg: 92,\r\n        gender: 'N',\r\n        abilities: { 0: 'Protosynthesis' }\r\n    },\r\n    Smoliv: {\r\n        types: ['Grass', 'Normal'],\r\n        bs: { hp: 41, at: 35, df: 45, sa: 58, sd: 51, sp: 30 },\r\n        weightkg: 6.5,\r\n        abilities: { 0: 'Early Bird' },\r\n        nfe: true\r\n    },\r\n    Spidops: {\r\n        types: ['Bug'],\r\n        bs: { hp: 60, at: 79, df: 92, sa: 52, sd: 86, sp: 35 },\r\n        weightkg: 16.5,\r\n        abilities: { 0: 'Insomnia' }\r\n    },\r\n    Sprigatito: {\r\n        types: ['Grass'],\r\n        bs: { hp: 40, at: 61, df: 54, sa: 45, sd: 45, sp: 65 },\r\n        weightkg: 4.1,\r\n        abilities: { 0: 'Overgrow' },\r\n        nfe: true\r\n    },\r\n    Squawkabilly: {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\r\n        weightkg: 2.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        otherFormes: ['Squawkabilly-Blue', 'Squawkabilly-White', 'Squawkabilly-Yellow']\r\n    },\r\n    'Squawkabilly-Blue': {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\r\n        weightkg: 2.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Squawkabilly'\r\n    },\r\n    'Squawkabilly-White': {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\r\n        weightkg: 2.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Squawkabilly'\r\n    },\r\n    'Squawkabilly-Yellow': {\r\n        types: ['Normal', 'Flying'],\r\n        bs: { hp: 82, at: 96, df: 51, sa: 45, sd: 51, sp: 92 },\r\n        weightkg: 2.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Squawkabilly'\r\n    },\r\n    Tadbulb: {\r\n        types: ['Electric'],\r\n        bs: { hp: 61, at: 31, df: 41, sa: 59, sd: 35, sp: 45 },\r\n        weightkg: 0.4,\r\n        abilities: { 0: 'Own Tempo' },\r\n        nfe: true\r\n    },\r\n    Tandemaus: {\r\n        types: ['Normal'],\r\n        bs: { hp: 50, at: 50, df: 45, sa: 40, sd: 45, sp: 75 },\r\n        weightkg: 1.8,\r\n        gender: 'N',\r\n        abilities: { 0: 'Run Away' },\r\n        nfe: true\r\n    },\r\n    Tarountula: {\r\n        types: ['Bug'],\r\n        bs: { hp: 35, at: 41, df: 45, sa: 29, sd: 40, sp: 20 },\r\n        weightkg: 4,\r\n        abilities: { 0: 'Insomnia' },\r\n        nfe: true\r\n    },\r\n    Tatsugiri: {\r\n        types: ['Dragon', 'Water'],\r\n        bs: { hp: 68, at: 50, df: 60, sa: 120, sd: 95, sp: 82 },\r\n        weightkg: 8,\r\n        abilities: { 0: 'Commander' }\r\n    },\r\n    'Tauros-Paldea': {\r\n        types: ['Fighting'],\r\n        bs: { hp: 75, at: 110, df: 105, sa: 30, sd: 70, sp: 100 },\r\n        weightkg: 88.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Tauros'\r\n    },\r\n    'Tauros-Paldea-Fire': {\r\n        types: ['Fighting', 'Fire'],\r\n        bs: { hp: 75, at: 110, df: 105, sa: 30, sd: 70, sp: 100 },\r\n        weightkg: 88.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Tauros'\r\n    },\r\n    'Tauros-Paldea-Water': {\r\n        types: ['Fighting', 'Water'],\r\n        bs: { hp: 75, at: 110, df: 105, sa: 30, sd: 70, sp: 100 },\r\n        weightkg: 88.4,\r\n        abilities: { 0: 'Intimidate' },\r\n        baseSpecies: 'Tauros'\r\n    },\r\n    'Ting-Lu': {\r\n        types: ['Dark', 'Ground'],\r\n        bs: { hp: 155, at: 110, df: 125, sa: 55, sd: 80, sp: 45 },\r\n        weightkg: 699.7,\r\n        gender: 'N',\r\n        abilities: { 0: 'Vessel of Ruin' }\r\n    },\r\n    Tinkatink: {\r\n        types: ['Fairy', 'Steel'],\r\n        bs: { hp: 50, at: 45, df: 45, sa: 35, sd: 64, sp: 58 },\r\n        weightkg: 8.9,\r\n        abilities: { 0: 'Mold Breaker' },\r\n        nfe: true\r\n    },\r\n    Tinkaton: {\r\n        types: ['Fairy', 'Steel'],\r\n        bs: { hp: 85, at: 75, df: 77, sa: 70, sd: 105, sp: 94 },\r\n        weightkg: 112.8,\r\n        abilities: { 0: 'Mold Breaker' }\r\n    },\r\n    Tinkatuff: {\r\n        types: ['Fairy', 'Steel'],\r\n        bs: { hp: 65, at: 55, df: 55, sa: 45, sd: 82, sp: 78 },\r\n        weightkg: 59.1,\r\n        abilities: { 0: 'Mold Breaker' },\r\n        nfe: true\r\n    },\r\n    Toedscool: {\r\n        types: ['Ground', 'Grass'],\r\n        bs: { hp: 40, at: 40, df: 35, sa: 50, sd: 100, sp: 70 },\r\n        weightkg: 33,\r\n        abilities: { 0: 'Mycelium Might' },\r\n        nfe: true\r\n    },\r\n    Toedscruel: {\r\n        types: ['Ground', 'Grass'],\r\n        bs: { hp: 80, at: 70, df: 65, sa: 80, sd: 120, sp: 100 },\r\n        weightkg: 58,\r\n        abilities: { 0: 'Mycelium Might' }\r\n    },\r\n    Varoom: {\r\n        types: ['Steel', 'Poison'],\r\n        bs: { hp: 45, at: 70, df: 63, sa: 30, sd: 45, sp: 47 },\r\n        weightkg: 35,\r\n        abilities: { 0: 'Overcoat' },\r\n        nfe: true\r\n    },\r\n    Veluza: {\r\n        types: ['Water', 'Psychic'],\r\n        bs: { hp: 90, at: 102, df: 73, sa: 78, sd: 65, sp: 70 },\r\n        weightkg: 90,\r\n        abilities: { 0: 'Mold Breaker' }\r\n    },\r\n    Wattrel: {\r\n        types: ['Electric', 'Flying'],\r\n        bs: { hp: 40, at: 40, df: 35, sa: 55, sd: 40, sp: 70 },\r\n        weightkg: 3.6,\r\n        abilities: { 0: 'Wind Power' },\r\n        nfe: true\r\n    },\r\n    Wiglett: {\r\n        types: ['Water'],\r\n        bs: { hp: 10, at: 55, df: 25, sa: 35, sd: 25, sp: 95 },\r\n        weightkg: 1.8,\r\n        abilities: { 0: 'Gooey' },\r\n        nfe: true\r\n    },\r\n    'Wo-Chien': {\r\n        types: ['Dark', 'Grass'],\r\n        bs: { hp: 85, at: 85, df: 100, sa: 95, sd: 135, sp: 70 },\r\n        weightkg: 74.2,\r\n        gender: 'N',\r\n        abilities: { 0: 'Tablets of Ruin' }\r\n    },\r\n    'Wooper-Paldea': {\r\n        types: ['Poison', 'Ground'],\r\n        bs: { hp: 55, at: 45, df: 45, sa: 25, sd: 25, sp: 15 },\r\n        weightkg: 8.5,\r\n        abilities: { 0: 'Poison Point' },\r\n        baseSpecies: 'Wooper',\r\n        nfe: true\r\n    },\r\n    Wugtrio: {\r\n        types: ['Water'],\r\n        bs: { hp: 35, at: 100, df: 50, sa: 50, sd: 70, sp: 120 },\r\n        weightkg: 5.4,\r\n        abilities: { 0: 'Gooey' }\r\n    }\r\n};\r\nvar SV = (0, util_1.extend)(true, {}, SS, SV_PATCH, PLA_PATCH);\r\nexports.SPECIES = [{}, RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\r\nvar Species = (function () {\r\n    function Species(gen) {\r\n        this.gen = gen;\r\n    }\r\n    Species.prototype.get = function (id) {\r\n        return SPECIES_BY_ID[this.gen][id];\r\n    };\r\n    Species.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _c, _i, id;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _a = SPECIES_BY_ID[this.gen];\r\n                    _b = [];\r\n                    for (_c in _a)\r\n                        _b.push(_c);\r\n                    _i = 0;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!(_i < _b.length)) return [3, 4];\r\n                    _c = _b[_i];\r\n                    if (!(_c in _a)) return [3, 3];\r\n                    id = _c;\r\n                    return [4, this.get(id)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3, 1];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    };\r\n    return Species;\r\n}());\r\nexports.Species = Species;\r\nvar Specie = (function () {\r\n    function Specie(name, data) {\r\n        this.kind = 'Species';\r\n        this.id = (0, util_1.toID)(name);\r\n        this.name = name;\r\n        var baseStats = {};\r\n        baseStats.hp = data.bs.hp;\r\n        baseStats.atk = data.bs.at;\r\n        baseStats.def = data.bs.df;\r\n        baseStats.spa = gen >= 2 ? data.bs.sa : data.bs.sl;\r\n        baseStats.spd = gen >= 2 ? data.bs.sd : data.bs.sl;\r\n        baseStats.spe = data.bs.sp;\r\n        this.baseStats = baseStats;\r\n        if (data.otherFormes) {\r\n            this.otherFormes = data.otherFormes;\r\n            if (gen >= 9 && !['toxtricity', 'urshifu'].includes(this.id)) {\r\n                this.otherFormes = this.otherFormes.filter(function (f) { return !f.endsWith('-Gmax'); });\r\n                if (!this.otherFormes.length)\r\n                    this.otherFormes = undefined;\r\n                if (this.otherFormes)\r\n                    this.otherFormes = __spreadArray([], __read(new Set(this.otherFormes)), false);\r\n            }\r\n        }\r\n        (0, util_1.assignWithout)(this, data, Specie.EXCLUDE);\r\n    }\r\n    Specie.EXCLUDE = new Set(['bs', 'otherFormes']);\r\n    return Specie;\r\n}());\r\nvar SPECIES_BY_ID = [];\r\nvar gen = 0;\r\ntry {\r\n    for (var SPECIES_1 = __values(exports.SPECIES), SPECIES_1_1 = SPECIES_1.next(); !SPECIES_1_1.done; SPECIES_1_1 = SPECIES_1.next()) {\r\n        var species = SPECIES_1_1.value;\r\n        var map = {};\r\n        for (var specie in species) {\r\n            if (gen >= 2 && species[specie].bs.sl)\r\n                delete species[specie].bs.sl;\r\n            var m = new Specie(specie, species[specie]);\r\n            map[m.id] = m;\r\n        }\r\n        SPECIES_BY_ID.push(map);\r\n        gen++;\r\n    }\r\n}\r\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\r\nfinally {\r\n    try {\r\n        if (SPECIES_1_1 && !SPECIES_1_1.done && (_a = SPECIES_1[\"return\"])) _a.call(SPECIES_1);\r\n    }\r\n    finally { if (e_1) throw e_1.error; }\r\n}\r\n//# sourceMappingURL=species.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/species.js?\n}");

/***/ }),

/***/ "./calc/dist/data/types.js":
/*!*********************************!*\
  !*** ./calc/dist/data/types.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar e_1, _a;\r\nexports.__esModule = true;\r\nexports.Types = exports.TYPE_CHART = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar RBY = {\r\n    '???': {\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 1\r\n    },\r\n    Normal: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 0.5,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 0,\r\n        Dragon: 1\r\n    },\r\n    Grass: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 0.5,\r\n        Fire: 0.5,\r\n        Water: 2,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 0.5,\r\n        Bug: 0.5,\r\n        Poison: 0.5,\r\n        Ground: 2,\r\n        Rock: 2,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 0.5\r\n    },\r\n    Fire: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 2,\r\n        Fire: 0.5,\r\n        Water: 0.5,\r\n        Electric: 1,\r\n        Ice: 2,\r\n        Flying: 1,\r\n        Bug: 2,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 0.5,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 0.5\r\n    },\r\n    Water: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 0.5,\r\n        Fire: 2,\r\n        Water: 0.5,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 2,\r\n        Rock: 2,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 0.5\r\n    },\r\n    Electric: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 0.5,\r\n        Fire: 1,\r\n        Water: 2,\r\n        Electric: 0.5,\r\n        Ice: 1,\r\n        Flying: 2,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 0,\r\n        Rock: 1,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 0.5\r\n    },\r\n    Ice: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 2,\r\n        Fire: 1,\r\n        Water: 0.5,\r\n        Electric: 1,\r\n        Ice: 0.5,\r\n        Flying: 2,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 2,\r\n        Rock: 1,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 2\r\n    },\r\n    Flying: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 2,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 0.5,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 2,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 0.5,\r\n        Fighting: 2,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 1\r\n    },\r\n    Bug: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 2,\r\n        Fire: 0.5,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 0.5,\r\n        Bug: 1,\r\n        Poison: 2,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 0.5,\r\n        Psychic: 2,\r\n        Ghost: 0.5,\r\n        Dragon: 1\r\n    },\r\n    Poison: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 2,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 2,\r\n        Poison: 0.5,\r\n        Ground: 0.5,\r\n        Rock: 0.5,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 0.5,\r\n        Dragon: 1\r\n    },\r\n    Ground: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 0.5,\r\n        Fire: 2,\r\n        Water: 1,\r\n        Electric: 2,\r\n        Ice: 1,\r\n        Flying: 0,\r\n        Bug: 0.5,\r\n        Poison: 2,\r\n        Ground: 1,\r\n        Rock: 2,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 1\r\n    },\r\n    Rock: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 2,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 2,\r\n        Flying: 2,\r\n        Bug: 2,\r\n        Poison: 1,\r\n        Ground: 0.5,\r\n        Rock: 1,\r\n        Fighting: 0.5,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 1\r\n    },\r\n    Fighting: {\r\n        '???': 1,\r\n        Normal: 2,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 2,\r\n        Flying: 0.5,\r\n        Bug: 0.5,\r\n        Poison: 0.5,\r\n        Ground: 1,\r\n        Rock: 2,\r\n        Fighting: 1,\r\n        Psychic: 0.5,\r\n        Ghost: 0,\r\n        Dragon: 1\r\n    },\r\n    Psychic: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 2,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 2,\r\n        Psychic: 0.5,\r\n        Ghost: 1,\r\n        Dragon: 1\r\n    },\r\n    Ghost: {\r\n        '???': 1,\r\n        Normal: 0,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 1,\r\n        Psychic: 0,\r\n        Ghost: 2,\r\n        Dragon: 1\r\n    },\r\n    Dragon: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 2\r\n    }\r\n};\r\nvar GSC = (0, util_1.extend)(true, {}, RBY, {\r\n    '???': { Dark: 1, Steel: 1 },\r\n    Normal: { Dark: 1, Steel: 0.5 },\r\n    Grass: { Dark: 1, Steel: 0.5 },\r\n    Fire: { Dark: 1, Steel: 2 },\r\n    Water: { Dark: 1, Steel: 1 },\r\n    Electric: { Dark: 1, Steel: 1 },\r\n    Ice: { Fire: 0.5, Dark: 1, Steel: 0.5 },\r\n    Flying: { Dark: 1, Steel: 0.5 },\r\n    Bug: { Poison: 0.5, Dark: 2, Steel: 0.5 },\r\n    Poison: { Bug: 1, Dark: 1, Steel: 0 },\r\n    Ground: { Dark: 1, Steel: 2 },\r\n    Rock: { Dark: 1, Steel: 0.5 },\r\n    Fighting: { Dark: 2, Steel: 2 },\r\n    Psychic: { Dark: 0, Steel: 0.5 },\r\n    Ghost: { Psychic: 2, Dark: 0.5, Steel: 0.5 },\r\n    Dragon: { Dark: 1, Steel: 0.5 },\r\n    Dark: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 1,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 0.5,\r\n        Psychic: 2,\r\n        Ghost: 2,\r\n        Dragon: 1,\r\n        Dark: 0.5,\r\n        Steel: 0.5\r\n    },\r\n    Steel: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 0.5,\r\n        Water: 0.5,\r\n        Electric: 0.5,\r\n        Ice: 2,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 1,\r\n        Ground: 1,\r\n        Rock: 2,\r\n        Fighting: 1,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 1,\r\n        Dark: 1,\r\n        Steel: 0.5\r\n    }\r\n});\r\nvar ADV = GSC;\r\nvar DPP = GSC;\r\nvar BW = GSC;\r\nvar XY = (0, util_1.extend)(true, {}, GSC, {\r\n    '???': { Fairy: 1 },\r\n    Normal: { Fairy: 1 },\r\n    Grass: { Fairy: 1 },\r\n    Fire: { Fairy: 1 },\r\n    Water: { Fairy: 1 },\r\n    Electric: { Fairy: 1 },\r\n    Ice: { Fairy: 1 },\r\n    Flying: { Fairy: 1 },\r\n    Bug: { Fairy: 0.5 },\r\n    Poison: { Fairy: 2 },\r\n    Ground: { Fairy: 1 },\r\n    Rock: { Fairy: 1 },\r\n    Fighting: { Fairy: 0.5 },\r\n    Psychic: { Fairy: 1 },\r\n    Ghost: { Steel: 1, Fairy: 1 },\r\n    Dragon: { Fairy: 0 },\r\n    Dark: { Steel: 1, Fairy: 0.5 },\r\n    Steel: { Fairy: 2 },\r\n    Fairy: {\r\n        '???': 1,\r\n        Normal: 1,\r\n        Grass: 1,\r\n        Fire: 0.5,\r\n        Water: 1,\r\n        Electric: 1,\r\n        Ice: 1,\r\n        Flying: 1,\r\n        Bug: 1,\r\n        Poison: 0.5,\r\n        Ground: 1,\r\n        Rock: 1,\r\n        Fighting: 2,\r\n        Psychic: 1,\r\n        Ghost: 1,\r\n        Dragon: 2,\r\n        Dark: 2,\r\n        Steel: 0.5,\r\n        Fairy: 1\r\n    }\r\n});\r\nvar SM = XY;\r\nvar SS = SM;\r\nvar SV = SS;\r\nexports.TYPE_CHART = [{}, RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\r\nvar Types = (function () {\r\n    function Types(gen) {\r\n        this.gen = gen;\r\n    }\r\n    Types.prototype.get = function (id) {\r\n        return TYPES_BY_ID[this.gen][id];\r\n    };\r\n    Types.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _c, _i, id;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _a = TYPES_BY_ID[this.gen];\r\n                    _b = [];\r\n                    for (_c in _a)\r\n                        _b.push(_c);\r\n                    _i = 0;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!(_i < _b.length)) return [3, 4];\r\n                    _c = _b[_i];\r\n                    if (!(_c in _a)) return [3, 3];\r\n                    id = _c;\r\n                    return [4, this.get(id)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3, 1];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    };\r\n    return Types;\r\n}());\r\nexports.Types = Types;\r\nvar Type = (function () {\r\n    function Type(name, effectiveness) {\r\n        this.kind = 'Type';\r\n        this.id = (0, util_1.toID)(name);\r\n        this.name = name;\r\n        this.effectiveness = effectiveness;\r\n    }\r\n    return Type;\r\n}());\r\nvar TYPES_BY_ID = [];\r\ntry {\r\n    for (var TYPE_CHART_1 = __values(exports.TYPE_CHART), TYPE_CHART_1_1 = TYPE_CHART_1.next(); !TYPE_CHART_1_1.done; TYPE_CHART_1_1 = TYPE_CHART_1.next()) {\r\n        var typeChart = TYPE_CHART_1_1.value;\r\n        var map = {};\r\n        for (var type in typeChart) {\r\n            var t = new Type(type, __assign({}, typeChart[type]));\r\n            map[t.id] = t;\r\n        }\r\n        TYPES_BY_ID.push(map);\r\n    }\r\n}\r\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\r\nfinally {\r\n    try {\r\n        if (TYPE_CHART_1_1 && !TYPE_CHART_1_1.done && (_a = TYPE_CHART_1[\"return\"])) _a.call(TYPE_CHART_1);\r\n    }\r\n    finally { if (e_1) throw e_1.error; }\r\n}\r\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack:///./calc/dist/data/types.js?\n}");

/***/ }),

/***/ "./calc/dist/desc.js":
/*!***************************!*\
  !*** ./calc/dist/desc.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nexports.__esModule = true;\r\nexports.getKOChance = exports.getRecoil = exports.getRecovery = exports.displayMove = exports.display = void 0;\r\nvar result_1 = __webpack_require__(/*! ./result */ \"./calc/dist/result.js\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\r\nvar util_2 = __webpack_require__(/*! ./mechanics/util */ \"./calc/dist/mechanics/util.js\");\r\nfunction display(gen, attacker, defender, move, field, damage, rawDesc, notation, err) {\r\n    if (notation === void 0) { notation = '%'; }\r\n    if (err === void 0) { err = true; }\r\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\r\n    var min = (typeof minDamage === 'number' ? minDamage : minDamage[0] + minDamage[1]) * move.hits;\r\n    var max = (typeof maxDamage === 'number' ? maxDamage : maxDamage[0] + maxDamage[1]) * move.hits;\r\n    var minDisplay = toDisplay(notation, min, defender.maxHP());\r\n    var maxDisplay = toDisplay(notation, max, defender.maxHP());\r\n    var desc = buildDescription(rawDesc, attacker, defender);\r\n    var damageText = \"\".concat(min, \"-\").concat(max, \" (\").concat(minDisplay, \" - \").concat(maxDisplay).concat(notation, \")\");\r\n    if (move.category === 'Status' && !move.named('Nature Power'))\r\n        return \"\".concat(desc, \": \").concat(damageText);\r\n    var koChanceText = getKOChance(gen, attacker, defender, move, field, damage, err).text;\r\n    return koChanceText ? \"\".concat(desc, \": \").concat(damageText, \" -- \").concat(koChanceText) : \"\".concat(desc, \": \").concat(damageText);\r\n}\r\nexports.display = display;\r\nfunction displayMove(gen, attacker, defender, move, damage, notation) {\r\n    if (notation === void 0) { notation = '%'; }\r\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\r\n    var min = (typeof minDamage === 'number' ? minDamage : minDamage[0] + minDamage[1]) * move.hits;\r\n    var max = (typeof maxDamage === 'number' ? maxDamage : maxDamage[0] + maxDamage[1]) * move.hits;\r\n    var minDisplay = toDisplay(notation, min, defender.maxHP());\r\n    var maxDisplay = toDisplay(notation, max, defender.maxHP());\r\n    var recoveryText = getRecovery(gen, attacker, defender, move, damage, notation).text;\r\n    var recoilText = getRecoil(gen, attacker, defender, move, damage, notation).text;\r\n    return \"\".concat(minDisplay, \" - \").concat(maxDisplay).concat(notation).concat(recoveryText &&\r\n        \" (\".concat(recoveryText, \")\")).concat(recoilText && \" (\".concat(recoilText, \")\"));\r\n}\r\nexports.displayMove = displayMove;\r\nfunction getRecovery(gen, attacker, defender, move, damage, notation) {\r\n    if (notation === void 0) { notation = '%'; }\r\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\r\n    var minD = typeof minDamage === 'number' ? [minDamage] : minDamage;\r\n    var maxD = typeof maxDamage === 'number' ? [maxDamage] : maxDamage;\r\n    var recovery = [0, 0];\r\n    var text = '';\r\n    var ignoresShellBell = gen.num === 3 && move.named('Doom Desire', 'Future Sight');\r\n    if (attacker.hasItem('Shell Bell') && !ignoresShellBell) {\r\n        var max = Math.round(defender.maxHP() / 8);\r\n        for (var i = 0; i < minD.length; i++) {\r\n            recovery[0] += Math.min(Math.round(minD[i] * move.hits / 8), max);\r\n            recovery[1] += Math.min(Math.round(maxD[i] * move.hits / 8), max);\r\n        }\r\n    }\r\n    if (move.named('G-Max Finale')) {\r\n        recovery[0] = recovery[1] = Math.round(attacker.maxHP() / 6);\r\n    }\r\n    if (move.drain) {\r\n        var percentHealed = move.drain[0] / move.drain[1];\r\n        var max = Math.round(defender.maxHP() * percentHealed);\r\n        for (var i = 0; i < minD.length; i++) {\r\n            recovery[0] += Math.min(Math.round(minD[i] * move.hits * percentHealed), max);\r\n            recovery[1] += Math.min(Math.round(maxD[i] * move.hits * percentHealed), max);\r\n        }\r\n    }\r\n    if (recovery[1] === 0)\r\n        return { recovery: recovery, text: text };\r\n    var minHealthRecovered = toDisplay(notation, recovery[0], attacker.maxHP());\r\n    var maxHealthRecovered = toDisplay(notation, recovery[1], attacker.maxHP());\r\n    text = \"\".concat(minHealthRecovered, \" - \").concat(maxHealthRecovered).concat(notation, \" recovered\");\r\n    return { recovery: recovery, text: text };\r\n}\r\nexports.getRecovery = getRecovery;\r\nfunction getRecoil(gen, attacker, defender, move, damage, notation) {\r\n    if (notation === void 0) { notation = '%'; }\r\n    var _a = __read((0, result_1.damageRange)(damage), 2), minDamage = _a[0], maxDamage = _a[1];\r\n    var min = (typeof minDamage === 'number' ? minDamage : minDamage[0] + minDamage[1]) * move.hits;\r\n    var max = (typeof maxDamage === 'number' ? maxDamage : maxDamage[0] + maxDamage[1]) * move.hits;\r\n    var recoil = [0, 0];\r\n    var text = '';\r\n    var damageOverflow = minDamage > defender.curHP() || maxDamage > defender.curHP();\r\n    if (move.recoil) {\r\n        var mod = (move.recoil[0] / move.recoil[1]) * 100;\r\n        var minRecoilDamage = void 0, maxRecoilDamage = void 0;\r\n        if (damageOverflow) {\r\n            minRecoilDamage =\r\n                toDisplay(notation, defender.curHP() * mod, attacker.maxHP(), 100);\r\n            maxRecoilDamage =\r\n                toDisplay(notation, defender.curHP() * mod, attacker.maxHP(), 100);\r\n        }\r\n        else {\r\n            minRecoilDamage = toDisplay(notation, Math.min(min, defender.curHP()) * mod, attacker.maxHP(), 100);\r\n            maxRecoilDamage = toDisplay(notation, Math.min(max, defender.curHP()) * mod, attacker.maxHP(), 100);\r\n        }\r\n        if (!attacker.hasAbility('Rock Head')) {\r\n            recoil = [minRecoilDamage, maxRecoilDamage];\r\n            text = \"\".concat(minRecoilDamage, \" - \").concat(maxRecoilDamage).concat(notation, \" recoil damage\");\r\n        }\r\n    }\r\n    else if (move.hasCrashDamage) {\r\n        var genMultiplier = gen.num === 2 ? 12.5 : gen.num >= 3 ? 50 : 1;\r\n        var minRecoilDamage = void 0, maxRecoilDamage = void 0;\r\n        if (damageOverflow && gen.num !== 2) {\r\n            minRecoilDamage =\r\n                toDisplay(notation, defender.curHP() * genMultiplier, attacker.maxHP(), 100);\r\n            maxRecoilDamage =\r\n                toDisplay(notation, defender.curHP() * genMultiplier, attacker.maxHP(), 100);\r\n        }\r\n        else {\r\n            minRecoilDamage = toDisplay(notation, Math.min(min, defender.maxHP()) * genMultiplier, attacker.maxHP(), 100);\r\n            maxRecoilDamage = toDisplay(notation, Math.min(max, defender.maxHP()) * genMultiplier, attacker.maxHP(), 100);\r\n        }\r\n        recoil = [minRecoilDamage, maxRecoilDamage];\r\n        switch (gen.num) {\r\n            case 1:\r\n                recoil = toDisplay(notation, 1, attacker.maxHP());\r\n                text = '1hp damage on miss';\r\n                break;\r\n            case 2:\r\n            case 3:\r\n            case 4:\r\n                if (defender.hasType('Ghost')) {\r\n                    if (gen.num === 4) {\r\n                        var gen4CrashDamage = Math.floor(((defender.maxHP() * 0.5) / attacker.maxHP()) * 100);\r\n                        recoil = notation === '%' ? gen4CrashDamage : Math.floor((gen4CrashDamage / 100) * 48);\r\n                        text = \"\".concat(gen4CrashDamage, \"% crash damage\");\r\n                    }\r\n                    else {\r\n                        recoil = 0;\r\n                        text = 'no crash damage on Ghost types';\r\n                    }\r\n                }\r\n                else {\r\n                    text = \"\".concat(minRecoilDamage, \" - \").concat(maxRecoilDamage).concat(notation, \" crash damage on miss\");\r\n                }\r\n                break;\r\n            default:\r\n                recoil = notation === '%' ? 24 : 50;\r\n                text = '50% crash damage';\r\n        }\r\n    }\r\n    else if (move.struggleRecoil) {\r\n        recoil = notation === '%' ? 12 : 25;\r\n        text = '25% struggle damage';\r\n        if (gen.num === 4)\r\n            text += ' (rounded down)';\r\n    }\r\n    else if (move.mindBlownRecoil) {\r\n        recoil = notation === '%' ? 24 : 50;\r\n        text = '50% recoil damage';\r\n    }\r\n    return { recoil: recoil, text: text };\r\n}\r\nexports.getRecoil = getRecoil;\r\nfunction getKOChance(gen, attacker, defender, move, field, damage, err) {\r\n    if (err === void 0) { err = true; }\r\n    damage = combine(damage);\r\n    if (isNaN(damage[0])) {\r\n        (0, util_1.error)(err, 'damage[0] must be a number.');\r\n        return { chance: 0, n: 0, text: '' };\r\n    }\r\n    if (damage[damage.length - 1] === 0) {\r\n        (0, util_1.error)(err, 'damage[damage.length - 1] === 0.');\r\n        return { chance: 0, n: 0, text: '' };\r\n    }\r\n    if (move.timesUsed === undefined)\r\n        move.timesUsed = 1;\r\n    if (move.timesUsedWithMetronome === undefined)\r\n        move.timesUsedWithMetronome = 1;\r\n    if (damage[0] >= defender.maxHP() && move.timesUsed === 1 && move.timesUsedWithMetronome === 1) {\r\n        return { chance: 1, n: 1, text: 'guaranteed OHKO' };\r\n    }\r\n    var hazards = getHazards(gen, defender, field.defenderSide);\r\n    var eot = getEndOfTurn(gen, attacker, defender, move, field);\r\n    var toxicCounter = defender.hasStatus('tox') && !defender.hasAbility('Magic Guard') ? defender.toxicCounter : 0;\r\n    var qualifier = '';\r\n    if (move.hits > 1) {\r\n        qualifier = 'approx. ';\r\n        damage = squashMultihit(gen, damage, move.hits, err);\r\n    }\r\n    var hazardsText = hazards.texts.length > 0\r\n        ? ' after ' + serializeText(hazards.texts)\r\n        : '';\r\n    var afterText = hazards.texts.length > 0 || eot.texts.length > 0\r\n        ? ' after ' + serializeText(hazards.texts.concat(eot.texts))\r\n        : '';\r\n    if ((move.timesUsed === 1 && move.timesUsedWithMetronome === 1) || move.isZ) {\r\n        var chance = computeKOChance(damage, defender.curHP() - hazards.damage, 0, 1, 1, defender.maxHP(), toxicCounter);\r\n        if (chance === 1) {\r\n            return { chance: chance, n: 1, text: \"guaranteed OHKO\".concat(hazardsText) };\r\n        }\r\n        else if (chance > 0) {\r\n            return {\r\n                chance: chance,\r\n                n: 1,\r\n                text: qualifier + Math.round(chance * 1000) / 10 + \"% chance to OHKO\".concat(hazardsText)\r\n            };\r\n        }\r\n        if (damage.length === 256) {\r\n            qualifier = 'approx. ';\r\n        }\r\n        for (var i = 2; i <= 4; i++) {\r\n            var chance_1 = computeKOChance(damage, defender.curHP() - hazards.damage, eot.damage, i, 1, defender.maxHP(), toxicCounter);\r\n            if (chance_1 === 1) {\r\n                return { chance: chance_1, n: i, text: \"\".concat(qualifier || 'guaranteed ').concat(i, \"HKO\").concat(afterText) };\r\n            }\r\n            else if (chance_1 > 0) {\r\n                return {\r\n                    chance: chance_1,\r\n                    n: i,\r\n                    text: qualifier + Math.round(chance_1 * 1000) / 10 + \"% chance to \".concat(i, \"HKO\").concat(afterText)\r\n                };\r\n            }\r\n        }\r\n        for (var i = 5; i <= 9; i++) {\r\n            if (predictTotal(damage[0], eot.damage, i, 1, toxicCounter, defender.maxHP()) >=\r\n                defender.curHP() - hazards.damage) {\r\n                return { chance: 1, n: i, text: \"\".concat(qualifier || 'guaranteed ').concat(i, \"HKO\").concat(afterText) };\r\n            }\r\n            else if (predictTotal(damage[damage.length - 1], eot.damage, i, 1, toxicCounter, defender.maxHP()) >=\r\n                defender.curHP() - hazards.damage) {\r\n                return { n: i, text: qualifier + \"possible \".concat(i, \"HKO\").concat(afterText) };\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        var chance = computeKOChance(damage, defender.maxHP() - hazards.damage, eot.damage, move.hits || 1, move.timesUsed || 1, defender.maxHP(), toxicCounter);\r\n        if (chance === 1) {\r\n            return {\r\n                chance: chance,\r\n                n: move.timesUsed,\r\n                text: \"\".concat(qualifier || 'guaranteed ', \"KO in \").concat(move.timesUsed, \" turns\").concat(afterText)\r\n            };\r\n        }\r\n        else if (chance > 0) {\r\n            return {\r\n                chance: chance,\r\n                n: move.timesUsed,\r\n                text: qualifier +\r\n                    Math.round(chance * 1000) / 10 +\r\n                    \"% chance to \".concat(move.timesUsed, \"HKO\").concat(afterText)\r\n            };\r\n        }\r\n        if (predictTotal(damage[0], eot.damage, move.hits, move.timesUsed, toxicCounter, defender.maxHP()) >=\r\n            defender.curHP() - hazards.damage) {\r\n            return {\r\n                chance: 1,\r\n                n: move.timesUsed,\r\n                text: \"\".concat(qualifier || 'guaranteed ', \"KO in \").concat(move.timesUsed, \" turns\").concat(afterText)\r\n            };\r\n        }\r\n        else if (predictTotal(damage[damage.length - 1], eot.damage, move.hits, move.timesUsed, toxicCounter, defender.maxHP()) >=\r\n            defender.curHP() - hazards.damage) {\r\n            return {\r\n                n: move.timesUsed,\r\n                text: qualifier + \"possible KO in \".concat(move.timesUsed, \" turns\").concat(afterText)\r\n            };\r\n        }\r\n        return { n: move.timesUsed, text: qualifier + 'not a KO' };\r\n    }\r\n    return { chance: 0, n: 0, text: '' };\r\n}\r\nexports.getKOChance = getKOChance;\r\nfunction combine(damage) {\r\n    if (typeof damage === 'number')\r\n        return [damage];\r\n    if (damage.length > 2) {\r\n        if (damage[0] > damage[damage.length - 1])\r\n            damage = damage.slice().sort();\r\n        return damage;\r\n    }\r\n    if (typeof damage[0] === 'number' && typeof damage[1] === 'number') {\r\n        return [damage[0] + damage[1]];\r\n    }\r\n    var d = damage;\r\n    var combined = [];\r\n    for (var i = 0; i < d[0].length; i++) {\r\n        for (var j = 0; j < d[1].length; j++) {\r\n            combined.push(d[0][i] + d[1][j]);\r\n        }\r\n    }\r\n    return combined.sort();\r\n}\r\nvar TRAPPING = [\r\n    'Bind', 'Clamp', 'Fire Spin', 'Infestation', 'Magma Storm', 'Sand Tomb',\r\n    'Thunder Cage', 'Whirlpool', 'Wrap', 'G-Max Sandblast', 'G-Max Centiferno',\r\n];\r\nfunction getHazards(gen, defender, defenderSide) {\r\n    var damage = 0;\r\n    var texts = [];\r\n    if (defender.hasItem('Heavy-Duty Boots')) {\r\n        return { damage: damage, texts: texts };\r\n    }\r\n    if (defenderSide.isSR && !defender.hasAbility('Magic Guard', 'Mountaineer')) {\r\n        var rockType = gen.types.get('rock');\r\n        var effectiveness = rockType.effectiveness[defender.types[0]] *\r\n            (defender.types[1] ? rockType.effectiveness[defender.types[1]] : 1);\r\n        damage += Math.floor((effectiveness * defender.maxHP()) / 8);\r\n        texts.push('Stealth Rock');\r\n    }\r\n    if (defenderSide.steelsurge && !defender.hasAbility('Magic Guard', 'Mountaineer')) {\r\n        var steelType = gen.types.get('steel');\r\n        var effectiveness = steelType.effectiveness[defender.types[0]] *\r\n            (defender.types[1] ? steelType.effectiveness[defender.types[1]] : 1);\r\n        damage += Math.floor((effectiveness * defender.maxHP()) / 8);\r\n        texts.push('Steelsurge');\r\n    }\r\n    if (!defender.hasType('Flying') &&\r\n        !defender.hasAbility('Magic Guard', 'Levitate') &&\r\n        !defender.hasItem('Air Balloon')) {\r\n        if (defenderSide.spikes === 1) {\r\n            damage += Math.floor(defender.maxHP() / 8);\r\n            if (gen.num === 2) {\r\n                texts.push('Spikes');\r\n            }\r\n            else {\r\n                texts.push('1 layer of Spikes');\r\n            }\r\n        }\r\n        else if (defenderSide.spikes === 2) {\r\n            damage += Math.floor(defender.maxHP() / 6);\r\n            texts.push('2 layers of Spikes');\r\n        }\r\n        else if (defenderSide.spikes === 3) {\r\n            damage += Math.floor(defender.maxHP() / 4);\r\n            texts.push('3 layers of Spikes');\r\n        }\r\n    }\r\n    if (isNaN(damage)) {\r\n        damage = 0;\r\n    }\r\n    return { damage: damage, texts: texts };\r\n}\r\nfunction getEndOfTurn(gen, attacker, defender, move, field) {\r\n    var damage = 0;\r\n    var texts = [];\r\n    if (field.hasWeather('Sun', 'Harsh Sunshine')) {\r\n        if (defender.hasAbility('Dry Skin', 'Solar Power')) {\r\n            damage -= Math.floor(defender.maxHP() / 8);\r\n            texts.push(defender.ability + ' damage');\r\n        }\r\n    }\r\n    else if (field.hasWeather('Rain', 'Heavy Rain')) {\r\n        if (defender.hasAbility('Dry Skin')) {\r\n            damage += Math.floor(defender.maxHP() / 8);\r\n            texts.push('Dry Skin recovery');\r\n        }\r\n        else if (defender.hasAbility('Rain Dish')) {\r\n            damage += Math.floor(defender.maxHP() / 16);\r\n            texts.push('Rain Dish recovery');\r\n        }\r\n    }\r\n    else if (field.hasWeather('Sand')) {\r\n        if (!defender.hasType('Rock', 'Ground', 'Steel') &&\r\n            !defender.hasAbility('Magic Guard', 'Overcoat', 'Sand Force', 'Sand Rush', 'Sand Veil') &&\r\n            !defender.hasItem('Safety Goggles')) {\r\n            damage -= Math.floor(defender.maxHP() / (gen.num === 2 ? 8 : 16));\r\n            texts.push('sandstorm damage');\r\n        }\r\n    }\r\n    else if (field.hasWeather('Hail', 'Snow')) {\r\n        if (defender.hasAbility('Ice Body')) {\r\n            damage += Math.floor(defender.maxHP() / 16);\r\n            texts.push('Ice Body recovery');\r\n        }\r\n        else if (!defender.hasType('Ice') &&\r\n            !defender.hasAbility('Magic Guard', 'Overcoat', 'Snow Cloak') &&\r\n            !defender.hasItem('Safety Goggles') &&\r\n            field.hasWeather('Hail')) {\r\n            damage -= Math.floor(defender.maxHP() / 16);\r\n            texts.push('hail damage');\r\n        }\r\n    }\r\n    var loseItem = move.named('Knock Off') && !defender.hasAbility('Sticky Hold');\r\n    if (defender.hasItem('Leftovers') && !loseItem) {\r\n        damage += Math.floor(defender.maxHP() / 16);\r\n        texts.push('Leftovers recovery');\r\n    }\r\n    else if (defender.hasItem('Black Sludge') && !loseItem) {\r\n        if (defender.hasType('Poison')) {\r\n            damage += Math.floor(defender.maxHP() / 16);\r\n            texts.push('Black Sludge recovery');\r\n        }\r\n        else if (!defender.hasAbility('Magic Guard', 'Klutz')) {\r\n            damage -= Math.floor(defender.maxHP() / 8);\r\n            texts.push('Black Sludge damage');\r\n        }\r\n    }\r\n    else if (defender.hasItem('Sticky Barb')) {\r\n        damage -= Math.floor(defender.maxHP() / 8);\r\n        texts.push('Sticky Barb damage');\r\n    }\r\n    if (field.defenderSide.isSeeded) {\r\n        if (!defender.hasAbility('Magic Guard')) {\r\n            damage -= Math.floor(defender.maxHP() / (gen.num >= 2 ? 8 : 16));\r\n            texts.push('Leech Seed damage');\r\n        }\r\n    }\r\n    if (field.attackerSide.isSeeded && !attacker.hasAbility('Magic Guard')) {\r\n        if (attacker.hasAbility('Liquid Ooze')) {\r\n            damage -= Math.floor(attacker.maxHP() / (gen.num >= 2 ? 8 : 16));\r\n            texts.push('Liquid Ooze damage');\r\n        }\r\n        else {\r\n            damage += Math.floor(attacker.maxHP() / (gen.num >= 2 ? 8 : 16));\r\n            texts.push('Leech Seed recovery');\r\n        }\r\n    }\r\n    if (field.hasTerrain('Grassy')) {\r\n        if ((0, util_2.isGrounded)(defender, field)) {\r\n            damage += Math.floor(defender.maxHP() / 16);\r\n            texts.push('Grassy Terrain recovery');\r\n        }\r\n    }\r\n    if (defender.hasStatus('psn')) {\r\n        if (defender.hasAbility('Poison Heal')) {\r\n            damage += Math.floor(defender.maxHP() / 8);\r\n            texts.push('Poison Heal');\r\n        }\r\n        else if (!defender.hasAbility('Magic Guard')) {\r\n            damage -= Math.floor(defender.maxHP() / (gen.num === 1 ? 16 : 8));\r\n            texts.push('poison damage');\r\n        }\r\n    }\r\n    else if (defender.hasStatus('tox')) {\r\n        if (defender.hasAbility('Poison Heal')) {\r\n            damage += Math.floor(defender.maxHP() / 8);\r\n            texts.push('Poison Heal');\r\n        }\r\n        else if (!defender.hasAbility('Magic Guard')) {\r\n            texts.push('toxic damage');\r\n        }\r\n    }\r\n    else if (defender.hasStatus('brn')) {\r\n        if (defender.hasAbility('Heatproof')) {\r\n            damage -= Math.floor(defender.maxHP() / (gen.num > 6 ? 32 : 16));\r\n            texts.push('reduced burn damage');\r\n        }\r\n        else if (!defender.hasAbility('Magic Guard')) {\r\n            damage -= Math.floor(defender.maxHP() / (gen.num === 1 || gen.num > 6 ? 16 : 8));\r\n            texts.push('burn damage');\r\n        }\r\n    }\r\n    else if ((defender.hasStatus('slp') || defender.hasAbility('Comatose')) &&\r\n        attacker.hasAbility('isBadDreams') &&\r\n        !defender.hasAbility('Magic Guard')) {\r\n        damage -= Math.floor(defender.maxHP() / 8);\r\n        texts.push('Bad Dreams');\r\n    }\r\n    if (!defender.hasAbility('Magic Guard') && TRAPPING.includes(move.name)) {\r\n        if (attacker.hasItem('Binding Band')) {\r\n            damage -= gen.num > 5 ? Math.floor(defender.maxHP() / 6) : Math.floor(defender.maxHP() / 8);\r\n            texts.push('trapping damage');\r\n        }\r\n        else {\r\n            damage -= gen.num > 5 ? Math.floor(defender.maxHP() / 8) : Math.floor(defender.maxHP() / 16);\r\n            texts.push('trapping damage');\r\n        }\r\n    }\r\n    if (defender.isSaltCure && !defender.hasAbility('Magic Guard')) {\r\n        var isWaterOrSteel = defender.hasType('Water', 'Steel') ||\r\n            (defender.teraType && ['Water', 'Steel'].includes(defender.teraType));\r\n        damage -= Math.floor(defender.maxHP() / (isWaterOrSteel ? 4 : 8));\r\n        texts.push('Salt Cure');\r\n    }\r\n    if (!defender.hasType('Fire') && !defender.hasAbility('Magic Guard') &&\r\n        (move.named('Fire Pledge (Grass Pledge Boosted)', 'Grass Pledge (Fire Pledge Boosted)'))) {\r\n        damage -= Math.floor(defender.maxHP() / 8);\r\n        texts.push('Sea of Fire damage');\r\n    }\r\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Grass') &&\r\n        (field.defenderSide.vinelash || move.named('G-Max Vine Lash'))) {\r\n        damage -= Math.floor(defender.maxHP() / 6);\r\n        texts.push('Vine Lash damage');\r\n    }\r\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Fire') &&\r\n        (field.defenderSide.wildfire || move.named('G-Max Wildfire'))) {\r\n        damage -= Math.floor(defender.maxHP() / 6);\r\n        texts.push('Wildfire damage');\r\n    }\r\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Water') &&\r\n        (field.defenderSide.cannonade || move.named('G-Max Cannonade'))) {\r\n        damage -= Math.floor(defender.maxHP() / 6);\r\n        texts.push('Cannonade damage');\r\n    }\r\n    if (!defender.hasAbility('Magic Guard') && !defender.hasType('Rock') &&\r\n        (field.defenderSide.volcalith || move.named('G-Max Volcalith'))) {\r\n        damage -= Math.floor(defender.maxHP() / 6);\r\n        texts.push('Volcalith damage');\r\n    }\r\n    return { damage: damage, texts: texts };\r\n}\r\nfunction computeKOChance(damage, hp, eot, hits, timesUsed, maxHP, toxicCounter) {\r\n    var n = damage.length;\r\n    if (hits === 1) {\r\n        for (var i = 0; i < n; i++) {\r\n            if (damage[n - 1] < hp)\r\n                return 0;\r\n            if (damage[i] >= hp) {\r\n                return (n - i) / n;\r\n            }\r\n        }\r\n    }\r\n    var toxicDamage = 0;\r\n    if (toxicCounter > 0) {\r\n        toxicDamage = Math.floor((toxicCounter * maxHP) / 16);\r\n        toxicCounter++;\r\n    }\r\n    var sum = 0;\r\n    var lastc = 0;\r\n    for (var i = 0; i < n; i++) {\r\n        var c = void 0;\r\n        if (i === 0 || damage[i] !== damage[i - 1]) {\r\n            c = computeKOChance(damage, hp - damage[i] + eot - toxicDamage, eot, hits - 1, timesUsed, maxHP, toxicCounter);\r\n        }\r\n        else {\r\n            c = lastc;\r\n        }\r\n        if (c === 1) {\r\n            sum += n - i;\r\n            break;\r\n        }\r\n        else {\r\n            sum += c;\r\n        }\r\n        lastc = c;\r\n    }\r\n    return sum / n;\r\n}\r\nfunction predictTotal(damage, eot, hits, timesUsed, toxicCounter, maxHP) {\r\n    var toxicDamage = 0;\r\n    if (toxicCounter > 0) {\r\n        for (var i = 0; i < hits - 1; i++) {\r\n            toxicDamage += Math.floor(((toxicCounter + i) * maxHP) / 16);\r\n        }\r\n    }\r\n    var total = 0;\r\n    if (hits > 1 && timesUsed === 1) {\r\n        total = damage * hits - eot * (hits - 1) + toxicDamage;\r\n    }\r\n    else {\r\n        total = damage - eot * (hits - 1) + toxicDamage;\r\n    }\r\n    return total;\r\n}\r\nfunction squashMultihit(gen, d, hits, err) {\r\n    if (err === void 0) { err = true; }\r\n    if (d.length === 1) {\r\n        return [d[0] * hits];\r\n    }\r\n    else if (gen.num === 1) {\r\n        var r = [];\r\n        for (var i = 0; i < d.length; i++) {\r\n            r[i] = d[i] * hits;\r\n        }\r\n        return r;\r\n    }\r\n    else if (d.length === 16) {\r\n        switch (hits) {\r\n            case 2:\r\n                return [\r\n                    2 * d[0], d[2] + d[3], d[4] + d[4], d[4] + d[5], d[5] + d[6], d[6] + d[6],\r\n                    d[6] + d[7], d[7] + d[7], d[8] + d[8], d[8] + d[9], d[9] + d[9], d[9] + d[10],\r\n                    d[10] + d[11], d[11] + d[11], d[12] + d[13], 2 * d[15],\r\n                ];\r\n            case 3:\r\n                return [\r\n                    3 * d[0], d[3] + d[3] + d[4], d[4] + d[4] + d[5], d[5] + d[5] + d[6],\r\n                    d[5] + d[6] + d[6], d[6] + d[6] + d[7], d[6] + d[7] + d[7], d[7] + d[7] + d[8],\r\n                    d[7] + d[8] + d[8], d[8] + d[8] + d[9], d[8] + d[9] + d[9], d[9] + d[9] + d[10],\r\n                    d[9] + d[10] + d[10], d[10] + d[11] + d[11], d[11] + d[12] + d[12], 3 * d[15],\r\n                ];\r\n            case 4:\r\n                return [\r\n                    4 * d[0], 4 * d[4], d[4] + d[5] + d[5] + d[5], d[5] + d[5] + d[6] + d[6],\r\n                    4 * d[6], d[6] + d[6] + d[7] + d[7], 4 * d[7], d[7] + d[7] + d[7] + d[8],\r\n                    d[7] + d[8] + d[8] + d[8], 4 * d[8], d[8] + d[8] + d[9] + d[9], 4 * d[9],\r\n                    d[9] + d[9] + d[10] + d[10], d[10] + d[10] + d[10] + d[11], 4 * d[11], 4 * d[15],\r\n                ];\r\n            case 5:\r\n                return [\r\n                    5 * d[0], d[4] + d[4] + d[4] + d[5] + d[5], d[5] + d[5] + d[5] + d[5] + d[6],\r\n                    d[5] + d[6] + d[6] + d[6] + d[6], d[6] + d[6] + d[6] + d[6] + d[7],\r\n                    d[6] + d[6] + d[7] + d[7] + d[7], 5 * d[7], d[7] + d[7] + d[7] + d[8] + d[8],\r\n                    d[7] + d[7] + d[8] + d[8] + d[8], 5 * d[8], d[8] + d[8] + d[8] + d[9] + d[9],\r\n                    d[8] + d[9] + d[9] + d[9] + d[9], d[9] + d[9] + d[9] + d[9] + d[10],\r\n                    d[9] + d[10] + d[10] + d[10] + d[10], d[10] + d[10] + d[11] + d[11] + d[11], 5 * d[15],\r\n                ];\r\n            case 10:\r\n                return [\r\n                    10 * d[0], 10 * d[4], 3 * d[4] + 7 * d[5], 5 * d[5] + 5 * d[6], 10 * d[6],\r\n                    5 * d[6] + 5 * d[7], 10 * d[7], 7 * d[7] + 3 * d[8], 3 * d[7] + 7 * d[8], 10 * d[8],\r\n                    5 * d[8] + 5 * d[9], 4 * d[9], 5 * d[9] + 5 * d[10], 7 * d[10] + 3 * d[11], 10 * d[11],\r\n                    10 * d[15],\r\n                ];\r\n            default:\r\n                (0, util_1.error)(err, \"Unexpected # of hits: \".concat(hits));\r\n                return d;\r\n        }\r\n    }\r\n    else if (d.length === 39) {\r\n        switch (hits) {\r\n            case 2:\r\n                return [\r\n                    2 * d[0], 2 * d[7], 2 * d[10], 2 * d[12], 2 * d[14], d[15] + d[16],\r\n                    2 * d[17], d[18] + d[19], d[19] + d[20], 2 * d[21], d[22] + d[23],\r\n                    2 * d[24], 2 * d[26], 2 * d[28], 2 * d[31], 2 * d[38],\r\n                ];\r\n            case 3:\r\n                return [\r\n                    3 * d[0], 3 * d[9], 3 * d[12], 3 * d[13], 3 * d[15], 3 * d[16],\r\n                    3 * d[17], 3 * d[18], 3 * d[20], 3 * d[21], 3 * d[22], 3 * d[23],\r\n                    3 * d[25], 3 * d[26], 3 * d[29], 3 * d[38],\r\n                ];\r\n            case 4:\r\n                return [\r\n                    4 * d[0], 2 * d[10] + 2 * d[11], 4 * d[13], 4 * d[14], 2 * d[15] + 2 * d[16],\r\n                    2 * d[16] + 2 * d[17], 2 * d[17] + 2 * d[18], 2 * d[18] + 2 * d[19],\r\n                    2 * d[19] + 2 * d[20], 2 * d[20] + 2 * d[21], 2 * d[21] + 2 * d[22],\r\n                    2 * d[22] + 2 * d[23], 4 * d[24], 4 * d[25], 2 * d[27] + 2 * d[28], 4 * d[38],\r\n                ];\r\n            case 5:\r\n                return [\r\n                    5 * d[0], 5 * d[11], 5 * d[13], 5 * d[15], 5 * d[16], 5 * d[17],\r\n                    5 * d[18], 5 * d[19], 5 * d[19], 5 * d[20], 5 * d[21], 5 * d[22],\r\n                    5 * d[23], 5 * d[25], 5 * d[27], 5 * d[38],\r\n                ];\r\n            case 10:\r\n                return [\r\n                    10 * d[0], 10 * d[11], 10 * d[13], 10 * d[15], 10 * d[16], 10 * d[17],\r\n                    10 * d[18], 10 * d[19], 10 * d[19], 10 * d[20], 10 * d[21], 10 * d[22],\r\n                    10 * d[23], 10 * d[25], 10 * d[27], 10 * d[38],\r\n                ];\r\n            default:\r\n                (0, util_1.error)(err, \"Unexpected # of hits: \".concat(hits));\r\n                return d;\r\n        }\r\n    }\r\n    else if (d.length === 256) {\r\n        if (hits > 1) {\r\n            (0, util_1.error)(err, \"Unexpected # of hits for Parental Bond: \".concat(hits));\r\n        }\r\n        var r = [];\r\n        for (var i = 0; i < 16; i++) {\r\n            var val = 0;\r\n            for (var j = 0; j < 16; j++) {\r\n                val += d[i + j];\r\n            }\r\n            r[i] = Math.round(val / 16);\r\n        }\r\n        return r;\r\n    }\r\n    else {\r\n        (0, util_1.error)(err, \"Unexpected # of possible damage values: \".concat(d.length));\r\n        return d;\r\n    }\r\n}\r\nfunction buildDescription(description, attacker, defender) {\r\n    var _a = __read(getDescriptionLevels(attacker, defender), 2), attackerLevel = _a[0], defenderLevel = _a[1];\r\n    var output = '';\r\n    if (description.attackBoost) {\r\n        if (description.attackBoost > 0) {\r\n            output += '+';\r\n        }\r\n        output += description.attackBoost + ' ';\r\n    }\r\n    output = appendIfSet(output, attackerLevel);\r\n    output = appendIfSet(output, description.attackEVs);\r\n    output = appendIfSet(output, description.attackerItem);\r\n    output = appendIfSet(output, description.attackerAbility);\r\n    output = appendIfSet(output, description.rivalry);\r\n    if (description.isBurned) {\r\n        output += 'burned ';\r\n    }\r\n    if (description.alliesFainted) {\r\n        output += Math.min(5, description.alliesFainted) +\r\n            \" \".concat(description.alliesFainted === 1 ? 'ally' : 'allies', \" fainted \");\r\n    }\r\n    if (description.attackerTera) {\r\n        output += \"Tera \".concat(description.attackerTera, \" \");\r\n    }\r\n    if (description.isBeadsOfRuin) {\r\n        output += 'Beads of Ruin ';\r\n    }\r\n    if (description.isSwordOfRuin) {\r\n        output += 'Sword of Ruin ';\r\n    }\r\n    output += description.attackerName + ' ';\r\n    if (description.isHelpingHand) {\r\n        output += 'Helping Hand ';\r\n    }\r\n    if (description.isFlowerGiftAttacker) {\r\n        output += ' with an ally\\'s Flower Gift ';\r\n    }\r\n    if (description.isBattery) {\r\n        output += ' Battery boosted ';\r\n    }\r\n    if (description.isPowerSpot) {\r\n        output += ' Power Spot boosted ';\r\n    }\r\n    if (description.isSwitching) {\r\n        output += ' switching boosted ';\r\n    }\r\n    output += description.moveName + ' ';\r\n    if (description.moveBP && description.moveType) {\r\n        output += '(' + description.moveBP + ' BP ' + description.moveType + ') ';\r\n    }\r\n    else if (description.moveBP) {\r\n        output += '(' + description.moveBP + ' BP) ';\r\n    }\r\n    else if (description.moveType) {\r\n        output += '(' + description.moveType + ') ';\r\n    }\r\n    if (description.hits) {\r\n        output += '(' + description.hits + ' hits) ';\r\n    }\r\n    output = appendIfSet(output, description.moveTurns);\r\n    output += 'vs. ';\r\n    if (description.defenseBoost) {\r\n        if (description.defenseBoost > 0) {\r\n            output += '+';\r\n        }\r\n        output += description.defenseBoost + ' ';\r\n    }\r\n    output = appendIfSet(output, defenderLevel);\r\n    output = appendIfSet(output, description.HPEVs);\r\n    if (description.defenseEVs) {\r\n        output += '/ ' + description.defenseEVs + ' ';\r\n    }\r\n    output = appendIfSet(output, description.defenderItem);\r\n    output = appendIfSet(output, description.defenderAbility);\r\n    if (description.isTabletsOfRuin) {\r\n        output += 'Tablets of Ruin ';\r\n    }\r\n    if (description.isVesselOfRuin) {\r\n        output += 'Vessel of Ruin ';\r\n    }\r\n    if (description.isProtected) {\r\n        output += 'protected ';\r\n    }\r\n    if (description.isDefenderDynamaxed) {\r\n        output += 'Dynamax ';\r\n    }\r\n    if (description.defenderTera) {\r\n        output += \"Tera \".concat(description.defenderTera, \" \");\r\n    }\r\n    output += description.defenderName;\r\n    if (description.weather && description.terrain) {\r\n    }\r\n    else if (description.weather) {\r\n        output += ' in ' + description.weather;\r\n    }\r\n    else if (description.terrain) {\r\n        output += ' in ' + description.terrain + ' Terrain';\r\n    }\r\n    if (description.isReflect) {\r\n        output += ' through Reflect';\r\n    }\r\n    else if (description.isLightScreen) {\r\n        output += ' through Light Screen';\r\n    }\r\n    if (description.isFlowerGiftDefender) {\r\n        output += ' with an ally\\'s Flower Gift';\r\n    }\r\n    if (description.isFriendGuard) {\r\n        output += ' with an ally\\'s Friend Guard';\r\n    }\r\n    if (description.isAuroraVeil) {\r\n        output += ' with an ally\\'s Aurora Veil';\r\n    }\r\n    if (description.isCritical) {\r\n        output += ' on a critical hit';\r\n    }\r\n    if (description.isWonderRoom) {\r\n        output += ' in Wonder Room';\r\n    }\r\n    if (description.isTrickRoom) {\r\n        output += ' in Trick Room';\r\n    }\r\n    return output;\r\n}\r\nfunction getDescriptionLevels(attacker, defender) {\r\n    if (attacker.level !== defender.level) {\r\n        return [\r\n            attacker.level === 100 ? '' : \"Lvl \".concat(attacker.level),\r\n            defender.level === 100 ? '' : \"Lvl \".concat(defender.level),\r\n        ];\r\n    }\r\n    var elide = [100, 50, 5].includes(attacker.level);\r\n    var level = elide ? '' : \"Lvl \".concat(attacker.level);\r\n    return [level, level];\r\n}\r\nfunction serializeText(arr) {\r\n    if (arr.length === 0) {\r\n        return '';\r\n    }\r\n    else if (arr.length === 1) {\r\n        return arr[0];\r\n    }\r\n    else if (arr.length === 2) {\r\n        return arr[0] + ' and ' + arr[1];\r\n    }\r\n    else {\r\n        var text = '';\r\n        for (var i = 0; i < arr.length - 1; i++) {\r\n            text += arr[i] + ', ';\r\n        }\r\n        return text + 'and ' + arr[arr.length - 1];\r\n    }\r\n}\r\nfunction appendIfSet(str, toAppend) {\r\n    return toAppend ? \"\".concat(str).concat(toAppend, \" \") : str;\r\n}\r\nfunction toDisplay(notation, a, b, f) {\r\n    if (f === void 0) { f = 1; }\r\n    return notation === '%' ? Math.floor((a * (1000 / f)) / b) / 10 : Math.floor((a * (48 / f)) / b);\r\n}\r\n//# sourceMappingURL=desc.js.map\n\n//# sourceURL=webpack:///./calc/dist/desc.js?\n}");

/***/ }),

/***/ "./calc/dist/field.js":
/*!****************************!*\
  !*** ./calc/dist/field.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports) {

eval("{\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nexports.__esModule = true;\r\nexports.Side = exports.Field = void 0;\r\nvar Field = (function () {\r\n    function Field(field) {\r\n        if (field === void 0) { field = {}; }\r\n        this.gameType = field.gameType || 'Singles';\r\n        this.terrain = field.terrain;\r\n        this.weather = field.weather;\r\n        this.isMagicRoom = !!field.isMagicRoom;\r\n        this.isTrickRoom = !!field.isTrickRoom;\r\n        this.isWonderRoom = !!field.isWonderRoom;\r\n        this.isGravity = !!field.isGravity;\r\n        this.isAuraBreak = field.isAuraBreak || false;\r\n        this.isFairyAura = field.isFairyAura || false;\r\n        this.isDarkAura = field.isDarkAura || false;\r\n        this.isBeadsOfRuin = field.isBeadsOfRuin || false;\r\n        this.isSwordOfRuin = field.isSwordOfRuin || false;\r\n        this.isTabletsOfRuin = field.isTabletsOfRuin || false;\r\n        this.isVesselOfRuin = field.isVesselOfRuin || false;\r\n        this.attackerSide = new Side(field.attackerSide || {});\r\n        this.defenderSide = new Side(field.defenderSide || {});\r\n    }\r\n    Field.prototype.hasWeather = function () {\r\n        var weathers = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            weathers[_i] = arguments[_i];\r\n        }\r\n        return !!(this.weather && weathers.includes(this.weather));\r\n    };\r\n    Field.prototype.hasTerrain = function () {\r\n        var terrains = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            terrains[_i] = arguments[_i];\r\n        }\r\n        return !!(this.terrain && terrains.includes(this.terrain));\r\n    };\r\n    Field.prototype.swap = function () {\r\n        var _a;\r\n        _a = __read([this.defenderSide, this.attackerSide], 2), this.attackerSide = _a[0], this.defenderSide = _a[1];\r\n        return this;\r\n    };\r\n    Field.prototype.clone = function () {\r\n        return new Field({\r\n            gameType: this.gameType,\r\n            weather: this.weather,\r\n            terrain: this.terrain,\r\n            isMagicRoom: this.isMagicRoom,\r\n            isWonderRoom: this.isWonderRoom,\r\n            isTrickRoom: this.isTrickRoom,\r\n            isGravity: this.isGravity,\r\n            attackerSide: this.attackerSide,\r\n            defenderSide: this.defenderSide,\r\n            isAuraBreak: this.isAuraBreak,\r\n            isDarkAura: this.isDarkAura,\r\n            isFairyAura: this.isFairyAura,\r\n            isBeadsOfRuin: this.isBeadsOfRuin,\r\n            isSwordOfRuin: this.isSwordOfRuin,\r\n            isTabletsOfRuin: this.isTabletsOfRuin,\r\n            isVesselOfRuin: this.isVesselOfRuin\r\n        });\r\n    };\r\n    return Field;\r\n}());\r\nexports.Field = Field;\r\nvar Side = (function () {\r\n    function Side(side) {\r\n        if (side === void 0) { side = {}; }\r\n        this.spikes = side.spikes || 0;\r\n        this.steelsurge = !!side.steelsurge;\r\n        this.vinelash = !!side.vinelash;\r\n        this.wildfire = !!side.wildfire;\r\n        this.cannonade = !!side.cannonade;\r\n        this.volcalith = !!side.volcalith;\r\n        this.isSR = !!side.isSR;\r\n        this.isReflect = !!side.isReflect;\r\n        this.isLightScreen = !!side.isLightScreen;\r\n        this.isProtected = !!side.isProtected;\r\n        this.isSeeded = !!side.isSeeded;\r\n        this.isForesight = !!side.isForesight;\r\n        this.isTailwind = !!side.isTailwind;\r\n        this.isHelpingHand = !!side.isHelpingHand;\r\n        this.isFlowerGift = !!side.isFlowerGift;\r\n        this.isFriendGuard = !!side.isFriendGuard;\r\n        this.isAuroraVeil = !!side.isAuroraVeil;\r\n        this.isBattery = !!side.isBattery;\r\n        this.isPowerSpot = !!side.isPowerSpot;\r\n        this.isSwitching = side.isSwitching;\r\n    }\r\n    Side.prototype.clone = function () {\r\n        return new Side(this);\r\n    };\r\n    return Side;\r\n}());\r\nexports.Side = Side;\r\n//# sourceMappingURL=field.js.map\n\n//# sourceURL=webpack:///./calc/dist/field.js?\n}");

/***/ }),

/***/ "./calc/dist/index.js":
/*!****************************!*\
  !*** ./calc/dist/index.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nexports.__esModule = true;\r\nexports.Stats = exports.STATS = exports.TYPE_CHART = exports.NATURES = exports.SPECIES = exports.MOVES = exports.MEGA_STONES = exports.ITEMS = exports.ABILITIES = exports.toID = exports.Generations = exports.Result = exports.Side = exports.Field = exports.calcStat = exports.Pokemon = exports.Move = exports.calculate = exports.I = exports.A = void 0;\r\nvar data_1 = __webpack_require__(/*! ./data */ \"./calc/dist/data/index.js\");\r\nvar I = __importStar(__webpack_require__(/*! ./data/interface */ \"./calc/dist/data/interface.js\"));\r\nexports.I = I;\r\nvar A = __importStar(__webpack_require__(/*! ./adaptable */ \"./calc/dist/adaptable.js\"));\r\nexports.A = A;\r\nvar Acalculate = exports.calculate;\r\nfunction calculate(gen, attacker, defender, move, field) {\r\n    return (Acalculate || A.calculate)(typeof gen === 'number' ? data_1.Generations.get(gen) : gen, attacker, defender, move, field);\r\n}\r\nexports.calculate = calculate;\r\nvar Move = (function (_super) {\r\n    __extends(Move, _super);\r\n    function Move(gen, name, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return _super.call(this, typeof gen === 'number' ? data_1.Generations.get(gen) : gen, name, options) || this;\r\n    }\r\n    return Move;\r\n}(A.Move));\r\nexports.Move = Move;\r\nvar Pokemon = (function (_super) {\r\n    __extends(Pokemon, _super);\r\n    function Pokemon(gen, name, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return _super.call(this, typeof gen === 'number' ? data_1.Generations.get(gen) : gen, name, options) || this;\r\n    }\r\n    Pokemon.getForme = function (gen, speciesName, item, moveName) {\r\n        return A.Pokemon.getForme(typeof gen === 'number' ? data_1.Generations.get(gen) : gen, speciesName, item, moveName);\r\n    };\r\n    return Pokemon;\r\n}(A.Pokemon));\r\nexports.Pokemon = Pokemon;\r\nfunction calcStat(gen, stat, base, iv, ev, level, nature) {\r\n    return A.Stats.calcStat(typeof gen === 'number' ? data_1.Generations.get(gen) : gen, stat === 'spc' ? 'spa' : stat, base, iv, ev, level, nature);\r\n}\r\nexports.calcStat = calcStat;\r\nvar field_1 = __webpack_require__(/*! ./field */ \"./calc/dist/field.js\");\r\n__createBinding(exports, field_1, \"Field\");\r\n__createBinding(exports, field_1, \"Side\");\r\nvar result_1 = __webpack_require__(/*! ./result */ \"./calc/dist/result.js\");\r\n__createBinding(exports, result_1, \"Result\");\r\nvar index_1 = __webpack_require__(/*! ./data/index */ \"./calc/dist/data/index.js\");\r\n__createBinding(exports, index_1, \"Generations\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\r\n__createBinding(exports, util_1, \"toID\");\r\nvar abilities_1 = __webpack_require__(/*! ./data/abilities */ \"./calc/dist/data/abilities.js\");\r\n__createBinding(exports, abilities_1, \"ABILITIES\");\r\nvar items_1 = __webpack_require__(/*! ./data/items */ \"./calc/dist/data/items.js\");\r\n__createBinding(exports, items_1, \"ITEMS\");\r\n__createBinding(exports, items_1, \"MEGA_STONES\");\r\nvar moves_1 = __webpack_require__(/*! ./data/moves */ \"./calc/dist/data/moves.js\");\r\n__createBinding(exports, moves_1, \"MOVES\");\r\nvar species_1 = __webpack_require__(/*! ./data/species */ \"./calc/dist/data/species.js\");\r\n__createBinding(exports, species_1, \"SPECIES\");\r\nvar natures_1 = __webpack_require__(/*! ./data/natures */ \"./calc/dist/data/natures.js\");\r\n__createBinding(exports, natures_1, \"NATURES\");\r\nvar types_1 = __webpack_require__(/*! ./data/types */ \"./calc/dist/data/types.js\");\r\n__createBinding(exports, types_1, \"TYPE_CHART\");\r\nvar stats_1 = __webpack_require__(/*! ./stats */ \"./calc/dist/stats.js\");\r\n__createBinding(exports, stats_1, \"STATS\");\r\n__createBinding(exports, stats_1, \"Stats\");\r\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./calc/dist/index.js?\n}");

/***/ }),

/***/ "./calc/dist/items.js":
/*!****************************!*\
  !*** ./calc/dist/items.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.getMultiAttack = exports.getTechnoBlast = exports.getNaturalGift = exports.getFlingPower = exports.getBerryResistType = exports.getItemBoostType = exports.SEED_BOOSTED_STAT = void 0;\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\r\nexports.SEED_BOOSTED_STAT = {\r\n    'Electric Seed': 'def',\r\n    'Grassy Seed': 'def',\r\n    'Misty Seed': 'spd',\r\n    'Psychic Seed': 'spd'\r\n};\r\nfunction getItemBoostType(item) {\r\n    switch (item) {\r\n        case 'Draco Plate':\r\n        case 'Dragon Fang':\r\n            return 'Dragon';\r\n        case 'Dread Plate':\r\n        case 'Black Glasses':\r\n            return 'Dark';\r\n        case 'Earth Plate':\r\n        case 'Soft Sand':\r\n            return 'Ground';\r\n        case 'Fist Plate':\r\n        case 'Black Belt':\r\n            return 'Fighting';\r\n        case 'Flame Plate':\r\n        case 'Charcoal':\r\n            return 'Fire';\r\n        case 'Icicle Plate':\r\n        case 'Never-Melt Ice':\r\n            return 'Ice';\r\n        case 'Insect Plate':\r\n        case 'Silver Powder':\r\n            return 'Bug';\r\n        case 'Iron Plate':\r\n        case 'Metal Coat':\r\n            return 'Steel';\r\n        case 'Meadow Plate':\r\n        case 'Rose Incense':\r\n        case 'Miracle Seed':\r\n            return 'Grass';\r\n        case 'Mind Plate':\r\n        case 'Odd Incense':\r\n        case 'Twisted Spoon':\r\n            return 'Psychic';\r\n        case 'Pixie Plate':\r\n            return 'Fairy';\r\n        case 'Sky Plate':\r\n        case 'Sharp Beak':\r\n            return 'Flying';\r\n        case 'Splash Plate':\r\n        case 'Sea Incense':\r\n        case 'Wave Incense':\r\n        case 'Mystic Water':\r\n            return 'Water';\r\n        case 'Spooky Plate':\r\n        case 'Spell Tag':\r\n            return 'Ghost';\r\n        case 'Stone Plate':\r\n        case 'Rock Incense':\r\n        case 'Hard Stone':\r\n            return 'Rock';\r\n        case 'Toxic Plate':\r\n        case 'Poison Barb':\r\n            return 'Poison';\r\n        case 'Zap Plate':\r\n        case 'Magnet':\r\n            return 'Electric';\r\n        case 'Silk Scarf':\r\n        case 'Pink Bow':\r\n        case 'Polkadot Bow':\r\n            return 'Normal';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\nexports.getItemBoostType = getItemBoostType;\r\nfunction getBerryResistType(berry) {\r\n    switch (berry) {\r\n        case 'Chilan Berry':\r\n            return 'Normal';\r\n        case 'Occa Berry':\r\n            return 'Fire';\r\n        case 'Passho Berry':\r\n            return 'Water';\r\n        case 'Wacan Berry':\r\n            return 'Electric';\r\n        case 'Rindo Berry':\r\n            return 'Grass';\r\n        case 'Yache Berry':\r\n            return 'Ice';\r\n        case 'Chople Berry':\r\n            return 'Fighting';\r\n        case 'Kebia Berry':\r\n            return 'Poison';\r\n        case 'Shuca Berry':\r\n            return 'Ground';\r\n        case 'Coba Berry':\r\n            return 'Flying';\r\n        case 'Payapa Berry':\r\n            return 'Psychic';\r\n        case 'Tanga Berry':\r\n            return 'Bug';\r\n        case 'Charti Berry':\r\n            return 'Rock';\r\n        case 'Kasib Berry':\r\n            return 'Ghost';\r\n        case 'Haban Berry':\r\n            return 'Dragon';\r\n        case 'Colbur Berry':\r\n            return 'Dark';\r\n        case 'Babiri Berry':\r\n            return 'Steel';\r\n        case 'Roseli Berry':\r\n            return 'Fairy';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\nexports.getBerryResistType = getBerryResistType;\r\nvar FLING_120 = new Set([\r\n    'TR24',\r\n    'TR28',\r\n    'TR34',\r\n    'TR39',\r\n    'TR53',\r\n    'TR55',\r\n    'TR64',\r\n    'TR66',\r\n    'TR72',\r\n    'TR73',\r\n]);\r\nvar FLING_100 = new Set([\r\n    'Hard Stone',\r\n    'Room Service',\r\n    'Claw Fossil',\r\n    'Dome Fossil',\r\n    'Helix Fossil',\r\n    'Old Amber',\r\n    'Root Fossil',\r\n    'Armor Fossil',\r\n    'Old Amber',\r\n    'Fossilized Bird',\r\n    'Fossilized Dino',\r\n    'Fossilized Drake',\r\n    'Fossilized Fish',\r\n    'Plume Fossil',\r\n    'Jaw Fossil',\r\n    'Cover Fossil',\r\n    'Sail Fossil',\r\n    'Rare Bone',\r\n    'Skull Fossil',\r\n    'TR10',\r\n    'TR31',\r\n    'TR75',\r\n]);\r\nvar FLING_90 = new Set([\r\n    'Deep Sea Tooth',\r\n    'Thick Club',\r\n    'TR02',\r\n    'TR04',\r\n    'TR05',\r\n    'TR08',\r\n    'TR11',\r\n    'TR22',\r\n    'TR35',\r\n    'TR42',\r\n    'TR45',\r\n    'TR50',\r\n    'TR61',\r\n    'TR65',\r\n    'TR67',\r\n    'TR86',\r\n    'TR90',\r\n    'TR96',\r\n]);\r\nvar FLING_85 = new Set(['TR01', 'TR41', 'TR62', 'TR93', 'TR97', 'TR98']);\r\nvar FLING_80 = new Set([\r\n    'Assault Vest',\r\n    'Blunder Policy',\r\n    'Chipped Pot',\r\n    'Cracked Pot',\r\n    'Heavy-Duty Boots',\r\n    'Weakness Policy',\r\n    'Quick Claw',\r\n    'Dawn Stone',\r\n    'Dusk Stone',\r\n    'Electirizer',\r\n    'Magmarizer',\r\n    'Oval Stone',\r\n    'Protector',\r\n    'Sachet',\r\n    'Whipped Dream',\r\n    'Razor Claw',\r\n    'Shiny Stone',\r\n    'TR16',\r\n    'TR18',\r\n    'TR19',\r\n    'TR25',\r\n    'TR32',\r\n    'TR33',\r\n    'TR47',\r\n    'TR56',\r\n    'TR57',\r\n    'TR58',\r\n    'TR59',\r\n    'TR60',\r\n    'TR63',\r\n    'TR69',\r\n    'TR70',\r\n    'TR74',\r\n    'TR84',\r\n    'TR87',\r\n    'TR92',\r\n    'TR95',\r\n    'TR99',\r\n]);\r\nvar FLING_70 = new Set([\r\n    'Poison Barb',\r\n    'Dragon Fang',\r\n    'Power Anklet',\r\n    'Power Band',\r\n    'Power Belt',\r\n    'Power Bracer',\r\n    'Power Lens',\r\n    'Power Weight',\r\n]);\r\nvar FLING_60 = new Set([\r\n    'Adamant Orb',\r\n    'Damp Rock',\r\n    'Heat Rock',\r\n    'Leek',\r\n    'Lustrous Orb',\r\n    'Macho Brace',\r\n    'Rocky Helmet',\r\n    'Stick',\r\n    'Utility Umbrella',\r\n    'Terrain Extender',\r\n]);\r\nvar FLING_30 = new Set([\r\n    'Absorb Bulb',\r\n    'Black Belt',\r\n    'Black Sludge',\r\n    'Black Glasses',\r\n    'Cell Battery',\r\n    'Charcoal',\r\n    'Deep Sea Scale',\r\n    'Flame Orb',\r\n    'King\\'s Rock',\r\n    'Life Orb',\r\n    'Light Ball',\r\n    'Light Clay',\r\n    'Magnet',\r\n    'Metal Coat',\r\n    'Miracle Seed',\r\n    'Mystic Water',\r\n    'Never-Melt Ice',\r\n    'Razor Fang',\r\n    'Scope Lens',\r\n    'Soul Dew',\r\n    'Spell Tag',\r\n    'Sweet Apple',\r\n    'Tart Apple',\r\n    'Throat Spray',\r\n    'Toxic Orb',\r\n    'Twisted Spoon',\r\n    'Dragon Scale',\r\n    'Energy Powder',\r\n    'Fire Stone',\r\n    'Leaf Stone',\r\n    'Moon Stone',\r\n    'Sun Stone',\r\n    'Thunder Stone',\r\n    'Up-Grade',\r\n    'Water Stone',\r\n    'Berry Juice',\r\n    'Black Sludge',\r\n    'Prism Scale',\r\n    'Ice Stone',\r\n    'Gold Bottle Cap',\r\n    'Luminous Moss',\r\n    'Eject Button',\r\n    'Snowball',\r\n    'Bottle Cap',\r\n]);\r\nvar FLING_10 = new Set([\r\n    'Air Balloon',\r\n    'Berry Sweet',\r\n    'Choice Band',\r\n    'Choice Scarf',\r\n    'Choice Specs',\r\n    'Clover Sweet',\r\n    'Destiny Knot',\r\n    'Electric Seed',\r\n    'Expert Belt',\r\n    'Flower Sweet',\r\n    'Focus Band',\r\n    'Focus Sash',\r\n    'Full Incense',\r\n    'Grassy Seed',\r\n    'Lagging Tail',\r\n    'Lax Incense',\r\n    'Leftovers',\r\n    'Love Sweet',\r\n    'Mental Herb',\r\n    'Metal Powder',\r\n    'Mint Berry',\r\n    'Miracle Berry',\r\n    'Misty Seed',\r\n    'Muscle Band',\r\n    'Power Herb',\r\n    'Psychic Seed',\r\n    'Odd Incense',\r\n    'Quick Powder',\r\n    'Reaper Cloth',\r\n    'Red Card',\r\n    'Ribbon Sweet',\r\n    'Ring Target',\r\n    'Rock Incense',\r\n    'Rose Incense',\r\n    'Sea Incense',\r\n    'Shed Shell',\r\n    'Silk Scarf',\r\n    'Silver Powder',\r\n    'Smooth Rock',\r\n    'Soft Sand',\r\n    'Soothe Bell',\r\n    'Star Sweet',\r\n    'Strawberry Sweet',\r\n    'Wave Incense',\r\n    'White Herb',\r\n    'Wide Lens',\r\n    'Wise Glasses',\r\n    'Zoom Lens',\r\n    'Silver Powder',\r\n    'Power Herb',\r\n    'TR00',\r\n    'TR07',\r\n    'TR12',\r\n    'TR13',\r\n    'TR14',\r\n    'TR17',\r\n    'TR20',\r\n    'TR21',\r\n    'TR23',\r\n    'TR26',\r\n    'TR27',\r\n    'TR29',\r\n    'TR30',\r\n    'TR37',\r\n    'TR38',\r\n    'TR40',\r\n    'TR44',\r\n    'TR46',\r\n    'TR48',\r\n    'TR49',\r\n    'TR51',\r\n    'TR52',\r\n    'TR54',\r\n    'TR68',\r\n    'TR76',\r\n    'TR77',\r\n    'TR79',\r\n    'TR80',\r\n    'TR83',\r\n    'TR85',\r\n    'TR88',\r\n    'TR91',\r\n]);\r\nfunction getFlingPower(item) {\r\n    if (!item)\r\n        return 0;\r\n    if (['Iron Ball', 'TR43', 'TR71'].includes(item))\r\n        return 130;\r\n    if (FLING_120.has(item))\r\n        return 85;\r\n    if (['TR03', 'TR06', 'TR09', 'TR15', 'TR89'].includes(item))\r\n        return 110;\r\n    if (FLING_100.has(item))\r\n        return 100;\r\n    if (['TR36', 'TR78', 'TR81', 'TR94'].includes(item))\r\n        return 95;\r\n    if (item.includes('Plate') || FLING_90.has(item))\r\n        return 90;\r\n    if (FLING_85.has(item))\r\n        return 85;\r\n    if (FLING_80.has(item))\r\n        return 80;\r\n    if (FLING_70.has(item))\r\n        return 70;\r\n    if (FLING_60.has(item))\r\n        return 60;\r\n    if (['Eject Pack', 'Sharp Beak', 'Dubious Disc'].includes(item))\r\n        return 50;\r\n    if (['Icy Rock', 'Eviolite', 'Lucky Punch'].includes(item))\r\n        return 40;\r\n    if (FLING_30.has(item))\r\n        return 30;\r\n    if (item === 'TR82')\r\n        return 20;\r\n    if (item.includes('Berry') || FLING_10.has(item))\r\n        return 10;\r\n    return 0;\r\n}\r\nexports.getFlingPower = getFlingPower;\r\nfunction getNaturalGift(gen, item) {\r\n    var _a;\r\n    var gift = (_a = gen.items.get((0, util_1.toID)(item))) === null || _a === void 0 ? void 0 : _a.naturalGift;\r\n    return gift ? { t: gift.type, p: gift.basePower } : { t: 'Normal', p: 1 };\r\n}\r\nexports.getNaturalGift = getNaturalGift;\r\nfunction getTechnoBlast(item) {\r\n    switch (item) {\r\n        case 'Burn Drive':\r\n            return 'Fire';\r\n        case 'Chill Drive':\r\n            return 'Ice';\r\n        case 'Douse Drive':\r\n            return 'Water';\r\n        case 'Shock Drive':\r\n            return 'Electric';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\nexports.getTechnoBlast = getTechnoBlast;\r\nfunction getMultiAttack(item) {\r\n    if (item.includes('Memory')) {\r\n        return item.substring(0, item.indexOf(' '));\r\n    }\r\n    return undefined;\r\n}\r\nexports.getMultiAttack = getMultiAttack;\r\n//# sourceMappingURL=items.js.map\n\n//# sourceURL=webpack:///./calc/dist/items.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen12.js":
/*!**************************************!*\
  !*** ./calc/dist/mechanics/gen12.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nexports.__esModule = true;\r\nexports.calculateRBYGSC = void 0;\r\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\r\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\r\nfunction calculateRBYGSC(gen, attacker, defender, move, field) {\r\n    (0, util_1.computeFinalStats)(gen, attacker, defender, field, 'atk', 'def', 'spa', 'spd', 'spe');\r\n    var desc = {\r\n        attackerName: attacker.name,\r\n        moveName: move.name,\r\n        defenderName: defender.name\r\n    };\r\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\r\n    if (move.category === 'Status') {\r\n        return result;\r\n    }\r\n    if (field.defenderSide.isProtected) {\r\n        desc.isProtected = true;\r\n        return result;\r\n    }\r\n    if (gen.num === 1) {\r\n        var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\r\n        if (fixedDamage) {\r\n            result.damage = fixedDamage;\r\n            return result;\r\n        }\r\n    }\r\n    var type1Effectiveness = (0, util_1.getMoveEffectiveness)(gen, move, defender.types[0], field.defenderSide.isForesight);\r\n    var type2Effectiveness = defender.types[1]\r\n        ? (0, util_1.getMoveEffectiveness)(gen, move, defender.types[1], field.defenderSide.isForesight)\r\n        : 1;\r\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\r\n    if (typeEffectiveness === 0) {\r\n        return result;\r\n    }\r\n    if (gen.num === 2) {\r\n        var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\r\n        if (fixedDamage) {\r\n            result.damage = fixedDamage;\r\n            return result;\r\n        }\r\n    }\r\n    if (move.hits > 1) {\r\n        desc.hits = move.hits;\r\n    }\r\n    if (move.named('Flail', 'Reversal')) {\r\n        move.isCrit = false;\r\n        var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\r\n        move.bp = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\r\n        desc.moveBP = move.bp;\r\n    }\r\n    else if (move.named('Present') && !move.bp) {\r\n        move.bp = 40;\r\n    }\r\n    if (move.bp === 0) {\r\n        return result;\r\n    }\r\n    var isPhysical = move.category === 'Physical';\r\n    var attackStat = isPhysical ? 'atk' : 'spa';\r\n    var defenseStat = isPhysical ? 'def' : 'spd';\r\n    var at = attacker.stats[attackStat];\r\n    var df = defender.stats[defenseStat];\r\n    var ignoreMods = move.isCrit &&\r\n        (gen.num === 1 ||\r\n            (gen.num === 2 && attacker.boosts[attackStat] <= defender.boosts[defenseStat]));\r\n    var lv = attacker.level;\r\n    if (ignoreMods) {\r\n        at = attacker.rawStats[attackStat];\r\n        df = defender.rawStats[defenseStat];\r\n        if (gen.num === 1) {\r\n            lv *= 2;\r\n            desc.isCritical = true;\r\n        }\r\n    }\r\n    else {\r\n        if (attacker.boosts[attackStat] !== 0)\r\n            desc.attackBoost = attacker.boosts[attackStat];\r\n        if (defender.boosts[defenseStat] !== 0)\r\n            desc.defenseBoost = defender.boosts[defenseStat];\r\n        if (isPhysical && attacker.hasStatus('brn')) {\r\n            at = Math.floor(at / 2);\r\n            desc.isBurned = true;\r\n        }\r\n    }\r\n    if (move.named('Explosion', 'Self-Destruct')) {\r\n        df = Math.floor(df / 2);\r\n    }\r\n    if (!ignoreMods) {\r\n        if (isPhysical && field.defenderSide.isReflect) {\r\n            df *= 2;\r\n            desc.isReflect = true;\r\n        }\r\n        else if (!isPhysical && field.defenderSide.isLightScreen) {\r\n            df *= 2;\r\n            desc.isLightScreen = true;\r\n        }\r\n    }\r\n    if ((attacker.named('Pikachu') && attacker.hasItem('Light Ball') && !isPhysical) ||\r\n        (attacker.named('Cubone', 'Marowak') && attacker.hasItem('Thick Club') && isPhysical)) {\r\n        at *= 2;\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (at > 255 || df > 255) {\r\n        at = Math.floor(at / 4) % 256;\r\n        df = Math.floor(df / 4) % 256;\r\n    }\r\n    if (move.named('Present')) {\r\n        var lookup = {\r\n            Normal: 0, Fighting: 1, Flying: 2, Poison: 3, Ground: 4, Rock: 5, Bug: 7,\r\n            Ghost: 8, Steel: 9, '???': 19, Fire: 20, Water: 21, Grass: 22, Electric: 23,\r\n            Psychic: 24, Ice: 25, Dragon: 26, Dark: 27\r\n        };\r\n        at = 10;\r\n        df = Math.max(lookup[attacker.types[1] ? attacker.types[1] : attacker.types[0]], 1);\r\n        lv = Math.max(lookup[defender.types[1] ? defender.types[1] : defender.types[0]], 1);\r\n    }\r\n    if (defender.named('Ditto') && defender.hasItem('Metal Powder')) {\r\n        df = Math.floor(df * 1.5);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    var baseDamage = Math.floor(Math.floor((Math.floor((2 * lv) / 5 + 2) * Math.max(1, at) * move.bp) / Math.max(1, df)) / 50);\r\n    if (gen.num === 2 && move.isCrit) {\r\n        baseDamage *= 2;\r\n        desc.isCritical = true;\r\n    }\r\n    if (move.named('Pursuit') && field.defenderSide.isSwitching === 'out') {\r\n        baseDamage = Math.floor(baseDamage * 2);\r\n        desc.isSwitching = 'out';\r\n    }\r\n    var itemBoostType = attacker.hasItem('Dragon Fang')\r\n        ? undefined\r\n        : (0, items_1.getItemBoostType)(attacker.hasItem('Dragon Scale') ? 'Dragon Fang' : attacker.item);\r\n    if (move.hasType(itemBoostType)) {\r\n        baseDamage = Math.floor(baseDamage * 1.1);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    baseDamage = Math.min(997, baseDamage) + 2;\r\n    if ((field.hasWeather('Sun') && move.hasType('Fire')) ||\r\n        (field.hasWeather('Rain') && move.hasType('Water'))) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n        desc.weather = field.weather;\r\n    }\r\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\r\n        (field.hasWeather('Rain') && (move.hasType('Fire') || move.named('Solar Beam')))) {\r\n        baseDamage = Math.floor(baseDamage / 2);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (move.hasType.apply(move, __spreadArray([], __read(attacker.types), false))) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n    }\r\n    if (gen.num === 1) {\r\n        baseDamage = Math.floor(baseDamage * type1Effectiveness);\r\n        baseDamage = Math.floor(baseDamage * type2Effectiveness);\r\n    }\r\n    else {\r\n        baseDamage = Math.floor(baseDamage * typeEffectiveness);\r\n    }\r\n    if (move.named('Flail', 'Reversal')) {\r\n        result.damage = baseDamage;\r\n        return result;\r\n    }\r\n    result.damage = [];\r\n    for (var i = 217; i <= 255; i++) {\r\n        if (gen.num === 2) {\r\n            result.damage[i - 217] = Math.max(1, Math.floor((baseDamage * i) / 255));\r\n        }\r\n        else {\r\n            if (baseDamage === 1) {\r\n                result.damage[i - 217] = 1;\r\n            }\r\n            else {\r\n                result.damage[i - 217] = Math.floor((baseDamage * i) / 255);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.calculateRBYGSC = calculateRBYGSC;\r\n//# sourceMappingURL=gen12.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen12.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen3.js":
/*!*************************************!*\
  !*** ./calc/dist/mechanics/gen3.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nexports.__esModule = true;\r\nexports.calculateADV = void 0;\r\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\r\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\r\nfunction calculateADV(gen, attacker, defender, move, field) {\r\n    (0, util_1.checkAirLock)(attacker, field);\r\n    (0, util_1.checkAirLock)(defender, field);\r\n    (0, util_1.checkForecast)(attacker, field.weather);\r\n    (0, util_1.checkForecast)(defender, field.weather);\r\n    (0, util_1.checkIntimidate)(gen, attacker, defender);\r\n    (0, util_1.checkIntimidate)(gen, defender, attacker);\r\n    attacker.stats.spe = (0, util_1.getFinalSpeed)(gen, attacker, field, field.attackerSide);\r\n    defender.stats.spe = (0, util_1.getFinalSpeed)(gen, defender, field, field.defenderSide);\r\n    var desc = {\r\n        attackerName: attacker.name,\r\n        moveName: move.name,\r\n        defenderName: defender.name\r\n    };\r\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\r\n    if (move.category === 'Status' && !move.named('Nature Power')) {\r\n        return result;\r\n    }\r\n    if (field.defenderSide.isProtected) {\r\n        desc.isProtected = true;\r\n        return result;\r\n    }\r\n    if (move.named('Weather Ball')) {\r\n        move.type =\r\n            field.hasWeather('Sun') ? 'Fire'\r\n                : field.hasWeather('Rain') ? 'Water'\r\n                    : field.hasWeather('Sand') ? 'Rock'\r\n                        : field.hasWeather('Hail') ? 'Ice'\r\n                            : 'Normal';\r\n        move.category = move.type === 'Rock' ? 'Physical' : 'Special';\r\n        desc.weather = field.weather;\r\n        desc.moveType = move.type;\r\n        desc.moveBP = move.bp;\r\n    }\r\n    var type1Effectiveness = (0, util_1.getMoveEffectiveness)(gen, move, defender.types[0], field.defenderSide.isForesight);\r\n    var type2Effectiveness = defender.types[1]\r\n        ? (0, util_1.getMoveEffectiveness)(gen, move, defender.types[1], field.defenderSide.isForesight)\r\n        : 1;\r\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\r\n    if (typeEffectiveness === 0) {\r\n        return result;\r\n    }\r\n    if ((defender.hasAbility('Flash Fire') && move.hasType('Fire')) ||\r\n        (defender.hasAbility('Levitate') && move.hasType('Ground')) ||\r\n        (defender.hasAbility('Volt Absorb') && move.hasType('Electric')) ||\r\n        (defender.hasAbility('Water Absorb') && move.hasType('Water')) ||\r\n        (defender.hasAbility('Wonder Guard') && !move.hasType('???') && typeEffectiveness <= 1) ||\r\n        (defender.hasAbility('Soundproof') && move.flags.sound)) {\r\n        desc.defenderAbility = defender.ability;\r\n        return result;\r\n    }\r\n    desc.HPEVs = \"\".concat(defender.evs.hp, \" HP\");\r\n    var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\r\n    if (fixedDamage) {\r\n        result.damage = fixedDamage;\r\n        return result;\r\n    }\r\n    if (move.hits > 1) {\r\n        desc.hits = move.hits;\r\n    }\r\n    var bp = move.bp;\r\n    switch (move.name) {\r\n        case 'Flail':\r\n        case 'Reversal':\r\n            var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\r\n            bp = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\r\n            desc.moveBP = bp;\r\n            break;\r\n        case 'Eruption':\r\n        case 'Water Spout':\r\n            bp = Math.max(1, Math.floor((150 * attacker.curHP()) / attacker.maxHP()));\r\n            desc.moveBP = bp;\r\n            break;\r\n        case 'Low Kick':\r\n            var w = defender.weightkg;\r\n            bp = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\r\n            desc.moveBP = bp;\r\n            break;\r\n        case 'Facade':\r\n            if (attacker.hasStatus('par', 'psn', 'tox', 'brn')) {\r\n                bp = move.bp * 2;\r\n                desc.moveBP = bp;\r\n            }\r\n            break;\r\n        case 'Nature Power':\r\n            move.category = 'Physical';\r\n            bp = 60;\r\n            desc.moveName = 'Swift';\r\n            break;\r\n        default:\r\n            bp = move.bp;\r\n    }\r\n    if (bp === 0) {\r\n        return result;\r\n    }\r\n    var isPhysical = move.category === 'Physical';\r\n    var attackStat = isPhysical ? 'atk' : 'spa';\r\n    desc.attackEVs = (0, util_1.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\r\n    var defenseStat = isPhysical ? 'def' : 'spd';\r\n    desc.defenseEVs = (0, util_1.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\r\n    var at = attacker.rawStats[attackStat];\r\n    var df = defender.rawStats[defenseStat];\r\n    if (isPhysical && attacker.hasAbility('Huge Power', 'Pure Power')) {\r\n        at *= 2;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (!attacker.hasItem('Sea Incense') && move.hasType((0, items_1.getItemBoostType)(attacker.item))) {\r\n        at = Math.floor(at * 1.1);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (attacker.hasItem('Sea Incense') && move.hasType('Water')) {\r\n        at = Math.floor(at * 1.05);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((isPhysical && attacker.hasItem('Choice Band')) ||\r\n        (!isPhysical && attacker.hasItem('Soul Dew') && attacker.named('Latios', 'Latias'))) {\r\n        at = Math.floor(at * 1.5);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((!isPhysical && attacker.hasItem('Deep Sea Tooth') && attacker.named('Clamperl')) ||\r\n        (!isPhysical && attacker.hasItem('Light Ball') && attacker.named('Pikachu')) ||\r\n        (isPhysical && attacker.hasItem('Thick Club') && attacker.named('Cubone', 'Marowak'))) {\r\n        at *= 2;\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (!isPhysical && defender.hasItem('Soul Dew') && defender.named('Latios', 'Latias')) {\r\n        df = Math.floor(df * 1.5);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    else if ((!isPhysical && defender.hasItem('Deep Sea Scale') && defender.named('Clamperl')) ||\r\n        (isPhysical && defender.hasItem('Metal Powder') && defender.named('Ditto'))) {\r\n        df *= 2;\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    if (defender.hasAbility('Thick Fat') && (move.hasType('Fire', 'Ice'))) {\r\n        at = Math.floor(at / 2);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (isPhysical && defender.hasAbility('Marvel Scale') && defender.status) {\r\n        df = Math.floor(df * 1.5);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if ((isPhysical &&\r\n        (attacker.hasAbility('Hustle') || (attacker.hasAbility('Guts') && attacker.status))) ||\r\n        (!isPhysical && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))) {\r\n        at = Math.floor(at * 1.5);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.curHP() <= attacker.maxHP() / 3 &&\r\n        ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\r\n            (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\r\n            (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\r\n            (attacker.hasAbility('Swarm') && move.hasType('Bug')))) {\r\n        bp = Math.floor(bp * 1.5);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (move.named('Explosion', 'Self-Destruct')) {\r\n        df = Math.floor(df / 2);\r\n    }\r\n    var isCritical = move.isCrit && !defender.hasAbility('Battle Armor', 'Shell Armor');\r\n    var attackBoost = attacker.boosts[attackStat];\r\n    var defenseBoost = defender.boosts[defenseStat];\r\n    if (attackBoost > 0 || (!isCritical && attackBoost < 0)) {\r\n        at = (0, util_1.getModifiedStat)(at, attackBoost);\r\n        desc.attackBoost = attackBoost;\r\n    }\r\n    if (defenseBoost < 0 || (!isCritical && defenseBoost > 0)) {\r\n        df = (0, util_1.getModifiedStat)(df, defenseBoost);\r\n        desc.defenseBoost = defenseBoost;\r\n    }\r\n    var lv = attacker.level;\r\n    var baseDamage = Math.floor(Math.floor((Math.floor((2 * lv) / 5 + 2) * at * bp) / df) / 50);\r\n    if (attacker.hasStatus('brn') && isPhysical && !attacker.hasAbility('Guts')) {\r\n        baseDamage = Math.floor(baseDamage / 2);\r\n        desc.isBurned = true;\r\n    }\r\n    if (!isCritical) {\r\n        var screenMultiplier = field.gameType !== 'Singles' ? 2 / 3 : 1 / 2;\r\n        if (isPhysical && field.defenderSide.isReflect) {\r\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\r\n            desc.isReflect = true;\r\n        }\r\n        else if (!isPhysical && field.defenderSide.isLightScreen) {\r\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\r\n            desc.isLightScreen = true;\r\n        }\r\n    }\r\n    if (move.named('Pursuit') && field.defenderSide.isSwitching === 'out') {\r\n        baseDamage = Math.floor(baseDamage * 2);\r\n        desc.isSwitching = 'out';\r\n    }\r\n    if (field.gameType !== 'Singles' && move.target === 'allAdjacentFoes') {\r\n        baseDamage = Math.floor(baseDamage / 2);\r\n    }\r\n    if ((field.hasWeather('Sun') && move.hasType('Fire')) ||\r\n        (field.hasWeather('Rain') && move.hasType('Water'))) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n        desc.weather = field.weather;\r\n    }\r\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\r\n        (field.hasWeather('Rain') && move.hasType('Fire')) ||\r\n        (move.named('Solar Beam') && field.hasWeather('Rain', 'Sand', 'Hail'))) {\r\n        baseDamage = Math.floor(baseDamage / 2);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n        desc.attackerAbility = 'Flash Fire';\r\n    }\r\n    baseDamage = (move.category === 'Physical' ? Math.max(1, baseDamage) : baseDamage) + 2;\r\n    if (isCritical) {\r\n        baseDamage *= 2;\r\n        desc.isCritical = true;\r\n    }\r\n    if (move.named('Weather Ball') && field.weather) {\r\n        baseDamage *= 2;\r\n        desc.moveBP = bp * 2;\r\n    }\r\n    if (field.attackerSide.isHelpingHand) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n        desc.isHelpingHand = true;\r\n    }\r\n    if (move.hasType.apply(move, __spreadArray([], __read(attacker.types), false))) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n    }\r\n    baseDamage = Math.floor(baseDamage * typeEffectiveness);\r\n    result.damage = [];\r\n    for (var i = 85; i <= 100; i++) {\r\n        result.damage[i - 85] = Math.max(1, Math.floor((baseDamage * i) / 100));\r\n    }\r\n    return result;\r\n}\r\nexports.calculateADV = calculateADV;\r\n//# sourceMappingURL=gen3.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen3.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen4.js":
/*!*************************************!*\
  !*** ./calc/dist/mechanics/gen4.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nexports.__esModule = true;\r\nexports.calculateDPP = void 0;\r\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\r\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\r\nfunction calculateDPP(gen, attacker, defender, move, field) {\r\n    (0, util_1.checkAirLock)(attacker, field);\r\n    (0, util_1.checkAirLock)(defender, field);\r\n    (0, util_1.checkForecast)(attacker, field.weather);\r\n    (0, util_1.checkForecast)(defender, field.weather);\r\n    (0, util_1.checkItem)(attacker);\r\n    (0, util_1.checkItem)(defender);\r\n    (0, util_1.checkIntimidate)(gen, attacker, defender);\r\n    (0, util_1.checkIntimidate)(gen, defender, attacker);\r\n    (0, util_1.checkDownload)(attacker, defender);\r\n    (0, util_1.checkDownload)(defender, attacker);\r\n    attacker.stats.spe = (0, util_1.getFinalSpeed)(gen, attacker, field, field.attackerSide);\r\n    defender.stats.spe = (0, util_1.getFinalSpeed)(gen, defender, field, field.defenderSide);\r\n    var desc = {\r\n        attackerName: attacker.name,\r\n        moveName: move.name,\r\n        defenderName: defender.name\r\n    };\r\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\r\n    if (move.category === 'Status' && !move.named('Nature Power')) {\r\n        return result;\r\n    }\r\n    if (field.defenderSide.isProtected && !move.breaksProtect) {\r\n        desc.isProtected = true;\r\n        return result;\r\n    }\r\n    if (attacker.hasAbility('Mold Breaker')) {\r\n        defender.ability = '';\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var isCritical = move.isCrit && !defender.hasAbility('Battle Armor', 'Shell Armor');\r\n    var basePower = move.bp;\r\n    if (move.named('Weather Ball')) {\r\n        if (field.hasWeather('Sun')) {\r\n            move.type = 'Fire';\r\n            basePower *= 2;\r\n        }\r\n        else if (field.hasWeather('Rain')) {\r\n            move.type = 'Water';\r\n            basePower *= 2;\r\n        }\r\n        else if (field.hasWeather('Sand')) {\r\n            move.type = 'Rock';\r\n            basePower *= 2;\r\n        }\r\n        else if (field.hasWeather('Hail')) {\r\n            move.type = 'Ice';\r\n            basePower *= 2;\r\n        }\r\n        else {\r\n            move.type = 'Normal';\r\n        }\r\n        desc.weather = field.weather;\r\n        desc.moveType = move.type;\r\n        desc.moveBP = basePower;\r\n    }\r\n    else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {\r\n        move.type = (0, items_1.getItemBoostType)(attacker.item);\r\n    }\r\n    else if (move.named('Natural Gift') && attacker.item && attacker.item.includes('Berry')) {\r\n        var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\r\n        move.type = gift.t;\r\n        move.bp = gift.p;\r\n        desc.attackerItem = attacker.item;\r\n        desc.moveBP = move.bp;\r\n        desc.moveType = move.type;\r\n    }\r\n    if (attacker.hasAbility('Normalize')) {\r\n        move.type = 'Normal';\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\r\n    var type1Effectiveness = (0, util_1.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity);\r\n    var type2Effectiveness = defender.types[1]\r\n        ? (0, util_1.getMoveEffectiveness)(gen, move, defender.types[1], isGhostRevealed, field.isGravity)\r\n        : 1;\r\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\r\n    if (typeEffectiveness === 0 && move.hasType('Ground') && defender.hasItem('Iron Ball')) {\r\n        if (type1Effectiveness === 0) {\r\n            type1Effectiveness = 1;\r\n        }\r\n        else if (defender.types[1] && type2Effectiveness === 0) {\r\n            type2Effectiveness = 1;\r\n        }\r\n        typeEffectiveness = type1Effectiveness * type2Effectiveness;\r\n    }\r\n    if (typeEffectiveness === 0) {\r\n        return result;\r\n    }\r\n    var ignoresWonderGuard = move.hasType('???') || move.named('Fire Fang');\r\n    if ((!ignoresWonderGuard && defender.hasAbility('Wonder Guard') && typeEffectiveness <= 1) ||\r\n        (move.hasType('Fire') && defender.hasAbility('Flash Fire')) ||\r\n        (move.hasType('Water') && defender.hasAbility('Dry Skin', 'Water Absorb')) ||\r\n        (move.hasType('Electric') && defender.hasAbility('Motor Drive', 'Volt Absorb')) ||\r\n        (move.hasType('Ground') && !field.isGravity &&\r\n            !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||\r\n        (move.flags.sound && defender.hasAbility('Soundproof'))) {\r\n        desc.defenderAbility = defender.ability;\r\n        return result;\r\n    }\r\n    desc.HPEVs = \"\".concat(defender.evs.hp, \" HP\");\r\n    var fixedDamage = (0, util_1.handleFixedDamageMoves)(attacker, move, defender);\r\n    if (fixedDamage) {\r\n        result.damage = fixedDamage;\r\n        return result;\r\n    }\r\n    if (move.hits > 1) {\r\n        desc.hits = move.hits;\r\n    }\r\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\r\n    switch (move.name) {\r\n        case 'Brine':\r\n            if (defender.curHP() <= defender.maxHP() / 2) {\r\n                basePower *= 2;\r\n                desc.moveBP = basePower;\r\n            }\r\n            break;\r\n        case 'Eruption':\r\n        case 'Water Spout':\r\n            basePower = Math.max(1, Math.floor((basePower * attacker.curHP()) / attacker.maxHP()));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Facade':\r\n            if (attacker.hasStatus('par', 'psn', 'tox', 'brn')) {\r\n                basePower = move.bp * 2;\r\n                desc.moveBP = basePower;\r\n            }\r\n            break;\r\n        case 'Flail':\r\n        case 'Reversal':\r\n            var p = Math.floor((64 * attacker.curHP()) / attacker.maxHP());\r\n            basePower = p <= 1 ? 200 : p <= 5 ? 150 : p <= 12 ? 100 : p <= 21 ? 80 : p <= 42 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Fling':\r\n            basePower = (0, items_1.getFlingPower)(attacker.item);\r\n            desc.moveBP = basePower;\r\n            desc.attackerItem = attacker.item;\r\n            break;\r\n        case 'Grass Knot':\r\n        case 'Low Kick':\r\n            var w = defender.weightkg;\r\n            basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Gyro Ball':\r\n            basePower = Math.min(150, Math.floor((25 * defender.stats.spe) / attacker.stats.spe));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Payback':\r\n            if (turnOrder !== 'first') {\r\n                basePower *= 2;\r\n                desc.moveBP = basePower;\r\n            }\r\n            break;\r\n        case 'Punishment':\r\n            basePower = Math.min(200, 60 + 20 * (0, util_1.countBoosts)(gen, defender.boosts));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Wake-Up Slap':\r\n            if (defender.hasStatus('slp')) {\r\n                basePower *= 2;\r\n                desc.moveBP = basePower;\r\n            }\r\n            break;\r\n        case 'Nature Power':\r\n            move.category = 'Special';\r\n            move.secondaries = true;\r\n            basePower = 80;\r\n            desc.moveName = 'Tri Attack';\r\n            break;\r\n        case 'Crush Grip':\r\n        case 'Wring Out':\r\n            basePower = Math.floor((defender.curHP() * 120) / defender.maxHP()) + 1;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        default:\r\n            basePower = move.bp;\r\n    }\r\n    if (basePower === 0) {\r\n        return result;\r\n    }\r\n    if (field.attackerSide.isHelpingHand) {\r\n        basePower = Math.floor(basePower * 1.5);\r\n        desc.isHelpingHand = true;\r\n    }\r\n    var isPhysical = move.category === 'Physical';\r\n    if ((attacker.hasItem('Muscle Band') && isPhysical) ||\r\n        (attacker.hasItem('Wise Glasses') && !isPhysical)) {\r\n        basePower = Math.floor(basePower * 1.1);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (move.hasType((0, items_1.getItemBoostType)(attacker.item)) ||\r\n        (attacker.hasItem('Adamant Orb') &&\r\n            attacker.named('Dialga') &&\r\n            move.hasType('Steel', 'Dragon')) ||\r\n        (attacker.hasItem('Lustrous Orb') &&\r\n            attacker.named('Palkia') &&\r\n            move.hasType('Water', 'Dragon')) ||\r\n        (attacker.hasItem('Griseous Orb') &&\r\n            attacker.named('Giratina-Origin') &&\r\n            move.hasType('Ghost', 'Dragon'))) {\r\n        basePower = Math.floor(basePower * 1.2);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||\r\n        (attacker.hasAbility('Iron Fist') && move.flags.punch)) {\r\n        basePower = Math.floor(basePower * 1.2);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if ((attacker.curHP() <= attacker.maxHP() / 3 &&\r\n        ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\r\n            (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\r\n            (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\r\n            (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||\r\n        (attacker.hasAbility('Technician') && basePower <= 60)) {\r\n        basePower = Math.floor(basePower * 1.5);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if ((defender.hasAbility('Heatproof') && move.hasType('Fire')) ||\r\n        (defender.hasAbility('Thick Fat') && (move.hasType('Fire', 'Ice')))) {\r\n        basePower = Math.floor(basePower * 0.5);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.hasAbility('Dry Skin') && move.hasType('Fire')) {\r\n        basePower = Math.floor(basePower * 1.25);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    var attackStat = isPhysical ? 'atk' : 'spa';\r\n    desc.attackEVs = (0, util_1.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\r\n    var attack;\r\n    var attackBoost = attacker.boosts[attackStat];\r\n    var rawAttack = attacker.rawStats[attackStat];\r\n    if (attackBoost === 0 || (isCritical && attackBoost < 0)) {\r\n        attack = rawAttack;\r\n    }\r\n    else if (defender.hasAbility('Unaware')) {\r\n        attack = rawAttack;\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (attacker.hasAbility('Simple')) {\r\n        attack = getSimpleModifiedStat(rawAttack, attackBoost);\r\n        desc.attackerAbility = attacker.ability;\r\n        desc.attackBoost = attackBoost;\r\n    }\r\n    else {\r\n        attack = (0, util_1.getModifiedStat)(rawAttack, attackBoost);\r\n        desc.attackBoost = attackBoost;\r\n    }\r\n    if (isPhysical && attacker.hasAbility('Pure Power', 'Huge Power')) {\r\n        attack *= 2;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (field.hasWeather('Sun') &&\r\n        (attacker.hasAbility(isPhysical ? 'Flower Gift' : 'Solar Power'))) {\r\n        attack = Math.floor(attack * 1.5);\r\n        desc.attackerAbility = attacker.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (field.attackerSide.isFlowerGift && field.hasWeather('Sun') && isPhysical) {\r\n        attack = Math.floor(attack * 1.5);\r\n        desc.weather = field.weather;\r\n        desc.isFlowerGiftAttacker = true;\r\n    }\r\n    else if ((isPhysical &&\r\n        (attacker.hasAbility('Hustle') || (attacker.hasAbility('Guts') && attacker.status)) ||\r\n        (!isPhysical && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus')))) {\r\n        attack = Math.floor(attack * 1.5);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (isPhysical && attacker.hasAbility('Slow Start') && attacker.abilityOn) {\r\n        attack = Math.floor(attack / 2);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if ((isPhysical ? attacker.hasItem('Choice Band') : attacker.hasItem('Choice Specs')) ||\r\n        (!isPhysical && attacker.hasItem('Soul Dew') && attacker.named('Latios', 'Latias'))) {\r\n        attack = Math.floor(attack * 1.5);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((attacker.hasItem('Light Ball') && attacker.named('Pikachu')) ||\r\n        (attacker.hasItem('Thick Club') && attacker.named('Cubone', 'Marowak') && isPhysical) ||\r\n        (attacker.hasItem('Deep Sea Tooth') && attacker.named('Clamperl') && !isPhysical)) {\r\n        attack *= 2;\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    var defenseStat = isPhysical ? 'def' : 'spd';\r\n    desc.defenseEVs = (0, util_1.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\r\n    var defense;\r\n    var defenseBoost = defender.boosts[defenseStat];\r\n    var rawDefense = defender.rawStats[defenseStat];\r\n    if (defenseBoost === 0 || (isCritical && defenseBoost > 0)) {\r\n        defense = rawDefense;\r\n    }\r\n    else if (attacker.hasAbility('Unaware')) {\r\n        defense = rawDefense;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (defender.hasAbility('Simple')) {\r\n        defense = getSimpleModifiedStat(rawDefense, defenseBoost);\r\n        desc.defenderAbility = defender.ability;\r\n        desc.defenseBoost = defenseBoost;\r\n    }\r\n    else {\r\n        defense = (0, util_1.getModifiedStat)(rawDefense, defenseBoost);\r\n        desc.defenseBoost = defenseBoost;\r\n    }\r\n    if (defender.hasAbility('Marvel Scale') && defender.status && isPhysical) {\r\n        defense = Math.floor(defense * 1.5);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.hasAbility('Flower Gift') && field.hasWeather('Sun') && !isPhysical) {\r\n        defense = Math.floor(defense * 1.5);\r\n        desc.defenderAbility = defender.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (field.defenderSide.isFlowerGift && field.hasWeather('Sun') && !isPhysical) {\r\n        defense = Math.floor(defense * 1.5);\r\n        desc.weather = field.weather;\r\n        desc.isFlowerGiftDefender = true;\r\n    }\r\n    if (defender.hasItem('Soul Dew') && defender.named('Latios', 'Latias') && !isPhysical) {\r\n        defense = Math.floor(defense * 1.5);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    else if ((defender.hasItem('Deep Sea Scale') && defender.named('Clamperl') && !isPhysical) ||\r\n        (defender.hasItem('Metal Powder') && defender.named('Ditto') && isPhysical)) {\r\n        defense *= 2;\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    if (field.hasWeather('Sand') && defender.hasType('Rock') && !isPhysical) {\r\n        defense = Math.floor(defense * 1.5);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (move.named('Explosion') || move.named('Self-Destruct')) {\r\n        defense = Math.floor(defense * 0.5);\r\n    }\r\n    if (defense < 1) {\r\n        defense = 1;\r\n    }\r\n    var baseDamage = Math.floor(Math.floor((Math.floor((2 * attacker.level) / 5 + 2) * basePower * attack) / 50) / defense);\r\n    if (attacker.hasStatus('brn') && isPhysical && !attacker.hasAbility('Guts')) {\r\n        baseDamage = Math.floor(baseDamage * 0.5);\r\n        desc.isBurned = true;\r\n    }\r\n    if (!isCritical) {\r\n        var screenMultiplier = field.gameType !== 'Singles' ? 2 / 3 : 1 / 2;\r\n        if (isPhysical && field.defenderSide.isReflect) {\r\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\r\n            desc.isReflect = true;\r\n        }\r\n        else if (!isPhysical && field.defenderSide.isLightScreen) {\r\n            baseDamage = Math.floor(baseDamage * screenMultiplier);\r\n            desc.isLightScreen = true;\r\n        }\r\n    }\r\n    if (field.gameType !== 'Singles' &&\r\n        ['allAdjacent', 'allAdjacentFoes'].includes(move.target)) {\r\n        baseDamage = Math.floor((baseDamage * 3) / 4);\r\n    }\r\n    if ((field.hasWeather('Sun') && move.hasType('Fire')) ||\r\n        (field.hasWeather('Rain') && move.hasType('Water'))) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n        desc.weather = field.weather;\r\n    }\r\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\r\n        (field.hasWeather('Rain') && move.hasType('Fire')) ||\r\n        (move.named('Solar Beam') && field.hasWeather('Rain', 'Sand', 'Hail'))) {\r\n        baseDamage = Math.floor(baseDamage * 0.5);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\r\n        baseDamage = Math.floor(baseDamage * 1.5);\r\n        desc.attackerAbility = 'Flash Fire';\r\n    }\r\n    baseDamage += 2;\r\n    if (isCritical) {\r\n        if (attacker.hasAbility('Sniper')) {\r\n            baseDamage *= 3;\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            baseDamage *= 2;\r\n        }\r\n        desc.isCritical = isCritical;\r\n    }\r\n    if (attacker.hasItem('Life Orb')) {\r\n        baseDamage = Math.floor(baseDamage * 1.3);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (move.named('Pursuit') && field.defenderSide.isSwitching === 'out') {\r\n        if (attacker.hasAbility('Technician')) {\r\n            baseDamage = Math.floor(baseDamage * 1);\r\n        }\r\n        else {\r\n            baseDamage = Math.floor(baseDamage * 2);\r\n            desc.isSwitching = 'out';\r\n        }\r\n    }\r\n    var stabMod = 1;\r\n    if (move.hasType.apply(move, __spreadArray([], __read(attacker.types), false))) {\r\n        if (attacker.hasAbility('Adaptability')) {\r\n            stabMod = 2;\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            stabMod = 1.5;\r\n        }\r\n    }\r\n    var filterMod = 1;\r\n    if (defender.hasAbility('Filter', 'Solid Rock') && typeEffectiveness > 1) {\r\n        filterMod = 0.75;\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    var ebeltMod = 1;\r\n    if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1) {\r\n        ebeltMod = 1.2;\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    var tintedMod = 1;\r\n    if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {\r\n        tintedMod = 2;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var berryMod = 1;\r\n    if (move.hasType((0, items_1.getBerryResistType)(defender.item)) &&\r\n        (typeEffectiveness > 1 || move.hasType('Normal'))) {\r\n        berryMod = 0.5;\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    var damage = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        damage[i] = Math.floor((baseDamage * (85 + i)) / 100);\r\n        damage[i] = Math.floor(damage[i] * stabMod);\r\n        damage[i] = Math.floor(damage[i] * type1Effectiveness);\r\n        damage[i] = Math.floor(damage[i] * type2Effectiveness);\r\n        damage[i] = Math.floor(damage[i] * filterMod);\r\n        damage[i] = Math.floor(damage[i] * ebeltMod);\r\n        damage[i] = Math.floor(damage[i] * tintedMod);\r\n        damage[i] = Math.floor(damage[i] * berryMod);\r\n        damage[i] = Math.max(1, damage[i]);\r\n    }\r\n    result.damage = damage;\r\n    return result;\r\n}\r\nexports.calculateDPP = calculateDPP;\r\nfunction getSimpleModifiedStat(stat, mod) {\r\n    var simpleMod = Math.min(6, Math.max(-6, mod * 2));\r\n    return simpleMod > 0\r\n        ? Math.floor((stat * (2 + simpleMod)) / 2)\r\n        : simpleMod < 0 ? Math.floor((stat * 2) / (2 - simpleMod)) : stat;\r\n}\r\n//# sourceMappingURL=gen4.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen4.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen56.js":
/*!**************************************!*\
  !*** ./calc/dist/mechanics/gen56.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.calculateBWXY = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\r\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\r\nvar util_2 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\r\nfunction calculateBWXY(gen, attacker, defender, move, field) {\r\n    var _a;\r\n    (0, util_2.checkAirLock)(attacker, field);\r\n    (0, util_2.checkAirLock)(defender, field);\r\n    (0, util_2.checkForecast)(attacker, field.weather);\r\n    (0, util_2.checkForecast)(defender, field.weather);\r\n    (0, util_2.checkItem)(attacker, field.isMagicRoom);\r\n    (0, util_2.checkItem)(defender, field.isMagicRoom);\r\n    (0, util_2.checkWonderRoom)(attacker, field.isWonderRoom);\r\n    (0, util_2.checkWonderRoom)(defender, field.isWonderRoom);\r\n    (0, util_2.checkSeedBoost)(attacker, field);\r\n    (0, util_2.checkSeedBoost)(defender, field);\r\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'def', 'spd', 'spe');\r\n    (0, util_2.checkIntimidate)(gen, attacker, defender);\r\n    (0, util_2.checkIntimidate)(gen, defender, attacker);\r\n    (0, util_2.checkDownload)(attacker, defender, field.isWonderRoom);\r\n    (0, util_2.checkDownload)(defender, attacker, field.isWonderRoom);\r\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'atk', 'spa');\r\n    (0, util_2.checkInfiltrator)(attacker, field.defenderSide);\r\n    (0, util_2.checkInfiltrator)(defender, field.attackerSide);\r\n    var desc = {\r\n        attackerName: attacker.name,\r\n        moveName: move.name,\r\n        defenderName: defender.name,\r\n        isWonderRoom: field.isWonderRoom\r\n    };\r\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\r\n    if (move.category === 'Status' && !move.named('Nature Power')) {\r\n        return result;\r\n    }\r\n    if (field.defenderSide.isProtected && !move.breaksProtect) {\r\n        desc.isProtected = true;\r\n        return result;\r\n    }\r\n    if (attacker.hasAbility('Mold Breaker', 'Teravolt', 'Turboblaze')) {\r\n        defender.ability = '';\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var isCritical = move.isCrit && !defender.hasAbility('Battle Armor', 'Shell Armor') && move.timesUsed === 1;\r\n    if (move.named('Weather Ball')) {\r\n        move.type =\r\n            field.hasWeather('Sun', 'Harsh Sunshine') ? 'Fire'\r\n                : field.hasWeather('Rain', 'Heavy Rain') ? 'Water'\r\n                    : field.hasWeather('Sand') ? 'Rock'\r\n                        : field.hasWeather('Hail') ? 'Ice'\r\n                            : 'Normal';\r\n        desc.weather = field.weather;\r\n        desc.moveType = move.type;\r\n    }\r\n    else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {\r\n        move.type = (0, items_1.getItemBoostType)(attacker.item);\r\n    }\r\n    else if (move.named('Techno Blast') && attacker.item && attacker.item.includes('Drive')) {\r\n        move.type = (0, items_1.getTechnoBlast)(attacker.item);\r\n    }\r\n    else if (move.named('Natural Gift') && attacker.item && attacker.item.includes('Berry')) {\r\n        var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\r\n        move.type = gift.t;\r\n        move.bp = gift.p;\r\n        desc.attackerItem = attacker.item;\r\n        desc.moveBP = move.bp;\r\n        desc.moveType = move.type;\r\n    }\r\n    else if (move.named('Nature Power')) {\r\n        if (gen.num === 5) {\r\n            move.type = 'Ground';\r\n        }\r\n        else {\r\n            move.type =\r\n                field.hasTerrain('Electric') ? 'Electric'\r\n                    : field.hasTerrain('Grassy') ? 'Grass'\r\n                        : field.hasTerrain('Misty') ? 'Fairy'\r\n                            : 'Normal';\r\n        }\r\n    }\r\n    var isAerilate = false;\r\n    var isPixilate = false;\r\n    var isRefrigerate = false;\r\n    var isNormalize = false;\r\n    var noTypeChange = move.named('Judgment', 'Nature Power', 'Techo Blast', 'Natural Gift', 'Weather Ball');\r\n    if (!move.isZ && !noTypeChange) {\r\n        var normal = move.hasType('Normal');\r\n        if ((isAerilate = attacker.hasAbility('Aerilate') && normal)) {\r\n            move.type = 'Flying';\r\n        }\r\n        else if ((isPixilate = attacker.hasAbility('Pixilate') && normal)) {\r\n            move.type = 'Fairy';\r\n        }\r\n        else if ((isRefrigerate = attacker.hasAbility('Refrigerate') && normal)) {\r\n            move.type = 'Ice';\r\n        }\r\n        else if ((isNormalize = attacker.hasAbility('Normalize'))) {\r\n            move.type = 'Normal';\r\n        }\r\n        if (isPixilate || isRefrigerate || isAerilate || isNormalize) {\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n    }\r\n    if (attacker.hasAbility('Gale Wings') && move.hasType('Flying')) {\r\n        move.priority = 1;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\r\n    var type1Effectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity);\r\n    var type2Effectiveness = defender.types[1]\r\n        ? (0, util_2.getMoveEffectiveness)(gen, move, defender.types[1], isGhostRevealed, field.isGravity)\r\n        : 1;\r\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\r\n    var resistedKnockOffDamage = !defender.item ||\r\n        (defender.named('Giratina-Origin') && defender.hasItem('Griseous Orb')) ||\r\n        (defender.name.includes('Arceus') && defender.item.includes('Plate')) ||\r\n        (defender.name.includes('Genesect') && defender.item.includes('Drive')) ||\r\n        (defender.named('Groudon', 'Groudon-Primal') && defender.hasItem('Red Orb')) ||\r\n        (defender.named('Kyogre', 'Kyogre-Primal') && defender.hasItem('Blue Orb'));\r\n    if (!resistedKnockOffDamage && defender.item) {\r\n        var item = gen.items.get((0, util_1.toID)(defender.item));\r\n        resistedKnockOffDamage = !!(item.megaEvolves && defender.name.includes(item.megaEvolves));\r\n    }\r\n    if (typeEffectiveness === 0 && move.named('Thousand Arrows')) {\r\n        typeEffectiveness = 1;\r\n    }\r\n    else if (typeEffectiveness === 0 && move.hasType('Ground') &&\r\n        defender.hasItem('Iron Ball') && !defender.hasAbility('Klutz')) {\r\n        typeEffectiveness = 1;\r\n    }\r\n    else if (typeEffectiveness === 0 && defender.hasItem('Ring Target')) {\r\n        var effectiveness = gen.types.get((0, util_1.toID)(move.type)).effectiveness;\r\n        if (effectiveness[defender.types[0]] === 0) {\r\n            typeEffectiveness = type2Effectiveness;\r\n        }\r\n        else if (defender.types[1] && effectiveness[defender.types[1]] === 0) {\r\n            typeEffectiveness = type1Effectiveness;\r\n        }\r\n    }\r\n    if (typeEffectiveness === 0) {\r\n        return result;\r\n    }\r\n    if ((move.named('Sky Drop') &&\r\n        (defender.hasType('Flying') || defender.weightkg >= 200 || field.isGravity)) ||\r\n        (move.named('Synchronoise') && !defender.hasType(attacker.types[0]) &&\r\n            (!attacker.types[1] || !defender.hasType(attacker.types[1]))) ||\r\n        (move.named('Dream Eater') && !defender.hasStatus('slp'))) {\r\n        return result;\r\n    }\r\n    if ((field.hasWeather('Harsh Sunshine') && move.hasType('Water')) ||\r\n        (field.hasWeather('Heavy Rain') && move.hasType('Fire'))) {\r\n        desc.weather = field.weather;\r\n        return result;\r\n    }\r\n    if (field.hasWeather('Strong Winds') && defender.hasType('Flying') &&\r\n        gen.types.get((0, util_1.toID)(move.type)).effectiveness['Flying'] > 1) {\r\n        typeEffectiveness /= 2;\r\n        desc.weather = field.weather;\r\n    }\r\n    if ((defender.hasAbility('Wonder Guard') && typeEffectiveness <= 1) ||\r\n        (move.hasType('Grass') && defender.hasAbility('Sap Sipper')) ||\r\n        (move.hasType('Fire') && defender.hasAbility('Flash Fire')) ||\r\n        (move.hasType('Water') && defender.hasAbility('Dry Skin', 'Storm Drain', 'Water Absorb')) ||\r\n        (move.hasType('Electric') &&\r\n            defender.hasAbility('Lightning Rod', 'Motor Drive', 'Volt Absorb')) ||\r\n        (move.hasType('Ground') &&\r\n            !field.isGravity && !move.named('Thousand Arrows') &&\r\n            !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||\r\n        (move.flags.bullet && defender.hasAbility('Bulletproof')) ||\r\n        (move.flags.sound && defender.hasAbility('Soundproof'))) {\r\n        desc.defenderAbility = defender.ability;\r\n        return result;\r\n    }\r\n    if (move.hasType('Ground') && !move.named('Thousand Arrows') &&\r\n        !field.isGravity && defender.hasItem('Air Balloon')) {\r\n        desc.defenderItem = defender.item;\r\n        return result;\r\n    }\r\n    if (move.priority > 0 && field.hasTerrain('Psychic') && (0, util_2.isGrounded)(defender, field)) {\r\n        desc.terrain = field.terrain;\r\n        return result;\r\n    }\r\n    desc.HPEVs = \"\".concat(defender.evs.hp, \" HP\");\r\n    var fixedDamage = (0, util_2.handleFixedDamageMoves)(attacker, move, defender);\r\n    if (fixedDamage) {\r\n        if (attacker.hasAbility('Parental Bond')) {\r\n            result.damage = [fixedDamage, fixedDamage];\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            result.damage = fixedDamage;\r\n        }\r\n        return result;\r\n    }\r\n    if (move.named('Final Gambit')) {\r\n        result.damage = attacker.curHP();\r\n        return result;\r\n    }\r\n    if (move.hits > 1) {\r\n        desc.hits = move.hits;\r\n    }\r\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\r\n    var basePower;\r\n    switch (move.name) {\r\n        case 'Payback':\r\n            basePower = move.bp * (turnOrder === 'last' ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Pursuit':\r\n            var switching = field.defenderSide.isSwitching === 'out';\r\n            basePower = move.bp * (switching ? 2 : 1);\r\n            if (switching)\r\n                desc.isSwitching = 'out';\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Electro Ball':\r\n            if (defender.stats.spe === 0)\r\n                defender.stats.spe = 1;\r\n            var r = Math.floor(attacker.stats.spe / defender.stats.spe);\r\n            basePower = r >= 4 ? 150 : r >= 3 ? 120 : r >= 2 ? 80 : r >= 1 ? 60 : 40;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Gyro Ball':\r\n            if (attacker.stats.spe === 0)\r\n                attacker.stats.spe = 1;\r\n            basePower = Math.min(150, Math.floor((25 * defender.stats.spe) / attacker.stats.spe) + 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Punishment':\r\n            basePower = Math.min(200, 60 + 20 * (0, util_2.countBoosts)(gen, defender.boosts));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Low Kick':\r\n        case 'Grass Knot':\r\n            var w = defender.weightkg * (0, util_2.getWeightFactor)(defender);\r\n            basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Hex':\r\n            basePower = move.bp * (defender.status ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Heavy Slam':\r\n        case 'Heat Crash':\r\n            var wr = (attacker.weightkg * (0, util_2.getWeightFactor)(attacker)) /\r\n                (defender.weightkg * (0, util_2.getWeightFactor)(defender));\r\n            basePower = wr >= 5 ? 120 : wr >= 4 ? 100 : wr >= 3 ? 80 : wr >= 2 ? 60 : 40;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Stored Power':\r\n        case 'Power Trip':\r\n            basePower = 20 + 20 * (0, util_2.countBoosts)(gen, attacker.boosts);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Acrobatics':\r\n            basePower = move.bp * (attacker.hasItem('Flying Gem') || !attacker.item ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Assurance':\r\n            basePower = move.bp * (defender.hasAbility('Parental Bond (Child)') ? 2 : 1);\r\n            break;\r\n        case 'Wake-Up Slap':\r\n            basePower = move.bp * (defender.hasStatus('slp') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Smelling Salts':\r\n            basePower = move.bp * (defender.hasStatus('par') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Weather Ball':\r\n            basePower = move.bp * (field.weather && !field.hasWeather('Strong Winds') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Fling':\r\n            basePower = (0, items_1.getFlingPower)(attacker.item);\r\n            desc.moveBP = basePower;\r\n            desc.attackerItem = attacker.item;\r\n            break;\r\n        case 'Eruption':\r\n        case 'Water Spout':\r\n            basePower = Math.max(1, Math.floor((150 * attacker.curHP()) / attacker.maxHP()));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Flail':\r\n        case 'Reversal':\r\n            var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\r\n            basePower = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Nature Power':\r\n            if (gen.num === 5) {\r\n                move.category = 'Physical';\r\n                move.target = 'allAdjacent';\r\n                basePower = 100;\r\n                desc.moveName = 'Earthquake';\r\n            }\r\n            else {\r\n                move.category = 'Special';\r\n                move.secondaries = true;\r\n                switch (field.terrain) {\r\n                    case 'Electric':\r\n                        basePower = 90;\r\n                        desc.moveName = 'Thunderbolt';\r\n                        break;\r\n                    case 'Grassy':\r\n                        basePower = 90;\r\n                        desc.moveName = 'Energy Ball';\r\n                        break;\r\n                    case 'Misty':\r\n                        basePower = 95;\r\n                        desc.moveName = 'Moonblast';\r\n                        break;\r\n                    default:\r\n                        basePower = 80;\r\n                        desc.moveName = 'Tri Attack';\r\n                }\r\n            }\r\n            break;\r\n        case 'Triple Kick':\r\n            basePower = move.hits === 2 ? 15 : move.hits === 3 ? 30 : 10;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Crush Grip':\r\n        case 'Wring Out':\r\n            basePower = 100 * Math.floor((defender.curHP() * 4096) / defender.maxHP());\r\n            basePower = Math.floor(Math.floor((120 * basePower + 2048 - 1) / 4096) / 100) || 1;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        default:\r\n            basePower = move.bp;\r\n    }\r\n    if (basePower === 0) {\r\n        return result;\r\n    }\r\n    var bpMods = [];\r\n    if ((attacker.hasAbility('Technician') && basePower <= 60) ||\r\n        (attacker.hasAbility('Flare Boost') &&\r\n            attacker.hasStatus('brn') && move.category === 'Special') ||\r\n        (attacker.hasAbility('Toxic Boost') &&\r\n            attacker.hasStatus('psn', 'tox') && move.category === 'Physical')) {\r\n        bpMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Analytic') && turnOrder !== 'first') {\r\n        bpMods.push(5325);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Sand Force') &&\r\n        field.hasWeather('Sand') &&\r\n        move.hasType('Rock', 'Ground', 'Steel')) {\r\n        bpMods.push(5325);\r\n        desc.attackerAbility = attacker.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||\r\n        (attacker.hasAbility('Iron Fist') && move.flags.punch)) {\r\n        bpMods.push(4915);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (defender.hasAbility('Heatproof') && move.hasType('Fire')) {\r\n        bpMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.hasAbility('Dry Skin') && move.hasType('Fire')) {\r\n        bpMods.push(5120);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (attacker.hasAbility('Sheer Force') && move.secondaries) {\r\n        bpMods.push(5325);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (attacker.hasAbility('Rivalry') && ![attacker.gender, defender.gender].includes('N')) {\r\n        if (attacker.gender === defender.gender) {\r\n            bpMods.push(5120);\r\n            desc.rivalry = 'buffed';\r\n        }\r\n        else {\r\n            bpMods.push(3072);\r\n            desc.rivalry = 'nerfed';\r\n        }\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (attacker.item && (0, items_1.getItemBoostType)(attacker.item) === move.type) {\r\n        bpMods.push(4915);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((attacker.hasItem('Muscle Band') && move.category === 'Physical') ||\r\n        (attacker.hasItem('Wise Glasses') && move.category === 'Special')) {\r\n        bpMods.push(4505);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((attacker.hasItem('Adamant Orb') &&\r\n        attacker.named('Dialga') &&\r\n        move.hasType('Steel', 'Dragon')) ||\r\n        (attacker.hasItem('Lustrous Orb') &&\r\n            attacker.named('Palkia') &&\r\n            move.hasType('Water', 'Dragon')) ||\r\n        (attacker.hasItem('Griseous Orb') &&\r\n            attacker.named('Giratina-Origin') &&\r\n            move.hasType('Ghost', 'Dragon'))) {\r\n        bpMods.push(4915);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (attacker.hasItem(\"\".concat(move.type, \" Gem\"))) {\r\n        bpMods.push(gen.num > 5 ? 5325 : 6144);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if ((move.named('Facade') && attacker.hasStatus('brn', 'par', 'psn', 'tox')) ||\r\n        (move.named('Brine') && defender.curHP() <= defender.maxHP() / 2) ||\r\n        (move.named('Venoshock') && defender.hasStatus('psn', 'tox'))) {\r\n        bpMods.push(8192);\r\n        desc.moveBP = basePower * 2;\r\n    }\r\n    else if (gen.num > 5 && move.named('Knock Off') && !resistedKnockOffDamage) {\r\n        bpMods.push(6144);\r\n        desc.moveBP = basePower * 1.5;\r\n    }\r\n    else if (move.named('Solar Beam') && field.hasWeather('Rain', 'Heavy Rain', 'Sand', 'Hail')) {\r\n        bpMods.push(2048);\r\n        desc.moveBP = basePower / 2;\r\n        desc.weather = field.weather;\r\n    }\r\n    if (field.attackerSide.isHelpingHand) {\r\n        bpMods.push(6144);\r\n        desc.isHelpingHand = true;\r\n    }\r\n    if (isAerilate || isPixilate || isRefrigerate || isNormalize) {\r\n        bpMods.push(5325);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if ((attacker.hasAbility('Mega Launcher') && move.flags.pulse) ||\r\n        (attacker.hasAbility('Strong Jaw') && move.flags.bite)) {\r\n        bpMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Tough Claws') && move.flags.contact) {\r\n        bpMods.push(5325);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var aura = \"\".concat(move.type, \" Aura\");\r\n    var isAttackerAura = attacker.hasAbility(aura);\r\n    var isDefenderAura = defender.hasAbility(aura);\r\n    var isUserAuraBreak = attacker.hasAbility('Aura Break') || defender.hasAbility('Aura Break');\r\n    var isFieldAuraBreak = field.isAuraBreak;\r\n    var isFieldFairyAura = field.isFairyAura && move.type === 'Fairy';\r\n    var isFieldDarkAura = field.isDarkAura && move.type === 'Dark';\r\n    var auraActive = isAttackerAura || isDefenderAura || isFieldFairyAura || isFieldDarkAura;\r\n    var auraBreak = isFieldAuraBreak || isUserAuraBreak;\r\n    if (auraActive) {\r\n        if (auraBreak) {\r\n            bpMods.push(3072);\r\n            desc.attackerAbility = attacker.ability;\r\n            desc.defenderAbility = defender.ability;\r\n        }\r\n        else {\r\n            bpMods.push(5448);\r\n            if (isAttackerAura)\r\n                desc.attackerAbility = attacker.ability;\r\n            if (isDefenderAura)\r\n                desc.defenderAbility = defender.ability;\r\n        }\r\n    }\r\n    if ((0, util_2.isGrounded)(attacker, field)) {\r\n        if ((field.hasTerrain('Electric') && move.hasType('Electric')) ||\r\n            (field.hasTerrain('Grassy') && move.hasType('Grass'))) {\r\n            bpMods.push(6144);\r\n            desc.terrain = field.terrain;\r\n        }\r\n    }\r\n    if ((0, util_2.isGrounded)(defender, field)) {\r\n        if ((field.hasTerrain('Misty') && move.hasType('Dragon')) ||\r\n            (field.hasTerrain('Grassy') && move.named('Bulldoze', 'Earthquake'))) {\r\n            bpMods.push(2048);\r\n            desc.terrain = field.terrain;\r\n        }\r\n    }\r\n    basePower = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((basePower * (0, util_2.chainMods)(bpMods, 41, 2097152)) / 4096)));\r\n    var attack;\r\n    var attackSource = move.named('Foul Play') ? defender : attacker;\r\n    var attackStat = move.category === 'Special' ? 'spa' : 'atk';\r\n    desc.attackEVs =\r\n        move.named('Foul Play')\r\n            ? (0, util_2.getEVDescriptionText)(gen, defender, attackStat, defender.nature)\r\n            : (0, util_2.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\r\n    if (attackSource.boosts[attackStat] === 0 ||\r\n        (isCritical && attackSource.boosts[attackStat] < 0)) {\r\n        attack = attackSource.rawStats[attackStat];\r\n    }\r\n    else if (defender.hasAbility('Unaware')) {\r\n        attack = attackSource.rawStats[attackStat];\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else {\r\n        attack = attackSource.stats[attackStat];\r\n        desc.attackBoost = attackSource.boosts[attackStat];\r\n    }\r\n    if (attacker.hasAbility('Hustle') && move.category === 'Physical') {\r\n        attack = (0, util_2.pokeRound)((attack * 3) / 2);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var atMods = [];\r\n    if (defender.hasAbility('Thick Fat') && move.hasType('Fire', 'Ice')) {\r\n        atMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if ((attacker.hasAbility('Guts') && attacker.status && move.category === 'Physical') ||\r\n        (attacker.curHP() <= attacker.maxHP() / 3 &&\r\n            ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\r\n                (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\r\n                (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\r\n                (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||\r\n        (move.category === 'Special' && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = 'Flash Fire';\r\n    }\r\n    else if ((attacker.hasAbility('Solar Power') &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        move.category === 'Special') ||\r\n        (attacker.named('Cherrim') &&\r\n            attacker.hasAbility('Flower Gift') &&\r\n            field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n            move.category === 'Physical')) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (field.attackerSide.isFlowerGift &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        move.category === 'Physical') {\r\n        atMods.push(6144);\r\n        desc.weather = field.weather;\r\n        desc.isFlowerGiftAttacker = true;\r\n    }\r\n    else if ((attacker.hasAbility('Defeatist') && attacker.curHP() <= attacker.maxHP() / 2) ||\r\n        (attacker.hasAbility('Slow Start') && attacker.abilityOn && move.category === 'Physical')) {\r\n        atMods.push(2048);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Huge Power', 'Pure Power') && move.category === 'Physical') {\r\n        atMods.push(8192);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if ((attacker.hasItem('Thick Club') &&\r\n        attacker.named('Cubone', 'Marowak', 'Marowak-Alola') &&\r\n        move.category === 'Physical') ||\r\n        (attacker.hasItem('Deep Sea Tooth') &&\r\n            attacker.named('Clamperl') &&\r\n            move.category === 'Special') ||\r\n        (attacker.hasItem('Light Ball') && attacker.name.startsWith('Pikachu') && !move.isZ)) {\r\n        atMods.push(8192);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((attacker.hasItem('Soul Dew') &&\r\n        attacker.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega') &&\r\n        move.category === 'Special') ||\r\n        (attacker.hasItem('Choice Band') && move.category === 'Physical') ||\r\n        (attacker.hasItem('Choice Specs') && move.category === 'Special')) {\r\n        atMods.push(6144);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    attack = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((attack * (0, util_2.chainMods)(atMods, 410, 131072)) / 4096)));\r\n    var defense;\r\n    var defenseStat = move.overrideDefensiveStat || move.category === 'Physical' ? 'def' : 'spd';\r\n    var hitsPhysical = defenseStat === 'def';\r\n    desc.defenseEVs = (0, util_2.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\r\n    if (defender.boosts[defenseStat] === 0 ||\r\n        (isCritical && defender.boosts[defenseStat] > 0) ||\r\n        move.ignoreDefensive) {\r\n        defense = defender.rawStats[defenseStat];\r\n    }\r\n    else if (attacker.hasAbility('Unaware')) {\r\n        defense = defender.rawStats[defenseStat];\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else {\r\n        defense = defender.stats[defenseStat];\r\n        desc.defenseBoost = defender.boosts[defenseStat];\r\n    }\r\n    if (field.hasWeather('Sand') && defender.hasType('Rock') && !hitsPhysical) {\r\n        defense = (0, util_2.pokeRound)((defense * 3) / 2);\r\n        desc.weather = field.weather;\r\n    }\r\n    var dfMods = [];\r\n    if (defender.hasAbility('Marvel Scale') && defender.status && hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.named('Cherrim') &&\r\n        defender.hasAbility('Flower Gift') &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        !hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.defenderAbility = defender.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (field.defenderSide.isFlowerGift &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        !hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.weather = field.weather;\r\n        desc.isFlowerGiftDefender = true;\r\n    }\r\n    if (field.hasTerrain('Grassy') && defender.hasAbility('Grass Pelt') && hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if ((!hitsPhysical && defender.hasItem('Soul Dew') &&\r\n        defender.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega')) ||\r\n        (defender.hasItem('Eviolite') && ((_a = gen.species.get((0, util_1.toID)(defender.name))) === null || _a === void 0 ? void 0 : _a.nfe)) ||\r\n        (!hitsPhysical && defender.hasItem('Assault Vest'))) {\r\n        dfMods.push(6144);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    if ((defender.hasItem('Metal Powder') && defender.named('Ditto') && hitsPhysical) ||\r\n        (defender.hasItem('Deep Sea Scale') && defender.named('Clamperl') && !hitsPhysical)) {\r\n        dfMods.push(8192);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    if (defender.hasAbility('Fur Coat') && hitsPhysical) {\r\n        dfMods.push(8192);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    defense = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((defense * (0, util_2.chainMods)(dfMods, 410, 131072)) / 4096)));\r\n    var baseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, attack, defense);\r\n    var isSpread = field.gameType !== 'Singles' &&\r\n        ['allAdjacent', 'allAdjacentFoes'].includes(move.target);\r\n    if (isSpread) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 3072) / 4096);\r\n    }\r\n    if (attacker.hasAbility('Parental Bond (Child)')) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 2048) / 4096);\r\n    }\r\n    if ((field.hasWeather('Sun', 'Harsh Sunshine') && move.hasType('Fire')) ||\r\n        (field.hasWeather('Rain', 'Heavy Rain') && move.hasType('Water'))) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 6144) / 4096);\r\n        desc.weather = field.weather;\r\n    }\r\n    else if ((field.hasWeather('Sun') && move.hasType('Water')) ||\r\n        (field.hasWeather('Rain') && move.hasType('Fire'))) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 2048) / 4096);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (isCritical) {\r\n        baseDamage = Math.floor((0, util_2.OF32)(baseDamage * (gen.num > 5 ? 1.5 : 2)));\r\n        desc.isCritical = isCritical;\r\n    }\r\n    var stabMod = 4096;\r\n    if (attacker.hasType(move.type)) {\r\n        if (attacker.hasAbility('Adaptability')) {\r\n            stabMod = 8192;\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            stabMod = 6144;\r\n        }\r\n    }\r\n    else if (attacker.hasAbility('Protean')) {\r\n        stabMod = 6144;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var applyBurn = attacker.hasStatus('brn') &&\r\n        move.category === 'Physical' &&\r\n        !attacker.hasAbility('Guts') &&\r\n        !(move.named('Facade') && gen.num === 6);\r\n    desc.isBurned = applyBurn;\r\n    var finalMods = [];\r\n    if (field.defenderSide.isReflect && move.category === 'Physical' && !isCritical) {\r\n        finalMods.push(field.gameType !== 'Singles' ? (gen.num > 5 ? 2732 : 2703) : 2048);\r\n        desc.isReflect = true;\r\n    }\r\n    else if (field.defenderSide.isLightScreen && move.category === 'Special' && !isCritical) {\r\n        finalMods.push(field.gameType !== 'Singles' ? (gen.num > 5 ? 2732 : 2703) : 2048);\r\n        desc.isLightScreen = true;\r\n    }\r\n    if (defender.hasAbility('Multiscale') && defender.curHP() === defender.maxHP() &&\r\n        !field.defenderSide.isSR && (!field.defenderSide.spikes || defender.hasType('Flying')) &&\r\n        !attacker.hasAbility('Parental Bond (Child)')) {\r\n        finalMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {\r\n        finalMods.push(8192);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (field.defenderSide.isFriendGuard) {\r\n        finalMods.push(3072);\r\n        desc.isFriendGuard = true;\r\n    }\r\n    if (attacker.hasAbility('Sniper') && isCritical) {\r\n        finalMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (defender.hasAbility('Solid Rock', 'Filter') && typeEffectiveness > 1) {\r\n        finalMods.push(3072);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (attacker.hasItem('Metronome') && move.timesUsedWithMetronome >= 1) {\r\n        var timesUsedWithMetronome = Math.floor(move.timesUsedWithMetronome);\r\n        if (timesUsedWithMetronome <= 4) {\r\n            finalMods.push(4096 + timesUsedWithMetronome * 819);\r\n        }\r\n        else {\r\n            finalMods.push(8192);\r\n        }\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1 && !move.isZ) {\r\n        finalMods.push(4915);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (attacker.hasItem('Life Orb')) {\r\n        finalMods.push(5324);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (move.hasType((0, items_1.getBerryResistType)(defender.item)) &&\r\n        (typeEffectiveness > 1 || move.hasType('Normal')) &&\r\n        !attacker.hasAbility('Unnerve')) {\r\n        finalMods.push(2048);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    if (field.defenderSide.isProtected && move.isZ && attacker.item && attacker.item.includes(' Z')) {\r\n        finalMods.push(1024);\r\n        desc.isProtected = true;\r\n    }\r\n    var finalMod = (0, util_2.chainMods)(finalMods, 41, 131072);\r\n    var childDamage;\r\n    if (attacker.hasAbility('Parental Bond') && move.hits === 1 && !isSpread) {\r\n        var child = attacker.clone();\r\n        child.ability = 'Parental Bond (Child)';\r\n        (0, util_2.checkMultihitBoost)(gen, child, defender, move, field, desc);\r\n        childDamage = calculateBWXY(gen, child, defender, move, field).damage;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var damage = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        damage[i] =\r\n            (0, util_2.getFinalDamage)(baseDamage, i, typeEffectiveness, applyBurn, stabMod, finalMod);\r\n    }\r\n    if (move.dropsStats && (move.timesUsed || 0) > 1) {\r\n        var simpleMultiplier = attacker.hasAbility('Simple') ? 2 : 1;\r\n        desc.moveTurns = \"over \".concat(move.timesUsed, \" turns\");\r\n        var hasWhiteHerb = attacker.hasItem('White Herb');\r\n        var usedWhiteHerb = false;\r\n        var dropCount = attacker.boosts[attackStat];\r\n        var _loop_1 = function (times) {\r\n            var newAttack = (0, util_2.getModifiedStat)(attack, dropCount);\r\n            var damageMultiplier = 0;\r\n            damage = damage.map(function (affectedAmount) {\r\n                if (times) {\r\n                    var newBaseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, newAttack, defense);\r\n                    var newFinalDamage = (0, util_2.getFinalDamage)(newBaseDamage, damageMultiplier, typeEffectiveness, applyBurn, stabMod, finalMod);\r\n                    damageMultiplier++;\r\n                    return affectedAmount + newFinalDamage;\r\n                }\r\n                return affectedAmount;\r\n            });\r\n            if (attacker.hasAbility('Contrary')) {\r\n                dropCount = Math.min(6, dropCount + move.dropsStats);\r\n                desc.attackerAbility = attacker.ability;\r\n            }\r\n            else {\r\n                dropCount = Math.max(-6, dropCount - move.dropsStats * simpleMultiplier);\r\n                if (attacker.hasAbility('Simple')) {\r\n                    desc.attackerAbility = attacker.ability;\r\n                }\r\n            }\r\n            if (hasWhiteHerb && attacker.boosts[attackStat] < 0 && !usedWhiteHerb) {\r\n                dropCount += move.dropsStats * simpleMultiplier;\r\n                usedWhiteHerb = true;\r\n                desc.attackerItem = attacker.item;\r\n            }\r\n        };\r\n        for (var times = 0; times < move.timesUsed; times++) {\r\n            _loop_1(times);\r\n        }\r\n    }\r\n    desc.attackBoost =\r\n        move.named('Foul Play') ? defender.boosts[attackStat] : attacker.boosts[attackStat];\r\n    result.damage = childDamage ? [damage, childDamage] : damage;\r\n    return result;\r\n}\r\nexports.calculateBWXY = calculateBWXY;\r\n//# sourceMappingURL=gen56.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen56.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/gen789.js":
/*!***************************************!*\
  !*** ./calc/dist/mechanics/gen789.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.calculateFinalModsSMSSSV = exports.calculateDfModsSMSSSV = exports.calculateDefenseSMSSSV = exports.calculateAtModsSMSSSV = exports.calculateAttackSMSSSV = exports.calculateBPModsSMSSSV = exports.calculateBasePowerSMSSSV = exports.calculateSMSSSV = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar items_1 = __webpack_require__(/*! ../items */ \"./calc/dist/items.js\");\r\nvar result_1 = __webpack_require__(/*! ../result */ \"./calc/dist/result.js\");\r\nvar util_2 = __webpack_require__(/*! ./util */ \"./calc/dist/mechanics/util.js\");\r\nfunction calculateSMSSSV(gen, attacker, defender, move, field) {\r\n    (0, util_2.checkAirLock)(attacker, field);\r\n    (0, util_2.checkAirLock)(defender, field);\r\n    (0, util_2.checkForecast)(attacker, field.weather);\r\n    (0, util_2.checkForecast)(defender, field.weather);\r\n    (0, util_2.checkItem)(attacker, field.isMagicRoom);\r\n    (0, util_2.checkItem)(defender, field.isMagicRoom);\r\n    (0, util_2.checkWonderRoom)(attacker, field.isWonderRoom);\r\n    (0, util_2.checkWonderRoom)(defender, field.isWonderRoom);\r\n    (0, util_2.checkSeedBoost)(attacker, field);\r\n    (0, util_2.checkSeedBoost)(defender, field);\r\n    (0, util_2.checkDauntlessShield)(attacker, gen);\r\n    (0, util_2.checkDauntlessShield)(defender, gen);\r\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'def', 'spd', 'spe');\r\n    (0, util_2.checkIntimidate)(gen, attacker, defender);\r\n    (0, util_2.checkIntimidate)(gen, defender, attacker);\r\n    (0, util_2.checkDownload)(attacker, defender, field.isWonderRoom);\r\n    (0, util_2.checkDownload)(defender, attacker, field.isWonderRoom);\r\n    (0, util_2.checkIntrepidSword)(attacker, gen);\r\n    (0, util_2.checkIntrepidSword)(defender, gen);\r\n    (0, util_2.computeFinalStats)(gen, attacker, defender, field, 'atk', 'spa');\r\n    (0, util_2.checkInfiltrator)(attacker, field.defenderSide);\r\n    (0, util_2.checkInfiltrator)(defender, field.attackerSide);\r\n    var desc = {\r\n        attackerName: attacker.name,\r\n        attackerTera: attacker.teraType,\r\n        moveName: move.name,\r\n        defenderName: defender.name,\r\n        defenderTera: defender.teraType,\r\n        isDefenderDynamaxed: defender.isDynamaxed,\r\n        isWonderRoom: field.isWonderRoom\r\n    };\r\n    var result = new result_1.Result(gen, attacker, defender, move, field, 0, desc);\r\n    if (move.category === 'Status' && !move.named('Nature Power')) {\r\n        return result;\r\n    }\r\n    var breaksProtect = move.breaksProtect || move.isZ || attacker.isDynamaxed ||\r\n        (attacker.hasAbility('Unseen Fist') && move.flags.contact);\r\n    if (field.defenderSide.isProtected && !breaksProtect) {\r\n        desc.isProtected = true;\r\n        return result;\r\n    }\r\n    var defenderIgnoresAbility = defender.hasAbility('Full Metal Body', 'Neutralizing Gas', 'Prism Armor', 'Shadow Shield');\r\n    var attackerIgnoresAbility = attacker.hasAbility('Mold Breaker', 'Teravolt', 'Turboblaze');\r\n    var moveIgnoresAbility = move.named('G-Max Drum Solo', 'G-Max Fire Ball', 'G-Max Hydrosnipe', 'Light That Burns the Sky', 'Menacing Moonraze Maelstrom', 'Moongeist Beam', 'Photon Geyser', 'Searing Sunraze Smash', 'Sunsteel Strike');\r\n    if (!defenderIgnoresAbility && !defender.hasAbility('Poison Heal')) {\r\n        if (attackerIgnoresAbility) {\r\n            defender.ability = '';\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        if (moveIgnoresAbility) {\r\n            defender.ability = '';\r\n        }\r\n    }\r\n    var isCritical = !defender.hasAbility('Battle Armor', 'Shell Armor') &&\r\n        (move.isCrit || (attacker.hasAbility('Merciless') && defender.hasStatus('psn', 'tox'))) &&\r\n        move.timesUsed === 1;\r\n    var type = move.type;\r\n    if (move.named('Weather Ball')) {\r\n        var holdingUmbrella = attacker.hasItem('Utility Umbrella');\r\n        type =\r\n            field.hasWeather('Sun', 'Harsh Sunshine') && !holdingUmbrella ? 'Fire'\r\n                : field.hasWeather('Rain', 'Heavy Rain') && !holdingUmbrella ? 'Water'\r\n                    : field.hasWeather('Sand') ? 'Rock'\r\n                        : field.hasWeather('Hail', 'Snow') ? 'Ice'\r\n                            : 'Normal';\r\n        desc.weather = field.weather;\r\n        desc.moveType = type;\r\n    }\r\n    else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {\r\n        type = (0, items_1.getItemBoostType)(attacker.item);\r\n    }\r\n    else if (move.named('Techno Blast') && attacker.item && attacker.item.includes('Drive')) {\r\n        type = (0, items_1.getTechnoBlast)(attacker.item);\r\n    }\r\n    else if (move.named('Multi-Attack') && attacker.item && attacker.item.includes('Memory')) {\r\n        type = (0, items_1.getMultiAttack)(attacker.item);\r\n    }\r\n    else if (move.named('Natural Gift') && attacker.item && attacker.item.includes('Berry')) {\r\n        var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\r\n        type = gift.t;\r\n        desc.moveType = type;\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (move.named('Nature Power') ||\r\n        (move.named('Terrain Pulse') && (0, util_2.isGrounded)(attacker, field))) {\r\n        type =\r\n            field.hasTerrain('Electric') ? 'Electric'\r\n                : field.hasTerrain('Grassy') ? 'Grass'\r\n                    : field.hasTerrain('Misty') ? 'Fairy'\r\n                        : field.hasTerrain('Psychic') ? 'Psychic'\r\n                            : 'Normal';\r\n        desc.terrain = field.terrain;\r\n        desc.moveType = type;\r\n    }\r\n    else if (move.named('Revelation Dance')) {\r\n        type = attacker.types[0];\r\n    }\r\n    else if (move.named('Aura Wheel')) {\r\n        if (attacker.named('Morpeko')) {\r\n            type = 'Electric';\r\n        }\r\n        else if (attacker.named('Morpeko-Hangry')) {\r\n            type = 'Dark';\r\n        }\r\n    }\r\n    else if (move.named('Raging Bull')) {\r\n        if (attacker.named('Tauros-Paldea')) {\r\n            type = 'Fighting';\r\n        }\r\n        else if (attacker.named('Tauros-Paldea-Fire')) {\r\n            type = 'Fire';\r\n        }\r\n        else if (attacker.named('Tauros-Paldea-Water')) {\r\n            type = 'Water';\r\n        }\r\n    }\r\n    var hasAteAbilityTypeChange = false;\r\n    var isAerilate = false;\r\n    var isPixilate = false;\r\n    var isRefrigerate = false;\r\n    var isGalvanize = false;\r\n    var isLiquidVoice = false;\r\n    var isNormalize = false;\r\n    var noTypeChange = move.named('Revelation Dance', 'Judgment', 'Nature Power', 'Techno Blast', 'Multi Attack', 'Natural Gift', 'Weather Ball', 'Terrain Pulse') || (move.named('Tera Blast') && attacker.teraType);\r\n    if (!move.isZ && !noTypeChange) {\r\n        var normal = move.hasType('Normal');\r\n        if ((isAerilate = attacker.hasAbility('Aerilate') && normal)) {\r\n            type = 'Flying';\r\n        }\r\n        else if ((isGalvanize = attacker.hasAbility('Galvanize') && normal)) {\r\n            type = 'Electric';\r\n        }\r\n        else if ((isLiquidVoice = attacker.hasAbility('Liquid Voice') && !!move.flags.sound)) {\r\n            type = 'Water';\r\n        }\r\n        else if ((isPixilate = attacker.hasAbility('Pixilate') && normal)) {\r\n            type = 'Fairy';\r\n        }\r\n        else if ((isRefrigerate = attacker.hasAbility('Refrigerate') && normal)) {\r\n            type = 'Ice';\r\n        }\r\n        else if ((isNormalize = attacker.hasAbility('Normalize'))) {\r\n            type = 'Normal';\r\n        }\r\n        if (isGalvanize || isPixilate || isRefrigerate || isAerilate || isNormalize) {\r\n            desc.attackerAbility = attacker.ability;\r\n            hasAteAbilityTypeChange = true;\r\n        }\r\n        else if (isLiquidVoice) {\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n    }\r\n    if (move.named('Tera Blast') && attacker.teraType) {\r\n        type = attacker.teraType;\r\n    }\r\n    move.type = type;\r\n    if ((attacker.hasAbility('Triage') && move.drain) ||\r\n        (attacker.hasAbility('Gale Wings') &&\r\n            move.hasType('Flying') &&\r\n            attacker.curHP() === attacker.maxHP())) {\r\n        move.priority = 1;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\r\n    var isRingTarget = defender.hasItem('Ring Target') && !defender.hasAbility('Klutz');\r\n    var type1Effectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity, isRingTarget);\r\n    var type2Effectiveness = defender.types[1]\r\n        ? (0, util_2.getMoveEffectiveness)(gen, move, defender.types[1], isGhostRevealed, field.isGravity, isRingTarget)\r\n        : 1;\r\n    var typeEffectiveness = type1Effectiveness * type2Effectiveness;\r\n    if (defender.teraType) {\r\n        typeEffectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.teraType, isGhostRevealed, field.isGravity, isRingTarget);\r\n    }\r\n    if (typeEffectiveness === 0 && move.hasType('Ground') &&\r\n        defender.hasItem('Iron Ball') && !defender.hasAbility('Klutz')) {\r\n        typeEffectiveness = 1;\r\n    }\r\n    if (typeEffectiveness === 0 && move.named('Thousand Arrows')) {\r\n        typeEffectiveness = 1;\r\n    }\r\n    if (typeEffectiveness === 0) {\r\n        return result;\r\n    }\r\n    if ((move.named('Sky Drop') &&\r\n        (defender.hasType('Flying') || defender.weightkg >= 200 || field.isGravity)) ||\r\n        (move.named('Synchronoise') && !defender.hasType(attacker.types[0]) &&\r\n            (!attacker.types[1] || !defender.hasType(attacker.types[1]))) ||\r\n        (move.named('Dream Eater') &&\r\n            (!(defender.hasStatus('slp') || defender.hasAbility('Comatose')))) ||\r\n        (move.named('Steel Roller') && !field.terrain) ||\r\n        (move.named('Poltergeist') && !defender.item)) {\r\n        return result;\r\n    }\r\n    if ((field.hasWeather('Harsh Sunshine') && move.hasType('Water')) ||\r\n        (field.hasWeather('Heavy Rain') && move.hasType('Fire'))) {\r\n        desc.weather = field.weather;\r\n        return result;\r\n    }\r\n    if (field.hasWeather('Strong Winds') && defender.hasType('Flying') &&\r\n        gen.types.get((0, util_1.toID)(move.type)).effectiveness['Flying'] > 1) {\r\n        typeEffectiveness /= 2;\r\n        desc.weather = field.weather;\r\n    }\r\n    if ((defender.hasAbility('Wonder Guard') && typeEffectiveness <= 1) ||\r\n        (move.hasType('Grass') && defender.hasAbility('Sap Sipper')) ||\r\n        (move.hasType('Fire') && defender.hasAbility('Flash Fire', 'Well-Baked Body')) ||\r\n        (move.hasType('Water') && defender.hasAbility('Dry Skin', 'Storm Drain', 'Water Absorb')) ||\r\n        (move.hasType('Electric') &&\r\n            defender.hasAbility('Lightning Rod', 'Motor Drive', 'Volt Absorb')) ||\r\n        (move.hasType('Ground') &&\r\n            !field.isGravity && !move.named('Thousand Arrows') &&\r\n            !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||\r\n        (move.flags.bullet && defender.hasAbility('Bulletproof')) ||\r\n        (move.flags.sound && !move.named('Clangorous Soul') && defender.hasAbility('Soundproof')) ||\r\n        (move.priority > 0 && defender.hasAbility('Queenly Majesty', 'Dazzling', 'Armor Tail')) ||\r\n        (move.hasType('Ground') && defender.hasAbility('Earth Eater')) ||\r\n        (move.flags.wind && defender.hasAbility('Wind Rider'))) {\r\n        desc.defenderAbility = defender.ability;\r\n        return result;\r\n    }\r\n    if (move.hasType('Ground') && !move.named('Thousand Arrows') &&\r\n        !field.isGravity && defender.hasItem('Air Balloon')) {\r\n        desc.defenderItem = defender.item;\r\n        return result;\r\n    }\r\n    if (move.priority > 0 && field.hasTerrain('Psychic') && (0, util_2.isGrounded)(defender, field)) {\r\n        desc.terrain = field.terrain;\r\n        return result;\r\n    }\r\n    var weightBasedMove = move.named('Heat Crash', 'Heavy Slam', 'Low Kick', 'Grass Knot');\r\n    if (defender.isDynamaxed && weightBasedMove) {\r\n        return result;\r\n    }\r\n    desc.HPEVs = \"\".concat(defender.ivs.hp, \" HP\");\r\n    var fixedDamage = (0, util_2.handleFixedDamageMoves)(attacker, move, defender);\r\n    if (fixedDamage) {\r\n        if (attacker.hasAbility('Parental Bond')) {\r\n            result.damage = [fixedDamage, fixedDamage];\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            result.damage = fixedDamage;\r\n        }\r\n        return result;\r\n    }\r\n    if (move.named('Final Gambit')) {\r\n        result.damage = attacker.curHP();\r\n        return result;\r\n    }\r\n    if (move.named('Guardian of Alola')) {\r\n        var zLostHP = Math.floor((defender.curHP() * 3) / 4);\r\n        if (field.defenderSide.isProtected && attacker.item && attacker.item.includes(' Z')) {\r\n            zLostHP = Math.ceil(zLostHP / 4 - 0.5);\r\n        }\r\n        result.damage = zLostHP;\r\n        return result;\r\n    }\r\n    if (move.named('Nature\\'s Madness')) {\r\n        var lostHP = field.defenderSide.isProtected ? 0 : Math.floor(defender.curHP() / 2);\r\n        result.damage = lostHP;\r\n        return result;\r\n    }\r\n    if (move.named('Spectral Thief')) {\r\n        var stat = void 0;\r\n        for (stat in defender.boosts) {\r\n            if (defender.boosts[stat]) {\r\n                attacker.boosts[stat] +=\r\n                    attacker.hasAbility('Contrary') ? -defender.boosts[stat] : defender.boosts[stat];\r\n                if (attacker.boosts[stat] > 6)\r\n                    attacker.boosts[stat] = 6;\r\n                if (attacker.boosts[stat] < -6)\r\n                    attacker.boosts[stat] = -6;\r\n                attacker.stats[stat] = (0, util_2.getModifiedStat)(attacker.rawStats[stat], attacker.boosts[stat]);\r\n            }\r\n        }\r\n    }\r\n    if (move.hits > 1) {\r\n        desc.hits = move.hits;\r\n    }\r\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\r\n    var basePower = calculateBasePowerSMSSSV(gen, attacker, defender, move, field, hasAteAbilityTypeChange, desc);\r\n    if (basePower === 0) {\r\n        return result;\r\n    }\r\n    var attack = calculateAttackSMSSSV(gen, attacker, defender, move, field, desc, isCritical);\r\n    var attackSource = move.named('Foul Play') ? defender : attacker;\r\n    if (move.named('Photon Geyser', 'Light That Burns The Sky') ||\r\n        (move.named('Tera Blast') && attackSource.teraType)) {\r\n        move.category = attackSource.stats.atk > attackSource.stats.spa ? 'Physical' : 'Special';\r\n    }\r\n    var attackStat = move.named('Shell Side Arm') &&\r\n        (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical'\r\n        ? 'atk'\r\n        : move.named('Body Press')\r\n            ? 'def'\r\n            : move.category === 'Special'\r\n                ? 'spa'\r\n                : 'atk';\r\n    var defense = calculateDefenseSMSSSV(gen, attacker, defender, move, field, desc, isCritical);\r\n    var hitsPhysical = move.overrideDefensiveStat === 'def' || move.category === 'Physical' ||\r\n        (move.named('Shell Side Arm') && (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical');\r\n    var defenseStat = hitsPhysical ? 'def' : 'spd';\r\n    var baseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, attack, defense);\r\n    var isSpread = field.gameType !== 'Singles' &&\r\n        ['allAdjacent', 'allAdjacentFoes'].includes(move.target);\r\n    if (isSpread) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 3072) / 4096);\r\n    }\r\n    if (attacker.hasAbility('Parental Bond (Child)')) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 1024) / 4096);\r\n    }\r\n    var noWeatherBoost = defender.hasItem('Utility Umbrella');\r\n    if (!noWeatherBoost &&\r\n        ((field.hasWeather('Sun', 'Harsh Sunshine') && move.hasType('Fire')) ||\r\n            (field.hasWeather('Rain', 'Heavy Rain') && move.hasType('Water')))) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 6144) / 4096);\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (!noWeatherBoost &&\r\n        ((field.hasWeather('Sun') && move.hasType('Water')) ||\r\n            (field.hasWeather('Rain') && move.hasType('Fire')))) {\r\n        baseDamage = (0, util_2.pokeRound)((0, util_2.OF32)(baseDamage * 2048) / 4096);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (hasTerrainSeed(defender) &&\r\n        field.hasTerrain(defender.item.substring(0, defender.item.indexOf(' '))) &&\r\n        items_1.SEED_BOOSTED_STAT[defender.item] === defenseStat) {\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    if (isCritical) {\r\n        baseDamage = Math.floor((0, util_2.OF32)(baseDamage * 1.5));\r\n        desc.isCritical = isCritical;\r\n    }\r\n    var stabMod = 4096;\r\n    if (attacker.hasOriginalType(move.type)) {\r\n        stabMod += 2048;\r\n    }\r\n    else if (attacker.hasAbility('Protean', 'Libero') && !attacker.teraType) {\r\n        stabMod += 2048;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var teraType = attacker.teraType;\r\n    if (teraType === move.type) {\r\n        stabMod += 2048;\r\n        desc.attackerTera = teraType;\r\n    }\r\n    if (attacker.hasAbility('Adaptability') && attacker.hasType(move.type)) {\r\n        stabMod += teraType && attacker.hasOriginalType(teraType) ? 1024 : 2048;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var applyBurn = attacker.hasStatus('brn') &&\r\n        move.category === 'Physical' &&\r\n        !attacker.hasAbility('Guts') &&\r\n        !move.named('Facade');\r\n    desc.isBurned = applyBurn;\r\n    var finalMods = calculateFinalModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, typeEffectiveness);\r\n    var protect = false;\r\n    if (field.defenderSide.isProtected &&\r\n        (attacker.isDynamaxed || (move.isZ && attacker.item && attacker.item.includes(' Z')))) {\r\n        protect = true;\r\n        desc.isProtected = true;\r\n    }\r\n    var finalMod = (0, util_2.chainMods)(finalMods, 41, 131072);\r\n    var childDamage;\r\n    if (attacker.hasAbility('Parental Bond') && move.hits === 1 && !isSpread) {\r\n        var child = attacker.clone();\r\n        child.ability = 'Parental Bond (Child)';\r\n        (0, util_2.checkMultihitBoost)(gen, child, defender, move, field, desc);\r\n        childDamage = calculateSMSSSV(gen, child, defender, move, field).damage;\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var damage = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        damage[i] =\r\n            (0, util_2.getFinalDamage)(baseDamage, i, typeEffectiveness, applyBurn, stabMod, finalMod, protect);\r\n    }\r\n    if (move.dropsStats && move.timesUsed > 1) {\r\n        var simpleMultiplier = attacker.hasAbility('Simple') ? 2 : 1;\r\n        desc.moveTurns = \"over \".concat(move.timesUsed, \" turns\");\r\n        var hasWhiteHerb = attacker.hasItem('White Herb');\r\n        var usedWhiteHerb = false;\r\n        var dropCount = attacker.boosts[attackStat];\r\n        var _loop_1 = function (times) {\r\n            var newAttack = (0, util_2.getModifiedStat)(attack, dropCount);\r\n            var damageMultiplier = 0;\r\n            damage = damage.map(function (affectedAmount) {\r\n                if (times) {\r\n                    var newBaseDamage = (0, util_2.getBaseDamage)(attacker.level, basePower, newAttack, defense);\r\n                    var newFinalDamage = (0, util_2.getFinalDamage)(newBaseDamage, damageMultiplier, typeEffectiveness, applyBurn, stabMod, finalMod, protect);\r\n                    damageMultiplier++;\r\n                    return affectedAmount + newFinalDamage;\r\n                }\r\n                return affectedAmount;\r\n            });\r\n            if (attacker.hasAbility('Contrary')) {\r\n                dropCount = Math.min(6, dropCount + move.dropsStats);\r\n                desc.attackerAbility = attacker.ability;\r\n            }\r\n            else {\r\n                dropCount = Math.max(-6, dropCount - move.dropsStats * simpleMultiplier);\r\n                if (attacker.hasAbility('Simple')) {\r\n                    desc.attackerAbility = attacker.ability;\r\n                }\r\n            }\r\n            if (hasWhiteHerb && attacker.boosts[attackStat] < 0 && !usedWhiteHerb) {\r\n                dropCount += move.dropsStats * simpleMultiplier;\r\n                usedWhiteHerb = true;\r\n                desc.attackerItem = attacker.item;\r\n            }\r\n        };\r\n        for (var times = 0; times < move.timesUsed; times++) {\r\n            _loop_1(times);\r\n        }\r\n    }\r\n    desc.attackBoost =\r\n        move.named('Foul Play') ? defender.boosts[attackStat] : attacker.boosts[attackStat];\r\n    result.damage = childDamage ? [damage, childDamage] : damage;\r\n    return result;\r\n}\r\nexports.calculateSMSSSV = calculateSMSSSV;\r\nfunction calculateBasePowerSMSSSV(gen, attacker, defender, move, field, hasAteAbilityTypeChange, desc) {\r\n    var _a;\r\n    var turnOrder = attacker.stats.spe > defender.stats.spe ? 'first' : 'last';\r\n    var basePower;\r\n    switch (move.name) {\r\n        case 'Payback':\r\n            basePower = move.bp * (turnOrder === 'last' ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Bolt Beak':\r\n        case 'Fishious Rend':\r\n            basePower = move.bp * (turnOrder !== 'last' ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Pursuit':\r\n            var switching = field.defenderSide.isSwitching === 'out';\r\n            basePower = move.bp * (switching ? 2 : 1);\r\n            if (switching)\r\n                desc.isSwitching = 'out';\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Electro Ball':\r\n            var r = Math.floor(attacker.stats.spe / defender.stats.spe);\r\n            basePower = r >= 4 ? 150 : r >= 3 ? 120 : r >= 2 ? 80 : r >= 1 ? 60 : 40;\r\n            if (defender.stats.spe === 0)\r\n                basePower = 40;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Gyro Ball':\r\n            basePower = Math.min(150, Math.floor((25 * defender.stats.spe) / attacker.stats.spe) + 1);\r\n            if (attacker.stats.spe === 0)\r\n                basePower = 1;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Punishment':\r\n            basePower = Math.min(200, 60 + 20 * (0, util_2.countBoosts)(gen, defender.boosts));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Low Kick':\r\n        case 'Grass Knot':\r\n            var w = defender.weightkg * (0, util_2.getWeightFactor)(defender);\r\n            basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Hex':\r\n        case 'Infernal Parade':\r\n            basePower = move.bp * (defender.status || defender.hasAbility('Comatose') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Barb Barrage':\r\n            basePower = move.bp * (defender.hasStatus('psn', 'tox') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Heavy Slam':\r\n        case 'Heat Crash':\r\n            var wr = (attacker.weightkg * (0, util_2.getWeightFactor)(attacker)) /\r\n                (defender.weightkg * (0, util_2.getWeightFactor)(defender));\r\n            basePower = wr >= 5 ? 120 : wr >= 4 ? 100 : wr >= 3 ? 80 : wr >= 2 ? 60 : 40;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Stored Power':\r\n        case 'Power Trip':\r\n            basePower = 20 + 20 * (0, util_2.countBoosts)(gen, attacker.boosts);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Acrobatics':\r\n            basePower = move.bp * (attacker.hasItem('Flying Gem') || !attacker.item ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Assurance':\r\n            basePower = move.bp * (defender.hasAbility('Parental Bond (Child)') ? 2 : 1);\r\n            break;\r\n        case 'Wake-Up Slap':\r\n            basePower = move.bp * (defender.hasStatus('slp') || defender.hasAbility('Comatose') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Smelling Salts':\r\n            basePower = move.bp * (defender.hasStatus('par') ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Weather Ball':\r\n            basePower = move.bp * (field.weather && !field.hasWeather('Strong Winds') ? 2 : 1);\r\n            if (field.hasWeather('Sun', 'Harsh Sunshine', 'Rain', 'Heavy Rain') &&\r\n                attacker.hasItem('Utility Umbrella'))\r\n                basePower = move.bp;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Terrain Pulse':\r\n            basePower = move.bp * ((0, util_2.isGrounded)(attacker, field) && field.terrain ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Rising Voltage':\r\n            basePower = move.bp * (((0, util_2.isGrounded)(defender, field) && field.hasTerrain('Electric')) ? 2 : 1);\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Fling':\r\n            basePower = (0, items_1.getFlingPower)(attacker.item);\r\n            desc.moveBP = basePower;\r\n            desc.attackerItem = attacker.item;\r\n            break;\r\n        case 'Dragon Energy':\r\n        case 'Eruption':\r\n        case 'Water Spout':\r\n            basePower = Math.max(1, Math.floor((150 * attacker.curHP()) / attacker.maxHP()));\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Flail':\r\n        case 'Reversal':\r\n            var p = Math.floor((48 * attacker.curHP()) / attacker.maxHP());\r\n            basePower = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Natural Gift':\r\n            if ((_a = attacker.item) === null || _a === void 0 ? void 0 : _a.includes('Berry')) {\r\n                var gift = (0, items_1.getNaturalGift)(gen, attacker.item);\r\n                basePower = gift.p;\r\n                desc.attackerItem = attacker.item;\r\n                desc.moveBP = move.bp;\r\n            }\r\n            else {\r\n                basePower = move.bp;\r\n            }\r\n            break;\r\n        case 'Nature Power':\r\n            move.category = 'Special';\r\n            move.secondaries = true;\r\n            switch (field.terrain) {\r\n                case 'Electric':\r\n                    basePower = 90;\r\n                    desc.moveName = 'Thunderbolt';\r\n                    break;\r\n                case 'Grassy':\r\n                    basePower = 90;\r\n                    desc.moveName = 'Energy Ball';\r\n                    break;\r\n                case 'Misty':\r\n                    basePower = 95;\r\n                    desc.moveName = 'Moonblast';\r\n                    break;\r\n                case 'Psychic':\r\n                    basePower = 90;\r\n                    desc.moveName = 'Psychic';\r\n                    break;\r\n                default:\r\n                    basePower = 80;\r\n                    desc.moveName = 'Tri Attack';\r\n            }\r\n            break;\r\n        case 'Water Shuriken':\r\n            basePower = attacker.named('Greninja-Ash') && attacker.hasAbility('Battle Bond') ? 20 : 15;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Triple Axel':\r\n            basePower = move.hits === 2 ? 30 : move.hits === 3 ? 40 : 20;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Triple Kick':\r\n            basePower = move.hits === 2 ? 15 : move.hits === 3 ? 30 : 10;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        case 'Crush Grip':\r\n        case 'Wring Out':\r\n            basePower = 100 * Math.floor((defender.curHP() * 4096) / defender.maxHP());\r\n            basePower = Math.floor(Math.floor((120 * basePower + 2048 - 1) / 4096) / 100) || 1;\r\n            desc.moveBP = basePower;\r\n            break;\r\n        default:\r\n            basePower = move.bp;\r\n    }\r\n    if (basePower === 0) {\r\n        return 0;\r\n    }\r\n    if (move.named('Breakneck Blitz', 'Bloom Doom', 'Inferno Overdrive', 'Hydro Vortex', 'Gigavolt Havoc', 'Subzero Slammer', 'Supersonic Skystrike', 'Savage Spin-Out', 'Acid Downpour', 'Tectonic Rage', 'Continental Crush', 'All-Out Pummeling', 'Shattered Psyche', 'Never-Ending Nightmare', 'Devastating Drake', 'Black Hole Eclipse', 'Corkscrew Crash', 'Twinkle Tackle')) {\r\n        desc.moveBP = move.bp;\r\n    }\r\n    var bpMods = calculateBPModsSMSSSV(gen, attacker, defender, move, field, desc, basePower, hasAteAbilityTypeChange, turnOrder);\r\n    basePower = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((basePower * (0, util_2.chainMods)(bpMods, 41, 2097152)) / 4096)));\r\n    if (attacker.teraType && move.type === attacker.teraType &&\r\n        attacker.hasType(attacker.teraType) && move.hits === 1 &&\r\n        move.priority <= 0 && move.bp > 0 && !move.named('Dragon Energy', 'Eruption', 'Water Spout') &&\r\n        basePower < 60 && gen.num >= 9) {\r\n        basePower = 60;\r\n        desc.moveBP = 60;\r\n    }\r\n    return basePower;\r\n}\r\nexports.calculateBasePowerSMSSSV = calculateBasePowerSMSSSV;\r\nfunction calculateBPModsSMSSSV(gen, attacker, defender, move, field, desc, basePower, hasAteAbilityTypeChange, turnOrder) {\r\n    var bpMods = [];\r\n    var resistedKnockOffDamage = !defender.item ||\r\n        (defender.named('Dialga-Origin') && defender.hasItem('Adamant Crystal')) ||\r\n        (defender.named('Palkia-Origin') && defender.hasItem('Lustrous Globe')) ||\r\n        (defender.name.includes('Giratina-Origin') && defender.item.includes('Griseous')) ||\r\n        (defender.name.includes('Arceus') && defender.item.includes('Plate')) ||\r\n        (defender.name.includes('Genesect') && defender.item.includes('Drive')) ||\r\n        (defender.named('Groudon', 'Groudon-Primal') && defender.hasItem('Red Orb')) ||\r\n        (defender.named('Kyogre', 'Kyogre-Primal') && defender.hasItem('Blue Orb')) ||\r\n        (defender.name.includes('Silvally') && defender.item.includes('Memory')) ||\r\n        defender.item.includes(' Z') ||\r\n        (defender.named('Zacian') && defender.hasItem('Rusted Sword')) ||\r\n        (defender.named('Zamazenta') && defender.hasItem('Rusted Shield') ||\r\n            (defender.named('Venomicon-Epilogue') && defender.hasItem('Vile Vial')));\r\n    if (!resistedKnockOffDamage && defender.item) {\r\n        var item = gen.items.get((0, util_1.toID)(defender.item));\r\n        resistedKnockOffDamage = !!item.megaEvolves && defender.name.includes(item.megaEvolves);\r\n    }\r\n    if ((move.named('Facade') && attacker.hasStatus('brn', 'par', 'psn', 'tox')) ||\r\n        (move.named('Brine') && defender.curHP() <= defender.maxHP() / 2) ||\r\n        (move.named('Venoshock') && defender.hasStatus('psn', 'tox')) ||\r\n        (move.named('Lash Out') && ((0, util_2.countBoosts)(gen, attacker.boosts) < 0))) {\r\n        bpMods.push(8192);\r\n        desc.moveBP = basePower * 2;\r\n    }\r\n    else if (move.named('Expanding Force') && (0, util_2.isGrounded)(attacker, field) && field.hasTerrain('Psychic')) {\r\n        move.target = 'allAdjacentFoes';\r\n        bpMods.push(6144);\r\n        desc.moveBP = basePower * 1.5;\r\n    }\r\n    else if ((move.named('Knock Off') && !resistedKnockOffDamage) ||\r\n        (move.named('Misty Explosion') && (0, util_2.isGrounded)(attacker, field) && field.hasTerrain('Misty')) ||\r\n        (move.named('Grav Apple') && field.isGravity)) {\r\n        bpMods.push(6144);\r\n        desc.moveBP = basePower * 1.5;\r\n    }\r\n    else if (move.named('Solar Beam', 'Solar Blade') &&\r\n        field.hasWeather('Rain', 'Heavy Rain', 'Sand', 'Hail', 'Snow')) {\r\n        bpMods.push(2048);\r\n        desc.moveBP = basePower / 2;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (move.named('Collision Course', 'Electro Drift')) {\r\n        var isGhostRevealed = attacker.hasAbility('Scrappy') || field.defenderSide.isForesight;\r\n        var isRingTarget = defender.hasItem('Ring Target') && !defender.hasAbility('Klutz');\r\n        var type1Effectiveness = (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity, isRingTarget);\r\n        var type2Effectiveness = defender.types[1] ? (0, util_2.getMoveEffectiveness)(gen, move, defender.types[0], isGhostRevealed, field.isGravity, isRingTarget) : 1;\r\n        if (type1Effectiveness * type2Effectiveness >= 2) {\r\n            bpMods.push(5461);\r\n            desc.moveBP = basePower * (5461 / 4096);\r\n        }\r\n    }\r\n    if (field.attackerSide.isHelpingHand) {\r\n        bpMods.push(6144);\r\n        desc.isHelpingHand = true;\r\n    }\r\n    var terrainMultiplier = 6144;\r\n    if ((0, util_2.isGrounded)(attacker, field)) {\r\n        if ((field.hasTerrain('Electric') && move.hasType('Electric')) ||\r\n            (field.hasTerrain('Grassy') && move.hasType('Grass')) ||\r\n            (field.hasTerrain('Psychic') && move.hasType('Psychic'))) {\r\n            bpMods.push(terrainMultiplier);\r\n            desc.terrain = field.terrain;\r\n        }\r\n    }\r\n    if ((0, util_2.isGrounded)(defender, field)) {\r\n        if ((field.hasTerrain('Misty') && move.hasType('Dragon')) ||\r\n            (field.hasTerrain('Grassy') && move.named('Bulldoze', 'Earthquake'))) {\r\n            bpMods.push(2048);\r\n            desc.terrain = field.terrain;\r\n        }\r\n    }\r\n    if ((attacker.hasAbility('Technician') && basePower <= 60) ||\r\n        (attacker.hasAbility('Flare Boost') &&\r\n            attacker.hasStatus('brn') && move.category === 'Special') ||\r\n        (attacker.hasAbility('Toxic Boost') &&\r\n            attacker.hasStatus('psn', 'tox') && move.category === 'Physical') ||\r\n        (attacker.hasAbility('Mega Launcher') && move.flags.pulse) ||\r\n        (attacker.hasAbility('Strong Jaw') && move.flags.bite) ||\r\n        (attacker.hasAbility('Steely Spirit') && move.hasType('Steel')) ||\r\n        (attacker.hasAbility('Sharpness') && move.flags.slicing)) {\r\n        bpMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var aura = \"\".concat(move.type, \" Aura\");\r\n    var isAttackerAura = attacker.hasAbility(aura);\r\n    var isDefenderAura = defender.hasAbility(aura);\r\n    var isUserAuraBreak = attacker.hasAbility('Aura Break') || defender.hasAbility('Aura Break');\r\n    var isFieldAuraBreak = field.isAuraBreak;\r\n    var isFieldFairyAura = field.isFairyAura && move.type === 'Fairy';\r\n    var isFieldDarkAura = field.isDarkAura && move.type === 'Dark';\r\n    var auraActive = isAttackerAura || isDefenderAura || isFieldFairyAura || isFieldDarkAura;\r\n    var auraBreak = isFieldAuraBreak || isUserAuraBreak;\r\n    if (auraActive) {\r\n        if (auraBreak) {\r\n            bpMods.push(3072);\r\n            desc.attackerAbility = attacker.ability;\r\n            desc.defenderAbility = defender.ability;\r\n        }\r\n        else {\r\n            bpMods.push(5448);\r\n            if (isAttackerAura)\r\n                desc.attackerAbility = attacker.ability;\r\n            if (isDefenderAura)\r\n                desc.defenderAbility = defender.ability;\r\n        }\r\n    }\r\n    if ((attacker.hasAbility('Sheer Force') &&\r\n        (move.secondaries || move.named('Jet Punch', 'Order Up')) && !move.isMax) ||\r\n        (attacker.hasAbility('Sand Force') &&\r\n            field.hasWeather('Sand') && move.hasType('Rock', 'Ground', 'Steel')) ||\r\n        (attacker.hasAbility('Analytic') &&\r\n            (turnOrder !== 'first' || field.defenderSide.isSwitching === 'out')) ||\r\n        (attacker.hasAbility('Tough Claws') && move.flags.contact) ||\r\n        (attacker.hasAbility('Punk Rock') && move.flags.sound)) {\r\n        bpMods.push(5325);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (field.attackerSide.isBattery && move.category === 'Special') {\r\n        bpMods.push(5325);\r\n        desc.isBattery = true;\r\n    }\r\n    if (field.attackerSide.isPowerSpot) {\r\n        bpMods.push(5325);\r\n        desc.isPowerSpot = true;\r\n    }\r\n    if (attacker.hasAbility('Rivalry') && ![attacker.gender, defender.gender].includes('N')) {\r\n        if (attacker.gender === defender.gender) {\r\n            bpMods.push(5120);\r\n            desc.rivalry = 'buffed';\r\n        }\r\n        else {\r\n            bpMods.push(3072);\r\n            desc.rivalry = 'nerfed';\r\n        }\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (!move.isMax && hasAteAbilityTypeChange) {\r\n        bpMods.push(4915);\r\n    }\r\n    if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||\r\n        (attacker.hasAbility('Iron Fist') && move.flags.punch)) {\r\n        bpMods.push(4915);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (attacker.hasItem('Punching Glove') && move.flags.punch) {\r\n        bpMods.push(4506);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (defender.hasAbility('Heatproof') && move.hasType('Fire')) {\r\n        bpMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.hasAbility('Dry Skin') && move.hasType('Fire')) {\r\n        bpMods.push(5120);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (attacker.hasAbility('Supreme Overlord') && attacker.alliesFainted) {\r\n        var powMod = [4096, 4506, 4915, 5325, 5734, 6144];\r\n        bpMods.push(powMod[Math.min(5, attacker.alliesFainted)]);\r\n        desc.attackerAbility = attacker.ability;\r\n        desc.alliesFainted = attacker.alliesFainted;\r\n    }\r\n    if (attacker.hasItem(\"\".concat(move.type, \" Gem\"))) {\r\n        bpMods.push(6144);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (((attacker.hasItem('Adamant Crystal') && attacker.named('Dialga-Origin')) ||\r\n        (attacker.hasItem('Adamant Orb') && attacker.named('Dialga')) &&\r\n            move.hasType('Steel', 'Dragon')) ||\r\n        ((attacker.hasItem('Lustrous Orb') &&\r\n            attacker.named('Palkia')) ||\r\n            (attacker.hasItem('Lustrous Globe') && attacker.named('Palkia-Origin')) &&\r\n                move.hasType('Water', 'Dragon')) ||\r\n        ((attacker.hasItem('Griseous Orb') || attacker.hasItem('Griseous Core')) &&\r\n            (attacker.named('Giratina-Origin') || attacker.named('Giratina')) &&\r\n            move.hasType('Ghost', 'Dragon')) ||\r\n        (attacker.hasItem('Vile Vial') &&\r\n            attacker.named('Venomicon-Epilogue') &&\r\n            move.hasType('Poison', 'Flying')) ||\r\n        attacker.item && move.hasType((0, items_1.getItemBoostType)(attacker.item))) {\r\n        bpMods.push(4915);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if ((attacker.hasItem('Muscle Band') && move.category === 'Physical') ||\r\n        (attacker.hasItem('Wise Glasses') && move.category === 'Special')) {\r\n        bpMods.push(4505);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    return bpMods;\r\n}\r\nexports.calculateBPModsSMSSSV = calculateBPModsSMSSSV;\r\nfunction calculateAttackSMSSSV(gen, attacker, defender, move, field, desc, isCritical) {\r\n    if (isCritical === void 0) { isCritical = false; }\r\n    var attack;\r\n    var attackSource = move.named('Foul Play') ? defender : attacker;\r\n    if (move.named('Photon Geyser', 'Light That Burns The Sky') ||\r\n        (move.named('Tera Blast') && attackSource.teraType)) {\r\n        move.category = attackSource.stats.atk > attackSource.stats.spa ? 'Physical' : 'Special';\r\n    }\r\n    var attackStat = move.named('Shell Side Arm') &&\r\n        (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical'\r\n        ? 'atk'\r\n        : move.named('Body Press')\r\n            ? 'def'\r\n            : move.category === 'Special'\r\n                ? 'spa'\r\n                : 'atk';\r\n    desc.attackEVs =\r\n        move.named('Foul Play')\r\n            ? (0, util_2.getEVDescriptionText)(gen, defender, attackStat, defender.nature)\r\n            : (0, util_2.getEVDescriptionText)(gen, attacker, attackStat, attacker.nature);\r\n    if (attackSource.boosts[attackStat] === 0 ||\r\n        (isCritical && attackSource.boosts[attackStat] < 0)) {\r\n        attack = attackSource.rawStats[attackStat];\r\n    }\r\n    else if (defender.hasAbility('Unaware')) {\r\n        attack = attackSource.rawStats[attackStat];\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else {\r\n        attack = attackSource.stats[attackStat];\r\n        desc.attackBoost = attackSource.boosts[attackStat];\r\n    }\r\n    if (attacker.hasAbility('Hustle') && move.category === 'Physical') {\r\n        attack = (0, util_2.pokeRound)((attack * 3) / 2);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    var atMods = calculateAtModsSMSSSV(gen, attacker, defender, move, field, desc);\r\n    attack = (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((attack * (0, util_2.chainMods)(atMods, 410, 131072)) / 4096)));\r\n    return attack;\r\n}\r\nexports.calculateAttackSMSSSV = calculateAttackSMSSSV;\r\nfunction calculateAtModsSMSSSV(gen, attacker, defender, move, field, desc) {\r\n    var atMods = [];\r\n    if ((attacker.hasAbility('Slow Start') && attacker.abilityOn &&\r\n        (move.category === 'Physical' || (move.category === 'Special' && move.isZ))) ||\r\n        (attacker.hasAbility('Defeatist') && attacker.curHP() <= attacker.maxHP() / 2)) {\r\n        atMods.push(2048);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if ((attacker.hasAbility('Solar Power') &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        move.category === 'Special') ||\r\n        (attacker.named('Cherrim') &&\r\n            attacker.hasAbility('Flower Gift') &&\r\n            field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n            move.category === 'Physical') ||\r\n        (attacker.hasAbility('Gorilla Tactics') && move.category === 'Physical' &&\r\n            !attacker.isDynamaxed)) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (field.attackerSide.isFlowerGift &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        move.category === 'Physical') {\r\n        atMods.push(6144);\r\n        desc.weather = field.weather;\r\n        desc.isFlowerGiftAttacker = true;\r\n    }\r\n    else if ((attacker.hasAbility('Guts') && attacker.status && move.category === 'Physical') ||\r\n        (attacker.curHP() <= attacker.maxHP() / 3 &&\r\n            ((attacker.hasAbility('Overgrow') && move.hasType('Grass')) ||\r\n                (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||\r\n                (attacker.hasAbility('Torrent') && move.hasType('Water')) ||\r\n                (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||\r\n        (move.category === 'Special' && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Flash Fire') && attacker.abilityOn && move.hasType('Fire')) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = 'Flash Fire';\r\n    }\r\n    else if ((attacker.hasAbility('Steelworker') && move.hasType('Steel')) ||\r\n        (attacker.hasAbility('Dragon\\'s Maw') && move.hasType('Dragon')) ||\r\n        (attacker.hasAbility('Transistor') && move.hasType('Electric')) ||\r\n        (attacker.hasAbility('Rocky Payload') && move.hasType('Rock'))) {\r\n        atMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Stakeout') && attacker.abilityOn) {\r\n        atMods.push(8192);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if ((attacker.hasAbility('Water Bubble') && move.hasType('Water')) ||\r\n        (attacker.hasAbility('Huge Power', 'Pure Power') && move.category === 'Physical')) {\r\n        atMods.push(8192);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if ((defender.hasAbility('Thick Fat') && move.hasType('Fire', 'Ice')) ||\r\n        (defender.hasAbility('Water Bubble') && move.hasType('Fire')) ||\r\n        (defender.hasAbility('Purifying Salt') && move.hasType('Ghost'))) {\r\n        atMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    var isTabletsOfRuinActive = defender.hasAbility('Tablets of Ruin') || field.isTabletsOfRuin;\r\n    var isVesselOfRuinActive = defender.hasAbility('Vessel of Ruin') || field.isVesselOfRuin;\r\n    if ((isTabletsOfRuinActive && move.category === 'Physical') ||\r\n        (isVesselOfRuinActive && move.category === 'Special')) {\r\n        if (defender.hasAbility('Tablets of Ruin') || defender.hasAbility('Vessel of Ruin')) {\r\n            desc.defenderAbility = defender.ability;\r\n        }\r\n        else {\r\n            desc[move.category === 'Special' ? 'isVesselOfRuin' : 'isTabletsOfRuin'] = true;\r\n        }\r\n        atMods.push(3072);\r\n    }\r\n    if ((attacker.hasAbility('Protosynthesis') &&\r\n        (field.hasWeather('Sun') || attacker.hasItem('Booster Energy'))) ||\r\n        (attacker.hasAbility('Quark Drive') &&\r\n            (field.hasTerrain('Electric') || attacker.hasItem('Booster Energy')))) {\r\n        if ((move.category === 'Physical' &&\r\n            (0, util_2.getMostProficientStat)(attacker) === 'atk') ||\r\n            (move.category === 'Special' && (0, util_2.getMostProficientStat)(attacker) === 'spa')) {\r\n            atMods.push(5325);\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n    }\r\n    if ((attacker.hasAbility('Hadron Engine') && move.category === 'Special' &&\r\n        field.hasTerrain('Electric') && (0, util_2.isGrounded)(attacker, field)) ||\r\n        (attacker.hasAbility('Orichalcum Pulse') && move.category === 'Physical' &&\r\n            field.hasWeather('Sun', 'Harsh Sunshine') && !attacker.hasItem('Utility Umbrella'))) {\r\n        atMods.push(5461);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if ((attacker.hasItem('Thick Club') &&\r\n        attacker.named('Cubone', 'Marowak', 'Marowak-Alola', 'Marowak-Alola-Totem') &&\r\n        move.category === 'Physical') ||\r\n        (attacker.hasItem('Deep Sea Tooth') &&\r\n            attacker.named('Clamperl') &&\r\n            move.category === 'Special') ||\r\n        (attacker.hasItem('Light Ball') && attacker.name.includes('Pikachu') && !move.isZ)) {\r\n        atMods.push(8192);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (!move.isZ && !move.isMax &&\r\n        ((attacker.hasItem('Choice Band') && move.category === 'Physical') ||\r\n            (attacker.hasItem('Choice Specs') && move.category === 'Special') ||\r\n            attacker.hasItem(\"Soul Dew\") && move.category === 'Special' && attacker.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega'))) {\r\n        atMods.push(6144);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    return atMods;\r\n}\r\nexports.calculateAtModsSMSSSV = calculateAtModsSMSSSV;\r\nfunction calculateDefenseSMSSSV(gen, attacker, defender, move, field, desc, isCritical) {\r\n    if (isCritical === void 0) { isCritical = false; }\r\n    var defense;\r\n    var hitsPhysical = move.overrideDefensiveStat === 'def' || move.category === 'Physical' ||\r\n        (move.named('Shell Side Arm') && (0, util_2.getShellSideArmCategory)(attacker, defender) === 'Physical');\r\n    var defenseStat = hitsPhysical ? 'def' : 'spd';\r\n    desc.defenseEVs = (0, util_2.getEVDescriptionText)(gen, defender, defenseStat, defender.nature);\r\n    if (defender.boosts[defenseStat] === 0 ||\r\n        (isCritical && defender.boosts[defenseStat] > 0) ||\r\n        move.ignoreDefensive) {\r\n        defense = defender.rawStats[defenseStat];\r\n    }\r\n    else if (attacker.hasAbility('Unaware')) {\r\n        defense = defender.rawStats[defenseStat];\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else {\r\n        defense = defender.stats[defenseStat];\r\n        desc.defenseBoost = defender.boosts[defenseStat];\r\n    }\r\n    if (field.hasWeather('Sand') && defender.hasType('Rock') && !hitsPhysical) {\r\n        defense = (0, util_2.pokeRound)((defense * 3) / 2);\r\n        desc.weather = field.weather;\r\n    }\r\n    if (field.hasWeather('Snow') && defender.hasType('Ice') && hitsPhysical) {\r\n        defense = (0, util_2.pokeRound)((defense * 3) / 2);\r\n        desc.weather = field.weather;\r\n    }\r\n    var dfMods = calculateDfModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, hitsPhysical);\r\n    return (0, util_2.OF16)(Math.max(1, (0, util_2.pokeRound)((defense * (0, util_2.chainMods)(dfMods, 410, 131072)) / 4096)));\r\n}\r\nexports.calculateDefenseSMSSSV = calculateDefenseSMSSSV;\r\nfunction calculateDfModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, hitsPhysical) {\r\n    var _a;\r\n    if (isCritical === void 0) { isCritical = false; }\r\n    if (hitsPhysical === void 0) { hitsPhysical = false; }\r\n    var dfMods = [];\r\n    if (defender.hasAbility('Marvel Scale') && defender.status && hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.named('Cherrim') &&\r\n        defender.hasAbility('Flower Gift') &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        !hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.defenderAbility = defender.ability;\r\n        desc.weather = field.weather;\r\n    }\r\n    else if (field.defenderSide.isFlowerGift &&\r\n        field.hasWeather('Sun', 'Harsh Sunshine') &&\r\n        !hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.weather = field.weather;\r\n        desc.isFlowerGiftDefender = true;\r\n    }\r\n    else if (defender.hasAbility('Grass Pelt') &&\r\n        field.hasTerrain('Grassy') &&\r\n        hitsPhysical) {\r\n        dfMods.push(6144);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if (defender.hasAbility('Fur Coat') && hitsPhysical) {\r\n        dfMods.push(8192);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    var isSwordOfRuinActive = attacker.hasAbility('Sword of Ruin') || field.isSwordOfRuin;\r\n    var isBeadsOfRuinActive = attacker.hasAbility('Beads of Ruin') || field.isBeadsOfRuin;\r\n    if ((isSwordOfRuinActive && hitsPhysical) ||\r\n        (isBeadsOfRuinActive && !hitsPhysical)) {\r\n        if (attacker.hasAbility('Sword of Ruin') || attacker.hasAbility('Beads of Ruin')) {\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            desc[hitsPhysical ? 'isSwordOfRuin' : 'isBeadsOfRuin'] = true;\r\n        }\r\n        dfMods.push(3072);\r\n    }\r\n    if (move.named('Explosion', 'Self-Destruct', 'Misty Explosion')) {\r\n        dfMods.push(2048);\r\n    }\r\n    if ((defender.hasAbility('Protosynthesis') &&\r\n        (field.hasWeather('Sun') || attacker.hasItem('Booster Energy'))) ||\r\n        (defender.hasAbility('Quark Drive') &&\r\n            (field.hasTerrain('Electric') || attacker.hasItem('Booster Energy')))) {\r\n        if ((hitsPhysical && (0, util_2.getMostProficientStat)(defender) === 'def') ||\r\n            (!hitsPhysical && (0, util_2.getMostProficientStat)(defender) === 'spd')) {\r\n            desc.defenderAbility = defender.ability;\r\n            dfMods.push(5324);\r\n        }\r\n    }\r\n    if ((defender.hasItem('Eviolite') && ((_a = gen.species.get((0, util_1.toID)(defender.name))) === null || _a === void 0 ? void 0 : _a.nfe)) ||\r\n        (!hitsPhysical && defender.hasItem('Assault Vest')) ||\r\n        (defender.hasItem(\"Soul Dew\") && move.category === 'Special' && defender.named('Latios', 'Latias', 'Latios-Mega', 'Latias-Mega'))) {\r\n        dfMods.push(6144);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    else if ((defender.hasItem('Metal Powder') && defender.named('Ditto') && hitsPhysical) ||\r\n        (defender.hasItem('Deep Sea Scale') && defender.named('Clamperl') && !hitsPhysical)) {\r\n        dfMods.push(8192);\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    return dfMods;\r\n}\r\nexports.calculateDfModsSMSSSV = calculateDfModsSMSSSV;\r\nfunction calculateFinalModsSMSSSV(gen, attacker, defender, move, field, desc, isCritical, typeEffectiveness) {\r\n    if (isCritical === void 0) { isCritical = false; }\r\n    var finalMods = [];\r\n    if (field.defenderSide.isReflect && move.category === 'Physical' &&\r\n        !isCritical && !field.defenderSide.isAuroraVeil) {\r\n        finalMods.push(field.gameType !== 'Singles' ? 2732 : 2048);\r\n        desc.isReflect = true;\r\n    }\r\n    else if (field.defenderSide.isLightScreen && move.category === 'Special' &&\r\n        !isCritical && !field.defenderSide.isAuroraVeil) {\r\n        finalMods.push(field.gameType !== 'Singles' ? 2732 : 2048);\r\n        desc.isLightScreen = true;\r\n    }\r\n    if (field.defenderSide.isAuroraVeil && !isCritical) {\r\n        finalMods.push(field.gameType !== 'Singles' ? 2732 : 2048);\r\n        desc.isAuroraVeil = true;\r\n    }\r\n    if (attacker.hasAbility('Neuroforce') && typeEffectiveness > 1) {\r\n        finalMods.push(5120);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Sniper') && isCritical) {\r\n        finalMods.push(6144);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    else if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {\r\n        finalMods.push(8192);\r\n        desc.attackerAbility = attacker.ability;\r\n    }\r\n    if (defender.isDynamaxed && move.named('Dynamax Cannon', 'Behemoth Blade', 'Behemoth Bash')) {\r\n        finalMods.push(8192);\r\n    }\r\n    if (defender.hasAbility('Multiscale', 'Shadow Shield') &&\r\n        defender.curHP() === defender.maxHP() &&\r\n        !field.defenderSide.isSR && (!field.defenderSide.spikes || defender.hasType('Flying')) &&\r\n        !attacker.hasAbility('Parental Bond (Child)')) {\r\n        finalMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (defender.hasAbility('Fluffy') && move.flags.contact && !attacker.hasAbility('Long Reach')) {\r\n        finalMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    else if ((defender.hasAbility('Punk Rock') && move.flags.sound) ||\r\n        (defender.hasAbility('Ice Scales') && move.category === 'Special')) {\r\n        finalMods.push(2048);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (defender.hasAbility('Solid Rock', 'Filter', 'Prism Armor') && typeEffectiveness > 1) {\r\n        finalMods.push(3072);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (field.defenderSide.isFriendGuard) {\r\n        finalMods.push(3072);\r\n        desc.isFriendGuard = true;\r\n    }\r\n    if (defender.hasAbility('Fluffy') && move.hasType('Fire')) {\r\n        finalMods.push(8192);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1 && !move.isZ) {\r\n        finalMods.push(4915);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (attacker.hasItem('Life Orb')) {\r\n        finalMods.push(5324);\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    else if (attacker.hasItem('Metronome') && move.timesUsedWithMetronome >= 1) {\r\n        var timesUsedWithMetronome = Math.floor(move.timesUsedWithMetronome);\r\n        if (timesUsedWithMetronome <= 4) {\r\n            finalMods.push(4096 + timesUsedWithMetronome * 819);\r\n        }\r\n        else {\r\n            finalMods.push(8192);\r\n        }\r\n        desc.attackerItem = attacker.item;\r\n    }\r\n    if (move.hasType((0, items_1.getBerryResistType)(defender.item)) &&\r\n        (typeEffectiveness > 1 || move.hasType('Normal')) &&\r\n        !attacker.hasAbility('Unnerve', 'As One (Glastrier)', 'As One (Spectrier)')) {\r\n        if (defender.hasAbility('Ripen')) {\r\n            finalMods.push(1024);\r\n        }\r\n        else {\r\n            finalMods.push(2048);\r\n        }\r\n        desc.defenderItem = defender.item;\r\n    }\r\n    return finalMods;\r\n}\r\nexports.calculateFinalModsSMSSSV = calculateFinalModsSMSSSV;\r\nfunction hasTerrainSeed(pokemon) {\r\n    return pokemon.hasItem('Electric Seed', 'Misty Seed', 'Grassy Seed', 'Psychic Seed');\r\n}\r\n//# sourceMappingURL=gen789.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/gen789.js?\n}");

/***/ }),

/***/ "./calc/dist/mechanics/util.js":
/*!*************************************!*\
  !*** ./calc/dist/mechanics/util.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nexports.__esModule = true;\r\nexports.OF32 = exports.OF16 = exports.pokeRound = exports.handleFixedDamageMoves = exports.getEVDescriptionText = exports.countBoosts = exports.getWeightFactor = exports.getShellSideArmCategory = exports.getFinalDamage = exports.getMostProficientStat = exports.getBaseDamage = exports.chainMods = exports.checkMultihitBoost = exports.checkSeedBoost = exports.checkInfiltrator = exports.checkDauntlessShield = exports.checkIntrepidSword = exports.checkDownload = exports.checkIntimidate = exports.checkWonderRoom = exports.checkItem = exports.checkForecast = exports.checkAirLock = exports.getMoveEffectiveness = exports.getFinalSpeed = exports.computeFinalStats = exports.getModifiedStat = exports.isGrounded = void 0;\r\nvar util_1 = __webpack_require__(/*! ../util */ \"./calc/dist/util.js\");\r\nvar stats_1 = __webpack_require__(/*! ../stats */ \"./calc/dist/stats.js\");\r\nvar EV_ITEMS = [\r\n    'Macho Brace',\r\n    'Power Anklet',\r\n    'Power Band',\r\n    'Power Belt',\r\n    'Power Bracer',\r\n    'Power Lens',\r\n    'Power Weight',\r\n];\r\nfunction isGrounded(pokemon, field) {\r\n    return (field.isGravity || pokemon.hasItem('Iron Ball') ||\r\n        (!pokemon.hasType('Flying') &&\r\n            !pokemon.hasAbility('Levitate') &&\r\n            !pokemon.hasItem('Air Balloon')));\r\n}\r\nexports.isGrounded = isGrounded;\r\nfunction getModifiedStat(stat, mod, gen) {\r\n    if (gen && gen.num < 3) {\r\n        if (mod >= 0) {\r\n            var pastGenBoostTable = [1, 1.5, 2, 2.5, 3, 3.5, 4];\r\n            stat = Math.floor(stat * pastGenBoostTable[mod]);\r\n        }\r\n        else {\r\n            var numerators = [100, 66, 50, 40, 33, 28, 25];\r\n            stat = Math.floor((stat * numerators[-mod]) / 100);\r\n        }\r\n        return Math.min(999, Math.max(1, stat));\r\n    }\r\n    var numerator = 0;\r\n    var denominator = 1;\r\n    var modernGenBoostTable = [\r\n        [2, 8],\r\n        [2, 7],\r\n        [2, 6],\r\n        [2, 5],\r\n        [2, 4],\r\n        [2, 3],\r\n        [2, 2],\r\n        [3, 2],\r\n        [4, 2],\r\n        [5, 2],\r\n        [6, 2],\r\n        [7, 2],\r\n        [8, 2],\r\n    ];\r\n    stat = OF16(stat * modernGenBoostTable[6 + mod][numerator]);\r\n    stat = Math.floor(stat / modernGenBoostTable[6 + mod][denominator]);\r\n    return stat;\r\n}\r\nexports.getModifiedStat = getModifiedStat;\r\nfunction computeFinalStats(gen, attacker, defender, field) {\r\n    var e_1, _a, e_2, _b;\r\n    var stats = [];\r\n    for (var _i = 4; _i < arguments.length; _i++) {\r\n        stats[_i - 4] = arguments[_i];\r\n    }\r\n    var sides = [[attacker, field.attackerSide], [defender, field.defenderSide]];\r\n    try {\r\n        for (var sides_1 = __values(sides), sides_1_1 = sides_1.next(); !sides_1_1.done; sides_1_1 = sides_1.next()) {\r\n            var _c = __read(sides_1_1.value, 2), pokemon = _c[0], side = _c[1];\r\n            try {\r\n                for (var stats_2 = (e_2 = void 0, __values(stats)), stats_2_1 = stats_2.next(); !stats_2_1.done; stats_2_1 = stats_2.next()) {\r\n                    var stat = stats_2_1.value;\r\n                    if (stat === 'spe') {\r\n                        pokemon.stats.spe = getFinalSpeed(gen, pokemon, field, side);\r\n                    }\r\n                    else {\r\n                        pokemon.stats[stat] = getModifiedStat(pokemon.rawStats[stat], pokemon.boosts[stat], gen);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (stats_2_1 && !stats_2_1.done && (_b = stats_2[\"return\"])) _b.call(stats_2);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (sides_1_1 && !sides_1_1.done && (_a = sides_1[\"return\"])) _a.call(sides_1);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n}\r\nexports.computeFinalStats = computeFinalStats;\r\nfunction getFinalSpeed(gen, pokemon, field, side) {\r\n    var weather = field.weather || '';\r\n    var terrain = field.terrain;\r\n    var speed = getModifiedStat(pokemon.rawStats.spe, pokemon.boosts.spe, gen);\r\n    var speedMods = [];\r\n    if (side.isTailwind)\r\n        speedMods.push(8192);\r\n    if ((pokemon.hasAbility('Unburden') && pokemon.abilityOn) ||\r\n        (pokemon.hasAbility('Chlorophyll') && weather.includes('Sun')) ||\r\n        (pokemon.hasAbility('Sand Rush') && weather === 'Sand') ||\r\n        (pokemon.hasAbility('Swift Swim') && weather.includes('Rain')) ||\r\n        (pokemon.hasAbility('Slush Rush') && ['Hail', 'Snow'].includes(weather)) ||\r\n        (pokemon.hasAbility('Surge Surfer') && terrain === 'Electric')) {\r\n        speedMods.push(8192);\r\n    }\r\n    else if (pokemon.hasAbility('Quick Feet') && pokemon.status) {\r\n        speedMods.push(6144);\r\n    }\r\n    else if (pokemon.hasAbility('Slow Start') && pokemon.abilityOn) {\r\n        speedMods.push(2048);\r\n    }\r\n    else if (getMostProficientStat(pokemon, gen) === 'spe' &&\r\n        ((pokemon.hasAbility('Protosynthesis') &&\r\n            (weather.includes('Sun') || pokemon.hasItem('Booster Energy'))) ||\r\n            (pokemon.hasAbility('Quark Drive') &&\r\n                (terrain === 'Electric' || pokemon.hasItem('Booster Energy'))))) {\r\n        speedMods.push(6144);\r\n    }\r\n    if (pokemon.hasItem('Choice Scarf')) {\r\n        speedMods.push(6144);\r\n    }\r\n    else if (pokemon.hasItem.apply(pokemon, __spreadArray(['Iron Ball'], __read(EV_ITEMS), false))) {\r\n        speedMods.push(2048);\r\n    }\r\n    else if (pokemon.hasItem('Quick Powder') && pokemon.named('Ditto')) {\r\n        speedMods.push(8192);\r\n    }\r\n    speed = OF32(pokeRound((speed * chainMods(speedMods, 410, 131172)) / 4096));\r\n    if (pokemon.hasStatus('par') && !pokemon.hasAbility('Quick Feet')) {\r\n        speed = Math.floor(OF32(speed * (gen.num < 7 ? 25 : 25)) / 100);\r\n    }\r\n    var maxSpeed = gen.num <= 2 ? 999 : 10000;\r\n    speed = Math.min(maxSpeed, speed);\r\n    speed = Math.max(0, speed);\r\n    if (field.isTrickRoom)\r\n        speed = Math.max(0, maxSpeed - speed);\r\n    return speed;\r\n}\r\nexports.getFinalSpeed = getFinalSpeed;\r\nfunction getMoveEffectiveness(gen, move, type, isGhostRevealed, isGravity, isRingTarget) {\r\n    if ((isRingTarget || isGhostRevealed) && type === 'Ghost' && move.hasType('Normal', 'Fighting')) {\r\n        return 1;\r\n    }\r\n    else if ((isRingTarget || isGravity) && type === 'Flying' && move.hasType('Ground')) {\r\n        return 1;\r\n    }\r\n    else if (move.named('Freeze-Dry') && type === 'Water') {\r\n        return 2;\r\n    }\r\n    else if (move.named('Flying Press')) {\r\n        return (gen.types.get('fighting').effectiveness[type] *\r\n            gen.types.get('flying').effectiveness[type]);\r\n    }\r\n    else {\r\n        return gen.types.get((0, util_1.toID)(move.type)).effectiveness[type];\r\n    }\r\n}\r\nexports.getMoveEffectiveness = getMoveEffectiveness;\r\nfunction checkAirLock(pokemon, field) {\r\n    if (pokemon.hasAbility('Air Lock', 'Cloud Nine')) {\r\n        field.weather = undefined;\r\n    }\r\n}\r\nexports.checkAirLock = checkAirLock;\r\nfunction checkForecast(pokemon, weather) {\r\n    if (pokemon.hasAbility('Forecast') && pokemon.named('Castform')) {\r\n        switch (weather) {\r\n            case 'Sun':\r\n            case 'Harsh Sunshine':\r\n                pokemon.types = ['Fire'];\r\n                break;\r\n            case 'Rain':\r\n            case 'Heavy Rain':\r\n                pokemon.types = ['Water'];\r\n                break;\r\n            case 'Hail':\r\n            case 'Snow':\r\n                pokemon.types = ['Ice'];\r\n                break;\r\n            default:\r\n                pokemon.types = ['Normal'];\r\n        }\r\n    }\r\n}\r\nexports.checkForecast = checkForecast;\r\nfunction checkItem(pokemon, magicRoomActive) {\r\n    if (pokemon.hasAbility('Klutz') && !EV_ITEMS.includes(pokemon.item) ||\r\n        magicRoomActive) {\r\n        pokemon.item = '';\r\n    }\r\n}\r\nexports.checkItem = checkItem;\r\nfunction checkWonderRoom(pokemon, wonderRoomActive) {\r\n    var _a;\r\n    if (wonderRoomActive) {\r\n        _a = __read([pokemon.rawStats.spd, pokemon.rawStats.def], 2), pokemon.rawStats.def = _a[0], pokemon.rawStats.spd = _a[1];\r\n    }\r\n}\r\nexports.checkWonderRoom = checkWonderRoom;\r\nfunction checkIntimidate(gen, source, target) {\r\n    var blocked = target.hasAbility('Clear Body', 'White Smoke', 'Hyper Cutter', 'Full Metal Body') ||\r\n        (gen.num >= 8 && target.hasAbility('Inner Focus', 'Own Tempo', 'Oblivious', 'Scrappy')) ||\r\n        target.hasItem('Clear Amulet');\r\n    if (source.hasAbility('Intimidate') && source.abilityOn && !blocked) {\r\n        if (target.hasAbility('Contrary', 'Defiant', 'Guard Dog')) {\r\n            target.boosts.atk = Math.min(6, target.boosts.atk + 1);\r\n        }\r\n        else if (target.hasAbility('Simple')) {\r\n            target.boosts.atk = Math.max(-6, target.boosts.atk - 2);\r\n        }\r\n        else {\r\n            target.boosts.atk = Math.max(-6, target.boosts.atk - 1);\r\n        }\r\n        if (target.hasAbility('Competitive')) {\r\n            target.boosts.spa = Math.min(6, target.boosts.spa + 2);\r\n        }\r\n    }\r\n}\r\nexports.checkIntimidate = checkIntimidate;\r\nfunction checkDownload(source, target, wonderRoomActive) {\r\n    var _a;\r\n    if (source.hasAbility('Download')) {\r\n        var def = target.stats.def;\r\n        var spd = target.stats.spd;\r\n        if (wonderRoomActive)\r\n            _a = __read([spd, def], 2), def = _a[0], spd = _a[1];\r\n        if (spd <= def) {\r\n            source.boosts.spa = Math.min(6, source.boosts.spa + 1);\r\n        }\r\n        else {\r\n            source.boosts.atk = Math.min(6, source.boosts.atk + 1);\r\n        }\r\n    }\r\n}\r\nexports.checkDownload = checkDownload;\r\nfunction checkIntrepidSword(source, gen) {\r\n    if (source.hasAbility('Intrepid Sword') && gen.num < 9) {\r\n        source.boosts.atk = Math.min(6, source.boosts.atk + 1);\r\n    }\r\n}\r\nexports.checkIntrepidSword = checkIntrepidSword;\r\nfunction checkDauntlessShield(source, gen) {\r\n    if (source.hasAbility('Dauntless Shield') && gen.num < 9) {\r\n        source.boosts.def = Math.min(6, source.boosts.def + 1);\r\n    }\r\n}\r\nexports.checkDauntlessShield = checkDauntlessShield;\r\nfunction checkInfiltrator(pokemon, affectedSide) {\r\n    if (pokemon.hasAbility('Infiltrator')) {\r\n        affectedSide.isReflect = false;\r\n        affectedSide.isLightScreen = false;\r\n        affectedSide.isAuroraVeil = false;\r\n    }\r\n}\r\nexports.checkInfiltrator = checkInfiltrator;\r\nfunction checkSeedBoost(pokemon, field) {\r\n    if (!pokemon.item)\r\n        return;\r\n    if (field.terrain && pokemon.item.includes('Seed')) {\r\n        var terrainSeed = pokemon.item.substring(0, pokemon.item.indexOf(' '));\r\n        if (field.hasTerrain(terrainSeed)) {\r\n            if (terrainSeed === 'Grassy' || terrainSeed === 'Electric') {\r\n                pokemon.boosts.def = pokemon.hasAbility('Contrary')\r\n                    ? Math.max(-6, pokemon.boosts.def - 1)\r\n                    : Math.min(6, pokemon.boosts.def + 1);\r\n            }\r\n            else {\r\n                pokemon.boosts.spd = pokemon.hasAbility('Contrary')\r\n                    ? Math.max(-6, pokemon.boosts.spd - 1)\r\n                    : Math.min(6, pokemon.boosts.spd + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.checkSeedBoost = checkSeedBoost;\r\nfunction checkMultihitBoost(gen, attacker, defender, move, field, desc, usedWhiteHerb) {\r\n    if (usedWhiteHerb === void 0) { usedWhiteHerb = false; }\r\n    if (move.named('Gyro Ball', 'Electro Ball') && defender.hasAbility('Gooey', 'Tangling Hair')) {\r\n        if (attacker.hasItem('White Herb') && !usedWhiteHerb) {\r\n            desc.attackerItem = attacker.item;\r\n            usedWhiteHerb = true;\r\n        }\r\n        else {\r\n            attacker.boosts.spe = Math.max(attacker.boosts.spe - 1, -6);\r\n            attacker.stats.spe = getFinalSpeed(gen, attacker, field, field.attackerSide);\r\n            desc.defenderAbility = defender.ability;\r\n        }\r\n    }\r\n    else if (move.named('Power-Up Punch')) {\r\n        attacker.boosts.atk = Math.min(attacker.boosts.atk + 1, 6);\r\n        attacker.stats.atk = getModifiedStat(attacker.rawStats.atk, attacker.boosts.atk, gen);\r\n    }\r\n    if (defender.hasAbility('Stamina')) {\r\n        if (attacker.hasAbility('Unaware')) {\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            defender.boosts.def = Math.min(defender.boosts.def + 1, 6);\r\n            defender.stats.def = getModifiedStat(defender.rawStats.def, defender.boosts.def, gen);\r\n            desc.defenderAbility = defender.ability;\r\n        }\r\n    }\r\n    else if (defender.hasAbility('Weak Armor')) {\r\n        if (attacker.hasAbility('Unaware')) {\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            if (defender.hasItem('White Herb') && !usedWhiteHerb) {\r\n                desc.defenderItem = defender.item;\r\n                usedWhiteHerb = true;\r\n            }\r\n            else {\r\n                defender.boosts.def = Math.max(defender.boosts.def - 1, -6);\r\n                defender.stats.def = getModifiedStat(defender.rawStats.def, defender.boosts.def, gen);\r\n            }\r\n        }\r\n        defender.boosts.spe = Math.min(defender.boosts.spe + 2, 6);\r\n        defender.stats.spe = getFinalSpeed(gen, defender, field, field.defenderSide);\r\n        desc.defenderAbility = defender.ability;\r\n    }\r\n    var simple = attacker.hasAbility('Simple') ? 2 : 1;\r\n    if (move.dropsStats) {\r\n        if (attacker.hasAbility('Unaware')) {\r\n            desc.attackerAbility = attacker.ability;\r\n        }\r\n        else {\r\n            var stat = move.category === 'Special' ? 'spa' : 'atk';\r\n            var boosts = attacker.boosts[stat];\r\n            if (attacker.hasAbility('Contrary')) {\r\n                boosts = Math.min(6, boosts + move.dropsStats);\r\n                desc.attackerAbility = attacker.ability;\r\n            }\r\n            else {\r\n                boosts = Math.max(-6, boosts - move.dropsStats * simple);\r\n                if (simple > 1)\r\n                    desc.attackerAbility = attacker.ability;\r\n            }\r\n            if (attacker.hasItem('White Herb') && attacker.boosts[stat] < 0 && !usedWhiteHerb) {\r\n                boosts += move.dropsStats * simple;\r\n                desc.attackerItem = attacker.item;\r\n                usedWhiteHerb = true;\r\n            }\r\n            attacker.boosts[stat] = boosts;\r\n            attacker.stats[stat] = getModifiedStat(attacker.rawStats[stat], defender.boosts[stat], gen);\r\n        }\r\n    }\r\n    return usedWhiteHerb;\r\n}\r\nexports.checkMultihitBoost = checkMultihitBoost;\r\nfunction chainMods(mods, lowerBound, upperBound) {\r\n    var e_3, _a;\r\n    var M = 4096;\r\n    try {\r\n        for (var mods_1 = __values(mods), mods_1_1 = mods_1.next(); !mods_1_1.done; mods_1_1 = mods_1.next()) {\r\n            var mod = mods_1_1.value;\r\n            if (mod !== 4096) {\r\n                M = (M * mod + 2048) >> 12;\r\n            }\r\n        }\r\n    }\r\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n    finally {\r\n        try {\r\n            if (mods_1_1 && !mods_1_1.done && (_a = mods_1[\"return\"])) _a.call(mods_1);\r\n        }\r\n        finally { if (e_3) throw e_3.error; }\r\n    }\r\n    return Math.max(Math.min(M, upperBound), lowerBound);\r\n}\r\nexports.chainMods = chainMods;\r\nfunction getBaseDamage(level, basePower, attack, defense) {\r\n    return Math.floor(OF32(Math.floor(OF32(OF32(Math.floor((2 * level) / 5 + 2) * basePower) * attack) / defense) / 50 + 2));\r\n}\r\nexports.getBaseDamage = getBaseDamage;\r\nfunction getMostProficientStat(pokemon, gen) {\r\n    var e_4, _a;\r\n    var bestStat = 'atk';\r\n    try {\r\n        for (var _b = __values(['def', 'spa', 'spd', 'spe']), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n            var stat = _c.value;\r\n            if (getModifiedStat(pokemon.rawStats[stat], pokemon.boosts[stat], gen) >\r\n                getModifiedStat(pokemon.rawStats[bestStat], pokemon.boosts[bestStat], gen)) {\r\n                bestStat = stat;\r\n            }\r\n        }\r\n    }\r\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n    finally {\r\n        try {\r\n            if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\r\n        }\r\n        finally { if (e_4) throw e_4.error; }\r\n    }\r\n    return bestStat;\r\n}\r\nexports.getMostProficientStat = getMostProficientStat;\r\nfunction getFinalDamage(baseAmount, i, effectiveness, isBurned, stabMod, finalMod, protect) {\r\n    var damageAmount = Math.floor(OF32(baseAmount * (85 + i)) / 100);\r\n    if (stabMod !== 4096)\r\n        damageAmount = OF32(damageAmount * stabMod) / 4096;\r\n    damageAmount = Math.floor(OF32(pokeRound(damageAmount) * effectiveness));\r\n    if (isBurned)\r\n        damageAmount = Math.floor(damageAmount / 2);\r\n    if (protect)\r\n        damageAmount = pokeRound(OF32(damageAmount * 1024) / 4096);\r\n    return OF16(pokeRound(Math.max(1, OF32(damageAmount * finalMod) / 4096)));\r\n}\r\nexports.getFinalDamage = getFinalDamage;\r\nfunction getShellSideArmCategory(source, target) {\r\n    var physicalDamage = source.stats.atk / target.stats.def;\r\n    var specialDamage = source.stats.spa / target.stats.spd;\r\n    return physicalDamage > specialDamage ? 'Physical' : 'Special';\r\n}\r\nexports.getShellSideArmCategory = getShellSideArmCategory;\r\nfunction getWeightFactor(pokemon) {\r\n    return pokemon.hasAbility('Heavy Metal') ? 2\r\n        : (pokemon.hasAbility('Light Metal') || pokemon.hasItem('Float Stone')) ? 0.5 : 1;\r\n}\r\nexports.getWeightFactor = getWeightFactor;\r\nfunction countBoosts(gen, boosts) {\r\n    var e_5, _a;\r\n    var sum = 0;\r\n    var STATS = gen.num === 1\r\n        ? ['atk', 'def', 'spa', 'spe']\r\n        : ['atk', 'def', 'spa', 'spd', 'spe'];\r\n    try {\r\n        for (var STATS_1 = __values(STATS), STATS_1_1 = STATS_1.next(); !STATS_1_1.done; STATS_1_1 = STATS_1.next()) {\r\n            var stat = STATS_1_1.value;\r\n            var boost = boosts[stat];\r\n            if (boost && boost > 0)\r\n                sum += boost;\r\n        }\r\n    }\r\n    catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n    finally {\r\n        try {\r\n            if (STATS_1_1 && !STATS_1_1.done && (_a = STATS_1[\"return\"])) _a.call(STATS_1);\r\n        }\r\n        finally { if (e_5) throw e_5.error; }\r\n    }\r\n    return sum;\r\n}\r\nexports.countBoosts = countBoosts;\r\nfunction getEVDescriptionText(gen, pokemon, stat, natureName) {\r\n    var nature = gen.natures.get((0, util_1.toID)(natureName));\r\n    return (pokemon.ivs[stat] +\r\n        (nature.plus === nature.minus ? ''\r\n            : nature.plus === stat ? '+'\r\n                : nature.minus === stat ? '-'\r\n                    : '') + ' ' +\r\n        stats_1.Stats.displayStat(stat));\r\n}\r\nexports.getEVDescriptionText = getEVDescriptionText;\r\nfunction handleFixedDamageMoves(attacker, move, defender) {\r\n    if (move.named('Seismic Toss', 'Night Shade')) {\r\n        return attacker.level;\r\n    }\r\n    else if (move.named('Dragon Rage')) {\r\n        return 40;\r\n    }\r\n    else if (move.named('Sonic Boom')) {\r\n        return 20;\r\n    }\r\n    else if (move.named('Super Fang')) {\r\n        return Math.floor(defender.originalCurHP / 2) > 0 ? Math.floor(defender.originalCurHP / 2) : 1;\r\n    }\r\n    return 0;\r\n}\r\nexports.handleFixedDamageMoves = handleFixedDamageMoves;\r\nfunction pokeRound(num) {\r\n    return num % 1 > 0.5 ? Math.ceil(num) : Math.floor(num);\r\n}\r\nexports.pokeRound = pokeRound;\r\nfunction OF16(n) {\r\n    return n > 65535 ? n % 65536 : n;\r\n}\r\nexports.OF16 = OF16;\r\nfunction OF32(n) {\r\n    return n > 4294967295 ? n % 4294967296 : n;\r\n}\r\nexports.OF32 = OF32;\r\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack:///./calc/dist/mechanics/util.js?\n}");

/***/ }),

/***/ "./calc/dist/move.js":
/*!***************************!*\
  !*** ./calc/dist/move.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.getMaxMoveName = exports.getZMoveName = exports.Move = void 0;\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\r\nvar SPECIAL = ['Fire', 'Water', 'Grass', 'Electric', 'Ice', 'Psychic', 'Dark', 'Dragon'];\r\nvar Move = (function () {\r\n    function Move(gen, name, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _a, _b;\r\n        name = options.name || name;\r\n        this.originalName = name;\r\n        var data = (0, util_1.extend)(true, { name: name }, gen.moves.get((0, util_1.toID)(name)), options.overrides);\r\n        this.hits = 1;\r\n        if (options.useMax && data.maxMove) {\r\n            var maxMoveName_1 = getMaxMoveName(data.type, options.species, !!(data.category === 'Status'), options.ability);\r\n            var maxMove_1 = gen.moves.get((0, util_1.toID)(maxMoveName_1));\r\n            var maxPower = function () {\r\n                if (['G-Max Drum Solo', 'G-Max Fire Ball', 'G-Max Hydrosnipe'].includes(maxMoveName_1)) {\r\n                    return 160;\r\n                }\r\n                if (maxMove_1.basePower === 10 || maxMoveName_1 === 'Max Flare') {\r\n                    return data.maxMove.basePower;\r\n                }\r\n                return maxMove_1.basePower;\r\n            };\r\n            data = (0, util_1.extend)(true, {}, maxMove_1, {\r\n                name: maxMoveName_1,\r\n                basePower: maxPower(),\r\n                category: data.category\r\n            });\r\n        }\r\n        if (options.useZ && ((_a = data.zMove) === null || _a === void 0 ? void 0 : _a.basePower)) {\r\n            var zMoveName = getZMoveName(data.name, data.type, options.item);\r\n            var zMove = gen.moves.get((0, util_1.toID)(zMoveName));\r\n            data = (0, util_1.extend)(true, {}, zMove, {\r\n                name: zMoveName,\r\n                basePower: zMove.basePower === 1 ? data.zMove.basePower : zMove.basePower,\r\n                category: data.category\r\n            });\r\n        }\r\n        else {\r\n            if (data.multihit) {\r\n                if (typeof data.multihit === 'number') {\r\n                    this.hits = data.multihit;\r\n                }\r\n                else if (options.hits) {\r\n                    this.hits = options.hits;\r\n                }\r\n                else {\r\n                    this.hits = (options.ability === 'Skill Link')\r\n                        ? data.multihit[1]\r\n                        : data.multihit[0] + 1;\r\n                }\r\n            }\r\n            this.timesUsedWithMetronome = options.timesUsedWithMetronome;\r\n        }\r\n        this.gen = gen;\r\n        this.name = data.name;\r\n        this.ability = options.ability;\r\n        this.item = options.item;\r\n        this.useZ = options.useZ;\r\n        this.useMax = options.useMax;\r\n        this.overrides = options.overrides;\r\n        this.species = options.species;\r\n        this.bp = data.basePower;\r\n        var typelessDamage = (gen.num >= 2 && data.id === 'struggle') ||\r\n            (gen.num <= 4 && ['futuresight', 'doomdesire'].includes(data.id));\r\n        this.type = typelessDamage ? '???' : data.type;\r\n        this.category = data.category ||\r\n            (gen.num < 4 ? (SPECIAL.includes(data.type) ? 'Special' : 'Physical') : 'Status');\r\n        var stat = this.category === 'Special' ? 'spa' : 'atk';\r\n        if (((_b = data.self) === null || _b === void 0 ? void 0 : _b.boosts) && data.self.boosts[stat] && data.self.boosts[stat] < 0) {\r\n            this.dropsStats = Math.abs(data.self.boosts[stat]);\r\n        }\r\n        this.timesUsed = (this.dropsStats && options.timesUsed) || 1;\r\n        this.secondaries = data.secondaries;\r\n        this.target = data.target || 'any';\r\n        this.recoil = data.recoil;\r\n        this.hasCrashDamage = !!data.hasCrashDamage;\r\n        this.mindBlownRecoil = !!data.mindBlownRecoil;\r\n        this.struggleRecoil = !!data.struggleRecoil;\r\n        this.isCrit = !!options.isCrit || !!data.willCrit ||\r\n            gen.num === 1 && ['crabhammer', 'razorleaf', 'slash', 'karate chop'].includes(data.id);\r\n        this.drain = data.drain;\r\n        this.flags = data.flags;\r\n        this.priority = data.priority || 0;\r\n        this.ignoreDefensive = !!data.ignoreDefensive;\r\n        this.overrideOffensiveStat = data.overrideOffensiveStat;\r\n        this.overrideDefensiveStat = data.overrideDefensiveStat;\r\n        this.overrideOffensivePokemon = data.overrideOffensivePokemon;\r\n        this.overrideDefensivePokemon = data.overrideDefensivePokemon;\r\n        this.breaksProtect = !!data.breaksProtect;\r\n        this.isZ = !!data.isZ;\r\n        this.isMax = !!data.isMax;\r\n        if (!this.bp) {\r\n            if (['return', 'frustration', 'pikapapow', 'veeveevolley'].includes(data.id)) {\r\n                this.bp = 102;\r\n            }\r\n        }\r\n    }\r\n    Move.prototype.named = function () {\r\n        var names = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            names[_i] = arguments[_i];\r\n        }\r\n        return names.includes(this.name);\r\n    };\r\n    Move.prototype.hasType = function () {\r\n        var types = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            types[_i] = arguments[_i];\r\n        }\r\n        return types.includes(this.type);\r\n    };\r\n    Move.prototype.clone = function () {\r\n        return new Move(this.gen, this.originalName, {\r\n            ability: this.ability,\r\n            item: this.item,\r\n            species: this.species,\r\n            useZ: this.useZ,\r\n            useMax: this.useMax,\r\n            isCrit: this.isCrit,\r\n            hits: this.hits,\r\n            timesUsed: this.timesUsed,\r\n            timesUsedWithMetronome: this.timesUsedWithMetronome,\r\n            overrides: this.overrides\r\n        });\r\n    };\r\n    return Move;\r\n}());\r\nexports.Move = Move;\r\nfunction getZMoveName(moveName, moveType, item) {\r\n    item = item || '';\r\n    if (moveName.includes('Hidden Power'))\r\n        return 'Breakneck Blitz';\r\n    if (moveName === 'Clanging Scales' && item === 'Kommonium Z')\r\n        return 'Clangorous Soulblaze';\r\n    if (moveName === 'Darkest Lariat' && item === 'Incinium Z')\r\n        return 'Malicious Moonsault';\r\n    if (moveName === 'Giga Impact' && item === 'Snorlium Z')\r\n        return 'Pulverizing Pancake';\r\n    if (moveName === 'Moongeist Beam' && item === 'Lunalium Z')\r\n        return 'Menacing Moonraze Maelstrom';\r\n    if (moveName === 'Photon Geyser' && item === 'Ultranecrozium Z') {\r\n        return 'Light That Burns the Sky';\r\n    }\r\n    if (moveName === 'Play Rough' && item === 'Mimikium Z')\r\n        return 'Let\\'s Snuggle Forever';\r\n    if (moveName === 'Psychic' && item === 'Mewnium Z')\r\n        return 'Genesis Supernova';\r\n    if (moveName === 'Sparkling Aria' && item === 'Primarium Z')\r\n        return 'Oceanic Operetta';\r\n    if (moveName === 'Spectral Thief' && item === 'Marshadium Z') {\r\n        return 'Soul-Stealing 7-Star Strike';\r\n    }\r\n    if (moveName === 'Spirit Shackle' && item === 'Decidium Z')\r\n        return 'Sinister Arrow Raid';\r\n    if (moveName === 'Stone Edge' && item === 'Lycanium Z')\r\n        return 'Splintered Stormshards';\r\n    if (moveName === 'Sunsteel Strike' && item === 'Solganium Z')\r\n        return 'Searing Sunraze Smash';\r\n    if (moveName === 'Volt Tackle' && item === 'Pikanium Z')\r\n        return 'Catastropika';\r\n    if (moveName === 'Nature\\'s Madness' && item === 'Tapunium Z')\r\n        return 'Guardian of Alola';\r\n    if (moveName === 'Thunderbolt') {\r\n        if (item === 'Aloraichium Z')\r\n            return 'Stoked Sparksurfer';\r\n        if (item === 'Pikashunium Z')\r\n            return '10,000,000 Volt Thunderbolt';\r\n    }\r\n    return ZMOVES_TYPING[moveType];\r\n}\r\nexports.getZMoveName = getZMoveName;\r\nvar ZMOVES_TYPING = {\r\n    Bug: 'Savage Spin-Out',\r\n    Dark: 'Black Hole Eclipse',\r\n    Dragon: 'Devastating Drake',\r\n    Electric: 'Gigavolt Havoc',\r\n    Fairy: 'Twinkle Tackle',\r\n    Fighting: 'All-Out Pummeling',\r\n    Fire: 'Inferno Overdrive',\r\n    Flying: 'Supersonic Skystrike',\r\n    Ghost: 'Never-Ending Nightmare',\r\n    Grass: 'Bloom Doom',\r\n    Ground: 'Tectonic Rage',\r\n    Ice: 'Subzero Slammer',\r\n    Normal: 'Breakneck Blitz',\r\n    Poison: 'Acid Downpour',\r\n    Psychic: 'Shattered Psyche',\r\n    Rock: 'Continental Crush',\r\n    Steel: 'Corkscrew Crash',\r\n    Water: 'Hydro Vortex'\r\n};\r\nfunction getMaxMoveName(moveType, pokemonSpecies, isStatus, pokemonAbility) {\r\n    if (isStatus)\r\n        return 'Max Guard';\r\n    if (pokemonAbility === 'Normalize')\r\n        return 'Max Strike';\r\n    if (moveType === 'Fire') {\r\n        if (pokemonSpecies === 'Charizard-Gmax')\r\n            return 'G-Max Wildfire';\r\n        if (pokemonSpecies === 'Centiskorch-Gmax')\r\n            return 'G-Max Centiferno';\r\n        if (pokemonSpecies === 'Cinderace-Gmax')\r\n            return 'G-Max Fire Ball';\r\n    }\r\n    if (moveType === 'Normal') {\r\n        if (pokemonSpecies === 'Eevee-Gmax')\r\n            return 'G-Max Cuddle';\r\n        if (pokemonSpecies === 'Meowth-Gmax')\r\n            return 'G-Max Gold Rush';\r\n        if (pokemonSpecies === 'Snorlax-Gmax')\r\n            return 'G-Max Replenish';\r\n        if (pokemonAbility === 'Pixilate')\r\n            return 'Max Starfall';\r\n        if (pokemonAbility === 'Aerilate')\r\n            return 'Max Airstream';\r\n        if (pokemonAbility === 'Refrigerate')\r\n            return 'Max Hailstorm';\r\n        if (pokemonAbility === 'Galvanize')\r\n            return 'Max Lightning';\r\n    }\r\n    if (moveType === 'Fairy') {\r\n        if (pokemonSpecies === 'Alcremie-Gmax')\r\n            return 'G-Max Finale';\r\n        if (pokemonSpecies === 'Hatterene-Gmax')\r\n            return 'G-Max Smite';\r\n    }\r\n    if (moveType === 'Steel') {\r\n        if (pokemonSpecies === 'Copperajah-Gmax')\r\n            return 'G-Max Steelsurge';\r\n        if (pokemonSpecies === 'Melmetal-Gmax')\r\n            return 'G-Max Meltdown';\r\n    }\r\n    if (moveType === 'Electric') {\r\n        if (pokemonSpecies === 'Pikachu-Gmax')\r\n            return 'G-Max Volt Crash';\r\n        if ((pokemonSpecies === null || pokemonSpecies === void 0 ? void 0 : pokemonSpecies.startsWith('Toxtricity')) &&\r\n            (pokemonSpecies === null || pokemonSpecies === void 0 ? void 0 : pokemonSpecies.endsWith('Gmax')))\r\n            return 'G-Max Stun Shock';\r\n    }\r\n    if (moveType === 'Grass') {\r\n        if (pokemonSpecies === 'Appletun-Gmax')\r\n            return 'G-Max Sweetness';\r\n        if (pokemonSpecies === 'Flapple-Gmax')\r\n            return 'G-Max Tartness';\r\n        if (pokemonSpecies === 'Rillaboom-Gmax')\r\n            return 'G-Max Drum Solo';\r\n        if (pokemonSpecies === 'Venusaur-Gmax')\r\n            return 'G-Max Vine Lash';\r\n    }\r\n    if (moveType === 'Water') {\r\n        if (pokemonSpecies === 'Blastoise-Gmax')\r\n            return 'G-Max Cannonade';\r\n        if (pokemonSpecies === 'Drednaw-Gmax')\r\n            return 'G-Max Stonesurge';\r\n        if (pokemonSpecies === 'Inteleon-Gmax')\r\n            return 'G-Max Hydrosnipe';\r\n        if (pokemonSpecies === 'Kingler-Gmax')\r\n            return 'G-Max Foam Burst';\r\n        if (pokemonSpecies === 'Urshifu-Rapid-Strike-Gmax')\r\n            return 'G-Max Rapid Flow';\r\n    }\r\n    if (moveType === 'Dark') {\r\n        if (pokemonSpecies === 'Grimmsnarl-Gmax')\r\n            return 'G-Max Snooze';\r\n        if (pokemonSpecies === 'Urshifu-Gmax')\r\n            return 'G-Max One Blow';\r\n    }\r\n    if (moveType === 'Poison' && pokemonSpecies === 'Garbodor-Gmax')\r\n        return 'G-Max Malodor';\r\n    if (moveType === 'Fighting' && pokemonSpecies === 'Machamp-Gmax')\r\n        return 'G-Max Chi Strike';\r\n    if (moveType === 'Ghost' && pokemonSpecies === 'Gengar-Gmax')\r\n        return 'G-Max Terror';\r\n    if (moveType === 'Ice' && pokemonSpecies === 'Lapras-Gmax')\r\n        return 'G-Max Resonance';\r\n    if (moveType === 'Flying' && pokemonSpecies === 'Corviknight-Gmax')\r\n        return 'G-Max Wind Rage';\r\n    if (moveType === 'Dragon' && pokemonSpecies === 'Duraludon-Gmax')\r\n        return 'G-Max Depletion';\r\n    if (moveType === 'Psychic' && pokemonSpecies === 'Orbeetle-Gmax')\r\n        return 'G-Max Gravitas';\r\n    if (moveType === 'Rock' && pokemonSpecies === 'Coalossal-Gmax')\r\n        return 'G-Max Volcalith';\r\n    if (moveType === 'Ground' && pokemonSpecies === 'Sandaconda-Gmax')\r\n        return 'G-Max Sandblast';\r\n    if (moveType === 'Dark' && pokemonSpecies === 'Grimmsnarl-Gmax')\r\n        return 'G-Max Snooze';\r\n    return 'Max ' + MAXMOVES_TYPING[moveType];\r\n}\r\nexports.getMaxMoveName = getMaxMoveName;\r\nvar MAXMOVES_TYPING = {\r\n    Bug: 'Flutterby',\r\n    Dark: 'Darkness',\r\n    Dragon: 'Wyrmwind',\r\n    Electric: 'Lightning',\r\n    Fairy: 'Starfall',\r\n    Fighting: 'Knuckle',\r\n    Fire: 'Flare',\r\n    Flying: 'Airstream',\r\n    Ghost: 'Phantasm',\r\n    Grass: 'Overgrowth',\r\n    Ground: 'Quake',\r\n    Ice: 'Hailstorm',\r\n    Normal: 'Strike',\r\n    Poison: 'Ooze',\r\n    Psychic: 'Mindstorm',\r\n    Rock: 'Rockfall',\r\n    Steel: 'Steelspike',\r\n    Water: 'Geyser'\r\n};\r\n//# sourceMappingURL=move.js.map\n\n//# sourceURL=webpack:///./calc/dist/move.js?\n}");

/***/ }),

/***/ "./calc/dist/pokemon.js":
/*!******************************!*\
  !*** ./calc/dist/pokemon.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nexports.__esModule = true;\r\nexports.Pokemon = void 0;\r\nvar stats_1 = __webpack_require__(/*! ./stats */ \"./calc/dist/stats.js\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\r\nvar STATS = ['hp', 'atk', 'def', 'spa', 'spd', 'spe'];\r\nvar SPC = new Set(['spc']);\r\nvar Pokemon = (function () {\r\n    function Pokemon(gen, name, options) {\r\n        var e_1, _a;\r\n        if (options === void 0) { options = {}; }\r\n        var _b;\r\n        this.species = (0, util_1.extend)(true, {}, gen.species.get((0, util_1.toID)(name)), options.overrides);\r\n        this.gen = gen;\r\n        this.name = options.name || name;\r\n        this.types = this.species.types;\r\n        this.weightkg = this.species.weightkg;\r\n        this.level = options.level || 100;\r\n        this.gender = options.gender || this.species.gender || 'M';\r\n        this.ability = options.ability || ((_b = this.species.abilities) === null || _b === void 0 ? void 0 : _b[0]) || undefined;\r\n        this.abilityOn = !!options.abilityOn;\r\n        this.isDynamaxed = !!options.isDynamaxed;\r\n        this.isSaltCure = !!options.isSaltCure;\r\n        this.alliesFainted = options.alliesFainted;\r\n        this.teraType = options.teraType;\r\n        this.item = options.item;\r\n        this.nature = options.nature || 'Serious';\r\n        this.ivs = Pokemon.withDefault(gen, options.ivs, 31);\r\n        this.evs = Pokemon.withDefault(gen, options.evs, gen.num >= 3 ? 0 : 252);\r\n        this.boosts = Pokemon.withDefault(gen, options.boosts, 0, false);\r\n        if (this.weightkg === 0 && !this.isDynamaxed && this.species.baseSpecies) {\r\n            this.weightkg = gen.species.get((0, util_1.toID)(this.species.baseSpecies)).weightkg;\r\n        }\r\n        if (gen.num < 3) {\r\n            this.ivs.hp = stats_1.Stats.DVToIV(stats_1.Stats.getHPDV({\r\n                atk: this.ivs.atk,\r\n                def: this.ivs.def,\r\n                spe: this.ivs.spe,\r\n                spc: this.ivs.spa\r\n            }));\r\n        }\r\n        this.rawStats = {};\r\n        this.stats = {};\r\n        try {\r\n            for (var STATS_1 = __values(STATS), STATS_1_1 = STATS_1.next(); !STATS_1_1.done; STATS_1_1 = STATS_1.next()) {\r\n                var stat = STATS_1_1.value;\r\n                var val = this.calcStat(gen, stat);\r\n                this.rawStats[stat] = val;\r\n                this.stats[stat] = val;\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (STATS_1_1 && !STATS_1_1.done && (_a = STATS_1[\"return\"])) _a.call(STATS_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        var curHP = options.curHP || options.originalCurHP;\r\n        this.originalCurHP = curHP && curHP <= this.rawStats.hp ? curHP : this.rawStats.hp;\r\n        this.status = options.status || '';\r\n        this.toxicCounter = options.toxicCounter || 0;\r\n        this.moves = options.moves || [];\r\n    }\r\n    Pokemon.prototype.maxHP = function (original) {\r\n        if (original === void 0) { original = false; }\r\n        return !original && this.isDynamaxed && this.species.baseStats.hp !== 1\r\n            ? this.rawStats.hp * 2\r\n            : this.rawStats.hp;\r\n    };\r\n    Pokemon.prototype.curHP = function (original) {\r\n        if (original === void 0) { original = false; }\r\n        return !original && this.isDynamaxed && this.species.baseStats.hp !== 1\r\n            ? this.originalCurHP * 2\r\n            : this.originalCurHP;\r\n    };\r\n    Pokemon.prototype.hasAbility = function () {\r\n        var abilities = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            abilities[_i] = arguments[_i];\r\n        }\r\n        return !!(this.ability && abilities.includes(this.ability));\r\n    };\r\n    Pokemon.prototype.hasItem = function () {\r\n        var items = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            items[_i] = arguments[_i];\r\n        }\r\n        return !!(this.item && items.includes(this.item));\r\n    };\r\n    Pokemon.prototype.hasStatus = function () {\r\n        var statuses = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            statuses[_i] = arguments[_i];\r\n        }\r\n        return !!(this.status && statuses.includes(this.status));\r\n    };\r\n    Pokemon.prototype.hasType = function () {\r\n        var e_2, _a;\r\n        var types = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            types[_i] = arguments[_i];\r\n        }\r\n        try {\r\n            for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {\r\n                var type = types_1_1.value;\r\n                if (this.teraType ? this.teraType === type : this.types.includes(type))\r\n                    return true;\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (types_1_1 && !types_1_1.done && (_a = types_1[\"return\"])) _a.call(types_1);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        return false;\r\n    };\r\n    Pokemon.prototype.hasOriginalType = function () {\r\n        var e_3, _a;\r\n        var types = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            types[_i] = arguments[_i];\r\n        }\r\n        try {\r\n            for (var types_2 = __values(types), types_2_1 = types_2.next(); !types_2_1.done; types_2_1 = types_2.next()) {\r\n                var type = types_2_1.value;\r\n                if (this.types.includes(type))\r\n                    return true;\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (types_2_1 && !types_2_1.done && (_a = types_2[\"return\"])) _a.call(types_2);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n        return false;\r\n    };\r\n    Pokemon.prototype.named = function () {\r\n        var names = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            names[_i] = arguments[_i];\r\n        }\r\n        return names.includes(this.name);\r\n    };\r\n    Pokemon.prototype.clone = function () {\r\n        return new Pokemon(this.gen, this.name, {\r\n            level: this.level,\r\n            ability: this.ability,\r\n            abilityOn: this.abilityOn,\r\n            isDynamaxed: this.isDynamaxed,\r\n            isSaltCure: this.isSaltCure,\r\n            alliesFainted: this.alliesFainted,\r\n            item: this.item,\r\n            gender: this.gender,\r\n            nature: this.nature,\r\n            ivs: (0, util_1.extend)(true, {}, this.ivs),\r\n            evs: (0, util_1.extend)(true, {}, this.evs),\r\n            boosts: (0, util_1.extend)(true, {}, this.boosts),\r\n            originalCurHP: this.originalCurHP,\r\n            status: this.status,\r\n            teraType: this.teraType,\r\n            toxicCounter: this.toxicCounter,\r\n            moves: this.moves.slice(),\r\n            overrides: this.species\r\n        });\r\n    };\r\n    Pokemon.prototype.calcStat = function (gen, stat) {\r\n        return stats_1.Stats.calcStat(gen, stat, this.species.baseStats[stat], this.ivs[stat], this.evs[stat], this.level, this.nature);\r\n    };\r\n    Pokemon.getForme = function (gen, speciesName, item, moveName) {\r\n        var species = gen.species.get((0, util_1.toID)(speciesName));\r\n        if (!(species === null || species === void 0 ? void 0 : species.otherFormes)) {\r\n            return speciesName;\r\n        }\r\n        var i = 0;\r\n        if ((item &&\r\n            ((item.includes('ite') && !item.includes('ite Y')) ||\r\n                (speciesName === 'Groudon' && item === 'Red Orb') ||\r\n                (speciesName === 'Kyogre' && item === 'Blue Orb'))) ||\r\n            (moveName && speciesName === 'Meloetta' && moveName === 'Relic Song') ||\r\n            (speciesName === 'Rayquaza' && moveName === 'Dragon Ascent')) {\r\n            i = 1;\r\n        }\r\n        else if (item === null || item === void 0 ? void 0 : item.includes('ite Y')) {\r\n            i = 2;\r\n        }\r\n        return i ? species.otherFormes[i - 1] : species.name;\r\n    };\r\n    Pokemon.withDefault = function (gen, current, val, match) {\r\n        if (match === void 0) { match = true; }\r\n        var cur = {};\r\n        if (current) {\r\n            (0, util_1.assignWithout)(cur, current, SPC);\r\n            if (current.spc) {\r\n                cur.spa = current.spc;\r\n                cur.spd = current.spc;\r\n            }\r\n            if (match && gen.num <= 2 && current.spa !== current.spd) {\r\n                throw new Error('Special Attack and Special Defense must match before Gen 3');\r\n            }\r\n        }\r\n        return __assign({ hp: val, atk: val, def: val, spa: val, spd: val, spe: val }, cur);\r\n    };\r\n    return Pokemon;\r\n}());\r\nexports.Pokemon = Pokemon;\r\n//# sourceMappingURL=pokemon.js.map\n\n//# sourceURL=webpack:///./calc/dist/pokemon.js?\n}");

/***/ }),

/***/ "./calc/dist/result.js":
/*!*****************************!*\
  !*** ./calc/dist/result.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nexports.__esModule = true;\r\nexports.damageRange = exports.Result = void 0;\r\nvar desc_1 = __webpack_require__(/*! ./desc */ \"./calc/dist/desc.js\");\r\nvar Result = (function () {\r\n    function Result(gen, attacker, defender, move, field, damage, rawDesc) {\r\n        this.gen = gen;\r\n        this.attacker = attacker;\r\n        this.defender = defender;\r\n        this.move = move;\r\n        this.field = field;\r\n        this.damage = damage;\r\n        this.rawDesc = rawDesc;\r\n    }\r\n    Result.prototype.desc = function () {\r\n        return this.fullDesc();\r\n    };\r\n    Result.prototype.range = function () {\r\n        var range = damageRange(this.damage);\r\n        if (typeof range[0] === 'number')\r\n            return range;\r\n        var d = range;\r\n        return [d[0][0] + d[0][1], d[1][0] + d[1][1]];\r\n    };\r\n    Result.prototype.fullDesc = function (notation, err) {\r\n        if (notation === void 0) { notation = '%'; }\r\n        if (err === void 0) { err = true; }\r\n        return (0, desc_1.display)(this.gen, this.attacker, this.defender, this.move, this.field, this.damage, this.rawDesc, notation, err);\r\n    };\r\n    Result.prototype.moveDesc = function (notation) {\r\n        if (notation === void 0) { notation = '%'; }\r\n        return (0, desc_1.displayMove)(this.gen, this.attacker, this.defender, this.move, this.damage, notation);\r\n    };\r\n    Result.prototype.recovery = function (notation) {\r\n        if (notation === void 0) { notation = '%'; }\r\n        return (0, desc_1.getRecovery)(this.gen, this.attacker, this.defender, this.move, this.damage, notation);\r\n    };\r\n    Result.prototype.recoil = function (notation) {\r\n        if (notation === void 0) { notation = '%'; }\r\n        return (0, desc_1.getRecoil)(this.gen, this.attacker, this.defender, this.move, this.damage, notation);\r\n    };\r\n    Result.prototype.kochance = function (err) {\r\n        if (err === void 0) { err = true; }\r\n        return (0, desc_1.getKOChance)(this.gen, this.attacker, this.defender, this.move, this.field, this.damage, err);\r\n    };\r\n    return Result;\r\n}());\r\nexports.Result = Result;\r\nfunction damageRange(damage) {\r\n    if (typeof damage === 'number')\r\n        return [damage, damage];\r\n    if (damage.length > 2) {\r\n        var d_1 = damage;\r\n        if (d_1[0] > d_1[d_1.length - 1])\r\n            return [Math.min.apply(Math, __spreadArray([], __read(d_1), false)), Math.max.apply(Math, __spreadArray([], __read(d_1), false))];\r\n        return [d_1[0], d_1[d_1.length - 1]];\r\n    }\r\n    if (typeof damage[0] === 'number' && typeof damage[1] === 'number') {\r\n        return [[damage[0], damage[1]], [damage[0], damage[1]]];\r\n    }\r\n    var d = damage;\r\n    if (d[0][0] > d[0][d[0].length - 1])\r\n        d[0] = d[0].slice().sort();\r\n    if (d[1][0] > d[1][d[1].length - 1])\r\n        d[1] = d[1].slice().sort();\r\n    return [[d[0][0], d[1][0]], [d[0][d[0].length - 1], d[1][d[1].length - 1]]];\r\n}\r\nexports.damageRange = damageRange;\r\n//# sourceMappingURL=result.js.map\n\n//# sourceURL=webpack:///./calc/dist/result.js?\n}");

/***/ }),

/***/ "./calc/dist/stats.js":
/*!****************************!*\
  !*** ./calc/dist/stats.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\r\nexports.__esModule = true;\r\nexports.Stats = exports.STATS = void 0;\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./calc/dist/util.js\");\r\nvar RBY = ['hp', 'atk', 'def', 'spc', 'spe'];\r\nvar GSC = ['hp', 'atk', 'def', 'spa', 'spd', 'spe'];\r\nvar ADV = GSC;\r\nvar DPP = GSC;\r\nvar BW = GSC;\r\nvar XY = GSC;\r\nvar SM = GSC;\r\nvar SS = GSC;\r\nvar SV = GSC;\r\nexports.STATS = [[], RBY, GSC, ADV, DPP, BW, XY, SM, SS, SV];\r\nvar HP_TYPES = [\r\n    'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost', 'Steel',\r\n    'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon', 'Dark',\r\n];\r\nvar HP = {\r\n    Bug: { ivs: { atk: 30, def: 30, spd: 30 }, dvs: { atk: 13, def: 13 } },\r\n    Dark: { ivs: {}, dvs: {} },\r\n    Dragon: { ivs: { atk: 30 }, dvs: { def: 14 } },\r\n    Electric: { ivs: { spa: 30 }, dvs: { atk: 14 } },\r\n    Fighting: { ivs: { def: 30, spa: 30, spd: 30, spe: 30 }, dvs: { atk: 12, def: 12 } },\r\n    Fire: { ivs: { atk: 30, spa: 30, spe: 30 }, dvs: { atk: 14, def: 12 } },\r\n    Flying: { ivs: { hp: 30, atk: 30, def: 30, spa: 30, spd: 30 }, dvs: { atk: 12, def: 13 } },\r\n    Ghost: { ivs: { def: 30, spd: 30 }, dvs: { atk: 13, def: 14 } },\r\n    Grass: { ivs: { atk: 30, spa: 30 }, dvs: { atk: 14, def: 14 } },\r\n    Ground: { ivs: { spa: 30, spd: 30 }, dvs: { atk: 12 } },\r\n    Ice: { ivs: { atk: 30, def: 30 }, dvs: { def: 13 } },\r\n    Poison: { ivs: { def: 30, spa: 30, spd: 30 }, dvs: { atk: 12, def: 14 } },\r\n    Psychic: { ivs: { atk: 30, spe: 30 }, dvs: { def: 12 } },\r\n    Rock: { ivs: { def: 30, spd: 30, spe: 30 }, dvs: { atk: 13, def: 12 } },\r\n    Steel: { ivs: { spd: 30 }, dvs: { atk: 13 } },\r\n    Water: { ivs: { atk: 30, def: 30, spa: 30 }, dvs: { atk: 14, def: 13 } }\r\n};\r\nexports.Stats = new ((function () {\r\n    function class_1() {\r\n    }\r\n    class_1.prototype.displayStat = function (stat) {\r\n        switch (stat) {\r\n            case 'hp':\r\n                return 'HP';\r\n            case 'atk':\r\n                return 'Atk';\r\n            case 'def':\r\n                return 'Def';\r\n            case 'spa':\r\n                return 'SpA';\r\n            case 'spd':\r\n                return 'SpD';\r\n            case 'spe':\r\n                return 'Spe';\r\n            case 'spc':\r\n                return 'Spc';\r\n            default:\r\n                throw new Error(\"unknown stat \".concat(stat));\r\n        }\r\n    };\r\n    class_1.prototype.shortForm = function (stat) {\r\n        switch (stat) {\r\n            case 'hp':\r\n                return 'hp';\r\n            case 'atk':\r\n                return 'at';\r\n            case 'def':\r\n                return 'df';\r\n            case 'spa':\r\n                return 'sa';\r\n            case 'spd':\r\n                return 'sd';\r\n            case 'spe':\r\n                return 'sp';\r\n            case 'spc':\r\n                return 'sl';\r\n        }\r\n    };\r\n    class_1.prototype.getHPDV = function (ivs) {\r\n        return ((this.IVToDV(ivs.atk) % 2) * 8 +\r\n            (this.IVToDV(ivs.def) % 2) * 4 +\r\n            (this.IVToDV(ivs.spe) % 2) * 2 +\r\n            (this.IVToDV(ivs.spc) % 2));\r\n    };\r\n    class_1.prototype.IVToDV = function (iv) {\r\n        return Math.floor(iv / 2);\r\n    };\r\n    class_1.prototype.DVToIV = function (dv) {\r\n        return dv * 2;\r\n    };\r\n    class_1.prototype.DVsToIVs = function (dvs) {\r\n        var ivs = {};\r\n        var dv;\r\n        for (dv in dvs) {\r\n            ivs[dv] = exports.Stats.DVToIV(dvs[dv]);\r\n        }\r\n        return ivs;\r\n    };\r\n    class_1.prototype.calcStat = function (gen, stat, base, iv, ev, level, nature) {\r\n        if (gen.num < 1 || gen.num > 9)\r\n            throw new Error(\"Invalid generation \".concat(gen.num));\r\n        if (gen.num < 3)\r\n            return this.calcStatRBY(stat, base, iv, level);\r\n        return this.calcStatADV(gen.natures, stat, base, iv, ev, level, nature);\r\n    };\r\n    class_1.prototype.calcStatADV = function (natures, stat, base, iv, ev, level, nature) {\r\n        if (stat === 'hp') {\r\n            return base === 1\r\n                ? base\r\n                : Math.floor(((base * 2 + iv + Math.floor(ev / 4)) * level) / 100) + level + 10;\r\n        }\r\n        else {\r\n            var mods = [undefined, undefined];\r\n            if (nature) {\r\n                var nat = natures.get((0, util_1.toID)(nature));\r\n                mods = [nat === null || nat === void 0 ? void 0 : nat.plus, nat === null || nat === void 0 ? void 0 : nat.minus];\r\n            }\r\n            var n = mods[0] === stat && mods[1] === stat\r\n                ? 1\r\n                : mods[0] === stat\r\n                    ? 1.1\r\n                    : mods[1] === stat\r\n                        ? 0.9\r\n                        : 1;\r\n            return Math.floor((Math.floor(((base * 2 + iv + Math.floor(ev / 4)) * level) / 100) + 5) * n);\r\n        }\r\n    };\r\n    class_1.prototype.calcStatRBY = function (stat, base, iv, level) {\r\n        return this.calcStatRBYFromDV(stat, base, this.IVToDV(iv), level);\r\n    };\r\n    class_1.prototype.calcStatRBYFromDV = function (stat, base, dv, level) {\r\n        if (stat === 'hp') {\r\n            return Math.floor((((base + dv) * 2 + 63) * level) / 100) + level + 10;\r\n        }\r\n        else {\r\n            return Math.floor((((base + dv) * 2 + 63) * level) / 100) + 5;\r\n        }\r\n    };\r\n    class_1.prototype.getHiddenPowerIVs = function (gen, hpType) {\r\n        var hp = HP[hpType];\r\n        if (!hp)\r\n            return undefined;\r\n        return gen.num === 2 ? exports.Stats.DVsToIVs(hp.dvs) : hp.ivs;\r\n    };\r\n    class_1.prototype.getHiddenPower = function (gen, ivs) {\r\n        var tr = function (num, bits) {\r\n            if (bits === void 0) { bits = 0; }\r\n            if (bits)\r\n                return (num >>> 0) % (Math.pow(2, bits));\r\n            return num >>> 0;\r\n        };\r\n        var stats = { hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31 };\r\n        if (gen.num <= 2) {\r\n            var atkDV = tr(ivs.atk / 2);\r\n            var defDV = tr(ivs.def / 2);\r\n            var speDV = tr(ivs.spe / 2);\r\n            var spcDV = tr(ivs.spa / 2);\r\n            return {\r\n                type: HP_TYPES[4 * (atkDV % 4) + (defDV % 4)],\r\n                power: tr((5 * ((spcDV >> 3) +\r\n                    (2 * (speDV >> 3)) +\r\n                    (4 * (defDV >> 3)) +\r\n                    (8 * (atkDV >> 3))) +\r\n                    (spcDV % 4)) / 2 + 31)\r\n            };\r\n        }\r\n        else {\r\n            var hpTypeX = 0;\r\n            var hpPowerX = 0;\r\n            var i = 1;\r\n            for (var s in stats) {\r\n                hpTypeX += i * (ivs[s] % 2);\r\n                hpPowerX += i * (tr(ivs[s] / 2) % 2);\r\n                i *= 2;\r\n            }\r\n            return {\r\n                type: HP_TYPES[tr(hpTypeX * 15 / 63)],\r\n                power: (gen.num && gen.num < 6) ? tr(hpPowerX * 40 / 63) + 30 : 60\r\n            };\r\n        }\r\n    };\r\n    return class_1;\r\n}()))();\r\n//# sourceMappingURL=stats.js.map\n\n//# sourceURL=webpack:///./calc/dist/stats.js?\n}");

/***/ }),

/***/ "./calc/dist/util.js":
/*!***************************!*\
  !*** ./calc/dist/util.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\r\nexports.__esModule = true;\r\nexports.extend = exports.assignWithout = exports.error = exports.toID = void 0;\r\nfunction toID(text) {\r\n    return ('' + text).toLowerCase().replace(/[^a-z0-9]+/g, '');\r\n}\r\nexports.toID = toID;\r\nfunction error(err, msg) {\r\n    if (err) {\r\n        throw new Error(msg);\r\n    }\r\n    else {\r\n        console.log(msg);\r\n    }\r\n}\r\nexports.error = error;\r\nfunction assignWithout(a, b, exclude) {\r\n    for (var key in b) {\r\n        if (Object.prototype.hasOwnProperty.call(b, key) && !exclude.has(key)) {\r\n            a[key] = b[key];\r\n        }\r\n    }\r\n}\r\nexports.assignWithout = assignWithout;\r\nvar class2Type = {\r\n    '[object Boolean]': 'boolean',\r\n    '[object Number]': 'number',\r\n    '[object String]': 'string',\r\n    '[object Function]': 'function',\r\n    '[object Array]': 'array',\r\n    '[object Date]': 'date',\r\n    '[object RegExp]': 'regexp',\r\n    '[object Object]': 'object',\r\n    '[object Error]': 'error'\r\n};\r\nvar coreToString = class2Type.toString;\r\nvar coreHasOwn = class2Type.hasOwnProperty;\r\nfunction isFunction(obj) {\r\n    return getType(obj) === 'function';\r\n}\r\nfunction isWindow(obj) {\r\n    return obj != null && obj === obj.window;\r\n}\r\nfunction getType(obj) {\r\n    if (obj == null) {\r\n        return String(obj);\r\n    }\r\n    return typeof obj === 'object' || typeof obj === 'function'\r\n        ? class2Type[coreToString.call(obj)] || 'object'\r\n        : typeof obj;\r\n}\r\nfunction isPlainObject(obj) {\r\n    if (getType(obj) !== 'object' || obj.nodeType || isWindow(obj)) {\r\n        return false;\r\n    }\r\n    try {\r\n        if (obj.constructor && !coreHasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction extend() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var options, name, src, copy, copyIsArray, clone;\r\n    var target = args[0] || {};\r\n    var i = 1;\r\n    var deep = false;\r\n    var length = args.length;\r\n    if (typeof target === 'boolean') {\r\n        deep = target;\r\n        target = args[1] || {};\r\n        i = 2;\r\n    }\r\n    if (typeof target !== 'object' && !isFunction(target)) {\r\n        target = {};\r\n    }\r\n    if (length === i) {\r\n        target = this;\r\n        --i;\r\n    }\r\n    for (; i < length; i++) {\r\n        if ((options = args[i]) != null) {\r\n            for (name in options) {\r\n                src = target[name];\r\n                copy = options[name];\r\n                if (target === copy) {\r\n                    continue;\r\n                }\r\n                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\r\n                    if (copyIsArray) {\r\n                        copyIsArray = false;\r\n                        clone = src && Array.isArray(src) ? src : [];\r\n                    }\r\n                    else {\r\n                        clone = src && isPlainObject(src) ? src : {};\r\n                    }\r\n                    target[name] = extend(deep, clone, copy);\r\n                }\r\n                else if (copy !== undefined) {\r\n                    target[name] = copy;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexports.extend = extend;\r\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack:///./calc/dist/util.js?\n}");

/***/ }),

/***/ "./src/extensions/main.ts":
/*!********************************!*\
  !*** ./src/extensions/main.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst windowExtensions = __importStar(__webpack_require__(/*! ./window */ \"./src/extensions/window.ts\"));\nwindow.extensions = windowExtensions;\n\n\n//# sourceURL=webpack:///./src/extensions/main.ts?\n}");

/***/ }),

/***/ "./src/extensions/update-color-codes.ts":
/*!**********************************************!*\
  !*** ./src/extensions/update-color-codes.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateColorCodes = updateColorCodes;\nconst calc_1 = __webpack_require__(/*! @smogon/calc */ \"./calc/dist/index.js\");\nfunction updateColorCodes() {\n    var speCheck = document.getElementById(\"cc-spe-border\").checked;\n    var ohkoCheck = document.getElementById(\"cc-ohko-color\").checked;\n    if (!speCheck && !ohkoCheck) {\n        return;\n    }\n    var pMons = document.getElementsByClassName(\"trainer-pok left-side\");\n    var p2info = $(\"#p2\");\n    var p2 = createPokemon(p2info);\n    for (let i = 0; i < pMons.length; i++) {\n        let set = pMons[i].getAttribute(\"data-id\");\n        let idColor = getCalculationColor(set, p2);\n        if (speCheck && ohkoCheck) {\n            pMons[i].className = `trainer-pok left-side mon-speed-${idColor.speed} mon-dmg-${idColor.code}`;\n        }\n        else if (speCheck) {\n            pMons[i].className = `trainer-pok left-side mon-speed-${idColor.speed}`;\n        }\n        else if (ohkoCheck) {\n            pMons[i].className = `trainer-pok left-side mon-dmg-${idColor.code}`;\n        }\n    }\n}\nfunction getCalculationColor(p1info, p2) {\n    if (!p2) {\n        var p2info = $(\"#p2\");\n        p2 = createPokemon(p2info);\n    }\n    var p1 = createPokemon(p1info);\n    var p1field = createField();\n    var p2field = p1field.clone().swap();\n    let damageResults = calculateAllMoves(gen, p1, p1field, p2, p2field);\n    p1 = damageResults[0][0].attacker;\n    p2 = damageResults[1][0].attacker;\n    p1.maxDamages = [];\n    p2.maxDamages = [];\n    var p1speed = p1.stats.spe;\n    var p2speed = p2.stats.spe;\n    var fastest = p1speed > p2speed ? \"F\" : p1speed < p2speed ? \"S\" : p1speed === p2speed ? \"T\" : \"T\";\n    var result, highestRoll, lowestRoll, damage = 0;\n    var p1KO = 0, p2KO = 0;\n    var p1HD = 0, p2HD = 0;\n    var p1LD = 0, p2LD = 0;\n    const p1DamageRanges = getDamageRanges(damageResults[0]);\n    const p2DamageRanges = getDamageRanges(damageResults[1]);\n    p1HD = Math.max(...p1DamageRanges.map(r => r.highestRoll));\n    p2HD = Math.max(...p2DamageRanges.map(r => r.highestRoll));\n    p1LD = Math.max(...p1DamageRanges.map(r => r.lowestRoll));\n    p2LD = Math.max(...p2DamageRanges.map(r => r.lowestRoll));\n    if (p1LD >= 100) {\n        p1KO = 1;\n    }\n    else if (p1HD >= 100 && p1KO == 0) {\n        p1KO = 2;\n    }\n    if (p2LD >= 100) {\n        p2KO = 4;\n    }\n    else if (p2HD >= 100 && p2KO < 3) {\n        p2KO = 3;\n    }\n    let p1DiesInHits = Math.max(1, Math.ceil(100 / p2HD));\n    let p2DiesInHits = Math.max(1, Math.ceil(100 / p1LD));\n    if (p1DiesInHits - 1 > p2DiesInHits ||\n        (p1DiesInHits - 1 === p2DiesInHits && fastest === \"F\")) {\n        if (p2DiesInHits === 1) {\n        }\n        return { speed: fastest, code: p2DiesInHits === 1 ? \"switch-ohko\" : \"1v1\" };\n    }\n    let highestRollOfLeastPowerfulMove = Math.min(...p2DamageRanges.filter(d => d.move.category !== \"Status\" && !(d.move.bp === 0 && d.highestRoll === 0)).map(d => d.highestRoll));\n    let p1HealthAfterPivot = 100 - highestRollOfLeastPowerfulMove;\n    let p1DiesInHitsAfterPivot = Math.floor(Math.max(1, p1HealthAfterPivot / p2HD));\n    if (p1DiesInHitsAfterPivot > p2DiesInHits ||\n        (p1DiesInHitsAfterPivot === p2DiesInHits && fastest === \"F\")) {\n        return { speed: fastest, code: \"1v1-pivot\" };\n    }\n    if (Math.round(p2HD * 3) < 100) {\n        if (p1HD > p2HD) {\n            if (p1HD > 100) {\n                return { speed: fastest, code: \"WMO\" };\n            }\n            return { speed: fastest, code: \"W\" };\n        }\n    }\n    return { speed: fastest, code: `${p1KO || ''}${p2KO || ''}` };\n}\nfunction calculateAllMoves(gen, p1, p1field, p2, p2field, double) {\n    double = double ? 2 : 0;\n    checkStatBoost(p1, p2);\n    var results = [[], [], [], []];\n    for (var i = 0; i < 4; i++) {\n        results[0 + double][i] = (0, calc_1.calculate)(gen, p1, p2, p1.moves[i], p1field);\n        results[1 + double][i] = (0, calc_1.calculate)(gen, p2, p1, p2.moves[i], p2field);\n    }\n    return results;\n}\n\n\n//# sourceURL=webpack:///./src/extensions/update-color-codes.ts?\n}");

/***/ }),

/***/ "./src/extensions/window.ts":
/*!**********************************!*\
  !*** ./src/extensions/window.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sayHello = sayHello;\n__exportStar(__webpack_require__(/*! ./update-color-codes */ \"./src/extensions/update-color-codes.ts\"), exports);\nfunction sayHello() {\n    console.log('hello');\n}\n\n\n//# sourceURL=webpack:///./src/extensions/window.ts?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/extensions/main.ts");
/******/ 	
/******/ })()
;